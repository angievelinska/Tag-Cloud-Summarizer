  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this manual addresses everyone involved in using the social software extension   whether you are a manager who wants to learn about the concepts behind the terms web     and enterprise       an administrator who has the task of installing  configuring and operating the social software extension  or the developer who is responsible for the integration of social software functionality into existing and new web applications  this guide is for you  
  currently  everything seems to be      web      enterprise      and there s even  life      with the virtual world offered by  second life   but what is all this hype really about   if you follow tim o reilly   who coined the term  web      in        the  new web  is not so much dependent on a new technology but on a new attitude  web     therefore has no clearly defined set of technological requirements  but is rather a description of a fundamentally new way to use the world wide web   on the new web  all users are active members  they interact instead of consuming passively  users build networks  make contacts  discuss  create  and comment  they are able to interact in real time  world wide and in such numbers that the sheer mass of active members  users  creates its own dynamic   understood in this sense  one may interpret the new  web      as the renaissance of the original idea of an interactive web  just as it was intended at the time the web was invented in the early   s  every user of the system was both reader and author  with the software supporting both the reading and writing of content directly  onto  the web  however  the great success of the mosaic browser  which introduced graphics but possessed no editing functionality  lead to the concept of  writing the web  being neglected for many years   web     is thus in a nutshell the rebirth of the  read write web    as tim berners lee  the web s inventor  has often referred to its ideal form   and can be summarized as exhibiting the following key characteristics     active participation of users   users create content users rate  comment and evaluate users create taxonomies by using tagging  or similar methods    users interact  creating  collective wisdom    making contact co authoring content sharing content with other users   a highly interactive experience   lightweight  easy to use web applications rich  feature packed  thin  light weight  clients  utilizing technologies such as ajax many require nothing more than a web browser to run   services are  open    open apis for creating  mashups   the web viewed as a platform easy syndication of content via rss and search engines many ways to access content  human readable urls  shorter urls  permanent urls   service   rather than product   oriented approach   always beta frequent updates quick launch of new services  web     is the attitude that makes key cutting edge concepts such as the  wisdom of crowds  or the  long tail  truly work as business models   coremedia social software extension gives you the tools to take this attitude to your web presence  
  an increasing number of web applications and websites depend on their users to create and modify a large proportion of their content   so called  user generated content   ugc  being the result  indeed  many sites also allow their users to contribute to the existing  official  editorial content by submitting reviews  comments  additional material or categorizations  or by getting involved in other ways  the types of applications with such user involvement range from traditional websites enhanced by simple commenting mechanisms to portals basing their entire business model purely on ugc  content sharing  and user collaboration  one of the differences between traditional websites and those involving a significant amount of ugc is the greatly increased writer reader ratio  the coremedia social software extension  coremedia sse  provides application developers with a data store and application programming interfaces  api  to support the creation of such sites as described above  
  coremedia sse components use databases to store data and therefore require a database system to be available  this database system should be fully installed and available before beginning installation and configuration of coremedia sse  component specific configuration information is given in the configuration chapter below   the table below lists the certified database systems for coremedia sse  
  in this chapter you will find a table with all major changes made in this manual  
  this chapter lists the system requirements for the coremedia social software extension  
  the social software extension  sse  consists of the sse client library and several additional components  which are built on top of this client library and integrate the sse managed content with other parts of the content management infrastructure  all of these components access a shared database  the social software repository  containing the user generated content  user account information  and metadata  in the following it is refered to the social software repository simply as the  repository   unless explicitly stated otherwise   applications exposing sse functionality to end users will include the client library and access the repository via its api  which is described in the remainder of this chapter  
  this chapter gives an overview of the concepts and application programming interface  api  relevant to application developers who plan to integrate the social software extension in their content applications  consequently  the target audience of the following sections are application developers and it is assumed that the reader is familiar with java  the java servlet api  the spring framework  and the coremedia content application engine  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  the batch process part of the recommendation engine needs to be initialized individually  once it has run through at least once  you will have access to similar users and recommended items for each user on the system   to start the batch process  send a put request to the url given in the listing below   http   localhost      contentapplicationengine template  servlet flow recommend   if a put request is not possible  send a get request to the url shown in the following listing   http   localhost      contentapplicationengine template  servlet flow recommend method put   depending on the amount of data to be processed  it may take minutes or hours until the results are available  note that this computation does not interfere with the recommendation service part of the recommendation engine  which remains usable throughout the computation process   to check progress  you can make a get request to the url given in the first listing above  successive gets to this url return the process status  
  the query api provides a generic  programmatic way to find objects stored within the sse repository  rather than concatenating string fragments into some query language like sql or ejb ql  which is a cumbersome and error prone process  you build your queries by creating objects representing certain aspects of a query  combine them programmatically  and finally pass them to a query instance for execution    following the general structure of the sse api  the query api is divided into two layers  the core layer  to be found in the package com coremedia sse core queries   provides a raw  low level access to resources and relationship objects as they are stored in the database  a core level query is created directly from the repository using repository createquery elementtype type   the provided element type defines the domain of the query  the initial set of resources or elements the query operates upon  if this result set is not restricted further  see below   the query will return all elements of the given type which exist within the repository  with the exception of deleted resources  we will come back to this later    at this point  you are forced to decide whether you want to search for resources or relationships  one query for resources and relationships is not possible  this means that you may not pass the top level element type here  you have to pass some subtype when creating a repository query  for the current implementation you can choose between resource and relationship   building upon these core services  a higher level  more domain specific layer is defined in the package com coremedia sse base queries  it provides a higher level access to these resources  this layer generally operates on java beans which is a natural fit with the cae programming model  application programmers will generally prefer to stay on this level  you create a domain level query with the base module by calling basemodule createquery elementtype type   the same restriction to the type parameter applies here  you have to decide whether you want to search for resources or relationships   once you have created a query instance  you may restrict the result set of a query by adding search criteria with query where    add orderings via query orderby    apply a projection by calling query setprojection    and limit the size of the result list by calling query setlimit    for result paging  you may also set the index of the first item to be returned by calling query setstart    finally  the query is executed and the resulting elements are retrieved by calling query list      
  social software extension client library  one of the characteristic architectural features of the sse is that no central server exists to mediate access to the shared repository  instead  the architecture is designed for decentralized writers accessing the repository  at the core of all sse components and sse enabled applications  the client library is the part of the application stack encapsulating repository access  to reduce the load on the underlying database  the client library implements a read cache with a write through strategy for repository modifications  most importantly  the sse client library is designed to be deployed in web applications based on the content application engine  cae  and integrates with the cae cache to provide transparent caching with event based invalidation   in most scenarios  multiple instances of the client library will access a shared repository  including multiple cae instances and other sse components  such as the management views  in this case  there will be some latency before repository updates written by one instance have been distributed to all other instances  during this short period of time  other instances may read stale data from the cache  therefore  application developers should take measures to ensure that end users do not interact with the sse repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency   similar to the cms content repository  the social software repository has the ability to notify listeners of repository changes via an event mechanism  
  recommendation engine  an application allowing end users to express their opinion via ratings may take advantage of the large amount of opinions accumulated over time  using appropriate algorithms  an application can derive properties of users or content  which emerge from entire set of collected data  typically  these algorithms operate on a large amount of data and take some time to run to completion  the sse recommendation engine provides a framework and a runtime component for the execution of such algorithms   generally speaking  the recommendation engine repeatedly runs a one or more batch jobs to process data available in the repository  the source database  and writes the result to a target database  during the execution of a job  the results of the last run remain available in the target database  after completion  the previous results are replaced with the newer ones   in this release  the sse recommendation engine includes an implementation of algorithms to derive the following information from data in the repository   user similarities based on user ratings  item similarities based on user ratings  item recommendations for a specific user  based on this user s ratings and similar users  rating   the results of these computations are made available to applications via the recommendationservice  which is part of the sse api   while the source and target database may be the same  i e  the recommendation engine results reside in the same database schema as the sse repository  different setups are possible as well  the target database may be separate from the social software repository and the recommendation service may be configured to read the results from this different data source  
  the management views component is an extensible content management application for the management of users and user generated content   configuring this component involves configuration of the database connection and the authentication  e g  against a cms content repository    these configuration tasks are described in the chapters below  
  coremedia sse provides the following features to cover the needs of a broad range of applications   comments  user generated content and editorial content can be commented on by logged in  registered users  users may mutually report each other s comments as inappropriate  a browser based frontend enables the editorial staff to approve or reject user generated content   comments with file attachments  it is possible to attach any kind of data file  such as an mp  audio file or a text document  for example   frontend for approval  user generated content can be approved via the extensible approval management view  this extensibility enables the realization of a variety of use cases  such as content approval prior to publication or content removal after being reported as inappropriate  the frontend has been especially designed to support simultaneous mass content approval   tagging and tag clouds  tags can be assigned to any kind of content  including comments  media files or text  for example   and both user generated content and editorial content items can be tagged  predefined query results provide weighted tags to create tag clouds   rating voting  any kind of content can also be rated  although in practice  this generally involves ratings being used  with comments  to enrich editorial content  rating and voting involves users rating content using a five star system or by simply voting the content as  helpful  or  unhelpful   the total votes for an article can be queried  and optionally restricted to helpful unhelpful   in addition  an option is also available for querying a voting histogram for a certain content item  this might result    x helpful    x not helpful  being returned for a particular content x  finally  content can also be returned sorted by its average rating   reputation  voting other users  comments as helpful not helpful contributes to the reputation of a user  the system calculates reputation based on the number of comments a user writes that are voted as  helpful  by other users  more helpful comments equals a higher reputation   neighborhood  the coremedia recommendation engine determines  neighborhood relations  between users  based on the ratings a user makes on other people s comments  similar ratings lead to a strong neighborhood relation while dissimilar ratings lead to weaker relations  implicit ratings can also be taken into account when making this calculation  an implicit rating is made for example when a user clicks the teaser of an article for further reading   recommendations collaborative filtering  the coremedia recommendation engine calculates recommendations on the basis of the neighborhood relation mentioned above  the system recommends content to users if their  close  neighbors have rated it positively  and if they themselves have not yet rated it  this mechanism greatly increases the value of a site for users and tends to lead to much greater click through rates and improved user loyalty  another term for such a recommendation process is  collaborative filtering   the recommendation engine is a high performance component and can also accept rating algorithms other than the default one   rss  and atom feeds  coremedia sse supports the creation of rss  and atom feeds for both editorial and user generated content   search  the integrated coremedia search engine enables quick and easy full text search through user generated content and user profile data   profile management  coremedia sse comes with integrated profile management capabilities  profiles can be attached to users and are extensible on a per project basis to include further custom profile metadata   frontend user management  using the user management view it is possible to search for  block and delete users  this view can also be used to add or remove users from groups  the user management feature set can be individually modified   authentication  the authentication mechanisms for sse can be adapted as desired    initially provided authentication strategies include   coremedia cms user repository separate ldap server  such as microsoft s active directory coremedia sse user management  horizontal scalability  the system can be scaled by adding new cae instances in order to increase overall reliability and performance   session tracking  it is possible to show the number of users currently online    access rights  it is possible to restrict access at different levels  one scenario would be the establishment of access groups for certain application features  for example  
  aside from the database configuration  the recommendation engine also requires a number of other properties to be configured   these are described below   relation properties  the properties shown below configure the relation used in the data analysis   recommend flow source relation  recommend flow source property   these properties must be configured  otherwise any analysis will abort immediately without computing recommendations    as can be seen from the property definitions below  the properties do not have default values  the exact values that you need to enter here are project specific and therefore require input from your development team  
  after the analysis process has run at least once  you can retrieve   for each user   similar users and recommended items   retrieving recommendations  the recommendation service gives you recommendations for a given user based on ratings  the average rating is generated by averaging all ratings for this item uniformly  the expected rating is based on the ratings of users similar to the current user  but it is normalized to take into account the user s rating habits  i e   whether the user normally tends to rate items high or low  please note that the expected rating may leave a given rating scale in some instances  e g   when a user who rates very high on average is recommended an often highly rated item  you are encouraged to clip the value as needed  an item that the user rated himself at the time of the last run of the recommendation  process are not returned by the recommendation service   if you want to retrieve recommendations from the recommendation service  you can use the method getrecommendations from the interface recommendationservice as follows   first  you have to obtain access to the recommendationservice instance  to do so  use spring to inject the bean recommendationservice into your objects  assuming that you start from a user object in variable user  proceed as follows   collection recommendation  recommendations   recommendationservice getrecommendations user getresource          if   recommendations isempty        for  recommendation recommendation   recommendations        myitem item    myitem  basemodule getelementbeanfactory                         createbeanfor recommendation getresource          double expectedrating   recommendation getexpectedrating        double averagerating   recommendation getaveragerating            process recommendation         the type myitem given above must be replaced by the target type of the association that you are using    retrieving similar users  the recommendation service gives you also users who have rated similarly to a given user  use the method getneighbors from the recommendationservice   you pass the resource identifying the user to the service and you retrieve a collection of neighbor objects  that provide access to the resource of the neighboring user and to a number between    and   that indicates distance  negative numbers  or closeness  positive numbers  to that user   a user is never a neighbor of himself   retrieving similar items  it is possible to retrieve items that were rated similarly compared with a given item  user the method getsimilaritems from the recommendationservice   in this case  the argument resource must identify the item and the returned collection contains similaritem objects   an item is never similar to itself  
  whenever you want to use full text search capabilities of a search engine  you need to add the content to the index first  the social software extension uses an extension to the cae feeder for this process  you must configure each type of content you want to index in the file trigger xml  the default configuration feeds information for users with personal stored in profile cards of the vcard type and for user content  you can see in the configuration that only the resource types group  user and usercontent defined as keys in the map ssepopulators are indexed    bean id  ssepopulators   class  org springframework beans factory config mapfactorybean      property name  sourcemap        map         entry key  user            bean class  com coremedia sseimpl feeder base                       vcarduserfeedablepopulator            entry         entry key  group            bean class  com coremedia sseimpl feeder base                       vcardgroupfeedablepopulator            entry         entry key  usercontent            bean class  com coremedia sseimpl feeder base                       usercontentfeedablepopulator            entry        map      property    bean   the key usercontent  for example  means that all beans of type usercontent or any known subtype use the class usercontentfeedablepopulator to transform a bean into a feedable item  which can be indexed  if you want a subtype of usercontent to be transformed by its own populator  you can define its own populator by just using the subtypes name as key   when you want to index a custom resource type  you can either add your own implementation of the feedablepopulator interface or you can use the customizable class beanmappingfeedablepopulator provided by cap feeder  please take a look at the cms content application developer manual for instruction on how to use this customizable populator  the interface feedablepopulator only has one method defined  if you want to write your own implementation   void populate mutablefeedable feedable  object source   each property can be stored in a separate field and additionally in a default field  named textbody  some search engines like fast enterprise require that you must define each field you want to search in  e g  if you want to search for the word politics only in the field title  you must configure the index profile of the fast enterprise search engine first to be able to index fields with the name title first  the default index profile provided for coremedia content for fast only provides certain fields like documenttype or isdeleted  for further information on how to extend your fast index profile take a look at the fast enterprise manuals  
  management views  management views enable the editorial staff to work with user generated content from within their editing environment  i e  without having to access the end user website  currently  two major use cases are supported by the management views web application   user account managment  including activation and deactivation of users  browsing user and group profile information  and managing group memberships   a simple and efficient way to approve or disapprove incoming user generated content  before it will be published on the website  if this is what the application policy requires  
  resources and relationships  the generic core model  the social software repository enables an application to read  write  and query generic resources and relationships between them  similar to cms content or document types  a resource and relationship type hierarchy defines the available properties and inheritance relationships  resource and relationship share the common supertype element  all of this generic functionality is available in subpackages below com coremedia sse core and is accessible via the com coremedia sse core model repository interface   any element   i e  resource or relationship   is of exactly one concrete elementtype  in particular  it is either a resourcetype or a relationshiptype   element types are either abstract or concrete and are arranged in an inheritance hierarchy  with the predefined abstract types element  resource  and relationship at the root of the hierarchy  an element type defines the set of properties each of its instance will have  since elementtype is a com coremedia cap common captype  it supports reflection on the type hierarchy and the properties defined by each type  the following property types are supported by element types  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  using criteria  criterion is an object oriented representation for some condition which must be satisfied for an item if it should be included into the query result  criterion objects are  as well as projection and order instances  created using criteria factories    the base module provides several criteria factories  each one is designed for a specific domain model type  for example  there is a criteria factory designed for usercontent which is called usercontentcriteria    the following example query retrieves users with the name  alice    note that most query methods return the query object itself  so we can simply chain together our method calls    list user  users    list user       basemodule createquery basemodule getusertype        where basemodule getusercriteria   nameis  alice        list     this query is yielding resource beans of type user  the result set is restricted by a criterion requiring the user objects to have a property with the value  alice    the citerion factory method usercriteria nameis string value  is implemented by using the generic method elementcriteria propertyis string propertyname  object value   it is provided just for programming convenience  you could as well use the generic method   the following query retrieves user content objects which have been tagged with the tag  social     list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where basemodule getusercontentcriteria       taggedwith  social        list     this query is yielding resource beans of type usercontent  the result set is restricted by a criterion requiring the user content objects to be tagged with  social    there might be quite many content objects tagged like this  so it is a good idea to restrict the number of results using the query setlimit  method    limiting the size of the result set generally makes sense only if we also impose an ordering on it  otherwise it will be database implementation dependant which items are included in the result list  these may vary each time we execute the query  so we also order the result list by the creation date by using query orderby     usercontentcriteria usercontentcriteria         basemodule getusercontentcriteria    list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith  social        orderby usercontentcriteria     orderbycreationdate order direction descending       setlimit         list     note that the order is chosen to be descending so that we get the    newest user content objects which exist in the sse repository   again  there are two layers of criteria factories  the core level criteria factories are the class elementcriteria and its two subclasses resourcecriteria and relationshipcriteria  all within the com coremedia sse core queries package  these are the foundation on which the domain level criteria factories in the com coremedia sse base queries package are build upon  the core level criteria factories should be used in conjunction with core level queries created from the repository  whereas the domain level factories should be used in conjunction with queries created from the base module  see above    the topmost criteria factory classes are elementbeancriteria and its two subclasses resourcebeancriteria and relationshipbeancriteria  these carry the term  bean  within their names to emphasize the fact that they operate with cae beans rather than the core sse element objects  in particular  they provide transparent conversions between beans external to the sse repository  that is  all beans which are not derived from com coremedia sse beans elementbean  and their representational proxy within the sse repository  instances of com coremedia base model externalreference   using the idprovider and the elementbeanfactory configured for the base module  this comes in handy if you want to find all comments to some cap content objects  for example  the cap content objects are stored within the cap content repository  whereas the comments are stored within the sse repository   in contrast to the three core level criteria factory classes which are not subclassed any further  these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package  they add more factory methods which are specific for the corresponding domain model type  for example  factory methods for the resource type user are bundled within the factory class usercriteria  and factory methods for the relationship type voting are bundled within the factory class votingcriteria   this criteria factory class hierarchy is designed for extensibility  it is intended that you define your own criteria factory classes if you extend the base module domain model  this should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended  this new criterion factory is then the place to define factory methods specific to your domain   the predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties  in that case  you won t be able to query for the new properties you defined  this is because the property criterion factory methods check whether a given property is defined within the element type of the factory   however  subclassing criteria factories is not always necessary  most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes  passing in the domain type to the constructor  this way  you may already use all the new properties defined within your domain type  finally  if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience  you may always use the criterion factory provided with the base module  the criterion factory of the base module is  most specific to your new element type  
  basemodule  the main entry point for sse applications  a set of commonly used resource and relationship types is available in the so called  base module   located in com coremedia sse base and subpackages  in addition to resource and relationship types and bean classes to wrap them  the base module contains special purpose commands and queries for these types  in many cases  the types provided by the base module  will be sufficient for an application and there will be no need to extend the type model  the interface basemodule exposes convenience methods for domain specific queries as well as convenient getters for all the elementtype and role objects defined by the base module   application module entry point beans  such as the implementation of basemodule  are a good candidate for injection into elementbeans  controllers  and other parts of an application in order to access the functionality provided by the social software extension  after installation of the sse template web application template  the basemodule implementation is available as bean  basemodule  in the application context  
  package overview  the following packages contain the public repository api to access the most commonly used functionality     com coremedia sse core model the repository api providing a generic way to access and navigate resources and relationships in the social software repository  com coremedia sse core commands generic commands to create  update and delete objects in the social software repository  com coremedia sse core query a query api to find objects by defining a set of criteria com coremedia sse core events types supporting the delivery of repository events  com coremedia sse search supports full text search across the indexed repository elements  com coremedia sse recommend api to retrieve user neighborhoods and recommendations from the recommendation engine  com coremedia sse base and subpackages  the  base module   which provides pre defined resource and relationship types including specialized commands and a convenient api to implement common use cases 
  modifying elements in the repository  in order to provide clear transaction semantics for repository modifications  repository elements  and their wrapping beans  do not have property setters for individual properties  instead  any modification to a repository element must be performed by executing a command  commands have a very simple interface  command t  execute t argument    and many command implementations provide additional convenient overloads of the execute   method  the repository guarantees atomic execution for commands  i e  if the execute method throws an exception  repository will remain unmodified  also  any read operation from the repository is isolated from concurrently running commands  repository changes will only be visible to other threads and application instances after successful completion of the command  
  bean wrappers for generic elements  based on the generic core model  an application uses resources and relationships of concretely defined types  it is important to know that the repository can only store resources relationships of concrete types  similar to cms content and contentbeans  resource and relationship instances are wrapped by strongly typed beans matching the underlying element type  these bean types extend the resourcebean and relationshipbean interfaces  respectively  since strongly typed bean classes usually exist for all defined element types  in many cases an application developer can ignore the fact that the bean implementation is based on the generic core model  however  it helps to know about this layered design and understanding it is essential to a developer planning to define application specific element types   a com coremedia sse beans elementbeanfactory is responsible for creating an elementbean from an element  
  using projections  a projection represents a mapping of the items within a query result list to some values derived from these items  examples of possible mappings include the selection of some component property of the items  and aggregate computations such as counting the total number of items  summing up the property values or calculating their average value     projection instances are  like criterion objects  created by using a domain specific criteria factory where you have to specify the exact kind of mapping which should be applied  as an example  the following projection simply counts the size of the result set  which is the number of content objects submitted by a given user  this projection saves the overhead of fetching all content objects from the database in order to determine this number   list number  counts    list number       basemodule createquery basemodule getusercontenttype                 where usercontentcriteria owneris user                 setprojection usercontentcriteria count                 list    int count   counts get    intvalue     a more interesting  and complex  kind of projections are histogram projections which return a list of key value pairs  these contain a computed value for some group of items within the result set  this is similar to the functionality provided by group by and aggregate expressions in sql  as an example  the following query computes a tag cloud for the    most frequently used tags within the repository    taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit           list      note that  when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pair   most frequent tags first  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  repository events  like other coremedia repositories  the social software repository supports event listeners  enabling an application to receive notifications on creation  update  and deletion of repository elements  similar to contentrepository listeners  the com coremedia sse core model repository interface has methods to add a listener to the live stream of events  or to receive a replay of events from a certain timestamp on   application developers need to implement the repositorylistener interface to register the listener using repository addrepositorylistener  
  with the rss atom feed generation api in package com coremedia feeds  you can easily add rss     and or atom     feeds to your application in a convenient and cae friendly way  in the current release of the social software extension  com coremedia feeds is implemented as a thin layer on top of the open source library rome  in addition to the functionality provided by rome  the feed generation api has the following features   feedgeneratorimpl creates feeds from arbitrary lists of beans  including instances of contentbean and elementbean   as long as a feeditemdataprovider for the bean is configured  feedgeneratorimpl can easily be created and configured as a singleton in a spring application context  the strategy to create a feed entry from a bean is encapsulated by feeditemdataproviders  custom feeditemdataproviders may be added to an application in order to support additional custom bean types  
  example  how to generate an atom     feed  there are several ways to put the feed generation api in an application  depending on the application s needs and design  different approaches can be preferable  in the following example it is assumed that a cae style spring controller  e g  one extending abstractviewcontroller  returns a bean of type com example latestcontent as the model bean   self    latestcontent has a property items  which returns a list of objects  feed generation in this example is implemented as a programmatic  named view of the latestcontent bean  other views may exist  such as a jsp view com example latestcontent jsp    package com example views feedview   import com coremedia objectserver web servletview  import com coremedia feeds    import com example latestcontent  import javax servlet http httpservletrequest  import javax servlet http httpservletresponse  import java util list   public class feedview implements servletview        these are considered constant and       will be injected by the spring bean factory      private feedgenerator generator    private feedformat feedtype    private string title    private string uri    private string link        getters and setters not shown             public void render object self  string viewname                        httpservletrequest request                        httpservletresponse response            get the list of objects to return as feed entries     latestcontent latestcontent    latestcontent  self      list    contentlist   latestcontent getitems         try            create the output writer           feedtype is assumed constant here            but may be derived from the view name as well       feedwriter feedwriter            generator createfeedwriter feedtype  response getwriter               initialize the feed meta data  only title  uri            and link are required        feedmetadata metadata   new feedmetadataimpl          metadata settitle title         metadata seturi uri         metadata setlink link          response setheader  content type    text xml              create a feed context with the request and response       feedcontext context   generator createfeedcontext          context setattribute          feedcontext request attribute name  request         context setattribute          feedcontext response attribute name  response             generate the feed from the item list and write the output          to the response writer       generator generatefeed metadata  contentlist   feedwriter                               context          catch  exception e             no user friendly error handling in this example       throw new runtimeexception  failed to generate data feed   e                 this programmatic view is registered with the view dispatcher as the view with name  atom  for beans of type latestcontent in custom views xml      bean id  programmedviews       class  org springframework beans factory config mapfactorybean        property name  sourcemap          map               other programmatic views are here                 entry key  com example latestcontent rss                  value ref  atomfeedview            map        property      bean      bean id  atomfeedview  parent  abstractfeedview          class  com example views feedview        property name  feedgenerator  ref  feedgenerator             constant from com coremedia feeds feedformat          property name  feedtype  value  atom              property name  title  value  recent posts             well known url for this example          property name  link                 value  http   localhost      servlet latest              reuse the link as the uri          property name  uri                 value  http   localhost      servlet latest          bean   to generate the feed  request the url of the controller with a view parameter of  atom   without custom feed item data providers  the view will work for lists of usercontent objects  
  after configuring the database  you can test your setup by starting your webapp   start the tomcat installed as part of the cae web application template  navigate your browser to http   localhost      contentapplicationengine template servlet  congratulations  if you see the starting page  below  listing the configured profile card types  your setup is correct and you can start exploring the social software extension deliverable by extending the minimal web application and using the documented api   
  if you see an error page instead  try to troubleshoot the issue    check the tomcat logs consult the page with frequently asked questions  or contact the support if you encounter a problem you cannot solve yourself   
  while the base module functionality should be sufficient for some basic scenarios  the social software extension enables you to easily define your own resource types and the relationships among them  you can either extend pre defined types or create your own types from scratch   
  if you need a summary field for your usercontent  you can extend one of the two pre defined usercontent definitions  this comprises the following steps  define a new resource type register the resource type implement a resource bean register the resource bean  in the following example  the pre defined xhtmlusercontent will be extended with a persistent markup property with xhtml named summary   define a resource type  first of all  create an interface and use annotations for defining the new resource type    resourcetypeannotation    name   myusercontent     uri  http   www coremedia com training resource     description  user content with summary     isabstract   false    parent   xhtmlusercontent class  public interface myusercontent extends xhtmlusercontent      property    schema id  xhtml         markup getsummary           use the annotation  resourcetypeannotation to define base elements like name  uri  description and the parent class  you can define a resource type as abstract  if only subtypes should be instantiated  please note  that the parent is actually defined in the annotation and not by the interface it extends  this way possible problems with multiple inheritance are prevented  name and uri of a resource type definition must be unique in your environment  it is good practice to add a constant defining the type name  
  the base module  located in com coremedia sse base and subpackages  provides some common resource and relationship types which are useful for a broad range of social software applications  with the functionality provided within the base module  you can store user generated content  manage users and user profile data  organize users within groups  administer access control lists  and implement different kinds of votings and ratings  in order to support this functionality  the base module packages element types and their corresponding wrapper beans  and commands for creating  updating and deleting these elements within the repository  in addition  it provides a convenient api and caching support to perform commonly used queries    the following picture gives an overview of the resource types provided by the base module  together with the relationships between them  
   cappropertydescriptortype java type comment boolean   java lang boolean  blob   com coremedia  cap common blob   used for binary data with an optional restriction of the acceptable content type date   java lang  calendar  double   java lang double due to the mapping to the underlying database column type  not all valid java lang double values may be stored in a double property  instead  the valid double values depend on the chosen database system  on installations based on an oracle relational database  the double property type is mapped to a double precision column type with a smaller range of valid values  for instance  the value java lang double min value           cannot be stored in this case  long   java lang long  integer   java lang  integer  markup   com coremedia  xml markup   used for xml properties with a mandatory restriction to an acceptable xml schema string   java lang string   text of up to     characters  
  you do not have to define the schema of a markup property for abstract element types  but if you do so you can not override it with subtypes  similarly  the content type of a blob property may not be changed in subtypes of the type declaring the property   the resource interface has an additional property uuid  which is a read only  stable  and universally unique identifier of the resource   relationships are defined as a bidirectional link between two resources  a relationship has a source and a target  each of which is restricted to a resourcetype  in the meta model  the relationshiptype   the two endpoints of a relationship are represented as the source role and target role  roles may be unspecified in abstract relationship types  but once a relationship type declares roles  they may not be overridden by subtypes  
  the coremedia social software extension comes with pre defined relationships  such as  ownership  but you can define your own relationships  this comprises the the following steps    define a relationship type   register the relationship type   implement the relationship bean   register the relationship bean  as an example a friendship relationship will be created  that is  a user can define another user as friend  the relationship will have the source role  user  with a target role  friend   you also define a property  since  for the starting date of the friendship   define the interface  defining an own relationship is basically very similar to defining a new resource type  of course the used annotation differ slightly  an interface to define a friendship between two users would look like this   import com coremedia sse core annotations property  import com coremedia sse core annotations            relationshiptypeannotation  import com coremedia sse core annotations roleannotation         a friendship relationship     a user can have many friends       relationshiptypeannotation          name    friendship           uri    http   www coremedia com socialsoftware                      examples friendship           isabstract   false          sourcerole     roleannotation                  name    user                   ismultiple   true                  resourcetype    user             targetrole     roleannotation                  name    friend                   ismultiple   true                  resourcetype    user              public interface friendship     public static final string name  friendship              friends since when        return start of friendship          property   calendar getsince       you use a relationshiptypeannotation  which requires the definition of roles using roletypeannotations  
   name of the property value default description recommend flow source relation   name of the relation between users and items used for the analysis  the source of the relation must denote users  while the target must denote items  recommend flow source property   numeric property of the relation to be used as a rating  
   database value to enter postgresql     postgresql oracle   g oracle oracle  i oracle  ms sql server      mssql db        db   
  it is also possible to define a subset of possible hibernate configuration properties in the sse properties file  note  however  that properties likely to cause unintended repository behavior are overwritten by the system   improving postgresql performance  in order to improve the performance of a postgresql database you have to change the default value of the default statistics target property located in the postgresql conf file in the data  directory of your postgresql installation  this property sets the default statistics target for table columns that have not had a column specific target set via the alter table set statistics  a larger value increases the time needed to execute analyze  but might improve the quality of the planner s estimates  that will in turn reduce the number of full table scans  change the setting of default statistics target to a value        try     for a start  you do not have to restart the database after the change  execute   postgresqlinstdir  binpg ctl exe reload  d  datadir   or click reload configuration in the windows postgresql menu     execute analyze in the sql console  you should run analyze on a regular basis  once a night for example   
   name description type default example name the unique name of this resource type string  myusercontent uri the unique uri of this resource type string  http   www coremedia com training resource description a short description string  user content with a summary isabstract whether instances of this class are allowed or only of its subtypes boolean false false parent the parent of this type class resourcetypedefinition xhtmlusercontent class  
  approval tab customization  the approval process single item page is structured into three compartments    the left compartment displays information on the item s author   the right compartment holds the approval controls  and the middle section displays the single item which is to be approved    you can customize the middle view to the project s need  the editor template is called usercontent approvaldetail jsp and belongs to the template package com coremedia sse base model   user content tab  it is just as well possible for you to customize the look of the items  appearance in the search result and approval history lists  this template is called usercontent approvaloverview jsp in the same package   
  this section describes selected customization points of the social software management views application  
   name description type default example name unique name of the relationship type string  friendship uri unique of the relationship type string  http   ww coremedia com socialsoftware examples friendship isabstract whether this is only an abstract type boolean false false sourcerole a definition of the source role roleannotation  sourcerole   roleannotation name  user      targetrole a definition of the target role roleannotation  targetrole   roleannotation name  friend       
   name description type default example name a name for the role  string  friend resourcetype the type of resources which are allowed for this role  string  user ismultiple whether more relationships of this type with the same role value are allowed  the value of  ismultiple  is purely informational  it does not define an enforced constraint  boolean  true  
   the social software extension provides the userprovider interface as an abstraction of user repositories for the purpose of authentication  users from different user repositories  e g  from a ldap repository  from a coremedia cms user repository  social software local user repository  can be authenticated in a single application  there is no central authentication mechanism for all user providers  since they typically require different forms of authentication  instead  the respective user authentication scheme can be used with each user provider   active user sessions are handled separately from authentication by the  sessionmanager  bean  of type com coremedia sse base session sessionmanager   it also provides information services  e g  on the login state of a given user and the total number of currently logged in users  
  this chapter gives an introduction to web     and lists the web     features that the coremedia social software extension provides to enable web     functionality for your site  whether intranet  extranet or internet presence   
  this chapter describes the steps necessary to install the coremedia social software extension  also covering the system requirements and preliminary setup of the system  
  this chapter describes the structure and concepts of the social software repository api  it also shows you  how to use the query api to retrieve content from the social software repository   the social software repository api comprises of two layers  the core model which lays the foundation for the api and the base model that offers a set of commonly used resource and relationship types  the following simplified uml diagram presents you with the types defined by both modules   
  hon the left hand side of this picture  you can see the resource types supporting the storage of user generated content  the type usercontent is the abstract base class with the central properties title and text  these properties may hold the caption and the body of the text some user has submitted  respectively  in contrast to the title property  which is a plain string  the text property may contain structured xml text    the concrete xml schema for the text property is left open here  it must be defined by concrete subclasses  the two concrete subtypes provided by the base module  richtextusercontent and xhtmlusercontent  define coremedia richtext     and xhtml      respectively  you will have to define your own sublcass if you want to use a different xml schema  how to register custom schemas is described in section    if the user who has submitted the content   the  author    is somehow  logged in  and therefore known to the system  that user is normally represented by a user resource within the sse repository  in that case  the usercontent resource is associated with that user via the ownership relationship  the author is said to own the usercontent resource  therefore  ownership is a generalization of the author relationship  which is useful in other contexts as well  the owner of a manageable resource will always be able to change the acl entries for this resource  this right can never be retracted   for the case that the author of some user content is not represented within the system  there are properties of usercontent which may at least some hold basic information about the author such as a name and an e mail address  this is to support anonymous commenting on a web site  an author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information  and maybe an address field also   a usercontent resource might also be attached with one or more media resources via the attachment relationship  these may hold additional data such as pictures or videos  the data property is of type blob and holds the binary data as well as the mime type  if media resources are attached with usercontent objects  their life cycle is intended to be the same as that of the user content resource  that is  if the user content resource is deleted  the attached media resources should be deleted as well    on the right hand side of the above picture are depicted the resource types intended for user and user profile management  user and group resources are generalized to the subject resource type  each subject has a name which must be unique within the repository  subjects  and  therefore  both users and groups  might be associated with arbitrary profile information  organized into resources of type profilecard    there are two profile card types predefined within the base module  a vcard type for the usual personal and contact information of a person or organization  representing something like a business card  and a passwordcard type  the latter is intended to store password information for a user if authentication is to be done with the simple name password authentication strategy shipped with the sse  see the next section for more information on user providers and authentication strategies   for other profile data specific to your application  you may extend the profilecard type with your own subtype and define the properties you need   the profiledetail relationship connects subjects with their profile data  since the cardinality on the profile card side of this relationship is not constrained  there might exist arbitrary many profile cards for a given subject  even of the same profilecard type  keep this in mind when working with profile data  if it makes sense and the application allows to store multiple profile cards of the same type  there is usually also a special card property defined which discriminates between the different cards of a given subject  so that the application knows what card is used in which context  for vcards  the organization property may take this part  so that a user may have different vcards  one for each different organization   this completes our brief discussion of the resource type overview given in the above picture  the following picture now provides a closer look at the relationship types which connect resources of the types discussed so far   
  as you can see  there are a couple of relationship types which make use of the possibility to attach properties not only to resources  but to relationships as well   among these are the relationship types tagging  rating and voting  which together are modeled to be some kind of classification of a resource    a classification connects a user who is the creator of the given classification with the target resource which is classified this way  since a tagging inherits all properties from the element base type  there is a creation date associated with every classification  this property might be used in queries to filter for classifications done in a particular time window  tag clouds which show the most frequenty used tags within the last month are typical examples   a tagging carries the tag which the user has chosen to label the resource with  there might be several tagging instances with the same target resource  each one carrying a different user but the same tag    a rating is a kind of assessment a user makes about a resource in terms of quality or quantity  it carries a double value which encodes the assessment  typically within some application dependant  continuous range  rating is an abstract type  application programmers will have to define a concrete subtype for a specific rating domain   a voting represents a interest or opinion a user expresses about a resource  there are typically multiple choices from which the user may choose from  although this is not required  there might be just a single choice for a concrete voting type such as  thumbs up   for example  the choice property of a voting encodes the choice made by the user  in contrast to a ratings value  this is an integer property  reflecting the discrete nature of multiple choice questions  similar to rating  voting is an abstract type  a concrete subtype has to be defined for a specific voting application    there are two concrete voting types predefined in the base module  complaint and approval  a complaint is issued by a user who discovered some kind of inappropriate content  this vote might then be exploited by some editor who is authorized to revise or delete the content  an approval is used by the management views shipped with coremedia sse where you may require a dedicated approval step by some authorized editor before a submitted user generated content might be allowed to occur on a public website   typically  classifications are applied to resources of type usercontent  but since the resource type of the target role of classification is the general type resource  even users or  groups might be tagged  rated or voted upon  and  since an external content object is represented within the sse repository as an instance of an externalreference resource  it is possible to classify external content as well  
  after having successfully indexed your content  the next step is to search for keywords in your application  you can use the fastsearchengine bean to easily use the full text search feature  the bean is defined as searchengine and can be used to easily search for keywords  it provides some basic methods for searching  e g  you can search for users using one of the following methods    list user  findusers string query   list user  findusers string query  list orderentry  orderentries   int offset  int numberofresults      the first method allows you to search for simple search terms  for example  president  and only return users  who have the word  president  somewhere as property in their profile card  the more advanced second method has some additional parameters for sorting a search result and for restricting the number of search results  the same kind of methods exist for searching for usercontent    list usercontent  findusercontent string query   list usercontent  findusercontent string query   list orderentry  orderentries  int offset   int numberofresults      if you do not want to restrict your search to one document type or you have your own type indexed  don t forget  you need to define your own feedablepopulator for that   you can use more general search method   list findusercontent string type  string query   list orderentry  orderentries  int offset   int numberofresults     if you do not want to restrict the search to one type  you can use null as parameter value  the result always returns beans generated by the id provider     
  the remainder of this chapter describes the social software extension concepts as well as the purpose and usage of these and other framework classes  
  the coremedia sse is java based and requires a java   platform   ensure that you therefore have either a java runtime environment  jre  or java development kit  jdk  fully set up and installed on your system  the table below lists the supported java versions  
  the configuration chapter takes you through configuring the system before initial system start  
  coremedia sse extends applications built on top of the coremedia content application engine  cae   storage of user generated content and user profile data is achieved using a database schema independent of the cms content repository  the extension has been designed from the ground up to scale gracefully  allowing high end sites to support parallel  simultaneous content authoring by many individual contributors  high delivery throughput is guaranteed by the cae caching infrastructure  and the user generated content can be easily and rapidly searched via the integrated coremedia search engine  
  once the configuration has been completed in accordance with the preceding chapters  you can start the system  this involves starting a number of the coremedia sse components individually   the chapters below cover the start up for the various components of the coremedia sse   note that the order of component start is in the order given below  deviation from this order as given is not recommended  
  coremedia sse comes with the core client library and contains additional services  that offer you more functionality   the recommendation service full text search authentication and session management rss atom feeds 
  since the social software feeder depends on the cae feeder  ensure that you have also started the cae feeder component of your coremedia cms system   a customized and configured cae feeder is started with the command shown in the following listing   bin cm caefeeder start  the command shown in the following listing stops the cae feeder   bin cm caefeeder stop  note that on windows  the windows service start and stop commands must be used  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this manual describes all aspects of the social software extension  sse   covering the concepts  installation  and operation of the software  and how to add sse features to a content application engine  cae  application   section gives a brief introduction to the concepts of the coremedia social software extension and introduces the basics of web     and enterprise     section describes the administration and operation of the sse  including installation section describes the management of users and of user generated content  ugc  with the sse section describes how to use the social software extension for your own web applications  
  the recommendation engine requires a database  this database may be hosted on the same server  or within the same schema  as the social software repository database  this is the default scenario for the batch process part of the recommendation engine    alternatively  an entirely separate database system  schema  may also be used  in order to accommodate higher load and or varying security arrangements or requirements    as has been noted above  the two parts of the recommendation engine perform different tasks and therefore require different configuration tasks to be completed  in particular  the service part of the recommendation engine may need to read from a replicated snapshot in order to reduce load on the live database   the chapters below cover database configuration requirements for both parts   batch process configuration  database configuration for the batch process part of the recommendation engine is done in the sse flows properties file  located in the spring sse flows directory  the batch process part stores likeness results and recommendations to this database   the configuration may be kept the same as that of the social software repository  as noted above  in this case  the relevant configuration information from the sse properties file merely needs to be copied into the relevant fields in the sse flows properties file  otherwise  enter new configuration information to store the data elsewhere    the relevant portion of the sse flows properties file is shown below with the database configuration completed with sample values  all database related properties have identical semantics to the database properties for the repository as discussed in section   recommend flow connection driver class org postgresql driver recommend flow connection url jdbc postgresql   localhost      sse recommend flow connection username sse recommend flow connection password sse recommend flow database type postgresql  service configuration  the configuration of the service part of the recommendation engine must match the configuration of the batch process part of the component    configuration of the service is done in the sse properties file  located in the spring sse directory   not in the sse flows properties file   a sample configuration is given below  note that the database type is not given     recommendation engine  service part database connection   this connection configuration must match the recommendation    engine batch process configuration    it is used to read recommendation engine results  recommend service connection driver class org postgresql driver recommend service connection url jdbc postgresql   localhost      sse recommend service connection username sse recommend service connection password sse 
  configuring the social software feeder involves first of all configuration of a cae feeder  while the social software feeder re uses the same database and therefore requires no database connection of its own to be defined  you do however need to further configure the feeding of content from the social software repository to a search engine in order to enable full text search   to proceed  ensure that you have already set up the cae feeder with a database connection  for further information  consult the cms administration manual on configuring the cae feeder   first  it should be noted that while the cae feeder can feed content to any kind of search engine  this scenario is likely to require the implementation of your own adapter  called an indexer  which would then handle the items fed to it  this section therefore only deals with the standard supplier adapter  for the fast enterprise search engine  it therefore follows that you must also have a fast enterprise server installed in order to make use of the instructions given below  instructions on installing this component are given in the relevant chapter of the cms administration and operation manual and the documentation provided by fast itself   in the standard supplied configuration  coremedia cms      provides an implementation of an indexer for the fast search engine supporting version     and      the social software extension also provides an implementation that simplifies searching with the fast search engine    you configure the social software repository by configuring the property file config caefeeder spring sse sse properties as described in section     the document types to be indexed are configured in the file sse feeder triggers xml  located in the config caefeeder spring sse feeder directory  the standard configuration for coremedia sse content includes the user and group type  based on an attached vcard profile card  and the usercontent type including all subtypes    as such  this standard configuration includes content from the cms  the configuration of your cae feeder remains untouched  consult the coremedia cms content application developer manual for more information about defining feeding cms content beans   if you do not want to index any cms content  you need to remove some files and uncomment the bean definitions in the file config caefeeder spring sse feeder sse feeder standalone xml  the following files contain references to the cms repository and must be deleted or otherwise adapted  e g  if you want to keep jmx support   config caefeeder framework cap objectserver uapi config jar config caefeeder framework cap proactiveengine uapi config jar config caefeeder spring   xml  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  search engine feeder  to enable full text search for user generated content  user profiles  and custom types stored in the repository  sse ships with extensions to the cae feeder  see the content application developer manual    the cae feeder is deployed as a separate  single component  a sse trigger listens to repository events via the client library to send new or updated objects to the search engine indexer  section xxx describes how to customize the sse trigger and take control over which beans and bean properties will be indexed by an attached full text search engine  
  just like other parts of the content application engine  classes of the social software extension client library rely heavily on the dependency injection pattern and a spring application context definition to assemble an application from loosely coupled components   a majority of the social software extension can be considered a black box framework  relevant interfaces are exposed as a public api while the implementation classes are usually not part of the public api  implementation classes expose public properties  which will be set as part of the application context definition  and control the components  behavior   additionally  many framework classes have extension points in the form of strategy interfaces  whose default implementation may be replaced by a custom implementation in a specific application  one example of an extension point using the strategy pattern is the authenticationstrategy interface called by the default user provider implementation  see authentication and session management   however  in some cases  abstract base classes are provided to simplify common or complex implementation tasks  e g  abstractconfigurablelinkscheme  abstractfeeditemdataprovider  abstractuserprovider    applications access the social software extension functionality by injecting beans defined in the sse application context definition files  see in the lib   config jar files and spring sse sse   xml  into application beans  such as controllers or content beans  depending on which functionality is needed  the following table shows some candidates for injection into application beans 
  for each property you want to persist you must add a  property annotation  markup properties require a schema definition  to do so  add the  schema annotation  the id of the schema must match a defined xml schema  predefined schemas are coremedia rich text  named coremedia richtext      and xhtml  named xhtml       the registering of custom xml schemas is desribed in section  the supported property types are explained in section   restrictions  it is prohibited to change the parent of a resource or the type of a property  you can only add additional properties to existing types    register the resource type  register all resource and relationship types by adding a new application context configuration file to the  spring directory  register new types by adding their interface names to the list in the definition of the registry bean  the configuration below uses a property customizer to add the resource type definition to the existing ones    customize append id  basemoduleresourcetypesconfig    bean  sseresourcetypes       list        value com coremedia training resource myusercontent        value       list     customize append   implement a resource bean  now implement the bean  the class must extend the class abstractresourcebean or one of its subclasses  to access the persisted properties  you use the method getresource   to access the resource first and then use the getter method for your property type to return the property s value   package com coremedia training resource    import com coremedia sse base model xhtmlusercontent import com coremedia xml markup   public class myusercontentimpl extends usercontentimpl                                 implements myusercontent     public markup getsummary         return getresource   getmarkup  text            register the resource bean  now register the resource bean in your new configuration file  just as you would register content beans  define the class definition used to instantiate a resource of this type  make sure to define that it should not be used as singleton    bean name  ssebeanfactory myusercontent           scope  prototype      class  com coremedia training resource myusercontentimpl          parent  abstractbasemodulebean     instead of defining the concrete class  you can also define a factory implementing elementbeanfactory interface to actually create beans  an example for this is the definition of the externalreference bean  which is defined as a factory  which uses the id provider to really create  the bean  
  register the relationship type  register all relationship types by adding bean definitions to the new application context configuration file in the  spring directory  that was already created for registering resource types  register new relationship types by adding their interface names to the list in the definition of the registry bean using a property customizer    customize append id  basemodulerelationshiptypesconfig    bean  sserelationshiptypes       list        value com mycompany example friendship  value       list    customize append     implement the relationshipbean  the implementation of relationship bean looks similar to implementations of resource beans  only with a different parent class   import com coremedia sse base model abstractbaserelationshipbean  import com coremedia sse base model user  import java util calendar   public class friendshipimpl extends abstractbaserelationshipbean         implements friendship     public calendar getsince         return getrelationship   getdate  since           public user getuser         return  user  getresourcebean getrelationship   gettype                      getsourcerole            public user getfriend         return  user  getresourcebean getrelationship   gettype                      gettargetrole            access the persisted properties using the meta model with getrelationship    if you want to return the resource associated to one role of a relationship  you can use the method getresourcebean role role   please note  that the method already returns a social software bean   you might not need your own implementation of a relationship type  when you do not add additional properties to a type  you can use the same implementation of a bean for all subtypes  as you can see in the example in section   register the relationshipbean  you need to register the implementation of the bean just like you would register an implementation of a resource type or a cms content bean    bean name  ssebeanfactory friendship           scope  prototype             class  com coremedia sse examples friendshipimpl          parent  abstractbasemodulebean     
  the social software extension provides a way to use the coremedia search engine for full text search  in section you can read about the basic configuration of the search integration  this section describes how you can adapt the search feeding process to your needs and how to actually use the search capability in your own application  
  the coremedia sse requires a pre installed coremedia cms      platform to be available   supported versions are given in the table below   note that an installed and configured fast instream search engine is also required in order to use the social software feeder  this is also noted in the table below  
    version build coremedia cms        cms         or higher  since sse          cms         or higher version     or     of the fast instream search engine required for using social software feeder  refer to the coremedia administration and operation manual for instructions on how to install fast instream and which hardware is required   
  in this section  we compiled a couple of sse query examples which cover some typical use cases   retrieve ratings for some given user generated content  final relationshipbeancriteria relationshipcriteria      basemodule getrelationshipbeancriteria    relationshiptype starratingtype      basemodule getrepository   getrelationshiptype  starrating    list rating  ratings    list rating        basemodule createquery starratingtype       where relationshipcriteria rolevalueis        basemodule getratingtype   gettargetrole           usercontent        list     here  we assume that a relationship type starrating is defined by inheriting from the relationship type rating defined in the base module  retrieved are all elements of this starrating type which are bound to some given usercontent resource by means of the target role  which is inherited from the rating relationship    retrieve the    latest answers comments in a thread in which a specific author participated  usercontentcriteria criteria     basemodule getusercontentcriteria    user someauthor   null  list newestcommentstoauthorscontent     basemodule createquery basemodule getusercontenttype         where criteria insamethreadasoneof         criteria authoris someauthor           and criteria inrole            basemodule getcommentcommentrole              orderby criteria         orderbycreationdate order direction descending           setlimit             list     this query will also retrieve comments written by someauthor herself  so you might want to filter these out  in this case  just add another where clause with a negated authoris   criterion  recall that the author relationship is modeled by the relationship ownership between a user and other resources    retrieve the users which have written something recently   list user  authors    list user      basemodule createquery basemodule getownershiptype          where relationshipcriteria rolevaluetypeis         basemodule getownershipobjectrole           basemodule getusercontenttype           orderby relationshipcriteria       orderbycreationdate order direction descending         setprojection relationshipcriteria         torole basemodule getownershipownerrole           setlimit           list     again  recall that the author relationship is modeled by the relationship ownership between a user and other resources    compute a tag cloud for the    most frequently used tags within the repository   taggingcriteria taggingcriteria   basemodule gettaggingcriteria    list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype         setprojection taggingcriteria counttags true        setlimit          list    comparator  keyvaluepair string  number      ignorecasevaluecountcomparator        new comparator keyvaluepair string  number              public int compare            keyvaluepair string  number  o             keyvaluepair string  number  o             return o  getkey   comparetoignorecase o  getkey                    collections sort tagcounts  ignorecasevaluecountcomparator   when setting the counttags   projection  the result list is implicitly ordered by the number of tag occurrences  the value part of the key value pairs   the most frequent tags come first  so  if we want the tags to appear in alphabetical order  modulo upper lowercase   we have to sort the result list with our own comparator before rendering it on a web page   compute a tag cloud for the    tags a given user has used  taggingcriteria taggingcriteria      basemodule gettaggingcriteria     list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria useris someuser         setprojection taggingcriteria counttags true         setlimit           list     collections sort tagcounts  ignorecasevaluecountcomparator    retrieve user content by a date interval   final resourcetype usercontenttype   basemodule getusercontenttype     final usercontentcriteria criteria       new usercontentcriteria basemodule  usercontenttype    basemodule createquery usercontenttype      where criteria modificationdatebetween from  to       orderby criteria orderbycreationdate order direction descending       setlimit     list     retrieve the latest post of a given user  list usercontent  latestposts    list usercontent      basemodule createquery basemodule getusercontenttype          where criteria owneris someuser         orderby criteria         orderbycreationdate order direction descending         setlimit          list        if   latestposts isempty            usercontent latestpost    usercontent  latestposts get                compute a tag cloud for a given time interval   list keyvaluepair string  number   tagcounts      basemodule createquery basemodule gettaggingtype          where taggingcriteria targetin          usercontentcriteria creationdatebetween from  to          setprojection taggingcriteria counttags false         setlimit           list     as in the example given above  you ll have to sort the result if you want the tags to appear in alphabetical order   retrieve user content by tag  list usercontent  usercontentbytag    list usercontent       basemodule createquery basemodule getusercontenttype        where usercontentcriteria taggedwith default tag       setlimit         list     default tag is the tag which you like to query   retrieve users by the time of postings  basemodule createquery basemodule getownershiptype       where relationshipcriteria rolevaluetypeis       basemodule getownershipobjectrole         basemodule getusercontenttype        where criteria creationdatebetween from  to      orderby criteria    orderbycreationdate order direction descending          setprojection relationshipcriteria torole            basemodule getownershipownerrole        setlimit        list     tag drilldown   compute a tag cloud for taggings which contain a given tag  usercontentcriteria usercontentcriteria      basemodule getusercontentcriteria    list keyvaluepair string  number    tagcounts      basemodule createquery basemodule gettaggingtype         where taggingcriteria targetin         usercontentcriteria taggedwithall            arrays aslist new string    web      enterprise            setprojection taggingcriteria counttags false        setlimit          list     calculate average rating for some user content  ratingcriteria ratingcriteria   basemodule getratingcriteria    relationshiptype starratingtype     basemodule getrepository   getrelationshiptype  starrating    list number  averagerating    list number     basemodule createquery  starratingtype       where ratingcriteria targetis usercontent        setprojection ratingcriteria averagerating         list     this example assumes that a rating subtype named  starrating  has been defined  the result will be a singleton list  containing one number instance   calculate a histogram of average ratings for user content  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number        basemodule createquery starratingtype         setprojection ratingcriteria averageratingbytarget           setlimit           list     the list will be implicitly ordered by the average rating with the highest rating first  so you can get the    top rated content objects by limiting the result   retrieve the authors of content which is rated high  list keyvaluepair resource  number   ratinghistogram      list keyvaluepair resource  number         basemodule createquery starratingtype        setprojection ratingcriteria averageratingbytarget          setlimit           list    set user  authors   new hashset user     for  keyvaluepair resource  number  pair  ratinghistogram          object bean   elementbeanfactory                      createbeanfor pair getkey           if  bean instanceof usercontent            usercontent usercontent    usercontent  bean          authors add usercontent getauthor                      else fetch the  author  depending on bean type           the size of the query result list is limited here to     due to duplicate authors  the result set of authors may actually be smaller than    even if    or more usercontent objects are found within the repository   calculate a histogram of votings  list keyvaluepair integer  number   histogram           basemodule createquery helpfulnesstype               setprojection votingcriteria countchoices                 list     this query gathers the occurrence counts of each different choice  assuming there is a voting subtype  helpfulness  defined  that is  it maps each different choice which occurs at least once within the repository  the key part of the keyvaluepair  an integer value  to the number of occurrences  the value part  a number instance    calculate a histogram of votings for a specific object  list keyvaluepair integer  number    histogram           basemodule createquery helpfulnesstype               where votingcriteria targetis usercontent                setprojection votingcriteria countchoices                 list     calculate of histogram of total voting counts for a given choice  list keyvaluepair resource  number   histogram        basemodule createquery helpfulnesstype               where votingcriteria choiceis                  setprojection votingcriteria countvotings                 setlimit                  list     this query gathers the total number of votings  grouped by target resource  this query limits the size of the query result to    resource count mapping pairs   retrieve user content readable to some specific user    user someuser   null    list subject  subjects   new arraylist subject       subjects addall someuser getgroups       list usercontent  result       basemodule createquery basemodule getusercontenttype           where basemodule getusercontentcriteria            readrightsfor subjects          setlimit            list     this example assumes that acl entries are attached directly to the content objects  to reduce the total number of acl entries which have to be created within the repository  an alternative would be to attach the acl entries to some container object such as a blog  note that the readrightsfor criterion does not take group membership into account  this logic is left to the application level  this means that each group the user is in has to be added explicitly to the subject set  assuming group membership implies rights inheritance   as well as the user  assuming user level acl entries are used within the application    count the number of posts of a given user    final usercontentcriteria usercontentcriteria    new usercontentcriteria basemodule  basemodule getusercontenttype       list number  counts    list number       basemodule createquery basemodule getusercontenttype           where usercontentcriteria owneris user           setprojection usercontentcriteria count           list      int count   counts get    intvalue     retrieve the latest approved posts  list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria inrole          basemodule getclassificationtargetrole            basemodule getvotingcriteria   typeis basemodule            getapprovaltype             orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list      a post is considered approved if there exists an approval relationship with the post in the target role  this example uses the inrole criterion to find the approval relationships    retrieve the latest approved posts        list usercontent  result    list usercontent       basemodule createquery basemodule getusercontenttype           where usercontentcriteria relatedtoany          basemodule getclassificationuserrole            basemodule getapprovaltype            orderby usercontentcriteria orderbycreationdate          order direction descending          setlimit            list     this query is equivalent to the previous example query but uses a different criterion to find the approval relationships  the relatedtoany criterion    
  see section for examples that demonstrate the usage of the query api  
   namepasswordverifier implementation  description passwordcardverifier   searches for an existing user resource with a passwordcard profile card and a matching password hash in the profile card s  password  property   this is the implementation class of the default  namepasswordverifier  bean in sse authentication xml  ldapnamepasswordverifier attempts to bind to a ldap directory server using the given name password combination  capconnectionauthenticator validates the domain name password combination using the  isvalidlogin method of a configured capconnection    package com coremedia sseimpl base authentication 
  authentication  a user provider  interface com coremedia sse base authentication userprovider  is responsible for validating login requests  mapping authenticated users to sse user resources  and creating a subject for the user for authorization purposes  for certain scenarios  a user provider may also support the semi automatic creation of a user resource for users who have authenticated successfully against an external authentication system  but login for the first time and therefore do not have a corresponding user resource yet   the code fragment below shows a typical login sequence calling on both the user provider for authentication and the sessionmanager to create a new usersession   create a new authentication request object and store the given credentials  the type of the authentication request and the nature of the credentials depends on the choice of the user provider implementation   defaultuserprovider only supports requests of type namepasswordauthenticationrequest invoke  authenticate on the respective user provider  if the authentication succeeds   userprovider  returns an authenticationtoken  otherwise it throws an exception retrieve the corresponding user resource representing the authenticated user from the  userprovider   in case of an external authentication system  such as a ldap directory  no such resource may exist yet and it must be created first  either by guiding users through a registration process to setup their profiles  keep the authentication token to create the session later   or automatically without user intervention  in both cases  call userprovider createuser to allow the provider to add authentication system specific information to the user profile  if the local sse repository is used for authentication  via passwordcardverifier  see below   the user resource will always exist upon successful authentication  let the  userprovider  create a subject for the authenticated user and pass the user resource  the token  and the subject to the  sessionmanager  bean in order to complete the login process         supported auth request types depend on userprovider         implementation  here  defaultuserprovider     namepasswordauthenticationrequest request          new namepasswordauthenticationrequest name  password        authenticationtoken token   userprovider authenticate request        user user   userprovider getuser request  token       if  user    null             authentication successful  but no user resource yet           in this case we could present a registration dialog or          transparently create the user resource           by calling userprovider createuser                             assumption  user    null exists     subject subject   userprovider getsubject token  user        usersession session        sessionmanager createsession user  token  subject    
  examples of user provider configurations  authentication against a cms content server  authentication against a cms contentserver requires name  password and domain information therefore you need the following configuration steps to enable this kind of authentication   first  configure a cms aware namepassworddomainverifier  the capconnectionauthenticator  the verifier will validate the login data via the unified api connection  which is given via the property  connection           bean id  namepasswordverifier               class  com coremedia sseimpl base authentication                     capconnectionauthenticator            property name  connection  ref  connection            bean    next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    authentication against an ldap directory server  first  configure a name and password verifier and configure an ldap name   password verifier  example        bean id  namepasswordverifier             class  com coremedia sseimpl base authentication                   ldapnamepasswordverifier          property name  host  value  ldap yourcompany com           property name  protocol  value  ldap           property name  port  value                 property name  dnprefix  value  uid             property name  dnsuffix                   value   ou users dc yourcompany dc com            property name  requestconcurrentbind  value  false          bean    see spring sse sse authentication example xml for detailed documentation of the available properties   next  set this verifier as the default user provider s strategy  spring configuration   a bean defined with id  namepasswordverifier  will override the default verifier and will be injected into the default user provider automatically  see framework spring sse sse authentication xml and spring sse sse authentication example xml    
  session management  the session manager and user sessions are the main elements of social software session management   session manager  the session manager  interface com coremedia sse base session sessionmanager   available in the application context as bean  sessionmanager   is responsible for creating user sessions  it provides information on   the number of users online   getnumberofonlineusers  and provides online users queries  the number of open sessions   getnumberofopensessions  and provides open session queries  and information on the sessions of a given user   in order to create a new user session  use the session manager method  createsession  see the authentication example in the previous section    user session  the user session  interface com coremedia sse base session usersession  represents a session a logged in user has with the social software system  it holds a reference to the user resource   session creation  the session manager is responsible for creating new sessions  see above    session termination  user sessions can be terminated   closed by calling  close on them  note that this does not close or invalidate any httpsession   cascading session termination  usually  it is required that user sessions are closed when the associate httpsession is closed or invalidated  two options are available in order to achieve this   if you are using spring mvc and if you are using requestattributes setattribute and  getattribute to store and retrieve user sessions as a request or session scope attribute value  then register a com coremedia sse base session usersessiondestructioncallback  the wrapped user session will be closed when the scope is destroyed  the request is completed or the session terminates  respectively     example   requestattributes attributes   new servletrequestattributes request     attributes setattribute    sessionattributename    usersession  requestattributes scope global session    attributes registerdestructioncallback    sessionattributename    new usersessiondestructioncallback usersession     requestattributes scope global session    if you are not using spring mvc  you may use the simple servlet api fallback  when storing the user session in the http session via calling  setattribute  which typically happens just once per session   you must first decorate   wrap the plain usersession in a com coremedia sse base session usersessionbindinglistenerdecorator  which implements the usersession interface   the decorator implements the httpsessionbindinglistener interface and will automatically close the user session when the attribute is manually unbound from the httpsession or the httpsession is closed  note that this is only an option when you are not using the above mentioned spring mvc and scoped attributes   request local access to the current user session  most applications require access to the active user session while servicing an http request  for this common purpose  the sse default configuration provides the user session context  it is available in the application context as a bean with name  usersessioncontext  and implements the com coremedia sse base session usersessioncontext interface  the implementation class configured by default is com coremedia sse web servletusersessioncontext  which should be appropriate for many applications  the following descriptions assumes the use of this implementation  although you may replace the bean with your own implementation   inject the servletusersessioncontext   usersessioncontext   bean into your login controller  which creates the user session   and store the user session reference in the httpsession by calling servletusersessioncontext storeinhttpsession add the com coremedia sse web servletusersessioncontextinterceptor to your handler chain in order to make the user session available to the servletusersessioncontext while the request is being handled during request handler execution  the current user session will now be available via usersessioncontext getusersession  inject the  usersessioncontext  bean where access to the session is required  inject the servletusersessioncontext   usersessioncontext   bean into your logout controller  which calls usersession close   and remove the user session reference from the httpsession by calling servletusersessioncontext removefromhttpsession  if the  usersessioncontext  bean is setup correctly  the current user information will be added to the change log entry whenever a change is made to a sse element while the request is being handled  this information is currently not accessible via the sse api  
   version sse      end of life   os  solaris    sparc c          bit java  solaris    x   c     bit java    linux red hat advanced server     c     bit java  linux suse linux enterprise server    c     bit java    ibm aix     c     bit java      windows server      c     bit java  windows server       browser management views  internet explorer     p internet explorer    windows xp c internet explorer    windows vista c   firefox      windows xp c firefox      windows vista c firefox      linux c firefox      windows xp  firefox      windows vista  firefox      linux  java      update    c database  oracle  i  p oracle   g r  c oracle   g    db         db         ms sql      server c ms sql      server    postgresql       c postgresql      servlet container  tomcat     c   bea wl    c   ibm websphere     c   sun application server        jboss application server      search engine  fast     s fast       
  the sse is provided as a zip archive named coremedia sse  version  zip  where version is the version of the software delivered   the archive contains five directories  whose contents are described in the table below  
   directory   file contents sk userfeedback plugin files to extend the starter kit web application with end user feedback features based on social software extension functionality sse webapptemplate cae web application template containing social software extension configuration files sse editor management views for user management and approval of user generated content sse caefeeder cae feeder template containing files for feeding social software content sse tools files to extend an cae feeder or a contentserver installation  it provides tools for working on the sse repository  e g  sse destroyresources docs documentation   readme txt information to prerequisites  deployment and configuration notes html release notes information file  
  installation of coremedia sse consists of three separate installation tasks  involving the three components of the system   these installation tasks are   installing the core social software extension plus the recommendation engine installing the management views installing the social software feeder  the installation advice below assumes the following   you have already extracted this zip archive coremedia sse  version  zip into a suitable temporary directory  if you have not yet done so  please make sure that you have completed this step before proceeding  you have installed and configured your platform  database and java systems    note that additional configuration of these systems and the sse components may be required by some components  this information is given in the configuration chapter below   for installation of the social software starter kit plug in please refer to the starter kit manual  
   database certified version supported version oracle   version   g version  i   version   g  with patched jdbc driver  oracle            production    microsoft sql server   sql      server   sql      server postgresql                im  ibm db           for ibm aix  solaris  linux and windows             for ibm aix   
  installing the core components involves installing the core of the social software extension plus the recommendation engine   proceed as follows  ensure that you have an installed coremedia cms cae web application template  for more information on cae technology  see the coremedia cms administration and operations manual  copy the directory sse webapptemplate from the coremedia sse  version  zip over the web application template directory contentapplicationengine template  if you selected any cae extensions to install with the cae  you may now have duplicate libraries in contentapplication template web inf lib  you should check the contents of that directory for any duplicate jar files  the ones installed with the cae do not carry a version number while the ones from the sse archive do  of those jar files which exist both with and without a version number  delete the copies without the version number as their versions are always equal to or lower than the other ones  configure the components as described in section   in addition to the files necessary to run the social software extension  supplied files include a spring view resolver  a handler mapping and a simple controller  rootcontroller  configured in the web inf spring sse  directories  in order to present a basic start page    note that you may install the recommendation engine in other web applications  but must then ensure that the analysis is not started concurrently in different web applications  
  the management views are a web application which is included in the social software extension software distribution    to install the web application  just copy the directory sse editor into the application directory of your web application container  e g  the jakarta tomcat webapps directory   you also need to copy the jdbc driver  required by the database of the management views  to the web inf lib directory of the sse editor application   read section for the configuration of the management views   
  this section covers the required configuration for the files that coremedia sse adds to the content application engine web application   adding an sse link scheme  as an example coremedia sse adds the elementbloblinkscheme in sse linkschemes example xml  located in the web inf spring sse directory  you can remove  configure or add more customizers  
  the social software repository is the core database storage component of the coremedia sse and its database connection must be configured in the file sse properties  located in the spring sse directory   the default configuration for the social software repository is as given in the listing below   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  adjust the settings here to your particular database system   as can be seen  you must define the database type  the jdbc driver class  the connection url  the username for the connection  and its password   the database must be one of the supported databases given in the prerequisites chapter above  the appropriate value to use for the database type in the sse properties file can be taken from the table below  
  the recommendation engine consists of two parts  a batch process that performs the analysis and a service for reading recommendations from the database    while both parts are installed by default for simple setups  it is generally advisable to install the batch process part in a separate  non delivery cae when setting up a live deployment  in this scenario  the delivery caes will only contain the service part of the recommendation engine  section describes how to remove the recommendation engine from a cae   the sections below cover the configuration of the recommendation engine  
  if the recommendation engine is not desired as part of the coremedia sse setup  it can be removed as follows   remove the jar coremedia sse recommend   config jar 
  the following steps are necessary to deploy the social software extension core or the management views into ibm websphere application server     configure websphere as stated in the websphere administration operation manual       deployment to ibm websphere    remove the c p      jar from web inf lib    patch sse properties   spring sse sse properties  in coremedia sse core config jar  web inf lib    remove hibernate c p    entries from the property file  so hibernate does not use c p      this change cannot be done by customization of properties  as the properties must not be defined at all      
  you can run the social software extension in the following servlet containers    product certified version supported version tomcat      bea weblogic application server     ibm websphere application server       
  operating systems  the social software extension runs on the following operation systems   
   product certified version supported version solaris sparc     with    and    bit java   solaris x       with    bit java  red hat enterprise server     with    bit java  suse linux enterprise server     with    bit java  ibm aix    bit powerpc       with    bit java   jdk from ibm  windows server       with    bit java   
  browser  the following browsers are supported for the management views  
   product certified version supported version internet explorer    windows xp  internet explorer    windows vista  firefox      windows xp  firefox      windows vista  firefox      linux  firefox      windows xp      windows vista  linux  
   certified versions supported versions java   update    or higher update levels    
  to configure the database connection  edit the database properties in the sse properties file contained in the web inf spring sse directory  samples properties with their values are given in the code block below  the property file corresponds to the configuration of the social software core module   sse repository connection driver class org postgresql driver sse repository connection url jdbc postgresql   localhost      sse sse repository connection username sse sse repository connection password sse sse repository database type postgresql  make sure  that you have copied the jdbc driver to the web inf lib directory  
  in the supplied standard set up  users of the management views  such as editors and administrators  are authenticated against a cms content server repository via a unified api connection   the default configuration expects the content server ior to be available at http   localhost       coremedia ior    edit the objectserver properties file in the web inf spring directory and set appropriate values for the ior url  connection username  only the system user  webserver  is allowed  and connection password  you will probably also want to change the default configuration of the management jmxremote url    note that by setting up this connection  the content approval view is accessible to users which are either member of the predefined coremedia cms group  administratoren  or   editor  on the content server concerned  these groups correspond to the administrators group and general editors group  respectively   this functionality can be changed if desired  the access control is defined by setting the property accessallowedpredicate for a specific view   access control to single views is configured in each view s spring bean definition  the view definitions can be configured in the file editor managementviews xml  located in the  spring sse editor directory    you can also change configuration to use the social software repository itself with its build in user management  see section for more details about configuration of user providers users still have to be members of groups with configured names  the difference being that users and groups are stored and authenticated against the social software repository   please refer to the beandoc for further reference  look for the customizers of the navigableitems bean  defaultmanagementviewscustomizer and extendedmanagementviewscustomizer  which list the beans handling the separate views  
  a general start of coremedia sse requires starting the tomcat web application container  once the container has started  you can test the system integrity by opening the url given in the listing below  replacing  server  and  port  with the appropriate values for your system   http    servername   port  sse editor servlet console  on accessing this url  a management views login dialog is shown   you can now test the login process using a cms administrator login  assuming this configuration has been retained as set up in the standard system    if the login process displays no errors  then the system has been started correctly  
   section sse version description all         path changes due to new modular structure sse tools          added description for the sse tools  
  the social software extension comes without a concrete rating or voting type because you need to differentiate between your different kind of ratings and voting    in order to define a rating you take the following steps  define a rating type register the rating type  register the rating bean  define the rating type interface  a definition of a rating would only contain a unique name and uri and would look like this   package com coremedia sse examples rating  import com coremedia sse core annotations         relationshiptypeannotation  import com coremedia sse base model rating    relationshiptypeannotation name  starrating name      uri    http   www coremedia com      sse types                 starterkit starrating       parent   rating class      isabstract   false  public interface starrating extends rating     final static string name    starrating      register the rating type interface  register the type in your configuration file in the   spring directory  you need one property customizer for defining all your resource types and one for your relationship types    customize append id  basemodulerelationshiptypesconfig   bean  sserelationshiptypes          list            value com coremedia sse examples starrating  value       add more of your customized relationship types here             list    customize append   register the rating type bean  there is no need for your own implementation  since the starrating does not require an additional property  it is sufficient to use the ratingimpl  but you still need to configure which bean implementation should be used in your configuration file    bean name  ssebeanfactory friendship          scope  prototype            class  com coremedia sse base elementbeans ratingimpl          parent  abstractbasemodulebean     
  tab access control  per default  the approval tab is accessible to users from the predefined content server groups  administratoren   the administrators group  and  editor   the general editors  group   the default settings are stored in spring configuration files in the coremedia sse editor cms   config jar  these defaults can be overwritten by providing settings in the configuration files in  spring sse editor  a different access control can be configured in  spring sse editor editor managementviews xml  you can define which predicate determines access for the views approvalview  usercontentview and usermanagementview  the following example reduces access to the user content tab to the administrator   
  localization  adding custom messages  custom messages keys shall be added as a resource bundle com coremedia sse editor custom editor  i e  add localized resource files named editor en properties  editor de properties  etc  to the directory  web inf classes com coremedia sse editor    
  users tab customization  you can configure the user and group property columns in the main search result view of the user management tab and in the detail user or group view as described in section       presenting browsable lists  tables and tabletrees in the cae developer manual    you can customize the following table models    defaultusercolumnmodel and defaultgroupcolumnmodel   for the main search result view  shortusercolumnmodel and shortgroupcolumnmodel   for the detail user or group view    these table models are defined in editor columns xml  please refer to beandoc for more information about the usage of the provided column models    to add a customized column to the editor view  you should add a column bean definition to  spring editor columns xml  you can extend an existing column or define you own bean column type  you can use the following beans   which all extend com coremedia editing table abstractbeancolumn   for extension   com coremedia sse editor table subjectcolumn  for subject properties  com coremedia sse editor table groupcolumn for group properties  com coremedia sse editor table usercolumn for user properties   if you define your own bean column type you should implement at least the object getdata object object  method  where the object is of the type of your bean  and implement the java lang class gettype   method of the com coremedia editing table beancolumn interface  the property name of your column bean definition is the key by which you get the column data on the jsp page    the views userlist defaulttable jsp and grouplist defaulttable jsp represent defaultusercolumnmodel and defaultgroupcolumnmodel respectively whereas userlist shorttable jsp and grouplist shorttable jsp represent shortusercolumnmodel and shortgroupcolumnmodel respectively    for example  the bean emailaddresscolumn can be defined as     bean id  emailaddresscolumn    class  com coremedia sse editor table vcardemailaddresscolumn      property name  name  value  emailaddress      bean    and implemented in com coremedia sse editor table vcardemailaddresscolumn    public class vcardemailaddresscolumn extends subjectcolumn    public vcardemailaddresscolumn         super          public class gettype         return string class        protected object getdata subject subject        vcard vcard    vcard  subject getprofile   getcard  vcard        return vcard getemailaddress            on the jsp page  you get the emailaddresscolumn data through the identifier   row valuesbycolumn emailaddress     
  default  userprovider  and  namepasswordverifier  beans are configured in sse authentication xml  if required  each of these may be replaced in a custom configuration file  see spring sse sse authentication example xml for sample declarations of the different namepasswordverifier implementations   a custom userprovider implementation may be useful to integrate external authentication systems which require credentials other than a name and a password  to customize the  createuser implementation  e g  to create certain profile cards with information about the user identity in the external system   or to add custom principals to the subject returned by  getsubject  
  user provider configuration  define one userprovider instance per authentication system you would like to integrate  the default base model user provider com coremedia sseimpl base authentication defaultuserprovider authenticates users via a configurable namepasswordverifier instance and uses the request name as the user resource s name property value when you call userprovider createuser  for each defaultuserprovider implementation  configure a suitable  namepasswordverifier  bean  interface com coremedia sse base authentication namepasswordverifier   the following verifier types are predefined  
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms   replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  there are two different strategies that can be used for approval  the default is that a history of approvals is kept  historyapprovalstrategy   so every approval made can later be viewed  the replacingapprovalstrategy always replaces the current approval  internally  all previous approvals would be deleted   you can change the approval strategy to the one keeping only one approval by adding the following to a custom spring configuration file like web inf spring sse editor editor services xml      bean id  approvalstrategy     class  com coremedia sse base commands strategies           replacingapprovalstrategy        property name  basemodule  ref  basemodule        bean  
  performance properties  the remaining properties in the sse flow properties file are used for tuning performance and result quality for the recommendation engine   the properties are shown in the code block below    recommend flow user small rating count    recommend flow user moderate correlation count     recommend flow user large rating count        recommend flow user half correlation count   recommend flow user max similar       recommend flow item small rating count    recommend flow item moderate correlation count     recommend flow item large rating count        recommend flow item half correlation count   recommend flow item max similar      recommend flow max recommendations      recommend flow filepool buckets    recommend flow filepool buffer        recommend flow execution nthreads     increasing the   count properties improves the quality of the generated recommendations at the cost of a prolonged running time   there is one exception to this rule  see below    the running time correlates roughly linearly to the sum of the following factors    number of ratings     value of recommend flow user small rating count   number of users     value of recommend flow user moderate correlation count   number of ratings     value of recommend flow item small rating count   number of items     value of recommend flow item moderate correlation count   the calculation running time is thus generally linear to the number of ratings  this is achieved by using a probabilistic algorithm for treating users who rate very often and for items that are very often rated   note that the properties recommend flow user large rating count and recommend flow item large rating count also influence the running time by disallowing the evaluation of users who rated more often than the parameter value and items that received more ratings than the specified parameter value  however  not only are both of these occurrences rare  but the contribution of the underlying main memory algorithm to the total running time is also normally negligible  the   large   parameters are thus not listed above and are provided for tuning in exceptional cases only   the   half correlation count properties do not influence the running time  instead  they determine how strongly a high number of commonly rated items or commonly rating users improves the correlation between two users or items  a low number indicates that a high similarity can be achieved by a precise agreement on only a few data points   the recommend flow user max similar property defines the maximum number of users similar to the current user  which are used for generating recommendations for the current user  this number influences the recommendations calculated  the property recommend flow item max similar defines the maximum number of items calculated as similar to one item   the recommend flow max recommendations properties determines the maximum number of recommendations generated and stored for a single user   the recommend flow filepool   properties are used to configure how intermediate results of the recommendation engine are stored on disk  recommend flow filepool buckets specifies the number of separate files used  this is relevant in case the amount of data that is to be stored is larger than the maximum allowed file size  recommend flow filepool buffer determines the size of the i o buffer used when reading from and writing to files   recommend flow execution nthreads sets the maximum number of threads that are used to compute recommendations  the effect of using multiple threads is determined by the number and load of the available processors as well as the number of files used to implement pools as determined by recommend flow filepool buckets   the more files there are the more data can be read and written in parallel  but if there are too many files  the i o overhead outweighs the gains of concurrent processing   the properties are described in more detail in the table below  
   name of the property value default description recommend flow user small rating count     maximum number of ratings for a single item for which all possible user user correlations are derived for that item recommend flow user moderate correlation count      maximum number of user user correlations for a single user that should be derived by probabilistic means from items that exceed that small rating count recommend flow user large rating count         maximum number of ratings for a single item for which the probabilistic generation of user user correlations is attempted recommend flow user half correlation count    minimum number of commonly rated items required in order to correlate users at     of maximum correlation recommend flow item small rating count     maximum number of ratings by a single user for which all possible item item correlations are derived for that user recommend flow item moderate correlation count      maximum number of item item correlations for a single item that should be derived by probabilistic means from users that rated more often than the small rating count recommend flow item large rating count        maximum number of ratings by a single user for which the the probabilistic generation of item item correlations is attempted recommend flow item half correlation count    minimum number of commonly rating users required in order to correlate items at     of maximum correlation recommend flow max recommendations     maximum number of recommendations generated and stored per user  recommend flow filepool buckets     number of files used to represent intermediate  temporary results required by the recommendation engine  recommend flow execution nthreads    maximum number of threads used when computing recommendations   
  the social software feeder requires an installed cae feeder template  that is part of the scope of delivery of the coremedia cms  for more information on cae feeder technology  in particular the database and search engine configuration  see the the coremedia cms administration and operations manual   to install the social software feeder  proceed as follows  ensure that you have an installed cae feeder template  as noted above  copy the directory sse caefeeder from your unpacked coremedia sse zip archive over the directory of the cae feeder template  read section for the configuration of the social software feeder  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
   bean name declaring file basemodule sse basemodule xml   sessionmanager sse sessions xml   userprovider spring sse sse authentication xml   searchengine sse xml   recommendationservice sse recommend xml  
  taking advantage of rome modules  in the current release  com coremedia feeds is implemented based on rome  rome has an extension mechanism called  modules   which can be used by feed item data providers  in order to extend generated feed items with rome modules  override  feeditemdataprovider getextension     feedcontext context  object item      class t  extensiontype  object extension    and fill the properties of the extension object  return the extension object  if the extension is supported by your provider implementation  otherwise  return null   feed meta data may be extended in a similar way  call feedmetadata setextensionprovider to set the extension provider  which has a method with the same contract as  getextension   make the extension known to the feedgeneratorimpl by registering a feedextensiondescriptor with the  feedextensionsregistration  bean in spring sse sse services example xml  
  implementing a custom feeditemdataprovider  the preceding example relies on a feeditemdataprovider implementation for any bean in the latestcontent item list  an implementation for usercontent beans is provided with the social software extension  if the default implementation does not suit your needs  or other types of beans have to be rendered as feed entries  all you need is a custom implementation of com coremedia feeds feeditemdataprovider interface  or subclass of abstractfeeditemdataprovider    an minimal feed item data provider for cmteasable beans may look like this      inject linkformatter  publicationservice     set supportedtype property to     com coremedia starterkit common contentbeans base cmteasable  public class teasabledataprovider extends               abstractfeeditemdataprovider        accessors not shown   private publicationservice publicationservice     private cmteasable getteasable item        return  cmteasable  item         public string geturi feedcontext context  object item        return getteasable item  getcontent   getid           public string getauthorname feedcontext context           object item        return getteasable item  getcontent   getmodifier                                getname           public string gettitle feedcontext context  object item        return getteasable item  getteasertitle           public calendar getpublisheddate feedcontext context                    object item        content content   getteasable item  getcontent        return publicationservice ispublished content        publicationservice getpublicationdate content    null         public calendar getmodificationdate feedcontext context                     object item        return getteasable item  getcontent   getmodificationdate           public feeditemcontent getcontent feedcontext context                            object item        return convertrichtexttoxhtmlcontent               getteasable item  getteasertext            in the default configuration  custom feed item data providers are configured in spring sse sse services xml  
  if you intend to deploy the social software extension management views or a cae sse web application to bea weblogic server  please follow the application container specific deployment instructions described in the cae chapter of the administration and operation manual  
  sending emails to users is a common use case in nowadays web applications  the social software extension provides an easy mechanism to send emails to users  to send an email you can use the following code snippet   map string  object  map   new hashmap string  object     map put  username   user getname     map put  greeting    hello    mailservice send user   mail   map  locale german    in order to finally dispatch the mail the mailservice takes the following steps  determine the user s email address  look up a  localized messagetemplate by the given name   this will usually be a mailmessagetemplate  create a message instance from the messagetemplate and evaluate the template text with the given map  dispatch the message with the help of a messagetransport   in the first step the user s email address is resolved by consulting addressmapping  the second will look up a localized mailmessagetemplate which could look like this   mailmessagetemplate template   new mailmessagetemplate    template setsubject  mail from coremedia    template setfrom  mail coremedia com    template settext   greeting  username  n nyou have mail      in the third step the template s text  property will be evaluated using the passed in map  in the fourth step the messagetemplate s createmessage is called  the resulting message is passed to the mailservice s messagetransport in the fifth step  which dispatches the message   setting up the mail service  an example configuration for the mail service can be found in the file config spring sse sse mail example xml      bean id  mailtransport  class  com coremedia sseimpl email mailtransport        description        the mailtransport  knows how to deliver messages        description       property name  mailsender          bean class  org springframework mail javamail javamailsenderimpl            property name  host  value  smtp coremedia com            bean        property      bean        bean id  cmstemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email cmsmailmessagetemplatefinder        description        a template finder that looks up messagetemplates from the cms        the provided basepath has to point to a cms folder        description       property name  basepath  value   mail         property name  capconnection  ref  capconnection        bean      bean id  resourcebundletemplatefinder  parent  defaulttemplateevaluator     class  com coremedia sseimpl email messagesourcemailtemplatefinder        description        a template finder that looks up messagetemplates from a given resourcebundle        you may add your own messagesource        description       property name  messagesource          bean class  org springframework context support resourcebundlemessagesource            property name  basenames              description              a list of resourcebundles to search for messages              be aware that the search order is important              first come wins              description             list               value com coremedia sse example mail  value              list            property          bean        property      bean      bean id  mailservice  class  com coremedia sse messaging defaultmessageservice        description        the mail service bean        description       property name  messagetransport  ref  mailtransport         property       property name  addressmapping          description          determines from where a user s email address should be retrieved          description         bean class  com coremedia sse messaging defaultaddressmapping            property name  basemodule  ref  basemodule            bean        property       property name  templatefinder  ref  cmstemplatefinder        bean      bean id  defaulttemplateevaluator  abstract  true        property name  templateevaluator  ref  templateevaluator        bean      bean id  templateevaluator  class  com coremedia sseimpl util velocitytemplateevaluator        description        the default evaluator for messagetemplates  is responsible for rendering the message body        velocity is used as the templating language        description       property name  velocityengine  ref  velocityengine        bean       bean id  velocityengine  class  org springframework ui velocity velocityenginefactorybean         beans   in order to get up on your feet quickly you need to do two things  tell the mail service where to find a user s email address and where to find the mail templates   step    retrieving a user s address  you may use the interface addressmapping to determine a user s address  the default implementation addressmappingimpl will look up the emailaddress property on the user s vcard  you can configure which property to look up on which profilecard    bean id  addressmapping  class  com coremedia sse messaging defaultaddressmapping      description      the addressmapping is responsible for mapping user s to addresses and vice versa      the properties below show the default configuration  if you re fine with these you can     use the defaultaddressmapping unconfigured       description      property name  basemodule  ref  basemodule       property name  propertyname  value  emailaddress       property name  profilecardtype        util property path path  basemodule vcardtype        property    bean   to customize the defaultaddressmapping use a different propertyname and profilecardtype   step    finding a message template  you can either store your mail templates in resourcebundle and access them via messagesourcemailtemplatefinder or retrieve them via an uapi connection by using the cmsmailmessagetemplatefinder  in both cases you have to adhere to a naming scheme  mail templates are looked up by name  in the former variant the template name corresponds to a message key  when using the latter variant the template name must match a cms content name    when using the resourcebundle variant you should define some property files like this    mail properties mail subject hello  mail from mail example coremedia com mail text  greeting  username  ni m sending some mail  i can even use velocity templates if i like to     mail de properties mail subject hallo  mail from mail example coremedia com mail text  greeting  username  nich versende eine mail  i kann sogar velocity templates benutzen   now when you look up the mail template named  mail  the templatefinder will look through the resourcebundles and retrieve a localized version of your mail template   storing mail templates in the cms works in a similar fashion  decide on a path where to store your templates  i e    mail   now create various documents like  mail    mail de    mail fr   the documents should be of the following type      doctype name  mail        stringproperty name  subject  length               stringproperty name  from  length               blobproperty name  text  mimetype  text plain            doctype   step    creating the message instance  the mailservice passes the address found by consulting the addressmapping and the map to the messagetemplate once it has been found  the templatefinder also sets a templateevaluator on the messagetemplate to be used for evaluating the text body of the message   mailmessagetemplate template   new mailmessagetemplate    map map   new hashmap    map put  username   user getname     map put  greeting    hello    message msg   template createmessage  lisa simpsons com   map    in the examples above both template finders are configured with a default templateevaluator  a templateevaluator is responsible for evaluating the variables in the messagetemplate s text property and return the rendered string  usually you would want to pass variables like username  date  url or other aspects that need to be set dynamically to the messagetemplate  the default evaluator supplied with the social software extension is the velocitytemplateevaluator which uses the powerful velocity templating engine  if you would like to use a different templating engine or create your own  implement the templateevaluator interface  it s up to you if you even want to use a templateevaluator or rather implement the evaluation logic in your messagetemplate implementation  the templateevaluator interface is only provided for convenience  when using the upper configuration for instance msg gettext   would be   hello lisa  i m sending some mail  i can even use velocity templates if i like to   step    dispatching the message  once your message instance has been created  the mailservice passes it to it s messagetransport  the sole responsibility of a messagetransport is to send out the message  it knows about a message s protocol  in case of an email the messagetransport would open an smtp connection etc  your own implementation could send out messages via sms or relay them to one of the many social networks    
  sending mail is easy peasy like one two three  
  the sse tools provides some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources   
  custom xml grammars used in sse element properties must be registered via spring  do this according to the following example  
  the xsd files must be placed in the classpath in package baseurl  
  you can use the seekandwork tool to  work  on a defined set of resources including dependent resources  the tool consists of two parts  first  a http interface which is integrated into the sse management views  and second command line tools which are using this interface   the http interface consists of a spring controller and a couple of spring beans which are described below  the command line is not part of the management views  but could be installed with a cae feeder  or content server  the seekandwork tool needs a specific  worker  defined  you might want  to develop your own worker  or using the default implementation  defaultelementworker  with a custom spring configuration  
  the seekandwork tool is customizable with the common spring framework mechanisms  the tool consists of the following central parts   a controller representing the http interface and accepting http post calls  this controller uses an elementworker which does the work  the elementworker is pluggable  thus you may provide your own elementworker implementation an elementworker implementation  defaultelementworker  which queries the repository for a defined set of resources and instantiates all required beans   it executes a plugable command with a defined argument  seekandworkonelementscommandarg   the query  created by the defaultelementworker  may be extended by application specific seekfilter implementations  some default implementations already exists  they are described below    a set of command classes which are used for collecting resources  their relationships  and their dependent resources     the following subsections describe the components of that architecture in more detail  
  the elementworkercontroller provides the http interface of the seekandwork tool  it is integrated into the management views and uses simple http authentication  the tool is accessible by users which are in the group of cms administrators  the http interface is usually used by the command line tools explained in section  the main part of the work is delegated to an elementworker  the elementworker might be injected  property  elementworker of bean  elementworkercontroller  or an http parameter  worker  containing an elementworker bean name might be defined    the result of the elementworker is used by elementworkercontroller to create a model which is rendered by the cae rendering engine    the controller is accessible over the the following path inside the management views application  servlet tools seekandwork  for example  http   localhost      sse editor servlet tools seekandwork  
  the defaultelementworker is an implementation of the class elementworker  it creates a query for a defined resource type  extends this query  creates a defined commandargument which is passed to an injected command  and finally creates a resultobject which is passed back to the http interface  the injected command  property  seekandworkonelementscommand  needs to accept the class seekandworkonelementscommandarg as a command argument  commands accepting seekandworkonelementscommandarg will further be called seekandwork commands  
  the defaultelementworker implementation works on a set of elements  the initial resources are collected by creating a query for a resourcetype defined by the http parameter  resource type  the bean property  defaultqueryresourcetype is used if no resource type parameter is defined  the default is the resource element type  the root of all resource types    the created query is then extended by calling the configured seekfilter with the query  a list of default filters might be set with setdefaultseekfilter    additionally filter bean names provided as  filter  http request parameters are used to receive seekfilter beans from the spring application context for extending the initial query   
  the following pre built filter beans exists   deletionstatefilter   this filter ensures that only elements which are marked as deleted are queried createdbeforefilter   this filter looks for a request parameter  created before  containing a date and adds a criterion for all elements created before that date to the query modifiedbeforefilter   this filter looks for a  modified before  request parameter containing a date and adds a criterion for all elements modified before that date to the query deletedbeforefilter   this filter looks for a  deleted before  request parameter containing a date and adds a criterion for all elements deleted before that date to the query limitfilter   this filter limits the query to the number of elements provided as request parameter  limit    all filter classes handling dates are using a custom dateformater which can be injected  property  dateformat   alternatively  you can provide a string that defines a dateformatpattern  property  dateformatpattern  as required by the class java text simpledateformat  the default pattern is the iso      dateformat   yyyy mm dd   for example               
  as a commandargument the class seekandworkonelementscommandarg is used  it takes the collected resources coming from the executed query  a list of cascadingresources  see the description below  and a simulate property  the list of cascadingrules is created by receiving the cascadingrules defined with the http request parameters  cascading rule  from the spring application context  additionally  the configured defaultcascadingrules set with setdefaultcascadingdestroyrules list  are also used   
  seekandwork commands can be divided into two parts    the first handles the collection  seeking  of resources and relationships  the second part is working on the collected resources    a composite command seekandworkonelementscommand exists which allows both parts to work within the same transaction  the seekandworkonelementscommand could be used in conjunction with the elementworker  collector commands should implement the abstractelementcollectorcommand  worker commands the abstractelementworkercommand   the following default implementations exist    the elementcollectorcommand  which uses cascadingrules for collecting elements  the destroyelementscommand  destroys the collected elements from the database  
  the main job of the elementcollectorcommand is to collect resources and relationships  it uses cascadingrules to collect dependent resources of the set of resources given with the seekandworkonelementscommandarg  it looks  recursivly  at all relationships and dependent resources and adds those resources and relations which matches the defined resourcetypes and relationshiptypes of the cascadingrule  you can find a detailed description of the algorithm used to collect the elements in the javadoc of the elementcollectorcommand  
  the cascadingrules working recursivly through all dependent resources of a resource  therefore you must handle them with care   
  a set of default cascadingrules is defined in the file sse tools example xml in your management views web application  as mentioned before the cascadingrules are collected and instantiated by the defaultelementworker  the following rules exists  
  the destroyelementscommand is used by the destroy tool to finally delete collected resources and relationships from the database  
  the seekandwork tool has different configuration hooks  this section summarizes the configuration possibilities   the elementworkercontroller is the main entry point  you might inject different elementworker implementations or use a request parameter  worker  to configure the elementworker bean which is executed   one implementation of elementworker is the defaultelementworker  you may define different configured defaultelementworker beans in your application context in order to do different jobs  the elementworker for the destroy tool looks like the following  for example   
  the destroy tool is derived from the seekandwork tool  the tool consists of spring configuration and a specific abstractelementworkercommand implementation which destroys collected elements    the example above shows a part of the specific configuration  it shows an defaultelementworker configuration which consists of the following properties beans    defaultdestroyfilters   the bean defaultdestroyfilters is a list containing the above described default filters  deletionstatefilter  createdbeforefilter  modifiedbeforefilter  deletedbeforefilter  limitfilter   seekanddestroyelementscommand   a custom configured seekandworkonelementscommand bean which looks like the following definition     
  be aware that currently the export functionality of the destroytool is not yet implement  the destroyed elements won t be exported but deleted directly from database  it is recommend to make a database backup before running this tool  
  there exist various request parameters which are interpreted by different classes  the main interpreters are   elementworkercontroller   abstractelementworker  seekfilter classes   
   bean name description profiledetailcascadingrule this cascadingrule defines a rule for working on the roles of profildetail relations that are subject and profilecard  containmentcascadingrule this cascadingrule defines a rule for working on the roles of containment relations  attachmentcascadingrule this cascadingrule defines a rule for working on media resource or usercontent resources for attachment relations  ownershipcascadingrule this cascadingrule defines a rule for working on user and manageable resources for ownership relations  classificationcascadingrule this cascadingrule defines a rule for working on the roles classification relations  might be useful to delete destroy all ratings tags votings of a deleted user  threadcascadingrule this cascadingrule defines a rule for working on the roles for thread relations  might be useful if the threadroot is deleted and all subsequent comments should be deleted destroyed to   
  seekfilters are used by the defaultelementworker to extend the created query  seekandwork commands are used to do the work in a transaction context  they use a seekandworkonelementscommandarg as data bag  a default implementation is the seekandworkonelementscommand  which mainly connects an abstractelementcollectorcommand and an abstractelementworkercommand   
  it contains the default elementcollectorcommand and a custom abstractelementworkercommand which destroys the collected resources and relationships   the other properties  repository  defaultqueryresourcetype  of the example bean are self explanatory  
   class parameter description elementworkercontroller worker the worker which should be executed  abstractelementworker defaultelementworker resource type the resourcetype for which the initial query should be created  limitfilter limit limit for setting a limit at the query createdbeforefilter created before creates a criterion for all elements created before the given date to the query modifiedbeforefilter modified before creates a criterion for all elements modified before the given date to the query deletedbeforefilter deleted before creates a criterion for all elements deleted before that date to the query  abstractelementworker defaultelementworker filter instantiates the provided bean names and filters the query with this beans abstractelementworker defaultelementworker cascading rule instantiates the provided bean names and put them into the command args abstractelementworker defaultelementworker simulate set the simulate property at the command arg  
  the seekandwork command line tool is the interface to the above described seekandwork http interface  some properties might be configured in the property configuration file  config sse tools seekandwork  for this tool  it is advisable that at least the password is configured in a property file with restrictive access rights     usage  bin cm sse seekandwork   a   parameter  custom parameter            you may define custom                                              parameters which are added                                               to the http request as parameter                                                the different parameter key value                                               pairs are comma separated  key                                               and value are separated by      for                                               example                                                 parameter key  val  key  val    r   cascading rule  cascading rule name    comma seperated list of                                              cascading rule bean names   c  created before date                     destroy resources created                                              before the provided date   d  deleted before date                     destroy resources deleted                                              before the provided date   f   filter  filter name                    comma seperated list of                                              filter spring bean names    l   limit  query limit                     number of resources initially                                              queried   m  modified before date                    destroy resources modified                                              before the provided date   n                                          simulate destruction  nothing                                              will be destroyed for real    ne                                         skip export of resources to                                              be destroyed   p   password  password                     password for login   t   resourcetype  resource type            resource type for resources                                              to be destroyed   u   user  user name                        user for login  required    w   worker  worker                         worker bean which should be                                              executed   z   url  url                               url to destroy controller 
   parameter description  a    parameter you may define custom parameters which are added to the http request as parameter  the different parameter key value pairs are comma separated  key and value are separated by      for example   parameter key  val  key  val   r    cascading rule a comma seperated list of cascading rule bean names  c destroy resources created before the provided date  default date pattern is  yyyy mm dd   this can be configured at the datefilterbeans   d destroy resources deleted before the provided date  the date pattern is the same as for parameter   c   m destroy resources modified before the provided date  the date pattern is the same as for parameter   m   f    filter comma seperated list of filter spring bean names  which are interpreted by the defaultelementworker  l   limit number of resources initially queried    n simulate destruction  nothing will be destroyed for real   ne skip the export of resources  currently there is no export   p    password password for login  t    resourcetype the initial resource type  the default  if nothing else is configured  is the resource element type  the root of all resource types   u    user user for login   w    worker worker bean which should be executed    z    url url to destroy controller  for example  http   somehost      sse editor servlet tools seekandwork    
  the destroy tool command line interface shares the same command line arguments as the seekandwork command line  execpt the worker argument  the destroy command line interface uses a specific worker  the destroyelementworker bean  the property file for configuring the tool is located in  config sse tools destroyresources  
  this new predicate allows access for the standard groups editor and administrator as well as the custom group customer  
  the property  accessallowedpredicate  defines the roles that a user must hold in order to access the view  any person accessing a management view must hold at least one of the roles  predicates can be defined in  spring sse editor editor authorization xml  e g  you could define a new custom predicate like this  
  the sse tools providing some common administrative tools which solve use cases like  destroy resources  or  seek and work on resources    prerequisites  a content server or cae feeder installation an installed social software management views web application  note  both installations might be on different machines  but they need tcp ip connectability  configuration and deployment       extract  sse tools from the archive       copy the result content over a content server or cae feeder installation      change the username password for login in as administrator inside the management views in the corresponding property file of the sse tool  for example for the sse destroyresources tool change the following property file   install dir  config sse tools destroyresources destroyresources properties  further steps  now the tools are ready to use  for further details see the command line help for each command or consult the section  
  example of destroying deleted users including there profilecards and generated content  in order to destroy deleted users including there profile cards and the genereated content you need to define no special filters  but two additional cascadingrules  profiledetailcascadingrule and ownershipcascadingrule  see section for details  and of course we need the resource type name  user  the password is expected to be defined in the property file of the tool    bin cm sse destroyresources  t user  u admin  p admin  r profiledetailcascadingrule ownershipcascadingrule   z http   hostname       sse editor servlet tools seekandwork 
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
