  the coremedia editor offers a lot of formatting options in the richtext pane  nevertheless  you might want to have your own formatting options ready to hand  for this purpose  it is possible to extend the existing options and to add new ones  to do so  three steps are sufficient   extend the file properties css coremedia richtext     css to your needs   the coremedia editor uses the css file defined in the editor richtext css location property in the editor properties file  be sure to change the css file actually used by your editor  localize the new styles and style groups in a bundle file  optional   add the new style groups to your content editor   these steps will be explained in the subsequent paragraphs  the formatted inline text or block element will be marked as follows   inline text inline text will be embedded in the  span  tag with the attribute class containing the format option  example   span class  font size      my big text  span   block element block elements will have an additional class attribute containing the format information  example   p class  background color  black  my test paragraph  p   
  the aim of the coremedia richtext     css file is twofold  first  it defines the look of the xml elements in the richtext pane according to the css definitions  see http   www w c org   but secondly it is used as the definition of the possible attributes   
  due to limitations in the swing css class use only lower case letters for the names of style groups and style classes   
  simply add the new stylegroup to the coremedia richtext     css file following the naming pattern given above  the following example adds a new style group inlineformat with the two style classes code and glossary to the css file  text marked as code will be displayed with red background  text marked as glossary with blue background     inlineformat  code   background color  red       inlineformat  glossary   background color  blue      define new style classes   the style classes are defined as described above  simply add an entry following the scheme     limitedelement   stylegroupname    styleclassname     layout definition     
  if you have defined your style groups you need to add them to the coremedia editor  the right place is the editor xml file using the attribute addstylesheetgroups of the property element  the following example shows how to add your newly defined style group inlineformat and the predefined style group list item to the property richtext of the  article  document  
  coremedia sci supports unicode  you can use unicode characters in the following places     in xml and stringproperties   in resource names   in coremedia user names and passwords   in coremedia group names  the extent to which unicode actually can be utilized depends on java virtual machine  database  and operating system  
  with the help of links  the visitor to your website can call up additional information to the content  you have the possibility of linking to internal documents within coremedia sci or to external websites  
            if desired  enter attributes into the fields of the dialog     click       to open the file chooser dialog     select a document in the file chooser dialog     click on  choose  to create the internal link     
  the dialog box for external links in richtext fields has the same structure as the dialog box for internal links  the only difference is the link field  no dialog box exists  instead you can enter the url of the link target directly           enter the favored values in the fields     apply with  ok     the dialog box closes  the marked text is colored blue and shown underlined  on mouse over the target of the link is shown in the status bar   
  ldap enhancement  with coremedia sci     it is possible to connect one or more ldap servers to a coremedia system and so to streamline user administration  this is possible in production as well as live environments   the coremedia system has reading access to the ldap server  so changes in coremedia s user administration are not transferred to the ldap server  
     menu item   sub item   functions   repeat      repeats the last action  either a publication or a publication preview  after you have fixed possible errors    cancel      cancels a publication from the queue    prioritize      prioritizes the execution of the selected publication     
  you can use two ways to approve and publish resources using the coremedia sci  direct publication or workflow supported publication  the direct publication is more intuitive to use  but not as flexible as the workflow publication  
  the order in which publications are executed depends on the assigned priority  publications started manually in the coremedia editor  are given a higher priority than importer publications or other automated publications  publications of equal priority are queued on a first come first serve basis  if necessary  you can move your publication at the top of the queue  nevertheless  the current publication will not be aborted     proceed as follows     select window publisher window      the publisher window opens up  
  a publication synchronizes the state of the live server with the state of the content management server  all actions such as setting up new versions  deleting  moving or renaming files  withdrawing content from the live site require a publication to make the changes appear on the live server   we make a distinction between the publication of structural and of content changes     content related changes are changes in document versions such as a newly inserted image  modifed links  text etc    structure related changes are moving  renaming  withdrawing or deleting of resources  so it becomes possible to publish structural changes separately from latest and approved document versions   for every publication a number of changes is aggregated in a change set  this change set is normally composed in the course of a publication workflow  the administrator and other users with appropriately configured editors can also execute a direct publication  which provides a simpler  although less flexible means of creating a change set   
  in some cases  users are not required to use workflows  you can completely hide all references to the workflow component in the editor by setting the attribute enableworkflow of the  editor  element  
      attribute    description    enableworkflow    if  false   removes all references to the workflow component from the gui and ensures that no connection to the workflow server is established  default is  true   
      attribute    description    enabledirectpublication    if  true   ensures that the buttons for approval  disapproval  publication  and publication preview are displayed as buttons and included as menu items in all relevant windows for all users  default is  false   
      attribute    description    extenddefault    if this attribute is set  true  the standard paste configuration will be extended by the new configuration  if it s set  false  the standard configuration will be replaced by the new configuration  default is  true         
   transformelement    child element   attribute     parent element   pastetransformation    use this element to match the html element from the clipboard with the element of the coremedia richtext     dtd to insert  
      attribute    description    name    the name of the html element which should be transformed     to    the name of the element into which the html element should be transformed which will be inserted into the richtext pane  if to is not set  the name of the html element will be used   please notice  that only elements according to the coremedia richtext     dtd are allowed        
   ignoreelement    child element     parent element   pastetransformation    use this element to define html elements which should not be inserted into the richtext pane   
      attribute    description    name    name of the html element to ignore     recursive     false   default   only the element defined in name will be ignored     true   the element defined in name and all contained elements will be recursively be ignored        
   attribute    parent element   transformelement    use this element to define an attribute of an html element which should be inserted into the richtext pane  attributes of an html element which are not matched by an  attribute  element will be ignored  the only exception is the class attribute which will always be taken over  
      attribute    description    name    name of the attribute to be taken over     value    value  which should be assigned to the attribute defined in name  if no value is defined  the value from the html element will be used        
  the following editors are available for xml fields  
  the following example shows how to extend the standard configuration with two changed rules   h   elements will be transformed into a paragraph   p  element  with font size    and  h   elements will be ignored   
  each document type needs a specification of all properties that the corresponding documents have  the properties  presented as fields to the editor  vary  e g  simple strings  such as for the author   xml for the textual content or binary data for graphics  this is determined in the document definition type with appropriate property types   
     diagram notation   property definition   width  int    intproperty name  width     headline  boundedstring         stringproperty name  headline  length           issuedon  date    dateproperty name  issuedon     data  blob image       blobproperty name  data  mimetype  image        text  xml used grammar     xmlproperty name  text  grammar  used grammar      images     image    linklistproperty name  images  linktype  image     
  coremedia sci offers the possibility of storing structured text in an xmlproperty  in the generator api the value of such a property is accessed via the getdomproperty method  
  in the example above  an example of the linkfilter class delivered in the hox corem servlets text package is used as filter  transforming the tags for internal links according to the coremedia richtext     dtd created by the coremedia editor into html links   a href             the sax events modified in this way are then output through an instance of the hox text sgml sgmlunparser class as sgml text  in this case html   configuration of the htmlunparserprototype with dtd and entities ensures that empty tags  e g   br   and special characters are output as correct html      alternatively  output as xhtml  e g   br     is possible using the hox text xml xhtmlunparser class  or output as ascii text using hox text plain plaintextunparser  
  the sgmlunparser unparsenodes method outputs all transferred dom nodes one after the other  in this case  these are the children of the document element   div   delivered as the value of the property  therefore  only the paragraphs  tables and lists contained in the dom tree as child nodes of the div element appear in the output  but not the div tag itself  cf  lib xml coremedia richtext     dtd   
  change set in direct publications  when performing a direct publication  the change set is primarily based on the set of currently selected resources or on the single currently viewed resource  as the set of resources does not give enough information for all possible types of changes  three rules apply   you cannot publish movements and content changes separately  whenever applicable  both kinds of changes are included in the change set  when a document is marked for deletion or for withdrawal  new versions of that document are not published  if the specific version to be published is not explicitly selected  the last approved resource version is included in the change set   there are also some automated extension rules for the change set  which modify the set of to be published resources itself  these rules can be configured in detail  ask your administrator about the current settings   when new or modified content is published and links to an as yet unpublished resource  the unpublished resource is included in the change set  depending on the configuration  also recursively linked documents can be included in the change set  when the deletion of a folder is published  all directly and indirectly contained resources are included in the change set  when the withdrawal of a folder is published  all directly and indirectly contained published resources are included in the change set  when the creation  movement  or renaming of a resource in an unpublished parent folder is published  that folder is included in the change set   
   status and action on the content management server effect on the live server on publication    a version of the document does not yet exist on the live server  the document is not marked for deletion   you approve the version  the approved version is copied to the live server    the last approved version of a document already exists on the live server  the document is not marked for deletion   you start a new publication without any further preparation  no effect on the live server    the document is published and is not marked for deletion  it therefore exists on both servers   you rename the document and approve the change  the document is renamed    the document is published and is not marked for deletion  it therefore exists on both servers   you move the document and approve the change  the document is moved    the document is published  it therefore exists on both servers  no links to this document exists   you mark the document for withdrawal and approve the change  the document is destroyed on the live server    the document is published  it therefore exists on both servers  no links to this document exists   you mark the document for deletion and approve the change  the document is destroyed on the live server  the document is moved into the recycle bin on the content management server    the document is published  it therefore exists on both servers  links to this document from other published documents exist   you mark the document for deletion and approve the change  the deletion cannot be published  since an invalid link would be created  a message is displayed in the publication window  remove the link in the other document and publish again     
   status and action on the content management server effects on the live server on publication   the folder is published and is not marked for deletion  it therefore exists on both servers   you rename the folder and approve it  the folder is renamed    the folder is published and is not marked for deletion  it therefore exists on both servers   you move the folder and approve the change  the folder is moved    the folder is not published and not marked for deletion    you approve the folder  the folder is created on the live server    the folder is published   you mark it for withdrawal  when queried  you acknowledge the mark for withdrawal of all contained resources  you approve the change  the folder is destroyed on the live server  the withdrawal can only succeed if all resources on the live server that are transitively contained in the folder are also contained in the change set    the folder is published   you mark it for deletion  when queried  you acknowledge the mark for deletion of all contained resources  you approve the change  the folder is destroyed on the live server  the folder is moved to the recycle bin on the content management server  the withdrawal can only succeed if all resources on the live server or content management server that are transitively contained in the folder are also contained in the change set     
  withdrawing publications and deleting resources  there is only one fundamental difference between withdrawal of publications and deletion  an withdrawal affects only the live server  whereas the deletion of a resource causes the resource to be moved into the trash folder on the content management server  contrary to versions of the coremedia sci before      folders are no longer destroyed  but enter the recycle bin in the same manner as documents   before a withdrawal or deletion can be published as described before  a mark for withdrawal or for deletion must be applied using the appropriate menu entries or tool bar buttons  in the case of folders  the contained resources are affected  too  if you have marked a resource for deletion and withdrawal  then the deletion will be executed   when a folder is marked for deletion  all contained published resources are marked for deletion  too  not published resources are immediately moved into the recycle bin without requiring to start a publication  when a folder is marked for withdrawal  all contained published resources are marked for withdrawal  too  when a mark for withdrawal or deletion of a folder is revoked  this also affects all contained resources with the same mark  if you use direct publication and approve a folder that is marked for withdrawal deletion  that approval is implicitly extended to the contained resources that are also marked for withdrawal or deletion  disapprovals extend to contained resources in the same way   
  general preconditions for starting coremedia sci components     for operation of coremedia sci on unix systems  the ksh shell must be installed in  bin   it is used for starting the coremedia components on execution of the cm command  see next section     if the cm webeditor is used an approved browser must be installed    in general  it must be ensured that all computers in use are mutually visible over dns    the image converter service of the server needs the program convert from imagemagick  on a linux and solaris system  you have to use the convert of your distribution  if there is no convert installed  you can download the respective program at imagemagick  you have to enter the path to the installed convert in the property convertcommand in the file   properties corem imageconverter properties  if you are using windows  convert will be installed by the installer program   virtual machine crashes can be experienced when using certain combinations of kernel glibc under linux  the crashes were reported to occur mostly on startup  the problems might be fixed by reducing the default stack size  at bash shell  do  ulimit  s        at tcsh use  limit stacksize        glibc       linux     users should also define an environment variable   export ld assume kernel        
  this section describes how to configure coremedia sci components to run as windows services  windows services can be started and stopped manually or can be configured to be automatically started when the machine boots  events from windows services are displayed in the windows event viewer  for more information on windows services consult the help provided by your windows system   every permanently running coremedia component is a candidate to run as a windows service     cm content and live server   cm workflow server   cm watchdog   cm importers   jms receiver  the following subsections explain how to configure  register  start and stop windows services  
  the user manager window is the default window for the user admin  all other administrator group members can access the functionality by choosing window   user manager window from the coremedia editor s explorer window    the new interface holds users and groups on tabs  
  applying new rules via file menu   for administrators  there is an entry in the file menu of the explorer window  new rule    this menu item allow to adjust rights on a selected resource directly  
  new component names since version       as product and component names underwent a thorough renaming procedure  new and old names might appear simultaneously within this manual  we try to adapt the new nomenclature as consistent as possible  but as old component names shine through in the software itself  we stick to these in case of doubt   
  since coremedia sci      it has become possible to integrate ldap directories  the access to ldap directories is read only  i e  the coremedia system obtains user and group information from the ldap server s   but does not return modifications  
  the coremedia editor does not start under windows    possible cause    when redirecting the log outputs to a file   output redirect log  under windows it can occur that the coremedia editor does not start  the reason for this can be another process  coremedia editor  text viewer or similar   which has opened the log file in the meantime  under windows a file can only be opened by one process at any one time  if the coremedia editor cannot open and write to its log file  it does not start    possible solutions    a  close the program which is accessing the log file of the cm editor   restart the coremedia editor    b  if it cannot be determined which program is accessing the log file  the user must log off the windows system and log in again  afterwards  the coremedia editor can be restarted    after installation of the coremedia editor on the client computer  only an empty root directory appears after logging in    possible causes    a  no subfolders have been set up    b  the server cannot reach the client computer  the server  as well as the client  must be able to resolve the name of the computer to contact in the network    possible solutions    a  set up subdirectories    b  if you are using dns  the correct client computer name must be entered  after this  check that the local client computer name  machine name  matches the client computer name entered in the dns    how the computer name is determined depends on the operating system of the computer      windows nt  servicepack          for dhcp  system control network protocols tcp ip properties dns host name       for fixed ip address  system control network identification computer name    in contrast  under e g  windows   se  the computer name is determined as follows        for dhcp  system control network identification computer name       for fixed ip address  system control network tcp ip dns configuration host   if you are not using dns  the computer name of the client must be entered in the file  etc hosts on the server  correspondingly  the servername must be entered under  winnt system   drivers etc hosts on the client    publishing resources apart from workflow   in case of emergency it might become necessary to publish documents apart from a workflow  as administrator  you can publish as follows      select publication from the file menu     click on the publication symbol     in the overview window or in the publication window  select publish from the context menu the document has been published  the status is shown by the symbol for  published     i cannot write to the word dictionary the spell checker does not use my user dictionary for suggestions   it s not possible to write from the coremedia editor to the word user dictionary  whether word uses the word user dictionary or not depends on the configuration of microsoft word and can not be influenced by the coremedia editor  spelling suggestions are computed by word only using word dictionaries    cross language installations   if os and microsoft office have been installed in different language versions  this might cause errors when using the spell checker with the cm editor    example  your computer runs on a german windows  your office application is an english one   as are your coremedia editor and the language of your coremedia project    explanation  the default language had been set to german   no matter if dictionary nor grammar available   automatically due to the user profile of the german operating system  this problem can be abstracted for any cross language installations  so proceed in analogy for other languages  it is a genuine microsoft problem  likely to occur with both windows xp and windows         solution  it is not sufficient just to change the language settings within your office application  you have to go programs   microsoft office tools   microsoft office language settings  set the default language to english and remove german from the list of enabled languages  this does not change the installed office components themselves  
  a migration to coremedia sci     is only possible from coremedia cap     or higher  if you want to upgrade older versions  migrate your project to coremedia cap     first  for appropriate detailed information see the coremedia cap     administrator manual   
  if you want to migrate from coremedia sci     to coremedia sci      it is possible to use the old database and templates without any change  nevertheless  you have to change your document types because the sgmltextproperties have been removed from coremedia sci      only xmlproperties are allowed  the content of old sgmltextproperties will automatically be converted to the rich text dtd  see next chapter   
  the coremedia proactive delivery server  pads  is a web application which creates output data from content stored in the coremedia repository as soon as it becomes available through a publication  this complements the more common use case of the coremedia active delivery server  ads   where rendering is triggered by http requests for uncached pages    opposed to the ads the pads is not limited to page generation with templates  it may be used to generate arbitrary output data with efficient caching and automatic dependency management  this includes page generation with templates  another use case is the integration of thirdparty applications by sending notifications about updated content  
  the easiest way to use a custom builder is to use its fully qualified class name as scheme of a key and configure pads to compute a value for that key  pads uses java reflection to instantiate the builder  this means the builder needs a public no argument constructor  root values to compute are configured in web inf properties corem pads xml with a root element below the pads element    example  
  before we discuss importer configuration in detail in the following sections  we describe the basic process of an import and highlight the points where you can influence the behavior of the importer   an xml import consists of the following steps    read in the xml files   transform to coremedia xml  configurable    check consistency   admit the documents to coremedia sci  the importer is started as a utility program and runs in the background permanently  checking whether new documents for import have arrived at regular intervals  if there are new documents  they are read in   for every individual import the source documents to be imported must first be gathered together  a source document can exist e g  as a file  be downloaded over the net or be generated dynamically  this is configurable via a java programming interface  in the following called importer api or api for short   the standard case is that documents exist as files  it is already covered by the classes of the api  if source documents were not originally created for coremedia import  they do not yet correspond to the coremedia xml format directly supported by the importer    after the source documents have been read in  a configurable step of conversion into the coremedia xml format is carried out  as standard  the importer supports xslt transformations and transformations based on regular expressions  however  the importer api also enables you to insert your own transformers which correspond to the  java api for xml processing   a standard api from sun  called jaxp in the following    the transformers can process the source documents either in stream or in dom format  the stream format in particular enables parsers for the insertion of documents which are not in the xml format  furthermore  a transformer can either process each source document individually  such as e g  an xslt transformer  or transform all the source documents in one step   unfortunately  the latter exceeds the possibilities of jaxp  so that some expansions have been defined    when configuring an importer  you can place multiple transformers one after the other  which are then executed in sequence on import and each receive the result of the previous transformer as input document  for a non xml format you can enter a thin parser as the first transformer  which transforms the document into an xml format close to the source format  next  an xslt transformer can transform this xml format into coremedia xml  and finally a coremedia filter can allocate the document to the correct repository path   after processing by the last transformer the documents must be in coremedia xml format  the details of this format depend on the document type  the transformer must be suitably adjusted   the configurable phase of the importer ends when the coremedia xml format has been created  now the structure of the documents created is validated  this also includes consistency checks which go beyond the dtd  especially conformity of the documents to the corresponding document types and the referential integrity   if the documents are proven consistent  the import is executed  i e  the documents are incorporated into the coremedia sci   to give an idea of the expected result  we ll discuss the coremedia xml format in detail in the next chapter  especially considering the relationship to the document types  after that we ll outline how to supply source documents and possibilities of transformation  at the end of this chapter  you find a complete example for an importer configuration   each importer has a configuration file  its structure is described in the administration manual  however  if you use the full range of importer api features  the administration manual only covers parts of it  you have to supply your administrator with the configuration  
  if it is not possible to supply the importer with source documents according to the principle described in the previous section  you can implement your own mechanism on the basis of the importer api  understanding this section requires knowledge of java  in particular  the importer api is based on jaxp     you can find the importer api in the coremedia installation in importer index html  when you unpack the file cm  rel no  api zip    unless the package is explicitly given  the classes and interfaces mentioned in this section come from the javax xml hierarchy or from com coremedia publisher importer  there are no name conflicts between these packages    the importer internally functions not with files but with document sets  such a document set contains the source documents to be imported in one operation  a source document can be represented in various ways  indirectly via a url or directly as a series of bytes or as a dom tree     the combination of these document sets is controlled by a class which implements the multiresultgeneratorfactory interface  the name of this class is entered in the configuration file  
   if your xml files were not explicitly created for coremedia import  they probably have a different format and must be transformed into the coremedia xml format first  the importer supports this with a multi stage configurable transformation    if no transformers are inserted in the configuration file  the sets of source documents delivered by next are imported directly  of course  this only works if the documents are coremedia xml documents matching the document types of the publisher  typically  a transformation of the documents is necessary to achieve the correct format  this is subject of the next section    if your documents are not in xml format and have a regular text structure  you can create xml documents out of the texts using regular expressions as known from the perl  programming language  furthermore  you can use regular expressions to structure pcdata sections into xml documents    if your xml documents do not yet correspond to the coremedia xml format  they can be transformed with an xslt stylesheet  you only have to provide the stylesheet and the importer carries out the transformation automatically    the power of xslt also has its limits  at the latest when the transformation has to be carried out over multiple documents  for example to realize relationships between articles and their teasers  or when the source documents are not xml documents  xslt does not help any further  in addition  some transformations within an xml document can only be carried out awkwardly with xslt  if they run counter to the declarative paradigm  in such cases you have the possibility with the importer api of integrating your own special transformers into the importer  your transformer can either process each source document separately or all of them at once  furthermore  you can access the source documents in the stream or dom format and then return the transformed document as stream or as a dom tree  however  access to a source document in the dom format requires that it is an xml document  on the other hand  stream access is possible for all documents    as already mentioned  you can combine multiple transformers in order to achieve the desired end result in the form of coremedia xml  the order of the transformers is determined in the configuration file of the importer  and during operation each transformer starts with the result of its predecessor  the first transformer directly accesses the document delivered by the document generator  see previous section   the flexibility regarding the access  stream or dom  individual or complete set  is unaffected by the order  for example  the first transformer can return a deeply nested multiresult with dom trees  but the second can start with individual stream documents  the necessary reformatting is carried out automatically by the importer    the following sections deal with these transformation possibilities in detail  
  the configuration of a transformer mostly is too complex to store all necessary information in a single property  and therefore consists of several properties  the next component of the name after the prefix is a number  all transformer properties with the same number refer to the same transformer    the number has a further function  it determines the order in which the transformers are executed during operation    the number is followed  possibly hierarchically subdivided further  by the actual name of the property  for each transformer  the corresponding java class must be specified with  class   furthermore  for logging purposes  each transformer should be given a name  all further properties depend on the particular type of the transformer and describe e g  stylesheets or filter data  these details will be dealt with in later sections in relation to the specific transformers    the file corem properties cm xmlimport properties which serves as an example for importer configuration  contains a complete  commented out  example for the configuration of an xslt transformer and a user defined transformer    we recommend not to use too many transformers  since errors can easily creep in when you make changes to one transformer and oversee effects of the intermediate format for the following transformer  typically  you should use one or more xslt stylesheets      
  the importer allows to define xslt style sheets which transforms xml files of your format into the coremedia format  this stylesheet is automatically executed on import    the xslt interpreter used in coremedia requires stylesheets corresponding to the w c recommendation of the             this particularly concerns the xsl namespace in the  xsl stylesheet  element  which must be set to   xmlns xsl  http   www w  org      xsl transform    older xsl editors still generate the variant from an earlier working draft    xmlns xsl  http   www w  org      xsl transform        this is out of date and not supported by coremedia    the value of the class property in the configuration file for an xslt transformer is xslttransformerfactory  furthermore  the desired stylesheet must be defined with property stylesheet  
  if transformations with regular expressions or xslt are not sufficient  you can develop your own transformer in java based on the importer api  in this section you can find out more about formatting such transformers  the importer api is closely related to the java api for xml processing  jaxp   especially with the javax xml transform hierarchy  in some places  however  jaxp is not powerful enough  or too xslt specific for the requirements of coremedia  so that we had to define some extensions    in accordance with both jaxp and the document generator  transformers are not specified directly  but rather indirectly via factories  since the javax xml transform transformerfactory is very xsl specific  the importer api defines a more general factory  the generaltransformerfactory    like the document generator  the transformer factories are instantiated with java beans beans instantiate and can be configured with properties in the sense of java beans beaninfo  in the configuration file  such a property is entered with the prefix of the importer  with number   the keyword property and the actual name of the property  for example  the xslttransformerfactory introduced above is passed to the stylesheet via such a property     
  to end this chapter  a complete example follows which illustrates the use of the different transformers  the source documents correspond to the dtd  http   xmlnews org dtds xmlnews story dtd  already known from previous examples  the example includes three transformers    a special transformer will generate the  base  element  optional according to the dtd  in each document if it does not exist   an xslt stylesheet will transform the xmlnews story documents into coremedia xml documents of type text               
  in order to keep the stylesheet simple we assume that some elements are generally available although they are optional according to the dtd  our stylesheet should execute the following obvious mappings    the heading results from the contents of  nitf body body head hedline hl    the contents of nitf body body content should be adopted as text  for importing a document  we need a name and an id  since the document contains no element with suitable content for this  we simply take the file name    the content should not simply be adopted as pure text but be sensibly matched to the structures of our coremedia richtext     dtd dtd    the  p  paragraphs of the xmlnews document are adopted     as  p  in coremedia richtext     dtd    while paragraphs and headings are general standard building bricks of any document  the xmlnews inline markup within  p   e g   location   is application specific  therefore there are no adequate coremedia richtext     dtd elements for this  nevertheless  we want to save the information    the xmlnews inline markup is matched to  span  elements whose class attribute is set to the name of the original element  e g  location     this should be enough for an example of the functionality  the remaining components of our text document will be filled with default values     before we deal with the actual transformation  we define a utility function and a variable in which we first save the filename  
  we decided on the document type text at the beginning  for simplicity reasons  we set the fixed path test xmlnews as the target directory  we set the name and id to the already extracted filename    we proceed down to  body  and generate a  version   
  at this point  the transition from coremedia dtd to coremedia richtext     dtd occurs  the template generates the coremedia field element for the document field text and the coremedia richtext     dtd element  div   which is filled with  p  elements  
  due to the xslt default templates working through elements recursively and copying text  the stylesheet already produces correct coremedia xml in this version  however  we still want to transform the inline markup into  span  elements  and need a further template for that  
  if you are familiar with xpath  you will have noticed that only the direct child elements of  p  are handled with match  p     this is deliberate  because  span  elements in coremedia richtext     dtd may not be nested and therefore we cannot take nested markup into account with such simple means    our stylesheet is ready now  even if you have little experience with xslt it should now be quite simple to obtain the author from the  bytag   for example  and place it in a string field element of your document    to make the importer automatically executing the stylesheet enter it in the configuration file of the importer  
  when the style sheet is applied to our xml example document  the following file results   
      attribute    optional    description    folder    no    the folder below which resources reside  if the type includes folders  a value for the folder itself is also generated      type    no    the resource type to generate values for  this can be the document type  e g   article   or the special values  folder  to generate values for folders and     to generate values for all resources     uri    no    a key pattern with the placeholder       which will be replaced with the resource id for each selected resource     
  you can only prioritize a publication using the coremedia editor  the webeditor does not offer this feature  
  you may also call the method padsconfiguration addrootselector on the padsconfig object if you want to configure a root key in web inf config bsh  see api documentation     you can explicitly register a builder to generate values for keys of any scheme you like  however you should only use uri schemes that start with a custom prefix like your domain  builders can be configured using a builder element with attributes for scheme and builder class below the pads element  a builder element makes it also possible to pass configuration settings to your builder  you don t need a builder element if your builder doesn t require any configuration and only generates values for keys with the builder s fully qualified class name    the following example registers two builders of the same class with different configuration and different key schemes      
  the cache in the coremedia active delivery server can be described as follows    keys  resourceuris objects form the cache keys  values  the cache contains the generated pages    cache function  templates that must be deterministic with respect to their input  i e  they must create the same page for the same resourceuri  assuming the state of the coremedia repository is unchanged  the output of a template cannot be stored easily in the cache if the template requests information from third party systems  outputs the current time  evaluates features of the http request  e g  jsp request attributes   etc    external state  the output of templates may depend on the state of the coremedia repository  an automatic mechanism tracks all accesses to the repository during the generation of a page as dependencies  this mechanism is explained in more detail below  this means that templates which are marked as cacheable can freely access the information from the resourceuri and the content of the coremedia repository   but not more   invalidation  the coremedia server notifies the ads about all changes to the repository so that the ads can invalidate generated pages immediately  when a pre generator is used  all changes belonging to a publication are considered together on the live server   the cache size can be influenced with the generator pagecachesize bean property  an lru algorithm is used as the replacement strategy  in addition to the pages called from outside  all pages used via include are also stored  so that the actual number of pages in the main memory is generally higher than the configured pagecachesize    in order to subject a template to caching  insert the coremedia page directive within a jsp comment into the template  note that this directive needs to be part of the jsp file  it cannot be included through a jsp  include directive   
      attribute    optional    description    class    no    the fully qualified class name of the builder to use     scheme    yes    the builder generates values for keys of this scheme  if not set  the fully qualified class name is used     any    yes    a custom attribute for which a corresponding setter method exists     
      menu item    sub items    function    character format    default  bold  italic  underline  strike through  subscript  superscript    formats the selected text   paragraph format  all defined paragraph formats  formats the current paragraph with the selected paragraph format   background color  all defined background colors  sets the selected background color for the text   color  all defined font colors  sets the selected color for the text   font  all defined fonts  sets the selected font for the text   font size  all defined font sizes  sets the selected font size for the text   language  all defined languages  sets the selected language for the text     stylesheet attribute        enter style sheet value in a dialog box  project specific     internal link        insert a link to a document within your project  opens explorer window for selection     link        dialog box for  external  www links and target frame  leave empty or insert   blank  for new browser window     insert an image        inserts an image at current cursor position  a dialog box opens up in which you can select a document containing the image   lists  ordered list  unordered list  indent  outdent  edit lists   add blockguote    a paragraph is marked and formatted as blockquote   remove blockquote    removes the mark as blockquote   text alignment  align left  center  align right  justify  remove alignment  defines the alignment of paragraphs   table  all functions for editing tables  insert row        inserts a table at current cursor position  a dialog box opens up in which you can define the table size     horizontal scrollbar        adds a scrollbar if the text in a richtext field exceeds the visible area     
  builders implement the interface com coremedia generator builder  see the javadoc api documentation for further details    a builder is invoked to compute a value for a given key  all values must be serializable  because they are stored in the persistent cache  during the computation of a value a builder can read fragment values and link to top level values  a builder can t read top level values and it can t link to fragment values    you can invalidate all values computed by a certain builder using the development pages  this may be needed if you change the builder implementation or configuration    create key to read a fragment or link to a top level value    for both reading a value and linking to one you need the key of that value  the simplest way would be to create its string representation in the calling builder  that is  if you want to read a fragment value  you could use something like      
     enter your current password into the field old password   now enter the new password into the field new password   please enter the new password once more into repetition  this checks that the new password was entered correctly  since the entry is hidden  all characters are shown as stars   confirm with clicking  ok     the password is changed  the change is effective for the next login    it is not possible to modify the user name     
  however the creation of the key in the above example is error prone  a better practice is to introduce a static helper method in the target builder which validates arguments when constructing keys  you should also avoid class names in string constants because errors aren t detected at compile time  instead we introduce a method key in class examplefragmentbuilder   
  read a fragment value  you can use the static method introduced above to get a key for a fragment you want to read  the method  get string  of the com coremedia generator generatorcache interface returns a fragment value for a key as the following example shows  
  pads automatically creates a dependency from the generated value to the read fragment  i e  if the fragment changes  the generated value will be invalidated   create a link to a top level value  a builder may also link to other top level values  linking to another value means to schedule its computation if it is not already computed  even if multiple values link to one specific value  the linked value will be generated only once  the value will be computed asynchronously  i e  the current computation doesn t have access to the computed value  a top level value is maintained by pads as long as it is reachable via links from one of the configured root values  if the value isn t reachable anymore  it will become subject to garbage collection  which runs before pads sends values to the uploaders  the same applies to the values for the configured root keys  pads deletes a value after you have removed its key from the configuration and pads was restarted  link cycles are supported and correctly handled by the garbage collection   imagine a builder which computes a value for a folder  the builder creates links to values for all child documents which leads to their computation  pads automatically establishes a dependency to the folder when reading its children  if a child document is moved to another place  pads recomputes the value for the parent folder but this time the builder does not create a link from the newly computed value for the folder to the value for the moved document  as consequence the value for the document will be deleted by garbage collection  if there isn t another link path from a root value    the method  establish string  of the com coremedia generator generatorcache interface establishes a link to another value  note  that a configured link predicate may prevent establishing this link   example   
  link predicates   you can register link predicates to restrict the computed values  link predicates are asked if a link that a builder requested during computation should be created or not  i e  if the value should be computed or not  link predicates must implement the interface com coremedia generator pads linkpredicate  they are registered with the linkpredicate element inside the pads element  the pads element may contain zero  one or more linkpredicate elements   link predicates are called in the order of their configuration  the decision is made by the first configured link predicate which returns that a link with given source and target keys should be created or not  link predicates should only prevent links from values that were computed by custom builders  pads will create all links  if no link predicate is configured    example  
      attribute    optional    description    class    no    the fully qualified class name of the link predicate     any    yes    a custom attribute for that a corresponding setter method exists in the link predicate class      
  read coremedia resources  the static method get of class com coremedia cap generator generatorinstance returns a hox corem servlets generator instance  you can use it inside a builder to get resources from the coremedia repository as known from the active delivery server  it also provides access to the servlet context   when a coremedia resource is used during the computation of a value  pads automatically creates a dependency for the computed value on the accessed resource   the following example shows a builder s compute method  which returns the value of a document s string field  we don t check for errors  here to keep the example simple  
      symbol nr     function           refreshes the webeditor window             creates a new document in the selected folder            creates a new folder in the selected folder            opens a selected document            cuts selected resources or text  including tables   text will be cut immediately  resources stay at their old position until you paste them into a new folder            copies selected resources or text to the clipboard            pastes resources or text from the clipboard into a folder or document        direct approval of a resource  this function must be enabled        revoke approval directly  this function must be enabled             marks a resource for deletion             removes  marked for deletion          marks the resource for revoking of the publication  this will delete the resource on the live server  this change must be published to take effect         revokes the mark for withdrawal of publication         simulates the publication and shows the result         direct publication  without workflow  of a resource             calls the preview of a resource             opens the information window  see kapitel  of a resource  
     menu item   sub items   functions   explorer      opens a new explorer window  workflow  opens  a new workflow window    query      opens a new query window  publisher  opens a new publisher window    user manager      opens a new window for password change   
  pads restart dependency  it is possible to create a special dependency on the pads start  depending values are invalidated each time pads is restarted  this is useful if you need to detect changes to some external resources  e g  configuration files  at restart only    as an example  imagine you want to detect file changes and invalidate depending values when pads is restarted  we don t want to invalidate all values which depend on information from files  but only those values which depend on files with really changed content   in that case you could write a filehashbuilder which computes a hash value for a file and lets this value depend on the special key generatorcache restart  the builder for file dependent values uses generatorcache get to create a dependency on the file s hash value  the hash value is invalidated each time the pads restarts  the method filehashbuilder instantlyrecompute returns true  i e  the hash value is instantly recomputed  if the file hasn t changed  the hash value will stay the same and the dependent values won t be invalidated  if the file content has changed  the hash value changes too and dependent values will be invalidated   example code for the filehashbuilder  
  user management is an essential part in distributed collaborative applications  the two main tasks of the coremedia sci user administration are     user authentication    defines which user may log on to the server  a generic framework based on the java authentication and authorization service  jaas  allows to authenticate users from arbitrary sources  a concrete solution exists for users and groups from ldap servers    user rights management    manage users  groups and rights on coremedia resources  as with user authentication users and groups may originate from arbitrary sources  support is provided for ldap servers  especially microsoft active directory servers  the tool to assign rights on resources to groups is the coremedia user manager  which is carefully designed to cope with thousands of users and groups sometimes found in large ldap directories   
  the ldap integration which is new since coremedia sci     has strong implications     coremedia now supports nested groups because active directory  and possibly any other ldap server  has nested groups  the previous group model which does not allow nested groups was not sufficient any longer     the coremedia user manager has been completely redesigned to handle large user sets and nested groups    the computation of user rights was changed due to new nested groups    a new query interface allows for searching users and groups    the coremedia server has a new update mechanism for users and groups  because ldap does not provide change events  instead a new update mechanism based on outdating and refreshing is implemented which also affects the clients  e g  the coremedia user manager has a new button to load user changes on demand and update the current display    the login mechanism from cap     was changed completely to support built in and ldap users  authentication in coremedia sci is now based on the java authentication and authorization service  different jaas login modules authenticate users from different sources    coremedia sci implements a different license management  used licenses are now persistently stored  free licenses are dynamically consumed when a user logs on to the coremedia server  the concept of service groups has been discarded in favor of login predicates  configurable login predicates prevent user access to certain coremedia services  like the editor service   
  the attribute mode requires a corresponding method setmode string  in the builder class  you can use any attributes in the builder element if a corresponding setter method exists  the next table describes the attributes of the builder element in detail  
  uploaders receive the generated top level values and process them  e g  by notifying a thirdparty application  custom uploaders must implement the interface com coremedia generator pads uploader  they should extend the abstract class com coremedia generator pads abstractuploader which provides some methods for configuration    uploaders can be attached either directly to pads or to a jmsreceiver service  you can use a combination of jmsuploader and jmsreceiver to decouple an uploader from pads and forward events to a different host  it makes sense to decouple an uploader from pads  if the uploader is very slow or unreliable  if the uploader can t handle an event due to an internal error it must throw an exception which will cause a shutdown of pads or the jmsreceiver service  if the uploader is running at the jmsreceiver  pads can continue its work and events are buffered in a jms queue or durable topic subscription  
  coremedia sci provides a fine grained access control which respects group memberships  the folder structure and the resource type hierarchy  some term definitions are necessary to explain user rights management in more detail     resource  a resource is a document or folder in the cm repository    resource type  a resource type defines the fields and the field types of a resource    folder type      the folder type is a special value needed to define rules on folders    user  a user may operate on resources  if he has sufficient rights  a user is member of one or more groups    group  a group can have users and other groups as members  a group that is member of another group is called a subgroup  a group that has a group as its member is called a supergroup    right  a right is a permission type  each right allows only some sorts of resource operations  the following table lists the different rights  the assignable resources  folder or document  and the possible resource operations   
      right    assignable to    description    read    folder  document    read document names  document content and folder names    edit    document    create  checkout  checkin  rename  move and save documents    delete    document    mark and unmark a document for deletion  move a document to trash    approve    folder    document       approve  disapprove  approveplace  disapproveplace a document or folder    publish    folder    document    publish a document or folder    folder    folder    create subfolder  rename  move and delete a folder    supervise    document    checkin or uncheckout a document from a different user  grant new rights 
    rule  a rule defines a right on a resource of a certain resource type  a rule is granted not to a user but to a group  a user must be a member of a group to get the rights of the group  so a rule consists of a group  a resource  a resource type and a right parameter  formally a rule is a four tuple    r    gr rs rt rg   from  groups x resources x resourcetypes x rights    where   groups is the set of groups   resources is the set of resources   resourcetypes is the set of resource types and the special folder type       rights is one of  read  edit  delete  approve  publish  folder  supervise   
  the following sections will often show rules to explain user rights  the rules are displayed in a rule table  here is an example of a rule table  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f     article    x    x                                         x                                
  a rule table is closely related to the rule table in the cm user manager  the table is composed of the following columns      group  the group  a right is assigned to  if no value is set  the value in the next column cell above is assumed     resource  the document or folder  a right is assigned to  the table cell contains the path to the document  the name written in lowercase letters  or folder  the name starting with an uppercase letter   if no value is set  the value in the next column cell above is assumed      resource type  the resource type or the folder type    a right is assigned to   if no value is set  the value in the next column cell above is assumed      right columns  reserved for rights with the following meaning      x  the right is set       the right is not set    no entry  the right cannot be set  folder rights cannot be set if the resource type column contains a resource type  it can be set if the resource type column contains the folder type    edit and delete rights cannot be set if the resource type column contains the folder type    the two rights can be set for ordinary resource types    the rule table example above defines two rules for a group g and a folder f      group g has read and edit right on the folder f  for all documents of document type article     group g has read right on the folder f  for the folder type    the following section specifies in more detail what resource operations follow from a right on a document and folder  
  a right is a permission type and each right allows only some sorts of resource operations  some operations require several rights  e g  moving a document  the following table lists required rights for operations on a document doc of type article in folder f   
  operations    read fields of document doc  read implied properties of document doc like date of last modification   required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f  doc    article    x                                  
  operations    create new document doc in folder f    required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f     article         x                             
  operations    rename document doc  save document doc  checkout document doc  checkin or uncheckout document doc if the same user has checked it out before    required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f  doc    article         x                             
  operations    move document doc from folder f  to folder f    required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f     article         x                            g     f  f     article         x                             
  operations    mark document doc for deletion  unmark document doc for deletion   required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f  doc    article              x                        
  operations    move document doc from folder f  to trash    required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f  doc    article              x                            f  f     article        x                         
  operations    approve document doc  disapprove document doc  approveplace document doc  disapproveplace document doc   required rights                    
                                                    group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f  doc    article                   x                   
  operations    publish document doc   required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f  doc    article                        x              
  operations    checkin or uncheckout document doc for a user different from the one who checked out the document   required right  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f  doc    article                             x         
  the following paragraphs list required rights for certain operations on a folder f  in parent folder f     operations    read implied properties of folder f   like date of last modification or names of children   required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f          x                                 
  operations    approveplace folder f   disapproveplace folder f    required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f                       x                    
  operations    publish folder f    required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f                            x               
  operations    create a subfolder in folder f    required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f                                      x     
  operations    rename folder f   mark folder f  for deletion  unmark folder f  for deletion   required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f                                      x     
  operations    move folder f  to folder f    required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f                                      x         f                                      x     
  the root folder has special rights  you cannot move  delete or rename the root folder  
  above we saw that the supervise right is necessary for non administrator users to check in documents of other users  now we will see that the supervise right is the right for a non administrator group to grant new rights    operations    users of group g grants rights on document doc for resource type article      required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f  doc    article                           x          
  operations    users of group g grants rights on folder f  for resource type article      required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f     article                           x          
  operations    users of group g grants rights on folder f  for the folder type     required rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f                                 x          
  you do not have to define rules for each group  resource or resource type  a rule definition may contain a   supergroup  the rule is applicable for all subgroups  superfolder  the rule is applicable for all subfolders  supertype  the rule is applicable for all subtypes   when using supergroups   folders  and types the number of rules is greatly reduced but the problem of conflicting rules emerges  the problem appears when two rules for a supergroup and subgroup or a superfolder and a subfolder or a supertype and a subtype are defined  the following section explains how rights for a resource are evaluated from a set of rules and how conflicting rules are resolved  
  this section will explain in detail how the rights for a resource are computed from a set of rules  first we define if a rule is applicable  a rule is applicable if it is involved in the computation of rights for a certain operation  look at the following rules table described earlier  
  the next table shows the attributes of the uploader element  
      attribute    optional    description    id    no    an unique identifier for the uploader     receiveinit    yes    set this attribute to  false  if a new uploader should not receive notifications for existing values     builder    yes    a comma separated list of key schemes for that the uploader is notified  if not set  pages will be passed to uploader     filter    yes    a regular expression to restrict the pages or values for that the uploader is notified  default is          any    yes    a custom attribute for that a corresponding setter method exists     
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f     article    x    x                                         x                                
  in the following cases the first rule in the rules table is not applicable  a user of a different group g  which is not a subgroup of g wants to operate on a resource  a user of group g  or a subgroup  wants to operate on a document in a different folder f  which is not a subfolder of f   a user of group g  or a subgroup  wants to operate on a document teaser  in folder f   or a subfolder   document teaser  has the document type teaser  which is not a subtype of article   the first rule is applicable only  if the user is member of group g or a subgroup and the user operates on a resource in folder f  or a subfolder of f  and the document has type article or a subtype of article    it is now possible that two or more rules are applicable to a resource  have a look at the next rules table   
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g      f     article    x    x                                         x                                g      f     article    x         x                       g      f  f     article    x              x                               x                                g      f     shortarticle    x    x              x                
  let s assume the following   g  is a subgroup of g    f  is a subfolder of f  and  the document type shortarticle is a subtype of article    users of group g  have no edit rights on articles in folder f  but delete rights  in subfolder f  there are no edit and delete rights for articles but approve rights  and finally there are no delete and approve rights for documents of type shortarticle in f   but read  edit and publish rights  there are a lot of conflicting situations  e g  a user of group g  wants to edit or delete an article document directly in folder f   a user of group g   not g   wants to edit  approve or delete an article document in subfolder f   a user of group g   not g   wants to edit  approve  delete or publish a short article document in subfolder f    these conflicts are resolved by the definition  that a more specific rule takes precedence over a less specific rule  a rule r  is more specific than a rule r  if and only if  sp     the group in rule r  is a subgroup of the group in r   sp     the groups are equal and the resource in rule r  is located inside the folder of rule r   sp     the groups and the resources are equal and the resource type in rule r  is a subtype of the resource type in rule r   rules are not merged as can be seen from the definition  if we apply the definition  we get the following conflict resolutions for the three examples above  g  is a subgroup of g   from sp  it follows that the user in group g  who wants to edit or delete an article document directly in folder f   has the rights to read and delete  but not to edit    f  is located in f   from sp  it follows that the user in group g  who wants to edit  approve or delete an article document in subfolder f   has the rights to read and approve  but not to edit and delete  shortarticle is a subtype of article  from sp  it follows that the user  who wants to edit  approve  delete or publish a short article document in subfolder f   has the rights to read  edit and publish  but not to delete and approve   a rule that is preceded by another rule is said to be shaded  a rule is called effective if it is applicable and not shaded  the effective rights of a group  a resource and a resource type are the union of the rights of the effective rules  to explain this  look at the following rules table  
     group   resource   resource type   read   edit   delete   approve   publish   supervise   folder   g    f    article   x   x                                x                         g    f    article   x           x                        x                        
  an uploader must implement the interface com coremedia generator pads uploader  the abstract class com coremedia generator pads abstractuploader provides methods for configuration and some default implementations  you should extend abstractuploader if possible  please read the javadoc api documentation  too    the uploader receives notifications about updates and deletions of top level values in pads  it receives an update notification if a new value was computed or a value was changed  update and delete notifications include the key to identify a value  update notifications include the value itself  pads calls the uploader s method commit   when a consistent state has been reached    uploaders may only throw exceptions if a fatal error occured  an exception in an uploader will lead to the shutdown of pads or the jmsreceiver  this is needed to prevent the loss of unprocessable events  when pads or the jmsreceiver is restarted  the uploader receives again all events since the last call to commit    if you don t want pads to shutdown  you should consider decoupling the uploader s error source from pads by buffering notifications persistently  one possibility is to use a pair of jmsuploader and jmsreceiver  
  if a user is member of group g then the effective rights for the two folders f  and f  are unified  so the user can read articles in both folders  edit articles in f  and approve articles in f   of course the user cannot edit articles in f  nor can he approve articles in f    the effective rights are nearly the rights of a group on a resource for a resource type  there are only three exceptions    navigate through  if there are no effective rules for a folder f  and the group has non empty effective rights for a resource located beneath f  then the group has implicit read rights for f  and the folder type      this sounds more complicated than it is  look at the simple example   
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f  f     article    x    x                                         x                                
    the user in group g can edit the article in folder f   there is an implicit navigate through right for folder f   the example above is equivalent to  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f          x                                g     f  f     article    x    x                                         x                                
         if the effective rights are not empty  the group also has the implicit read right for any resource and resource type  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f     article         x                                         x                                
    in the example above the user in group g has implicit read right for an article in f   this is equivalent to  
   group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f     article    x    x                                         x                                
         if a group has no read rights on a parent folder for folder type      then a child folder has no read rights at all  the read right can only be withdrawn explicitly by a rule with empty rights  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    g     f                                           g     f  f     article    x    x                                         x                                
    a user in group g does not have read rights on folder f  because there is no read right for the parent folder f   to grant read rights  the right must be explicitly set in the first row or the first row must be removed    the effective rights of a group on a resource for a resource type with the three exceptions above are displayed in the resource info window in the cm editor in the rights tab  
  the following table shows the standard groups  
      groups    description    administrators    group with administration rights  only members of this group are allowed to create or delete users and groups     system            reserved for system users  do not use for other users    importer          reserved for importer clients only    approver          only has approve right    publisher         only has publish right    chief editor      has all rights except supervise    editor            only has read  edit and delete rights    
  these groups are displayed in the following table with their users for different cm server types    content and live servers  
  content server  
    groups  users  importer  importer  approver  no default user  publisher  no default user  chief editor  no default user  editor  no default user    
  the default mapping of user rights to users  resources and resource types is as follows  
      group    resource    resource type    read    edit    delete    approve    publish    supervise    folder    administrators         all    x    x    x    x    x    x                     x            x    x    x    x    system         all    x    x    x    x    x                          x            x    x         x    importer         all    x    x    x    x    x                          x            x    x         x    approver         all                   x                                            x                   publisher         all                        x                                            x              chief editor         all    x    x    x    x    x                          x            x    x         x    editor         all    x    x    x                                    x                                editor     system    all    x    x                                         x                                
  the coremedia workflow installation comes with four predefined workflows which cover the publication of resources    simple publication  two step approval  two step publication  three step publication   the workflows define workflow roles  each role is mapped to a group  
     group   description   composer role   a user of this group may start a workflow and create a change set   approver role    a user of this group may approve resources in a change set    publisher role   a user of this group may publish resources in a change set  
  a user must be a member of a role group to execute the respective task  the groups are automatically created when a workflow is uploaded and have no user rights  to approve or publish a user must also be a member of another group which has the rights on resources to be approved or published  e g  to approve a document a in a workflow  the user must be a member of     approver role to be able to accept the approve task in the workflow and    a group which has approve rights on the document a   in an ldap enhanced coremedia system  workflow role groups are mapped in the workflowserver properties file   
  please note  that uploader implementations must be robust against duplicate events  pads may notify an uploader about a change multiple times  if it was restarted in the meantime  
  coremedia sci is able to adopt users and groups from ldap servers which prevents administrators from maintaining them in coremedia sci  there is an out of the box integration for active directory and a customizable support for any ldap schema  several ldap servers can be integrated   coremedia sci does not write on an ldap server  you cannot change ldap memberships with the cm user manager and you cannot create memberships between groups and users from different ldap servers  however rules  even for ldap groups  remain in the coremedia sci repository  as they refer to coremedia resources and resource types  they are repository specific   coremedia sci clients don t communicate directly with an ldap server  but get users and groups from the cm server  the cm server accesses users and groups from instances of the interface com coremedia ldap userprovider  the following subsection explains how userproviders are configured  
  the userprovider instances are configured in the properties corem capserver properties file  here is an example configuration for an active directory server  
  the first property configures the userprovider class  the second property refers to a property file holding the provider configuration  further providers can be added by incrementing the index value in the property keys  the following example shows the configuration of two providers  
  the following sections introduce some predefined user providers classes  
  the class com coremedia ldap ldapuserprovider is an abstract base class to fetch ldap entries  it provides all general ldap related functionality  especially session handling  searching and caching  it is abstract concerning the membership relation which depends on the particular underlying ldap schema  this class can not be configured as provider class in capserver properties but can be subclassed by concrete provider classes  it reads property files like the following example  
  the logging in the provider class is configured via log actions  the example shows a logging to standard out in log level info and to the file var logs ldap log in log level debug  the logging values are optional  
  the first two properties specify the account to be used by the cm server for log on to the active directory server  the last two properties configure the ldap host and port number  all properties which start with  java naming  are evaluated by the jndi framework  they are not robust concerning trailing whitespaces  so edit them carefully  the last two properties are mandatory  
  the first property configures a semicolon separated list of base distinguished names  dns  under which groups and users must be located to be accessible by a cm server  the second property configures a semicolon separated list of domain names  served by the ldap server  the third value configures the interval in seconds after which a cached ldap user in the cm server is updated with modifications made in the ldap server  do not set a small value here  as this might lead to performance problems  the last two properties are mandatory and hold a single space separated list of attribute names that are added to and accessible from the ldapuser and ldapgroup java objects  
  you may specify two sorts of filters  ou filters and member filters  using an ou filter allows fine grained configuration of the ldap nodes to search in  but their usage is not recommended  since it prevents subtree scope search and is thus not performing  the value of the property must follow the syntax described in rfc       you may specify a member filter if needed  a member filter is a class which implements the com coremedia ldap memberfilter interface  
  the following example shows a very simple uploader which just writes generated values with their keys to the console     
  error conditions  a builder may throw an exception during the computation of a value  the computation aborts and the value is deleted  if it was already generated   however if the value itself or a another value which reads this value can still be reached through links from one of the configured root values  the computation will be retried later  pads doesn t notify uploaders until all values have been computed successfully  
  pads supports the development of builders and templates with the development pages  you can call the pages with your browser    http    host   port  pads develop 
  right after installation  you find the pages in the web inf directory of pads  to make sure that a direct access to it is not possible by default  please copy the directories  admin   for the administration pages  and  develop  one level up to make use of them  keep in mind to secure those areas by means of your servlet engine  
  in this example pads instantiates a builder of class com coremedia ext pads examplebuilder and uses it to compute a value for the configured uri  the builder specific argument to the right of the colon uniquely identifies a value and tells the builder what to build  note  that you must only use characters that are allowed in uris and you have to escape special characters like      for the xml representation the configuration uses   instead of configuring the root key in the xml configuration file  you could also call method addroot string  on the padsconfig object in web inf config bsh  see the api documentation of interface com coremedia cap generator pads padsconfiguration    if you want to compute values for resources of a certain type and below a folder  you can use the rootselector element below the pads element   example  
  in this example pads uses a builder of class com coremedia ext pads examplebuilder to compute values for all documents of type  article  below the folder  site  the uri attribute of the rootselector element must contain       which is replaced by the resource id when the builder is called to compute a value  for example  if there are three documents of type article below the folder  site with the ids        and     the builder will be called three times with the keys   com coremedia ext pads examplebuilder     com coremedia ext pads examplebuilder      com coremedia ext pads examplebuilder     the next table describes the attributes of the rootselector element in detail  
  the next table shows the attributes of the linkpredicate element  
  you may also call the method padsconfiguration addbuilder on the padsconfig object if you want configure a builder in web inf config bsh  see api documentation     
  you may also call method padsconfiguration addlinkpredicate on the padsconfig object if you want to configure a link predicate in web inf config bsh  
  you may also call method adduploader uploader  of interface com coremedia cap generator pads padsconfiguration on the padsconfig object if you want to configure an uploader in web inf config bsh  
  using this menu item  you can start the spellchecker  
      symbol nr     function           opens the seleted document from the publication result            cuts the documents selected in the publication result            copies the documents selected in the publication result to the clipboard            approves the resource s             revokes the approval            opens the layout preview of the selected resource            simulates a publication containing all resources shown in the publication result            starts a publication containing all resources shown in the publication result            shows information on the resource selected in the publication result  the information window opens   
  the fileuploader writes files for every value it receives to the local file system  with page generation one file is created for every generated page with the file path equal to the resource uri of that page    if a fileuploader receives a value which was generated by a custom builder  it will write its serialized form to the file system  the file path is equal to the scheme specific part of the value s key    
  a jmsuploader sends jms objectmessages to a jms queue or topic  you may either use a jmsreceiver to read the messages from the queue or topic or write an own jms client to read and process the messages  for the latter case  the structure of the messages is explained here  a message can be of three different types  update  delete or commit  the message property com coremedia generator pads uploader eventtype contains the type as java lang string     update messages notify the creation or change of a value  if page generation is used  update messages contain a com coremedia generator page object as body  see api documentation   otherwise update messages contain the java object that was generated by a custom builder  delete messages are notifications that a value has been deleted  they don t have a body    update and delete messages contain the key of the value as java lang string in the message property com coremedia generator pads uploader eventkey  the key has the format  scheme   arguments   when page generation is used  the arguments are equal to the resource uri of the page    commit messages mark a consistent state  they don t have a body or key  
  please note  that custom applications which receive messages from a jmsuploader must be robust against duplicate events  
  here  links from and to pages with a resource uri that contains  audio  won t be followed  defined through the third and last predicate  with one exception  links from pages with a resource uri that contains  shop  to  audio  pages will be followed  second predicate  if the source page s resource uri does not contain  shop old   first predicate   all other links will be followed due to the default  
  right after installation  you find the pages in the web inf directory of pads  to make sure that a direct access to it is not possible by default  please copy the directories  admin  and  develop   for the development pages  one level up to make use of them  keep in mind to secure those areas by means of your servlet engine  
  a document type may contain a maximum of    properties  
  all field types have the attribute name  defining the name by which the field can be referenced in a document  
  the name can have a maximum length of    characters  dateproperty field names only    characters  and must not contain umlauts or other special characters                   two fields in a document type different only in upper or lower case are not allowed  furthermore  a name s last character must not be an underscore  since these field names are reserved for coremedia  don  use  resource    collector  and  wfinstanceid  as property names  because they interfere with some struts conventions used in wage   
  the property types are   intproperty stringproperty dateproperty xmlproperty blobproperty linklistproperty  
  please note that sci s internal user management maintains users as well as group membership and hierarchies on the content server only  the  live group  feature solely establishes stub groups without users and without hierarchy but assigned rights on the live side  only if you map users to groups through a custom scheme in the web application and you don t need hierarchical groups  this features is useful  if you want to make use of users and or hierarchical groups on an master  replication live server  you have to employ an ldap repository or any other implementation of a custom user provider  
  basically  there are three ways to establish a subject      using explicit user data in the servlet session     container managed authentication according to the servlet standard   a mixed scheme  
  in offline generator mode  ads operates independently from external http requests  instead  it autonomously creates all pages transitively reachable from one or more configurable root pages  on changes to the repository  all affected pages are automatically rebuilt and published to a pluggable uploader  these pages can then be accessed as static files by a web server  can be passed to another server or another software system  or can be stored on offline media like a cd  
      menu items    sub items    functions    my tasks        all active tasks accepted by you will be shown     offered tasks        all active tasks which you can accept will be shown     my workflows        all workflows started by you will be shown  
  note  that you must not use the same uri scheme for builders and external resources  
  please notice  that the screenshots shown in this manual can differ from the gui of your actual coremedia editor or webeditor because the gui depends on the document types and configuration which are project specific  
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text     
  note that the methods of the changecollector api mentioned so far are usually the only methods you should use  the api to add and remove changes to the changecollector is used internally by the clientresources and should not be used by the application programmer  they should only be used to resolve commit failures  see above   
  for these actionforwards to work  you have to configure the wage actionmapping subclass to be used in your struts config xml like this    action mappings type  com coremedia cap wage action wageactionmapping   
  now you have two ways to access properties of a clientdocument  using the active delivery server api  hox corem servlets document interface  or the dynabean interface mentioned above  for a clientdocument variable named clientdocument and a string property named propertyname this would look like follows  
  one main feature of the coremedia authoring server is the support for a large number of users editing coremedia resources and participating in workflows via web front end  with the coremedia editor  every user had his own session to the coremedia content server  and probably another one to the coremedia workflow server  all changes made to a coremedia resource such as changing the value of a document property  or moving a folder  were visible to other users immediately  as events were propagated to every client  
 property type internal type external type string java lang string java lang string int java lang integer   java lang string date java util calendar   java lang string linklist hox corem servlets document   hox corem servlets document   xml org w c dom element java lang string xml coremedia query  org w c dom element com coremedia cap wage queryexpression blob hox corem servlets blob com coremedia cap wage clientblob    
  the next table shows the attributes of the repositoryeventpredicate element  
    attribute  optional  description  class  no  the fully qualified class name of the repositoryevent predicate   any  yes  a custom attribute for that a corresponding setter method exists in the repositoryevent predicate class    
  you may also call method padsconfiguration addrepositoryeventpredicate on the padsconfig object if you want to configure a repository event predicate in web inf config bsh  
 variable type   workflow api type  com coremedia  workflow common  values  internal type  com coremedia  cap wage  external type  com coremedia  cap wage  string stringvalue java lang string java lang string integer integervalue java lang integer   java lang string date datevalue java util calendar   java lang string resource resourcevalue clientresource clientresource folder foldervalue clientfolder clientfolder document documentvalue clientdocument clientdocument documenttype documenttypevalue hox corem servlets resourcetype java lang string boolean booleanvalue java lang boolean java lang boolean user uservalue hox corem servlets user java lang string group groupvalue hox corem servlets group java lang string timer timervalue timervalue timervalue exception exceptionvalue com coremedia workflow  wfexception com coremedia workflow  wfexception 
  converting property values is performed by implementations of the interface com coremedia cap wage propertyconverter  implementations of the interface propertyconverterfactory  same package  are responsible for creating an adequate propertyconverter  given a type  dynaclass  and a property  string   the propertyconverterfactory may also  indirectly  access information from the current request  the only information that should be used is the request s locale and client  browser    the default mappings shown in default property mappings for document properties and in default workflow mappings for workflow variables are established by the default implementation of propertyconverterfactory called genericpropertyconverterfactory  com coremedia cap wage util   in the wage api javadoc  you find detailed information about all default propertycontverters  here  it is explained how to implement and configure a custom propertyconverter factory  utilizing the genericpropertyconverterfactory  
  the converter hox corem sgmlconverter sgml richtextconverter transforms sgmltext to richtext according to the following rules    element transformations       the root element is transformed from root to div      the elements b and i are converted to strong and em  respectively      the hox link and hox image elements are converted to a and img elements  respectively     all other elements are converted to lower case  note that this means that if you used elements not defined in coremedia sgmltext dtd  their lower case versions may not be defined in coremedia richttext     dtd  resulting in invalid xml     attribute transformations     all attributes actually defined in the coremedia sgmltext dtd must be upper case    all other accepted attributes in the sgmltext may be upper case or lower case     all fixed attributes of the target richtext elements are set automatically    the attributes of hox link  hox image  and a are converted to the corresponding xlink attributes       the a href attribute is converted to an xlink href attribute      the hox link   image id attribute is converted to an xlink href attribute containing a coremedia  uri  for img elements  the internal link does not specify a property  see  embedded images  discussion above      the img width and img height attributes are kept  in lower case       the target attribute is converted to an appropriate xlink show or xlink role attribute  target   blank     xlink show  new   target   self     xlink show  replace   otherwise for target target    xlink role target      a non empty alt attribute is converted to an xlink title attribute  for hox image elements  the alt attribute of the corresponding img element is always generated  since it is required in coremedia richtext     dtd   using the alt attribute value if present  an empty string      otherwise     table attributes are converted like this       the attributes lang  xml lang  dir  class  align  and valign are kept  in lower case       for table  the attribute summary is kept      for td  the attributes abbr  colspan  and rowspan are kept     span s class attribute is kept  in lower case     all other attributes are added to the class attribute like this       all selectors are separated by blanks           for each attribute a with value v  add a selector a  encode v   where encode   is defined in hox text util stylevalueendecoder  the encoding is necessary so that splitting the class attribute s value at spaces results in a list of  pseudo  class selectors  custom attributes  see below  have to extract and decode the value to retrieve the original attribute value      if the class attribute was already defined  the generated string is added  separated by another blank        
  the reason for converting attributes not defined in the coremedia sgmltext dtd as described above is that     such attributes have been used widely  especially in tables  and thus must be converted in some way  and     the new richtext editors support custom attributes through so called stylegroups with styleoptions in the class attribute  see editor developer manual  section          for example  if the attribute width was used for table cells  although not defined in coremedia sgmltext dtd  like this      td width         the transformed richtext fragment will look like this       td class  width         you now have to define a stylegroup  width  with styleoptions for all widths used in coremedia richtext     css  see editor developer manual  section      p       e g  like this      width            width    px         this works fine for attributes that have a limited range of values  but poses problems for arbitrary values  e g  a pixel size containing any integer number or even worse a tool tip containing any string   to allow arbitrary values for certain stylegroups  these are defined with the type string or identifier in the editor xml like this       document type  richtext         property name  richtext        editorclass  hox corem editor toolkit property richtextpane       addstylesheetgroups  width identifier td  myowngroup  string         document    when editing the attribute value  the sci editors display an input field instead of a combobox  for type identifier  the input is validated  e g  checked whether it contains a valid class selector   string values are encoded so that they do not contain spaces  and some other special characters  by hox text util stylevalueendecoder encode      on the delivery side  you need a saxfilter to plug into the domunparser  which extracts and decodes the custom attributes  the saxfilter scans for a class attribute  in startelement     and when it finds one  splits its value into the list of selectors  splitting at spaces   each selector starting with a custom attribute prefix  attribute    is extracted from the class attribute value and converted to an appropriate new attribute  usually just the name of the custom attribute  but could also be a part of some other attribute like the style attribute   where the value is the substring after the first appearance of       decoded by hox text util stylevalueendecoder decode    
  up to cap      the rights to a deleted resource whose folder was also deleted were based on the rights granted for the root folder  this was considered unsafe  because it would violate intended read rights if a subfolder in a specially protected area is erased      from sci     on  only members of the group  administrators  are granted any rights on resources with a non existent last folder     from sci     on  folders are not destroyed after deletion  so that rights to documents in trash can be computed normally according to the document s position in the hierarchy of existing and deleted folders    if access to resources with a non existent last folder  which may occur in legacy content  is needed also for non administrators  an sql script can be used to assign an existing folder  for example  the following sql statement restores the old pre sci     behaviour by assigning the root folder as the last folder    update resources r set lastfolderid      where r folderid      and not exists   select   from resources f where f id    r lastfolderid    
  note that this update will grant additional rights on all affected resources  so you should carefully review your confidentiality requirements  
  global configuration options for wage are accessed through an application scope bean with the default name wageconfig that should be instantiated in the config bsh of the authoring server   the wageconfig bean must be an instance of com coremedia cap wage wageconfig  the javadoc of that class contains information on what can be configured  in table configs  you find an overview of all configuration options and a short description  all properties can be read and modified  but are usually only modified in the config bsh  
   property name type   default value description enabledirectpublication boolean false whether direct publication should be allowed for all users  true  or only for the admin  false   in the latter case  all other users have to use some publication workflow to publish resources  this option is merely a hint for a gui to optionally suppress the respective functions  approve  publish   enableworkflow boolean true whether the workflow should be enabled  wage always opens the connection to the coremedia workflow server lazily  i e  on the first request  not on start  this option does not prevent a workflow connection  but is merely a hint for a gui to optionally suppress the respective functions  e g  buttons  menus etc    
  the new resource bundle also has to be announced directly to the coremedia namefactory and iconfactory defined in the config bsh like this  
  the attributes of the license file elements have the following meaning  
     attribute   description   explorerviewclass   use this attribute to define your own explorer view for the editor     publishviewclass   use this attribute to define your own publication view for the editor     queryviewclass use this attribute to define your own query view for the editor    workflowviewclass   use this attribute to define your own workflow view for the editor      
  starting with coremedia sci      the server verifies that resource names do not contain the slash character      such names are error prone  because they make paths difficult to parse  the names of existing resources are kept stable  but you are strongly encouraged to rename existing resources  if they happen to include a slash in their name    in particular  you must rename all offending resources before you attach a slave live server  otherwise  when the slave live server creates resources  it checks for correct resource names  possibly resulting in a failed replication   in order to find all resources that violate the naming restriction  you can issue the following sql query on both the content server and the master live server    select id   name  from resources where name  like        if any rows are returned from this query  you have to rename the affected resources on the content server appropriately   
  this document lists all third party   open source software which is used in coremedia products  if it is demanded by the licenser  you will find the text of the appropriate license printed in this manual  
  the following table lists all third party software and open source software which is used in coremedia products  if required by the license you will find a reproduction of its license in this document  
   resourcenamingfactory   parent elements   editor  
  you can use this element to define your own resourcenamingfactory  this factory creates and modifies names of resources and folders  this is intended to enable customization of how resources and folders are named or renamed in different projects or to check for allowed resource names  see the api documentation for details   own resource naming factory classes must implement resourcenamingfactory or extend basicresourcenamingfactory  
   attribute description class this attribute is used to enter the resourcenamingfactory to use   
  example   the following example shows a simple resource naming factory which allows only documents with the name  image  within the test directory     
   log level description debug the most verbose level  this can lead to huge amounts of log messages that slow down the performance  the debug log level is used for debugging where it is important to record as much as possible  info normal progress of the program  an example of a typical info message would be a user login  notice normal but significant event  rarely used  warning event which do not influence the normal progress of a program  yet   it informs that something abnormal has happened  error the simplest form of an error  the program temporarily fails to execute something  critical indicates a critical error situation  in which the whole program execution is endangered  alert denotes the output of a very critical error situation for which immediate intervention is necessary  the program continues to execute  emergency a total program or system failure where no further execution is possible   
  the possible log actions are     stdoutaction    directs log messages to the  standard output     fileaction    directs log messages to a specified log file    mailaction    sends log messages as e mail to specified receivers   you specify log actions as values of the property log action  n  class  you can configure different log actions even for the same log messages  note that all log action properties for the same log action must have the same number  n   see examples below    when you start a coremedia installation for the first time you should always configure components with log level  debug   later the log level can be reduced to  info  or  notice   if you then detect a problem or error  you can set the log level back to debug level and analyse the logs both on client and server side before calling the coremedia support   if fileaction and mailaction are configured  certain arguments must be configured in the log action  n   initargs property  no additional arguments are required for stdoutaction  
  fileaction   argument description file name of the log file  filesize after reaching the file size  in kb  a new file is created  the new file is named as specified in file  the old file is saved with a name composed of file and the current date and time  writeops number of write operations after which the size of the file is checked  if the size exceeds the value of filesize a new file is created   
  mailaction   argument description to recipient of the mail  from sender of the mail  optional   smtp host if no smtp host is entered  the local computer is contacted  optional   cc other recipients  optional    
  for the precise syntax see the following examples   log  debug  level messages from all logs to stdout  output according to environment settings    log action   class stdoutaction log action   selectors debug  log  info  level messages from all logs in a file   the file is saved as var logs capserver log   after reaching a size of  mb  checked after every      write operations   the file is closed and a new file is created   log action   class fileaction log action   selectors info log action   initargs file var logs capserver log   filesize       writeops       send emails with  critical  level messages from all logs    an e mail is sent with every  critical  log message  the recipient is  admin customer com   the sender is  coremedia customer com   the smtp host is  mailserver    and a copy is sent to  operator customer com    log action   class mailaction log action   selectors critical log action   initargs to admin customer com   from coremedia customer com  smtp host mailserver     cc operator customer com 
   attribute optional description name  a unique name which is used as component parameter in a cm watchdog  start stop       component   command and configured in the watchdog jpif file when registering a windows service  startaction  the name of the action which should be executed first when the watchdog is started  if this is a simple status test  probe   it s the only action which is executed  delay x the attribute specifies the delay in seconds until the action defined in the startaction attribute is executed   
   attribute optional description name  the name of the action  it must be unique within the configuration file  interval x interval  in seconds  at which the number of action calls is checked  checking is switched off with      default   events x maximum permissible number of calls of the action within  interval   if the maximum number is exceeded  the action is not executed and the error message      is delivered   events  is only used if  interval          timeout x time  in seconds  to wait until a pending action is cancelled with the error message       the default value is    seconds   
  in addition  specific attributes can be assigned to the actions  these can be found in the following description of the actions   possible actions 
   attribute optional description from  the name of the action from which the edge starts  to  the name of the action which follows  code  result code  numerical entry or symbolic name   if this value equals the result code of the action named in the from attribute then the action named in the to attribute is executed  edges may not start from the same action with the same error code to different target actions  to avoid defining an  edge   tag for all error codes  the edge with the error code  error  or      serves as the default edge  if an error occurs for which no edge is defined  the watchdog process will follow the edge with result code  error   delay x this attribute specifies the delay in seconds until the subsequent action is executed  the default value is    seconds   
  example   if the watchdog process has to execute an action  b  in case an action  a  returns with result code      you have to configure    edge from  a  to  b  code        
  in coremedia sci      a new xml richtext format  coremedia richtext      was introduced as a successor of the sgmltext format  in sci      it is possible to edit sgmltext as well as richtext in the coremedia editor  in the sci     webeditor  editing richtext in a wysiwyg fashion is possible  while editing sgmltext is very cumbersome  mark up editing with little support  and thus not recommended  in coremedia sci      the sgmltext property editor in the coremedia editor has been removed  therefore it is necessary to migrate sgmltext properties to richtext properties  the following sections describe how to do this and which aspects have to be considered  
  an sgmltext property is defined in the document type model    doctypes xml  like this       doctype name  mydoctype        sgmltextproperty name  text        doctype   a richtext property is defined as an xmlproperty with the predefined xml grammar named  coremedia richtext            doctype name  mydoctype        xmlproperty name  text  grammar  coremedia richtext            doctype   when migrating from sgmltext to richtext  you can simply change the definition of an existing sgmltext property as in the example above  the sci server contains an on the fly converter for  coremedia richtext      xmlproperties that detects content in the old sgmltext format  by checking the root element for  root    the rules used for transformation are described below in detail   when migrating to sci      you can decide for each property whether you want to convert it to richtext or keep it in sgmltext  in sci      sgmltext can no longer be edited  so you have to migrate all sgmltext properties that were edited using the sgmltexteditor to richtext   in rare cases  sgmltextproperties were used to store custom xml corresponding to some other dtd  or no dtd at all  and special property editors were implemented  in these cases  you should change the document type definition into an xmlproperty with a custom defined xmlgrammar  so that the on the fly converter to richtext is not used  i e       doctype name  myspecialdoctype        sgmltextproperty name  somexml        doctype   would become      xmlgrammar name  somexml            root  foo            systemid  lib xml somexml dtd          doctype name  myspecialdoctype       xmlproperty name  xml  grammar  somexml    
  you have to consider the following aspects when you tell the server to convert sgmltext to richtext    unparsing   linkfilter    use the domunparser with the new linkfilter for richtext in hox corem servlets text instead of hox corem servlets beans internallinkfilter  if you have defined your own domunparser or some filter  most commonly a linkfilter  that is used with the standard domunparser  you may have to adapt this filter to the richtext format  if you only use the standard xml property templates  these automatically use the new linkfilter     embedded images   in contrast to the hox image element in sgmltext  embedded images in richtext reference not only a document  by id   but also the name of the blobproperty that contains the image data  this name has to be complemented when sgmltext is converted to richtext  since the automatic converter does not know which property to use  it is left empty  in the cm editor  a  broken image  is displayed  but the user can edit the image attributes and complement the desired blobproperty manually  it you want to automate this process  implement a custom richtextconverter  see below      custom sgmltext attributes    in many cases  custom attributes not defined in the coremedia sgmltext dtd were used  especially in tables  the on the fly converter converts these attributes in a way that usually allows to achieve a wyswyg behavior within the new richtext editors  after the converter is described in detail  you find hints how to configure the system to support the converted custom attributes     other sgmltext extensions    if the sgmltext properties contain content that is not converted satisfactorily  because the coremedia sgmltext dtd was neglected   you can still engage in the conversion process  for each xmlproperty  you can define a converter that runs on the sci server every time content is  retrieved from the repository  the default conversion for sgmltext to richtext is done by the class hox corem sgmlconverter sgml richtextconverter  contained in cap base jar  and described below  all converters must be derived from hox text sax saxfilter  in principle a saxeventhandler that can easily be chained  see javadoc  and configured in sql properties like this     sql store convert  documenttype   propertytype   com customer xmlconverter     note that converters are not inherited  if you configure a converter for a richtext property  it replaces the sgml richtextconverter  to reuse its conversion method  build up a chain from your converter to the sgml richtextconverter or reuse members of an sgml richtextconverter that are public api  see javadoc       
  please do not use special characters in resource names  they can cause trouble in publication  esp                               the server checks for the following resource names   which start or end with a space  which only consist of one or two dots  which are empty  which contain the slash       you can t create resources with such names  
  use this element to enable or disable the spellchecker  it s also the container element for the configuration of the spellchecker  
  note  the required jdbc drivers are not part of the coremedia sci distribution  they must be obtained from the corresponding database manufacturer  
  don t change the resource names using sql  otherwise  the changes will not be registered in the changelog  this may cause severe trouble e g  with the pads  
  if only a few rows are returned  you may change the resource names manually  otherwise  you might write a scripting client which replaces slashes by hyphens or perform another suitable character replacement  having changed the resources  make sure to republish the names of already published resources  afterwards  rerun the query on both servers to make sure that all slashes have been removed  
  note  that recovery will not work correctly  if this given chronological order of backups is not respected  the content of the content server must be newer than the content of the master live server  and the content of the master live server must be newer than the content of the slave live servers  the time between the single backups should be short  try to avoid publishing deletions while the backups are made  
  the license restriction does not apply to the global search replace workflow  if you have chosen this workflow  you can later upload one of the other predefined workflows  but again only once   if you want to use the global search replace workflow  you have to upload the global search replace workflow with the upload utility  execute the command  cm upload  u   username   p  password   n global search replace xml  and replace  username  and  password  with the user name and password of an administrative user  to start this workflow  at least one user must be a member of the group composer role   if you have purchased a license for the coremedia workflow server  unlimited edition   it is possible to adapt the global search replace workflow to your needs  
   parameter description  r recursive import of files and subdirectories on entry of a directory to be imported  v logging in info mode  v  logging in debug mode  u name of the user   d the domain of the user   p password of the user  
  without the options  v or  v  logging in error mode is used by default  on executing the program  the path of at least one xml file or directory must be given as argument  relative paths are allowed and refer to the current directory in which the program was started   server export  the exporter command has the following syntax   cm serverexport   r    enc xml encoding    u user    d domain    p password   b basedir   id   path      cut  cutoff    the options have the following meaning  
   parameter description  r recursive export of files and subdirectories on entry of a directory for export   b the directory in which the exported xml files are saved  a relative path is relative to the working directory   enc the encoding of the server export   iso         creates a server export in iso latin    the default value is  utf    which creates an export in unicode  used values for coding must be supported by java   u name of the user  as default  the export is executed with the user  serverdump    d the domain of the user   p password of the user  as default  the password is  serverdump    cut the serverexport utility exports the files in a directory structure which reflects the folder structure of the coremedia repository  the resulting path length may exceed os limits  so you can use the  cut option to limit the maximum path length  by default  no limit will be applied  the shortened path will not affect the re import of the exported files   
  as optional arguments  the ids or the folder paths of coremedia resources can be entered   example   cm serverexport  r  u admin  p admin  b  export       this call of serverexport will export all documents and subfolders   r  of the folder with the id      into the  export directory  the program logs in at the server as the admin user  using the admin password  which should never be admin as in the example   
   parameter description  xml  url    the xml file to be transformed  the location of the file can be given as a http or file uri  if the uri starts with  file      the given prefix is removed and a normal filesystem lookup is performed  the cm script changes the working directory to  corem home  thus the path to the xml file must be specified relative to this directory   example   xml file   properties corem editor xml  xsl  url  the xsl file used for the transformation  see above for the file lookup   out  file    the output file of the transformation  the location of the file can be given as a path relative to  corem home    example   out properties corem output xml  mode  pretty   tidy   normal    the format of the output can be specified   pretty  indents elements and attributes in a readable way   tidy  removes all unnecessary whitespaces  this results in a compact format   normal  nothing is changed in the output file   
   parameter description  print prints out the table content   deleteuser  user id    deletes all entries for this user  and thus is utilized for the recycling of licenses    
   parameter description  e if this parameter is set  the output of cm validate is printed in a format parsable by emacs  this is useful if cm validate is run from within emacs  then the user is able to click on errors to jump to the given line of the file  file the file to parse  the location of the file must be given relative to  coremedia home   
  three types of errors can occur  error description error the xml file is not correct against the dtd  thus it is invalid but it can be parsed  i e  it is well formed   fatal error the xml file is not wellformed  parsing is impossible  warning can be ignored   the error messages are given with line and column number  
  the query window shows only the results for which you have read rights  this may lead to the following phenomenon  you execute a query without hit limit  get e g      hits and a lot of results are shown in the window  now  you start the same query with a hit limit of e g      no  or less than     results are shown  this follows from the fact  that you have no read rights for some of the first    hits   
  this manual is addressed to developers of coremedia projects who want to develop content applications using the unified api that was introduced with coremedia cms       they ll find a description of ideas and concepts  building blocks  and detailed examples  
    select the content management server option for multi site or single site server and click  next         now you will be asked for search engine options   
 select the coremedia content server option and click  next       the next window for choosing  the server type opens up   
  if you are using multi site management for a coremedia cms installation  more than one master live server may be connected to one content management server  to each of the master live servers a number of base folders is assigned  i e   folders located immediately below the root folder of the content management server  when performing a publication  the target master live server is determined by the base folder that contains the resources to be published    in this scenario  each base folder can be thought of as an isolated single site content management server  resources cannot be moved across boundaries of base folders  just as they cannot be moved outside a content management server  publications can only span single base folders and published links must always connect resources within one base folder  this ensures that a base folder on the live server can be guaranteed to be self contained  avoiding dangling link problems during delivery   in the following we will give some hints on how to deploy multi site management in different contexts  
  you have to enable multi site publication before the first start of the content management server  to do so  you have to add the following property to the capserver properties file of your content management server   cap server multipleliveservers true 
  configuration of multi site publishing means configuration of the publication targets  for each target the content management server needs a set of properties which have to be defined in the  coremediahome  properties corem publisher properties file  you have to replace  n  with a consecutive number for each property set  starting with      it is possible to change the publication target configuration after the first start of the server and even if the server is running   
  publication targets can be added dynamically as needed  simply install a new master live server and add a new group of properties to the publisher properties file of the content management server  the content management server will reload the property file automatically within a few seconds and schedule subsequent publications according to the updated information    take special care if rules for live groups are defined on the root folder  such rules are published to all master live servers upon creation  when adding a new master live server  rules on the root folder are missing in that server at first  you can transfer these rules to the new server  if you log in to the content editor as user admin  open the user manager window and select files synchronize live rules  
  the coremedia content server is the central component in the coremedia system  among other things  it manages the content repository and the user authorization  it comes in three flavours   the content management server the master live server s  the replication live server s   this chapter gives a description of the concepts and configuration of the coremedia content server  in a third subchapter you will find a reference listing of all property files you can use for configuration of this server  
  this chapter describes some concepts and details of the coremedia servers which are important for your administrative work  if you want to get deeper insight into the coremedia system  you should read this chapter  
  pads distinguishes between top level and fragment values  top level values  such as pages  are sent to the uploaders  fragment values are only helper values embedded into others  pads performs a reachability based garbage collection scheme on top level values before every upload phase  resulting in  delete  events for unreachable top level values   no such garbage collection is performed for fragments as it would slow down pads  operation too much   although most unused fragments are invalidated at some point and automatically deleted  this means that your database may grow in size through unused  yet valid fragments  if database disk size is an issue  you should therefore regularly clean the pads database from such fragments using the fragment cleaner   
  danger  database content may become invalid  before invoking the fragment cleaner  shut down pads  the fragment cleaner operates directly on the database and concurrent use may render the database content invalid   
  in order to invoke the fragment cleaner  run   padswebapphome  web inf bin cm cleanfragments    depth  depth    the cleaner operates in iterative passes  cleaning one dependency level after another  until no more unreachable fragments can be found  you can limit the number of levels  in order to limit the required runtime  with the switch   depth  depth  where depth is a positive number  logging is performed to the same file as by pads   expect the fragment cleaner to run from several seconds to a few minutes  depending on the size and performance of your database   
  in this chapter it will be discussed if the various repository clients might require an update of their configuration or code  the new configurations or implementations are tested against a test version of the multi site repository   migrating importers  importer configurations have to take into account that the target folder for imported resources will change due to the newly inserted top level folder   migrating the user manager  normally  the home folders of users are not published  so they may stay in place  not moving them into the new top level folder  in the case that the home folders should be moved  the user information retrieved from ldap servers must be updated to reflect the new repository layout  the preferred way of doing this is to use a modified userprovider that handles the change  users from the built in user management reference the home folder by id and as such are more robust with respect to repository restructurings   migrating the generators  the jsps and uri formatters must be updated to make use of the new repository layout internally  but provide stable urls for external clients as far as possible  a url rewriter in front of the coremedia system might help with this task  but further changes have to be made  some well known resources might be accessed using their path  the generated uris might strongly depend on the path  and so on   migrating other clients  scripting clients or workflows  too  might make use of well known resources for retrieving configuration information or for storing temporary data  
  when you have ported all clients to the new repository layout in the test environment  the migration must also be performed in the content management environment  
  the migration the content servers is a critical operation that must be scheduled and supervised most carefully  
  perform a dry run of the following steps firstly using dedicated test servers to gain knowledge about the delays involved in the various steps and to ensure that all steps work correctly   you have to pay special attention to backup procedures before and during the migration  make sure that there is an up to date backup of the servers and database schemas that will be modified  using the information gained during the test phase  install new instances of all clients that need updating  do not yet start the new clients  but make sure that they are correctly prepared for start up and connection to the main servers  stop all editorial work  shutdown or reconfigure the watchdogs as applicable  because many processes are going to be down soon  stop all writing clients  including  but not limited to  importers and scripts   make sure to re schedule all periodic tasks that would happen in the next hours   shut down the workflow server  shut down the preview ads and all other reading clients that access the content management server  make sure that all replication live servers have caught up with the master live server  you may use the tool cm events on the replication live servers for this purpose  stop all clients that are attached to the live servers  including  but not limited to  ads and pads  at this point of time  your live site is down  update the folder structure of the content management server  publish the changes   this is typically done using the same script that was used to set up the test environment   make sure that all replication live servers have caught up with the master live server  replicating the change of the repository structure  start the new instances of ads and pads that were previously installed in step    at this point of time  your live site is up  because the ads are starting up with empty caches  expect high load on the servers at this point of time  wait until the load has returned to normal levels  start new instances of other reading clients on the replication live servers  shutdown the content management server  run cm multisiteconverter in the directory where the content management server is installed and on the host where the content management server is supposed to be running  the runtime may vary depending on the actual size of the repository and the performance of the database  but     resources per second were achieved in a large example migration  start the content management server  update the file publisher properties to include the new top level folder as its single publication target  to this end  you will have to comment out existing configuration parameters and add new configuration parameters  start the workflow server  start the new instances of clients at the content management server side  make sure to keep track of the correct start up order  if that is required  start or reconfigure the watchdogs as applicable  enable periodic tasks  possibly re scheduling next runs as needed based on the actual downtime  resume editorial work   once the migration of the primary publication target is done  set up additional publication targets as needed  
  the actions described in this section might be required if there are documents in the content repository that were moved into the recycle bin using release     or earlier  if the previous folder of such documents was destroyed in the mean time  the automatic update procedure will not be able to determine a proper base folder for them  they will be treated as though they were located in the root folder  documents receive the root folder as their base folder  this means that such documents can only be restored into the root folder when removing them from the recycle bin  if this is not acceptable for you  then you must restore all resources from trash into a temporary folder that is placed in the proper base folder during migration  after the migration the temporary folder as well as the recovered documents can be move to the recycle bin again  for the recovery of resources from the recycle bin  you may use scripted queries or editor queries at your discretion  
  the coremedia cms provides a series of server utility programs for information  adjustment and optimization of the server processes   basically there are four categories of such tools   information  the informational tools allow to inspect the current state of the coremedia cms  you can dump all kinds of server objects  e g  resources  running processes or used licenses  furthermore you can query system information about the coremedia cms itself  esp  the version   which becomes important whenever you submit a support request   operation  with the operational tools you control the coremedia cms  this includes cleaning up the repository  uploading new workflow definitions and maintaining the database    repository  the repository tools allow you to execute actions normally performed by the editors  like approving and publishing resources or starting workflows  they are emergency tools  needed only in exceptional cases to fix the repository immediately when something went wrong   miscellaneous  these tools are actually not coremedia cms related  they provide generally useful functions like validating and transforming xml documents   
  this section covers the informational server utilities  all these tools are  read only   i e  none of them modifies the server or the repository      dump  shows detailed data of any cms object  resources  processes  users         events  shows events at the content server and workflow server    license  shows the configured coremedia cms license data   processdefinitions  shows all uploaded workflow process definitions   processes  shows all running workflow processes   publications  shows all running publications   rules  shows all rules declared in this repository   sessions  shows all open sessions   systeminfo  shows coremedia cms installation details  
   parameter description  u  name  the name of the user  d  domain  the domain of the user  optional  only for ldap users   p  password  the password of the user  this is optional  if you don t specify the password on the command line  e g  because you don t want it to be stored in the shell history  the tool will prompt for it at runtime   url  ior url  the ior url of the content server  optional   
  these options are common for most of the server utilities  and we will therefore not mention them in detail for each tool  note that most server utilities require administrative permissions and thus can only be run with users of administrative groups    if you are not sure how to use a utility  just start it without any options to print out a summary of its usage  
  the repository tools described in this section perform some basic editorial tasks   approve  approves a resource publish  publishes a resource destroy  deletes an object in the repository start  start a new workflow process republish  republish a set of resources which have been published in the recent past  publishall  publish all resources to a newly set up master live server  recreating the live repository   
  apart from the actual server tools we provide some generally useful utilities  you don t need them to run coremedia cms  but nevertheless you might like them     ior  shows the content of an ior in readable format   transform  transforms an xml document by xslt   validate  validates an xml document against its dtd  since these tools don t access the coremedia cms server  they don t support the standard options  
  the dump utility prints out arbitrary objects of the coremedia cms repository  you will probably use it mainly to dump resources  but you can also dump users  processes etc  
  usage  cm dump  u  user   other options    id    id           t  path    path           pn  name    name           cn  name    name           un  name    name           gn  name    name         unless properly prefixed  ids are interpreted as content ids    available options     d   domain                   domain for login                                 default  builtin     e   encoding                 output encoding for dump                                 default platform encoding    cn   contenttype name        names of contenttypes to dump   gn   group  group            names of groups to dump   p   password                 password for login   pn   processdefinition name  names of processdefinitions                                 to dump   t   paths                    path of contents to dump   u   user                     user for login  required    un   user name  user         names of users to dump   url  ior url                 url to connect to 
  the options have the following meaning  
   parameter description  e  encoding  choose the encoding of the dump output   iso         creates a dump in iso latin     utf    creates a unicode dump  the default value is the platform encoding  consult the api documentation of java nio charset charset of your particular jre to find out other supported values   un  names  the named users to dump   gn  names  the named groups to dump  pn  names  the named processdefinitions   workflows   to dump  cn  names  the named contenttypes to dump  t  paths  the paths of resources to dump   
  the standard way to specify a resource to be dumped is its id   e g  to dump the root folder you call    cm dump  u admin  p admin    and get a result like   content  coremedia    cap content     type  folder  coremedia    cap contenttype folder     path      created by  admin  coremedia    cap user     creation date                t                 modified by  admin  coremedia    cap user          modification date            t                 is place approved  true  place approved by          place approval date            t                 is published  true  published by     publication date                 t                 to be deleted  false  to be withdrawn  false   is checked out  false  current editor      children        home  coremedia    cap content         inbox  coremedia    cap content         system  coremedia    cap content         work  coremedia    cap content          work   coremedia    cap content      the result for a document looks similar  instead of the children you get detailed information about all versions of the document  if you don t know the ids of the resources you want to dump  you can alternatively specify their paths with the  t option  e g     cm dump  u admin  p admin  t  work article   work image   you can dump users and groups by specifying their names with the  n option  e g     cm dump  u admin  p admin  un publisher  gn system  dumps the user publisher and the group system    however  all these examples are only special convenient variants of invoking the dump tool  as you can see in the very first line of the result of dumping the root folder  the actual id of the root folder is not    but coremedia    cap content    and this format is the general way to use dump      cm dump  u admin  p admin coremedia    cap content    each coremedia cms object has such an id and can be dumped  try the above example for dumping users and groups  and you will get ids like coremedia    cap user   and coremedia    cap group    you will obtain ids of other objects  e g  running processes  by the other server tools     
  the license utility prints out the license data of the coremedia cms installation for each service  
  usage  cm license  u  user   other options    v  available options    d   domain  domain name    domain for login  default  builtin     p   password  password     password for login   u   user  user name        user for login  required    url  ior url               url to connect to   v                          verbose 
  the license tool has only one additional option  
   parameter description  v verbose output  prints out additional information  
  the processes utility shows all running workflow processes  
  usage  cm processes  u  user   other options    v  available options    d   domain  domain name    domain for login  default  builtin     p   password  password     password for login   u   user  user name        user for login  required    url  ior url               url to connect to   v                          verbose 
  the publications utility shows all running publications  
  usage  cm publications  u  user   other options    v  available options    d   domain  domain name    domain for login  default  builtin     p   password  password     password for login   u   user  user name        user for login  required    url  ior url               url to connect to   v                          verbose 
  the publications tool has only one additional option  
   parameter description  v  verbose output  prints out additional information  
  the rules utility prints out all rules declared for a resource or in the entire repository  
  usage  cm rules  u  user   other options  available options    d   domain  domain name  domain for login  default  builtin     p   password  password  password for login   u   user  user name  user for login  required    url  ior url  url to connect to   t    paths  path  path of contents to dump  rules has one additional option  
  the sessions utility shows all open sessions  
  usage  cm sessions  u  user   other options    v  available options    d   domain  domain name  domain for login  default   builtin     p   password  password  password for login   u   user  user name  user for login  required    url  ior url  url to connect to   v verbose 
  the sessions tool has only one additional option  
   parameter description  v verbose output  prints out additional information  
  the verbose output of the sessions utility looks like this  sample  one session only      session  coremedia    cap session        privileged  false     user  rolf  coremedia    cap user        client type  gui editor     host  nightshade               started at            t                   service  coremedia    cap service editor  
  the systeminfo tool prints out information about the coremedia cms installation itself  this includes especially the version which you will need whenever you request support  
  usage  cm systeminfo  u  user   other options  available options    d   domain  domain name  domain for login  default  builtin     p   password  password  password for login   u   user  user name  user for login  required    url  ior url  url to connect to 
  i e  systeminfo has none but the standard options   the output of systeminfo covers the client environment in which systeminfo itself is running  the content server and  if available  the workflow server  it contains information about the coremedia cms versions   the jvm versions  the operating systems  the occupied ports and some configuration details  
  the dbindex utility is for creating an index over the folder structure of your coremedia cms repository  this index will enhance the speed of a query using the descendantof criterion  however  maintaining this index may affect the performance of the server  especially if you restructure large folders frequently  there is no need to create the index if descendantof queries are used rarely or the folder tree is small   you cannot access the coremedia cms repository for some minutes after start of the utility   
  usage  cm dbindex  u  user   other options      create     drop               rebuild     enable     disable   available options    b   rebuild               rebuild index   c   create                create index   r   drop                  drop index   e   enable                enable index   i   disable               disable index   p   password  password    password for login   d   domain  domain name  domain for login  default  builtin     u   user  user name       user for login  required    url  ior url              url to connect to 
  the options have the following meaning  
   parameter description  b rebuild the existing index  you need this only in exceptional cases  normally you will create or enable the index   c create the index for the first time or after you dropped it   r drop the index   e enable the index after you temporarily disabled it  after major changes in the folder structure it might be faster to drop and create the index   i temporarily disable the index  you might want to do so for some fast changes in the folder structure   
  after changes in the folder structure have been made  the index is automatically updated while the content server is online  if a large portion of the folder structure changes  i e  several moves of large sub trees have been made  this may take a moment  so  there can be a short delay in descendantof queries afterwards   to avoid unnecessary updates of the database  the index on a live system  master live server or rls  should only be enabled if there are descendantof queries from inside the active delivery server jsp templates  
  usage  cm killsession  u  user   other options   session      available options    d   domain  domain name    domain for login  default  builtin     p   password  password     password for login   u   user  user name        user for login  required    url  ior url               url to connect to 
  i e  killsession has none but the standard options  
  the options have the following meaning  
  note that you cannot switch the runlevel from offline mode  you have to restart the server instead  
  use this utility with care  tracesession will produce additional load on the server and will slow down the system  only use tracesession for debugging custom clients or to determine the cause for unusual peaks in the server load but not for daily logging  the output of tracesession is very technical  so you probably will only benefit from it in cooperation with a coremedia consultant or the coremedia support  
  usage  cm tracesession  u  user   other options   s  session    q            tracesession  u  user   other options   t  type    q  available options    d   domain  domain name    domain for login  default  builtin     p   password  password     password for login   q                          quit tracing   s   session  session       id of the session to be traced   t   type  type             type of the sessions to be traced                               one of  unknown  editor  scripting                                 generator  publisher replicator                                watchdog  importer  utility  uapi                                all    u   user  user name        user for login  required    url  ior url               url to connect to 
  the options have the following meaning  
  this chapter describes some concepts and details of the coremedia workflow server which are important for your administrative work  if you want to get deeper insight into the coremedia system  you should read this chapter  
  we recommend that you separate the tracesession logging from the standard logging  which usually goes to capserver log   because a mixture of both looks pretty cluttered and is hard to read  just configure an additional log action in capserver properties  e g  
    write all trace output to a log file log action   class fileaction log action   selectors trace debug log action   initargs   file var logs capserver trace log filesize      writeops      
  now you can start tracesession  e g  a user s editor session which you found with the sessions tool     cm tracesession  u admin  p admin  s coremedia    cap session     traces started by id and by type are independent of each other  i e  you cannot stop tracing the above session with    cm tracesession  u admin  p admin  t editor  q  although it is an editor session  you can only stop it by id  just like you started it  
  an administrative user has a modified workflow view in the coremedia editor  his worklist contains all available process definitions  all running processes and all tasks that have warnings or are escalated  an administrator possesses all rights on the shown items  for the usage of the workflow view in the coremedia editor see the user manual   if a task fails because of technical reasons  e g the network is down and therefore a publication fails   an administrator can retry a task after solving the problem  nevertheless it s better practice  if the task performer retries the task   proceed as follows  select the escalated task  you will find a description of the state icons of the workflow in the user manual     choose the menu item file retry     
  with the approve tool you can approve resources  
  usage  cm approve  u  user   other options                       id    id          t  path    path                              c  id    id          v  id    id        available options    c   contents  contents    ids of contents to place approve                               ids are represented as                              coremedia    cap content        d   domain  domain name   domain for login  default  builtin     p   password  password    password for login   t   paths  paths          paths of contents to approve   u   user  user name       user for login  required    url  ior url              url to connect to   v   versions  versions    ids of versions whose properties are                             approved  ids are represented as                              coremedia    cap version         
  the options have the following meaning  
   parameter description  c ids of resources to be approved  ids have the following format  coremeda    cap content        t the paths of the resources to be approved  v ids of document versions to be approved  ids have the following format  coremeda    cap version          where    must be replaced by the version number you want to approve   
  with the publish tool you can publish resources  
  usage  cm publish  u  user   other options               id    id          t  path    path        available options    d   domain  domain name    domain for login  default  builtin     p   password  password     password for login   t   paths  paths           path of objects to publish   u   user  user name        user for login  required    url  ior url               url to connect to 
  the options have the following meaning  
   parameter description  t the paths of the resources to be published  
  with the destroy tool you can delete resources from the repository  
  usage  cm destroy  u  user   other options               id    id          t  path    path                   unless properly prefixed  coremedia    cap                  ids are interpreted as content ids  available options    d   domain  domain name    domain for login  default  builtin     f   force                  force destruction of folders with                               children   p   password  password     password for login   t   paths  paths           path of contents to destroy   u   user  user name        user for login  required    url  ior url               url to connect to 
  the options have the following meaning  
   parameter description  t the paths of the resources to be destroyed  f force the destruction of non empty folders  which is normally forbidden due to safety considerations  
  if no options are used or if you specify the resourced by their paths with the  t option  approve approves the resources eagerly     if the resource is checked out  approve checks it in first    the latest version is approved    the place is approved   if you set the  c flag  only the places of the resources are approved  if you set the  v flag  only the specified versions are approved  
  the coremedia workflow server is the component of a coremedia system that manages workflows    this chapter gives a description of the concepts and configuration of the coremedia workflow server  in a third subchapter you will find a reference listing of all property files you can use for configuration of these servers  if you want to write your own workflows  please refer to the coremedia workflow developer manual  
  if you have purchased the coremedia workflow server  unlimited edition   you can simply supplement this workflow with an immediate publication of the changed documents  extract the global search replace xml file from the workflows zip file and uncomment the lines shown in the example below  
  the coremedia webediting server is the component which offers access to the coremedia repository using other tools than the coremedia editor  it covers the following topics   webdav access you can access coremedia resources using a webdav enabled editor e g  microsoft word  wage api you can use the wage api to program your own web clients to access the coremedia resources  see the coremedia wage developer manual for an in depth description of this api  coremedia webeditor the coremedia webeditor is an application of the wage api which offers access to the coremedia resources using a simple browser  the look and feel is similar to the coremedia editor   
  the administrator can configure the coremedia editor using two types of files  property files  which are mainly used for technical concerns like the connection to the server or the logging of the editor and xml files which are mainly used to configure the appearance of the coremedia editor  e g  which information is shown in the document overview  which buttons are shown in the toolbar or which fields are hidden in the document window  you will find a detailed description of the xml files in the coremedia editor developer manual   the following property files exist   capclient properties workflowclient properties editor properties proxy properties mime properties language mapping properties  
  the cm editor is a coremedia component for editing and creating documents on the coremedia content server  this component covers the complete editorial workflow process  furthermore  user administration and a convenient query interface for searching for documents are integrated into the editor  
   property value default description   workflow client server ior url http   host name port workflow ior  defines the url where to get the ior of the workflow server  the host name and port in the url must match with the host name and port in the workflowserver properties file    workflow user  workflow password  workflow domain    workflow user name    workflowuserpassword    w orkflowuserdomain   as a default  a workflow client  but not the coremedia editor  connects to the content server as the workflow user  here you can define a different user to connect with the server  replace  workflowusername    workflowuserpassword  and  workflowuserdomain  with your user name  domain and or password   
  you can shorten the login time if you pre define the username  password and domain of the user  the login window of the coremedia editor is automatically filled with these data  you can even skip this window completely  so that the user will login immediately   
  not mandatory  by default  the user set in the environment of the computer will be used  
  configure in the following files   editor properties editor startup xml  the settings of editor properties will be overwritten by the editor startup xml settings  
  pre define the username  editor properties enter the name of the user into the login username property  editor startup xml   enter the name of the user into the attribute loginname of the  editor  element  pre define the password  editor properties enter the password of the user into the login password property  editor startup xml enter the password of the user into the attribute loginpassword of the  editor   element  pre define the domain  editor properties enter the name of the user into the login domain property  editor startup xml enter the name of the user into the attribute logindomain of the  editor   element  define immediate login  in order to use this functionality you have to define the appropriate login data of the user as described above   editor properties enter  true  into the login immediate property  editor startup xml enter  true  into the attribute loginimmediate of the  editor   element        
  the publish tool publishes the very latest versions  including working revisions of checked out documents  of the specified resources immediately  this includes all mandatory preliminary actions     checking in the resource   approving the latest version   approving the place  for the whole path   publish does not cause dead links on the master server but also publishes all referenced resources if necessary  however  those referenced resources are not published as eagerly as the specified resources  if a referenced resource is already published  nothing is done  otherwise the latest approved version is published  if there is no approved version  the very latest version is published   
  the download tool fetches a process definition and possibly an associated jar from the workflow server and writes them into files  
  not mandatory  you only need to do this configuration if you want to use group or user specific configuration files or if you want to administrate the files centrally on the content server  otherwise  the following files in the folder  coremediainstall  properties corem are used by default   editor startup xml editor xml 
  configure in the following file   editor properties 
  example     group configuration http   localhost       coremedia files properties corem editor     xml     the user belongs to the groups editors and cvd  thus  the files with the url http   localhost       coremedia files properties corem editor editors xml and http   localhost       coremedia files properties corem editor cvd xml will be loaded in an arbitrary order   
  administrating the xml files on the server store the xml files in the properties corem directory of the content server  enter the following url into the configuration property of the xml file in the editor properties file    http     serverhost   serverport  coremedia files properties corem  editor xmlfilename     replace   serverhost  with the host name of the content server and  serverport  with the port of the content server         enter the names of the xml files in the properties policy server policy file of the server in order to allow the server to deliver the files  the entry must look as shown in the next code example  
  the administrator can configure the coremedia editor using two types of files  property files  which are mainly used for technical concerns like the connection to the server or the logging of the editor and xml files which are mainly used to configure the appearance of the coremedia editor  e g  which information is shown in the document overview  which buttons are shown in the toolbar or which fields are hidden in the document window  you will find a detailed description of the xml files in the coremedia editor developer manual   the following property files exist   capclient properties workflowclient properties editor properties proxy properties mime properties language mapping properties  
  usage  cm download  u  user   other options              f  definition path               j  jar path    process definition id  available options    j   jar  jar               file name of the workflow jar to                               download                               default processdefinition  id  jar    f   definition  definition    file name of the                               workflow definition to download                               default processdefinition  id  xml    d   domain  domain name    domain for login  default  builtin     p   password  password     password for login   u   user  user name        user for login  required    url  ior url               url to connect to 
  the options have the following meaning  
   parameters description  j the name of the jar file  if there is no custom jar file associated with the process definition  this option is irrelevant   f the name of the xml file for the process definition   
  you can configure the look and feel of the richtext pane of the coremedia editor using the coremedia richtext     css file  see the editor developer manual for details   it is possible to administrate this css file centrally on the server and deliver it to the clients  
  not mandatory  by default  the file  coremediahome  properties css coremedia richtext     css file will be used  
  the downloaded process definition corresponds to the coremedia workflow dtd  
  configure in   editor properties 
 store the css file in the properties corem directory of the content server  enter the following url into the property editor richtext css location of the editor properties file    http     serverhost   serverport   coremedia files properties corem   css filename       replace  serverhost  with the host name of the content server and  serverport  with the port of the content server     enter the names of the xml files in the properties policy server policy file of the server in order to allow the server to deliver the files  the entry must look as shown below  
  with the enable tool you can enable or disable process definitions   
  usage  cm enable  u  user   other options               n  name    name          i  name    name        available options    d   domain  domain name    domain for login  default  builtin     i   disable  disable       names of workflows to disable   n   enable  enable         names of workflows to enable   p   password  password     password for login   u   user  user name        user for login  required    url  ior url               url to connect to 
  the options have the following meaning  
   parameters description  i disable the specified workflows   n enable the specified workflows   
  editors cannot start new workflows from disabled process definitions  initially uploaded process definitions are enabled  
  with the start tool you can start new workflows  
  usage  cm start  u  user   other options             pn  name    name          id    id        available options    d   domain                   domain for login                                  default  builtin     pn   processdefinition name  names of workflows to start   p   password                 password for login   u   user                     user for login  required    url                          url to connect to 
  the options have the following meaning  
   parameters description  pn the names of the workflows to be started   
  with the upload tool you can add new process definitions to the workflow server  
  usage  cm upload  u  user   other options               f  definition path    j  jar path                 n  name    name        available options    n   names  names           names of built in workflows to upload   d   domain  domain name    domain for login  default  builtin     f   definition  def        file name of the workflow definition to                              upload   j   jar  jar               file name of the workflow jar to upload   p   password  password     password for login   u   user  user name        user for login  required    url  ior url               url to connect to 
  in the file proxy properties the resource cache for accelerating the coremedia editor is configured  a large resource cache reduces the network load  but at the same time increases the memory required by the coremedia editor on the local computer  
  the options have the following meaning  
   parameters description  n specify workflows by filename  e g  two step publication xml   this works only for the standard workflows which are delivered with the coremedia cms   f specify the xml file wich contains the process definition  this option is available only if your coremedia cms license includes the usage of custom workflows   j specify a jar file which contains all resources  esp  custom actions  your workflow needs  you need this option only in combination with the  f option for custom workflows  the standard workflows don t need additional resources   
     class   description   jtextfieldintegereditor   simple integer field  this is the default editor    jcheckboxintegereditor   a check box  if the box is checked      will be saved  otherwise        comboboxintegereditor   selection list  if this class is used  the attribute fixedchoice can be added to the  property  element   false  will allow you to type own entries in the combo box   true  is default and will allow only the predefined items  you can limit the number of digits allowed to enter by using the attribute columns   example    property name  copies  editorclass  comboboxintegereditor  columns       if you are using this attribute you have to take care for two things  do not enter a  historyitem  with a length longer than defined in maximumsize  be sure that no integers longer than defined in columns have been stored in the repository before  best practice would be to configure a validator to guarantee correct server side storage     the selection options can be added with two different multiple child elements    historyitem value            the values defined in this element are shown as a combo box   labeleditem value      label  one minute       the values defined in this element are shown as a combo box  in the combo box you will see the localized version of the value of the label attribute  localized via classes hox corem editor toolkit property property properties   the value used is the one defined in value      functionitem   the attribute class defines the class which should be used  the attribute label  optional  defines the name of the function item   own classes must implement the interface hox gui editor combobox functionitem   example    property name  value  editorclass  comboboxintegereditor     functionitem class  myfunctionitem myintegerclass       property    groupchooserintegereditor   this editor shows all groups defined in the coremedia system  one group can be choosen and the id of the group will be stored    userchooserintegereditor   this editor shows all users defined in the coremedia system  one user can be choosen and the id of the user will be stored   
  preview based editing is a comfortable tool to edit websites that are generated with the coremedia active delivery server or with the content application engine  to use this feature  it is necessary to enrich the website templates with context information about the related coremedia resources  so that the generated web pages  know  about their corresponding documents in the content repository  the editor of the website triggers access to the editing functions via context menus in the web browser  if preview based editing is enabled you get a mouseover hover effect on those elements of the preview website that have a context menu  the predefined menu items are open document  open in explorer  open container and open info   it is possible to use either the coremedia editor or the webeditor for preview based editing    
  preview based editing allows you to enrich website fragments with information about the related repository documents  folders  container documents  properties etc  to enable the context information you have to add the preview based editing tag library to your web pages  templates      taglib prefix  pbe  uri  http   www coremedia com pbe      as preview based editing may be switched off through the configuration settings  it is possible to modify the existing templates and use the very same templates on the coremedia live servers   to enable preview based editing you have to add the  pbe head   tag somewhere on top of your web page  e g  in the html header    if you want to enable preview based editing for a web page fragment  you have to provide a contextinfo tag for the fragment  the contextinfo tag has the following attributes  
  several configuration files are used to tune preview based editing  there are five attributes which can be configured in config bsh   
   attribute value previewbasededit true false  turn preview based editing on off  webeditoruri uri of the coremedia webeditor  e g  http   fnord      editor   remotecontroluri uri of the remote control for accessing the coremedia editor  this is normally http   localhost       coremedia control  contextpath name of your web application defaulturi uri of the template rendering the context menu  
  it is possible to use identical templates for the content management server  where preview based editing should be available  and for the live servers  where editing should not be possible   simply edit the pbe properties on the live servers and set previewbasededit to  false  to make the generated pages non editable   
  for the active delivery server there is already a predefined defaulturi    templateid menu   you may naturally override this defaulturi in your config bsh   coremedia editor via remote control  it is possible to use the coremedia editor via remote control instead of the webeditor  besides the configuration of the remotecontroluri you have to adapt resource menu jsp  just change the four commands at the end of the file named  open documentview    open document    open container  and  open info  into  open documentview remote    open document remote    open container remote  and  open info remote   
  the processes tool has only one additional option  
   parameter description  v verbose output  prints out additional information  
  it is not possible to attach a contextinfo tag to the  body  element of a webpage  if you need a top level contextinfo for the whole page you can surround the inner tags of the  body  tag by a contextinfo tag  e g     body     pbe adscontextinfo         inner tags         pbe adscontextinfo    body   although it is encouraged to use the contextinfo tag in cached fragments  the template developer should be aware  that usage of the tag in cached fragments is only allowed  if the fragment always relates to the same resources  which should normally be the case   otherwise a context menu may direct to the wrong repository resources  
  there are basically two ways to add the contextinfo tag   surround the relevant html element by the  pbe adscontextinfo    tag   example      pbe adscontextinfo event  contextmenu      td your article text   td    pbe adscontextinfo      provide the same id to the element and the  pbe adscontextinfo    tag   example      td id  id    your article text   td    pbe adscontextinfo id  id    event  contextmenu     both examples enable a context menu  that will be opened when the user triggers a context menu javascript event  which means a click of the right mouse button above the  td  element  the first version surrounds the tag body with a  span  tag that gets an automatically generated id  the inserted  span  tag may make it necessary to adapt your css style sheets  if you don t want to change your style sheets use the second way  the drawback of the second version is  that the ids added to to the html elements are still visible in the generated html code  even if preview based editing is turned off    as default the current resource from the context is opened  if the context menu should be related to a different resource  the resource attribute tells the tag  which coremedia resource is connected to the tagged area    pbe adscontextinfo resource        document getid         event  contextinfo     the double quotes in front of the document getid   have been added to convert the expression to string  as the taglib expects a string  provide any javascript event in the event attribute  if you don t provide an event no contextmenu can be opened   nested tags  contextinfo tags may also be nested  e g  to define the same container for several sub contextinfo tags  generation of nested tags may be distributed over several templates  as the dependencies are calculated on the fully generated web page   example      pbe adscontextinfo container        page getid              pbe adscontextinfo resource        topdocs i   getid          event  contextmenu  property  top      td my article text   td     pbe adscontextinfo         pbe adscontextinfo resource        sidedocs i   getid         event  contextmenu  property  side      td other article text   td     pbe adscontextinfo         pbe adscontextinfo   jstl expressions  you may also use jstl expressions in all tag attributes   example    jstl     pbe adscontextinfo resource    doc id      event  contextmenu  property    linklist name      container    page id      td my article text   td    pbe adscontextinfo  
  configure in the following file     contentserver properties  
   attribute description default container id of a folder or container document  e g  a page    documentposition position of document inside a linklist or  auto  for first occurence of specified resource in specified linklist of specified container   event javascript event triggering the popup menu  click  dblclick  contextmenu  mouseover    property name of property holding a resource  e g  linklist  top  of a page  current property taken from context  only in property templates  resource id of resource current resource taken from context uri uri to be called on javascript event taken from config bsh  otherwise   templateid menu id reference to dependant html element automatically generated in addition with a  span id        tag surrounding the tags body content  hovereffect true false  turn hover effect on mouseover event on off  the hovereffect sets the css style  hover  on the dependant html element  true enabled true false  turn current contextinfo on off  true  
  the processdefinitions tool shows all uploaded workflow process definitions  
  usage  cm processdefinitions  u  user   other options    v  available options    d   domain  domain name    domain for login  default  builtin     p   password  password     password for login   u   user  user name        user for login  required    url  ior url               url to connect to   v                          verbose 
  the processdefinitions tool has only one additional option  
   parameter description  v verbose output  prints out additional information  
  the non verbose output of processdefinitions shows the names and ids of all uploaded process definitions  e g    process definitions     id  coremedia    cap processdefinition        name  threesteppublication  enabled  true   id  coremedia    cap processdefinition        name  simplepublication  enabled  true   id  coremedia    cap processdefinition        name  simplepublication  enabled  false  this overview is useful to find out appropriate arguments for other server tools like start  download or enable  the ids of the process definitions are unique  the names are not unique  see simplepublication in the above example   but only one process definition of a certain name can be enabled at a time   the verbose output provides detailed information about the process definitions  
  styles  to make the hover effect of the  contextinfo  tag visible you have to provide a css style  hover   when the context menu is open  the style of the contextinfo area becomes  pressed   in the following example you can see a style set for the  span  element which is included  if you don t provide an id with the  contextinfo  tag  if you provide an id you have to set the style class for the html element with the id  it may also be necessary to be more specific on the css rule  if it conflicts with other rules   example      head    style type  text css      span hover        background color  highlight       color  highlighttext          span pressed        background color  highlight       color  highlighttext          style    head   be aware that stylesheets for big websites may become very complex  you may have to provide more specific css rules to get the correct hover effect    you may also adapt the style for the popupwindow  which is named  popupwindow   the actual menu is rendered in resource menu jsp  
  an important element in the monitoring of coremedia cms components is logging  without recording relevant information of the system it is often impossible to find out when an irregularity occurred    the output of coremedia cms is logged in two different ways   stdout  stderr output  enter the location for the stdout stderr output of a component and any other third party program in the corresponding jpif start file of the component  to do so  configure the parameter output redirect in the corresponding jpif file of the component  the following values are possible     output redirect log    log output in a log file ending with  componentname  out    output redirect null    no output   output redirect   no value  or output redirect commented out   output redirect      output to standard out  usually the console window  otherwise according to the environmental setting   coremedia cms logs  each coremedia component itself has at least one assigned log with a unique log name  each log can write log messages to different log targets  called log actions  different types of log actions exists that can write messages to files or send emails  the log actions are configured in the  component  properties file  when log names contain dots they define a log name hierarchy  see the table below  with the empty log name on top  e g  if you configure a log action to get messages for the log name cap server all messages from the logs with this name or a name below in the hierarchy e g  cap server replicator will be send to this log action  for each log action different log names with different log levels can be configured  the log level determines the amount of log messages  here is an example configuration   example   log action   selectors cap debug corem info   the log name and log level are configured with a log action  n  selectors property  where a colon separates a name and a log level and a comma separates several log name log level pairs  in the example above  messages with the log level     debug from logs whose names start with cap or   info from logs whose names start with corem   will be received  all components should run with the maximum acceptable log level  this may produce a lot of log output  but in case of debugging it allows to pinpoint the particular cause    the following table lists the log names that exist for the coremedia server  
  the picture above shows the publishing preview of an example web page  the first teaser is highlighted by a blue hovereffect  as the mouse is over it  the user opened a pop up menu with a right mouse click  it is now possible to open the document in the coremedia editor for editing  to show it in the explorer window  to edit the containing element  the current page document    or to get the document information for the shakira article   given a working web site that was built using the ads  the next sections show how preview based editing can be added to the web site  preview based editing for the ads does not support custom commands  if you need your own commands you should base your web application upon the cae framework   
  assume that a total of     licenses is available  the limit line states that at most    of these     licenses may be acquired by users from either domain  or domain   the pools for domain  and domain  allocate between   and    licenses  unless   users from one of these domains are already logged in  there are still free licenses to allow another login  the pools for domain  and domain  do not specify minimum sizes   it is therefore possible that  for example  no user from domain  is able to log in to the system  because users from the three other domains are locking up all available licenses   finally  the last lines indicate that some licenses should be put aside for the members of the administrator groups of any domain  to be used in emergency cases  for domain  we add indirect members of the administrator group to the pool   normally  a careful assignment of licenses to pools should suffice for most setups  with limits being used in exceptional cases  the number of pools and limits should be kept relatively low  preferably not exceeding     in total  lest the processing time gets significant  note that groups cannot be indicated by regular expressions as this would lead to a significant reduction in performance  
  multiple coremedia content servers can use the same coremedia search engine but require separate collections for each feeding coremedia content server  collections are groups of content in the index of the coremedia search engine  they are used in queries to get only search results for a specific coremedia content server   the coremedia content management server feeds a collection which is needed for the full text search feature in the coremedia editor and coremedia webeditor   to provide full text search for documents in the content delivery environment  the coremedia master live server can be configured to feed another collection  the coremedia replication live servers can use the same collection to serve search requests of connected clients but they do not need to feed the coremedia search engine themselves  
   attribute description default container id of a folder or container document  e g  a page    documentposition position of document inside a linklist   event javascript event triggering the popup menu  click  dblclick  contextmenu  mouseover    property name of property holding a resource  e g  linklist  top  of a page    resource id of resource   uri uri to be called on javascript event if not set  taken from pbe xml id reference to dependant html element automatically generated in addition with a  span id        tag surrounding the tag s body content  hovereffect true false  turn hover effect on mouseover event on off  the hovereffect sets the css style  hover  on the dependant html element  true enabled false true  turn current contextinfo off on true  
  the coremedia cms is the future proof standard software solution for production  administration and distribution of multimedia content for digital services   content applications such as high volume web sites and device independent multi channel services are implemented cost effectively in minimal time using the coremedia smart content infrastructure    this coremedia editor developer manual is written for developers   people who set up and tune  who integrate and implement coremedia sci  it describes how to make all the features of the coremedia editor work well and create a unique workplace fitting the customers demands   out of the box functions for complete editing processes in the easily used coremedia editor  rapid prototyping features  an acclaimed architecture and a matching  proven process for content application projects guarantee excellent results and high  sustained customer satisfaction   
  the coremedia smart content infrastructure  coremedia sci  is the future proof standard software solution for production  administration and distribution of multimedia content for digital services    content applications such as high volume web sites and device independent multi channel services are implemented cost effectively in minimal time using the coremedia smart content infrastructure    this importer developer manual is written for developers  people who set up and tune  who integrate and implement coremedia sci  it describes how to import own content into the coremedia repository   out of the box functions for complete editing processes in the easily used coremedia editor  rapid prototyping features  an acclaimed architecture and a matching  proven process for content application projects guarantee excellent results and high  sustained customer satisfaction    
  there are two ways to add the contextinfo tag    surround the relevant html element with the  pbe contextinfo    tag   example      pbe contextinfo resource    document content id     event  contextmenu   property  side  container    page content id     strong your article text   strong    pbe contextinfo            insert the contextinfo tag at any place in the template  provide the same id to the element and the  pbe contextinfo    tag   example      td id  id    your article text   td    pbe contextinfo id  id    resource    doc content id    event  contextmenu  property  side    container    page content id      the first alternative surrounds the tag body with a  span  tag that receives a generated id  the inserted  span  tag may require an adaptation of the css stylesheets  see below   if you do not want to modify your stylesheets or you want to use a tag that would produce illegal html when surrounded by a  span   use the second alternative  a minor drawback of the second version is that the ids added manually to the html elements are visible in the html code on the live servers  even if preview based editing is turned off   nested tags  contextinfo tags may also be nested  e  g   to define the same container for several subordinate contextinfo tags  the generation code for nested tags may be distributed over several templates  as the dependencies are calculated on the final generated web page   example      pbe contextinfo container    pagedoc content id           pbe contextinfo resource    doc i  content id     event  contextmenu  property  top      strong my article text   strong     pbe contextinfo         pbe contextinfo resource    sidedoc i   content id    event  contextmenu  property  side      strong other article text   strong     pbe contextinfo         pbe contextinfo  
  although it is encouraged to use the contextinfo tag in cached fragments  the template developer should be aware that usage of the tag in cached fragments is only allowed if the fragment always relates to the same resources  this is usually the case  but some special applications may require differently  in that case  a context menu might point to the wrong repository resources   it is not possible to attach a contextinfo tag to the  body  element of a webpage  if you need a top level contextinfo for the whole page you can surround the inner tags of the  body  tag by a contextinfo tag  e g    body     pbe contextinfo         inner tags          pbe contextinfo    body  
  styles  to make the hover effect of the contextinfo tag visible you have to provide a css style  hover   as soon as the mouse moves over the element  the style changes to  hover   when the user opens the context menu  the style of the contextinfo area changes from  hover  to  pressed   to handle the different situations in style sheets  the two possible ways of applying the contextinfo tag must be distinguished  either nesting the editable element or connecting editable element and contextinfo tag with ids  the following example shows a suitable style set for the span element generated in the first case   example      head     style type  text css       span hover         background color  highlight        color  highlighttext            span pressed         background color  highlight        color  highlighttext            style    head   if you choose the second alternative and provide an id  you have to set the style class for the html element with the id instead of the span element   be aware that stylesheets for big websites may become very complex  you may have to provide more specific css rules to get the correct hover effect   you may also adapt the style for the pop up window  which is named  popupwindow   the context menu is rendered in com coremedia easyedit cae menubean jsp  
  note  that the changes of persisted batches do not appear in the search results immediately  they appear after they have been successfully indexed  which normally happens some seconds or minutes later  
  the coremedia content application engine mainly comprises components from four sources   the j ee container hosts the application servlets and jsp pages the spring framework controls the application setup and main request control flow the coremedia content application engine frameworks provide content access  transformation  caching and rendering   the application typically provides custom request controllers  business logic  dataviews for caching and rendering templates  additionally it can provide id link formatters for accessing data from other repositories     the engine can be roughly divided into three responsibilities  following an mvc model for web applications   the controller part accepts a request and   depending on the request uri   dispatches it to an appropriate controller class that executes the request using the model  the result is passed to the view layer for presentation  the coremedia content application engine comes with a number of default controller classes that provide out of the box content display functionality  the model part comprises business entities stored in the content repository enriched with business logic  the coremedia content application engine provides a framework for mapping content objects to generated and or customized classes  third party repositories can be integrated as well  business objects can be cached in this layer  the view part is responsible for rendering objects into a presentation format  typically html  the coremedia content application engine provides a flexible framework for object oriented template selection through the viewdispatcher   the following picture gives a detailed view of the architecture  the numbers designate a typical request flow and are explained below   
  the coremedia content application engine defines a mapping framework to create application specific  business  objects from generic content objects  in order to do that  application specific classes have to be written and they have to be registered with a factory that is used throughout the application whenever a content object needs to be converted into an application bean    you do not need to write the beans from scratch  the coremedia content application engine comes with a source code generator that reads your document type definition file and generates beans for each document type  the bean interfaces mirror the document properties  and the class hierarchy mirrors the document type hierarchy  after generating the code  you can modify and adapt it to your application s needs  
  a typical http request comprises the following steps  the request is passed from the servlet container to the spring dispatcher servlet the dispatcher servlet dispatches the request to a controller  typically the contentviewcontroller the contentviewcontroller parses the request uri and produces a content id  a view name and possibly other parameters the contentviewcontroller maps the content id to a corresponding business object and looks up a cached version  suitable for the desired view the result is passed to the rendering layer the viewdispatcher finds the jsp template corresponding to the bean and invokes it the jsp evaluates bean properties and includes fragment templates  potentially on associated beans     going back to step    
  configure in the following files   contentserver properties feeder xml  unless otherwise noted  configuration changes take effect when the search engine feeder starts or restarts  
  multiple web sites  situation  you want to produce content for multiple web sites  due to load balancing or stability constraints  the sites must be hosted on separate servers   solution  you create one top level folder for every web site and install one master live server for every web site  you map folders and targets one to one  you assign rights to editors as needed  possibly allowing access to more than one site for certain users   result  by sharing the content management environment you reduce the hardware requirements  you can more easily administrate the multiple sites in a common framework  editors can log in once and gain access to all sites for which they are authorized   intranet internet  situation  you want to produce content for a company s intranet and for the internet on one coremedia cms installation  as intranet and internet servers have different security requirements  they must be located on physically separated machines each on the correct sides of a firewall   solution  you create base folders internet and intranet and map each of them to one publication target using the two different servers  users are mapped into the content management server from the company s ldap server   result  similar to the multiple web site scenario  but you get the additional benefit of a secure deployment by introducing a firewall   lots of little sites  situation  you host a number of web sites  none of which is particularly large or under heavy load   solution  you create one base folder per site  but only a single publication target  all base folders are mapped to that target  a url rewriter in front of the active delivery server maps each site to one top level folder   result  link and move barriers ensure that for each site there are no internal links that accidentally leave the site  as the number of little sites grows  you may later map additional sites to new publication targets without having to rework the old sites  
  the search engine feeder reads its configuration file again when restarted  some fatal errors also require manual restarts  in the default configuration the search engine feeder restarts automatically after errors regarding the coremedia search engine  
  configure the user account in the file feeder xml  set the name and password of the user in the attributes user and password of the element feeder    for example    feeder user  feeder  password  feeder      
   property name type default value description allowwidelinks boolean false in a multi site enabled content management server  set whether to allow all webeditor users to create wide links  i e  links between documents with different base folders   members of administrator groups are always allowed to create wide links  note that this flag does not affect the wage api  but only the webeditor behavior  widelinkshighlighting string  border   px solid red   set the css style used to visualize wide links in a richtext xml property  the style is applied  and again removed in submitted values  by the default propertyconverter for richtext properties   
  configure document types  you can restrict the indexed documents by their type in the file feeder xml  the document types are configured in the element documenttypes  which is below the element fastindex  
  configure properties  you can restrict the indexed properties of a document by their name and type  you can further restrict the indexed xml properties by their grammar and the indexed blob properties by their mime type and size  
  configure batching  the search engine feeder sends document changes to the coremedia search engine in batches  you can configure the number of documents in a batch and when to send a batch  batch sizes and sending rate influence the indexing speed  
  if preview based editing is configured and activated in your preview  you can easily jump from the preview to the coremedia editor or coremedia webeditor  whenever the mouse cursor hovers over an article  teaser  picture or any other element  a changing background color indicates  that you can open a context menu for the element  in the following picture you can see a context menu opened for a teaser about shakira  
  the context menu may contain up to four menu items  depending on the type of element the context menu was opened for  
   menu item impact open document opens the document for editing in an editor  open in explorer same as  open document   but the document is opened in the explorer view of the editor  open container opens the container document of the current document in the context of the preview  e g  the currently displayed page  holding an article  open info opens a popup with information about the document   
  configure error handling 
     syntax element of programming language   respective elements of the workflow definition   variable   variable  aggregationvariable   expression  comparator  function   equal  notequal  greater  greaterequal  less  lessequal  and  or  implies  not  forall  exists  let  get  read  length  isempty  notempty  isfolder  isdocument  isdocumentversion   data type   value classes  blob  boolean  content  contenttype  date  document  folder  group  integer  string  timer  user   flow control   fork  join  if  choice  switch  case   precondition  postcondition   precondition  postcondition   procedure   action  entryaction  exitaction   sub program   forksubprocess  joinsubprocess  
  administration page  use a browser to access the administration page of the search engine feeder under the url http   localhost       coremedia feeder  replace localhost and       with the host and port of the coremedia content server of the search engine feeder you want to administrate   the administration page requires http authentication  the file feeder xml configures the user and password to use in the element administrator below the element feeder   
  note  that the search engine feeder does not update already processed documents after changing the properties  a configuration change only affects newly processed documents  if you want to update all documents  restart the search engine feeder with an empty collection  
  you start the server for the first time or after changes of the document type definition and an arrayoutofboundsexception occurs   possible cause   the problem occurs when the number of document types is a multiple of    due to an error of the ibm xml parser used   possible solution   add an abstract dummy document type to the document type definition   the server starts up and the virtual machine crashes several times   possible cause   this problem occurs when using certain combinations of kernel glibc under linux with sun hotspot     to       possible solution   the problems might be fixed by reducing the default stack size  depending on the shell  the server is started from  add one of the following possibilities to an appropriate file  e g   profile  at bash shell  do ulimit  s       at tcsh use limit stacksize       if there are still problems  glibc       linux     users should also define an environment variable    export ld assume kernel        a publication is possible  but reports that no action was necessary to publish the document  the document  or the most recent version  does not appear on the master live server   possible cause  the properties   in particular the url of the live server in publisher properties   are incorrectly configured   possible solution  check the properties  it might point to the content server  restart the live server  the use of separate computers for the production and master live servers is recommended   the server shows poor performance when accessing the database  in particular  it seems to be almost at a standstill every    hours   cause   the database systems supported by coremedia sci do not update their statistics data for tables and indexes automatically  except the ms sql server   this leads to the situation that database queries are not optimised and are therefore only processed inefficiently  once every    hours  the cm server places a query to release unreferenced objects  if the statistics data and indexes are not optimised  this query cannot be processed optimally   solution   using database maintenance  update the statistics data daily for all tables and indexes of the corresponding coremedia database user on the production and live systems   with an oracle database the following sql command must be executed  e g  with sqlplus or another suitable program for each coremedia database user for the purpose of optimisation   call dbms utility analyze schema   database user     compute    when using a db  database  optimisation can be done with the corresponding menu entry in the db  control center   the commands given should be executed either under the corresponding coremedia database accounts or an administration account with the appropriate privileges   note  the standard interval of    hours can be modified  if necessary  with the parameter sql store collector delay  sec   in order to set a larger or smaller timespan for memory checking  however  this should usually not be necessary   the server no longer works correctly with an oracle database and reports the following sql exception   ora       maximum open cursors exceeded  cause   the configuration of the database is incorrect   solution   the database administrator must adjust the oracle configuration  see section            and restart the database   you are using sun solaris and while starting the server the error message  couldn t set locale correctly  appears   possible cause   the package sunwceuos is not installed on the machine   possible solution   install the package  
  note  that open batches are kept in main memory  you have to reserve  maxopen    maxbytes bytes for the batches  
  since coremedia cms       you can implement the special interface contextpropertyconverter to receive additional context information  namely the bean and the property name that contain the value to be converted  this information is needed by some converters  e g  to behave differently depending on the bean s type  for details  see the wage api javadoc of the interface com coremedia cap wage contextpropertyconverter  
  clientblob is useful only if a new blob should be uploaded by the web user and stored as is  if you want wage to store binary data  e g  calculated from user input  convert it directly to a hox corem servlets blob  either by implementing the interface yourself or by using the new utility class com coremedia cap wage util changeableblobimpl  set this blob using clientdocument setproperty    not clientdocument set    which expects a clientblob    
  configuration not mandatory  the default configuration includes all document types except preferences  
  the documenttypes element contains a list of includedocumenttype and excludedocumenttype subelements to include and exclude types  the order of these elements is important  the first element whose name attribute matches a document type decides whether the document should be indexed or not  you can use abstract document types and regular expressions in the name attribute  an element matches all types if no name attribute is given   the following example excludes documents of type preferences from indexing  the includedocumenttype element specifies that other documents should be indexed    fastindex             documenttypes      excludedocumenttype name  preferences        includedocumenttype      documenttypes          fastindex   the following second example configures only those documents for indexing which are of the abstract type abstracttext except documents of type teasertext    fastindex             documenttypes      excludedocumenttype name  teasertext        includedocumenttype name  abstracttext        excludedocumenttype      documenttypes          fastindex  
  note  that the search engine feeder does not update already processed documents after changing the document types to index  a configuration change only affects newly processed documents  if you want to update all documents  restart the search engine feeder with an empty collection  
  configuration not mandatory  the default configuration includes all string  integer  date  linklist and coremedia richtext xml properties  it also includes blob properties of the mime types text    application pdf and application msword that are not larger than   mb  
  configure property names in the element propertynames and property types in the element propertytypes  both of these elements are below the element fastindex  the search engine indexes a property if both its name and its type are included in the configuration   the element propertynames contains a list of includeproperty and excludeproperty subelements to include and exclude properties  the order of these elements is important  the first element whose doctype attribute matches the document type and name attribute matches the name of the property decides whether the property should be indexed or not  you can use abstract document types and regular expressions in the doctype attribute and regular expressions in the name attribute  an element matches all document types if no doctype attribute is set and all property names if no name attribute is set   the element propertytypes supports the following subelements  blob  xml  string  integer  date and linklist  in blob elements you can specify the mime type and maximum size of blob properties to be indexed  in xml elements you can specify the grammar of the xml properties to index  if you do not want to index a property of a certain type  you just need to leave out the respective type element  
  configuration not mandatory  normally you do not need to change the default settings  
  the search engine feeder sends a batch when one of the following three conditions is fulfilled   the maximum number of documents in a batch has been reached  the batch size in bytes would exceed the configured maximum if more documents were added  the batch contains a document that is waiting for indexing longer than the configured maximum delay   you can also configure the maximum number of open batches  an open batch is a batch that was sent by the search engine feeder but was not yet persisted by the search engine   use the attribute documentdelay of the element feeder to configure the maximum time in seconds to wait between adding a document to a batch and sending that batch  use low values if you want changes to appear fast in the coremedia search engine   you can configure the maximum batch size and the maximum number of open batches in the element batches below the element fastindex   the following example configures a maximum of   open batches with a maximum of   mb each  each batch can contain     documents    feeder documentdelay             fastindex          batches maxopen     maxbytes           maxsize                   fastindex    feeder  
  configuration not mandatory  with the default settings the search engine feeder automatically retries or restarts after indexing related errors  
  the search engine feeder automatically retries operation after some communication problems with the coremedia search engine  you can configure the number of retries and the delay between in the element fastindex below the element feeder in the file feeder xml  the attributes sendattempts  searchattempts and reconnectattempts define the maximum number of attempts to send a batch  search for a timestamp and reconnect to the coremedia search engine  you can configure the delay in seconds between the attempts in the attributes sendretrydelay  searchretrydelay and reconnectretrydelay   if all retry attempts fail or another non expected error occurs  the search engine feeder stops  you can use the administration page to restart manually or you can configure the search engine feeder to restart automatically after errors  the attribute restartaftererror of the element feeder defines whether the search engine feeder should automatically restart after indexing related errors  the attribute restartaftererrordelay defines the delay in seconds before restarting  note  that the search engine feeder does not automatically restart after some internal errors   if the coremedia search engine fails to index a batch it will send an error back to the search engine feeder to resubmit the batch  you can configure the maximum delay in seconds before resending the documents of the failed batch in the attribute retrydocumentdelay of the element feeder  such errors normally origin from a temporary problem of the coremedia search engine such as high load   in the case of network problems it can happen  that the search engine feeder does not receive a callback notification from the coremedia search engine about a persisted batch  an example is a firewall which blocks callbacks  if the search engine feeder does not receive a notification for a batch it stops with an error  the seconds to wait for a callback are configured in the attribute callbacktimeout of the element fastindex   the following example configures the search engine feeder to retry batch sending  searching and reconnecting   times each  if this fails or another error related to indexing occurs  the search engine feeder shuts down and restarts after one minute  the callback timeout is set to one hour in the example      feeder restartaftererror  true          restartaftererrordelay             fastindex callbacktimeout                    sendattempts     sendretrydelay                  searchattempts     searchretrydelay                  reconnectattempts     reconnectretrydelay                     fastindex    feeder  
  xml has evolved into a widespread data exchange format not only for content management systems  a wide variety of applications support xml as their data exchange format of choice  there is a rich selection of applications and tools that make it easy and cost effective to process xml   the latest version of the xml specification can always be found on the w c web server   http   www w  org tr rec xml  there are two xml apis  sax and dom  both of which are supported by java   the simple api for xml  sax  is an event based architecture that communicates xml related events to an application  the document object model  dom  is a tree based api that models xml documents as trees    refer to the api documentation along with this chapter to learn how to create and process xml with the coremedia system effectively  
  a custom tag to include views  another convenience feature we will use in the examples is a custom tag library that makes including active delivery server views easier  basically  a the custom tag  ads include  replaces the usual way of including active delivery server views either by  jsp include  with a complicated java expression or using the context include   methods directly  for an example  see the end of this section   the tag descriptor and implementation  with source code  are contained in the wage examples distribution  here  we just provide information on how to use the custom tag library  general infomation about javaserver pages and custom tag libraries can be found at sun s web site and in respective literature   in the examples  the tag library descriptor cap wage examples tld is deployed in the web inf directory  the library can be accessed by its public uri  which is defined in cap wage examples tld as http   www coremedia com examples wage  note that this is not a real url  but just some unique identifier for the tag library   to use the tag library in a jsp  the following code is needed       taglib uri  http   www coremedia com examples wage             prefix  ads      the prefix can be chosen arbitrarily  in the examples  we use ads  since the tag library s function relates to the active delivery server  and not to any wage extension    the tag s function is to provide a convenient way to include another active delivery server view  to recall from the coremedia cms developer manual  the parts of a resource uri  and thus possible parameters to context include    are   resource   a coremedia resource  templateid   a view identifier that dispatches to a jsp  property   optionally  if the resource is a document  the name of a property  and params   a list of arbitrary additional parameters   the custom tag  ads include  gives you a convenient way to specify these parameters  it has the following attributes which are all optional   name   the name of a bean in any scope  property   a  nested  property of the bean retrieved by name  view   the coremedia view  templateid  documentproperty   the name of a coremedia document property  note that the property part of the resource uri appears as documentproperty  since the struts pattern to determine a bean is to use the name and property attributes   the custom tag  ads param  can only be used nested inside a  ads include  tag and has the following required attributes   name   the name of a parameter value   the value for that paramter  the url to be included by context include   is computed as follows  if name is specified  but not property  use the bean under name as the resource  if name and property are specified  retrieve the bean bean under name and evaluate bean property as the resource  otherwise  set resource to the resource retrieved by context getcurrentcontext   getresource    if view is specified  present and not the empty string   use it as templateid  otherwise  use null as templateid  which dispatches to the default view  if documentproperty is specified  use the uri   document resource  getpropertyuri documentproperty templateid   otherwise  use the uri resource geturi templateid   add all parameters added by nested  ads param  tags to the uri  using hox net uri plusparameters    return the computed uri   as an example  suppose you write a view of a document that has a link list property related and want to include the view renderdetail of the first document in that link list  traditionally  this would look like in the following jsp snippet    jsp usebean id  context  scope  request               type  hox corem servlets context     jsp include page        context getincludeuri   document context getresource         getlinklistproperty  related           geturi  renderdetail       flush  true     alternatively  you can replace the  jsp include  by a call to the active delivery server api context include   method      context include pagecontext                      document context getresource                         getlinklistproperty  related                           geturi  renderdetail         or a bit simpler by using another overloaded version of context include        context include pagecontext                       document context getresource                          getlinklistproperty  related                           renderdetail        now  with the new custom tag  you can do the job as simply as this  without any java code       taglib uri  http   www coremedia com examples wage             prefix  ads      ads include name  context  property  resource related                  view  renderdetail     you will see further examples of how to use the  ads include  custom tag throughout the examples  
  the coremedia search engine feeder is configured in an xml file which is specified in the property cap server feeder in the file contentserver properties  default is properties corem feeder xml   the top level element in this file is feeder  
   attribute value default description user user name none  required attribute  the user account the search engine feeder uses to read content  password password none  required attribute  the password for the user account of the search engine feeder  restartaftererror true or false true true if the search engine feeder restarts automatically after errors from the search engine  false otherwise  restartaftererrordelay time in seconds    the time in seconds to wait before trying to restart the search engine feeder if restartaftererror is true  documentdelay time in seconds    the maximum time in seconds between adding a document to a batch and sending that batch to the coremedia search engine  retrydocumentdelay time in seconds    the maximum time in seconds between adding a retried document to a batch and sending that batch to the coremedia search engine  this can happen after batch failures caused by temporary problems in the coremedia search engine such as high load  errordocumentdelay time in seconds    the maximum time in seconds between adding an error document to a batch and sending that batch to the coremedia search engine  error documents serve as placeholders for documents that could not be processed  timestampdelay time in seconds    the maximum time in seconds between adding a timestamp to a batch and sending that batch to the coremedia search engine  indexdeletedresources true or false true true if documents in the trash should be indexed  if you do not need to find documents in the trash and want to keep your index smaller  you can change this to false  indexgroups true or false true true to index the groups with potential read rights with the document in the index field groups  this set of groups is then used to narrow a user s search to the documents where he might have read rights to  this is just an optimization to get smaller search results for some queries and content structures  the client has to check for read rights anyway   you may want to set this to false to avoid updating the index for all documents below a certain folder if the right rules of the folder change   
  element feeder  the element feeder is the top level element in the xml configuration file   child elements   administrator  fastindex  attributes  
  element fastindex  there must be exactly one fastindex element below the feeder element   parent element  feeder  child elements  batches  documenttypes  propertynames  propertytypes  fields  indexdocumentfilter  attributes  
   attribute value default description statisticinterval time in seconds      maximum time interval in seconds to show statistics on the administration page  with the default you can show overall statistics  since starting the search engine feeder  and statistics for the last n seconds  where n  statisticinterval  statisticloginterval time in seconds     interval to log statistic information of the search engine feeder in the log file of the coremedia content server  contentserver log   callbacktimeout time in seconds      maximum time between sending a batch to the coremedia search engine and receiving a callback for that batch  the search engine feeder shuts down with an error if this time is exceeded  pinginterval time in seconds      the search engine feeder sends a batch at least every pinginterval seconds to keep its session to the coremedia search engine open  reconnectattempts number   maximum number of attempts the search engine feeder tries to reconnect to the coremedia search engine before shutting down  reconnectretrydelay time in seconds    delay in seconds between trying to reconnect to the coremedia search engine  searchattempts number   maximum number of attempts the search engine feeder tries to search for a timestamp in the coremedia search engine before shutting down  searchretrydelay time in seconds    delay in seconds between trying to search  sendattempts number   maximum number of attempts the search engine feeder tries to send a batch to the coremedia search engine before shutting down  sendretrydelay time in seconds    delay in seconds between trying to send a batch   
  element administrator  there may be multiple administrator elements below the element feeder   parent element  feeder  child elements  none  attributes  
   attribute value default description name user name none  required attribute  the user name to be used in the http authentication of the administration page of the search engine feeder  this is not a account from the user management of the content server  password password none  required attribute  the password to be used in the http authentication of the administration page of the search engine feeder   
  element batches  there can be one batches element below the fastindex element to change batch settings   parent element  fastindex  child elements  none  attributes  
  cancelusertask  use this action to cancel an activated user task  
     attribute   type   default   description   task   nmtoken    implied  current task   the name of the user task to cancel   
  element documenttypes  the element documenttypes is used to restrict the indexed documents by their type  if it is not present  the search engine feeder indexes all documents  it contains a list of includedocumenttype and excludedocumenttype elements  the first of these subelements which matches a document type defines whether documents of that type will be indexed or not   parent element  fastindex  child elements  includedocumenttype  excludedocumenttype  attributes  none 
  element includedocumenttype  this element defines that documents of a certain type should be indexed   parent element  documenttypes  child elements  none  attributes  
   attribute value default description name document type name or regular expression     all types  the name of the abstract or concrete document type whose documents should be indexed  you can specify a regular expression here to include all document types whose name matches this expression    
  interruptusertask  use this action to interrupt an activated user task regardless of it s current state and switch the state to completing without running any actions  be careful when using this action  as it may lead to logically inconsistent workflow states   
  element excludedocumenttype  this element defines that documents of a certain type should not be indexed   parent element  documenttypes  child elements  none  attributes  
   attribute  value  default  description  name document type name or regular expression     all types  the name of the abstract or concrete document type whose documents should not be indexed  you can specify a regular expression here to exclude all document types whose name matches this expression   
     attribute   type   default   description   task   nmtoken    implied  current task   the name of the user task to interrupt   
  element propertynames  the element propertynames restricts the indexed properties by their name   if it is not present  the search engine feeder indexes properties with all names  the element contains a list of includeproperty and excludeproperty subelements  the first of these subelements which matches a document type and property name defines whether that property should be indexed or not  the search engine feeder indexes a property only if its type is also configured for indexing in the element propertytypes   parent element  fastindex  child elements  includeproperty  excludeproperty  attributes  none 
  element includeproperty  this element defines that properties with a certain name should be indexed   parent element  propertynames  child elements  none  attributes  
   attribute value  default  description  doctype document type name or regular expression     all types  the name of the abstract or concrete document type whose properties should be indexed  you can specify a regular expression here to include properties of all document types whose name matches the expression  name property name or regular expression     all names  the name of the property that should be indexed  you can specify a regular expression here to include all properties whose name matches the expression   
  element excludeproperty  this element defines that properties with a certain name should not be indexed   parent element  propertynames  child elements  none  attributes  
   attribute  value  default  description  doctype document type name or regular expression     all types  the name of the abstract or concrete document type whose properties should not be indexed  you can specify a regular expression here to exclude properties of all document types whose name matches the expression  name property name or regular expression     all names  the name of the property that should not be indexed  you can specify a regular expression here to exclude all properties whose name matches the expression   
  element propertytypes  the element propertytypes restricts the indexed properties by their type  if it is not present  the search engine feeder indexes properties of all types  the element contains subelements for the different property types  if you do not want to index a certain type  you just need to leave out the subelement for that type  the search engine feeder indexes a property only if its name is also configured for indexing in the element propertynames   parent element  fastindex  child elements  blob  xml  string  integer  date  linklist  attributes  none  
  element blob  blob elements specify the mime type and maximum size of blob properties to be indexed  there can be multiple blob elements for different mime types below the element propertytypes  if the propertytypes element does not contain a blob element  blob properties are not indexed   parent element  propertytypes  child elements  none  attributes  
   attribute value default description mimetype mime type      all types  the mime type of blob values that should be indexed  maxsize size in byte     unlimited  the maximum size of blob values to index  use    for no limitation   
  element xml  xml elements specify the grammar of xml properties to be indexed  there can be multiple xml elements for different grammars below the element propertytypes  if the propertytypes element does not contain an xml element  xml properties are not indexed   parent element  propertytypes  child elements  none  attributes  
   attribute  value  default  description    grammar   xml grammar identifier   coremedia    cap grammar coremedia richtext     the xml grammar identifier of xml properties that should be indexed   
  element string  this elements configures string properties for indexing   parent element  propertytypes  child elements  none  attributes  none  element integer  this element configures integer properties for indexing   parent element  propertytypes  child elements  none  attributes  none  element date  this element configures date properties for indexing   parent element  propertytypes  child elements  none  attributes  none  element linklist  this element configures linklist properties for indexing   parent element  propertytypes  child elements  none  attributes  none  
  naming the document type  every document type has a unique name  specified by the attribute name  this name will be used by the content server to define unique data base identifiers like the table name  primary key constraint name  foreign key constraint name and index names  the name has a maximum length of    characters  is not case sensitive and can contain letters  numbers  underscore and dash but no umlauts or other special characters                   for a localization of document type and property names see the editor developer manual  
  you are not allowed to use the following words for document type names   names of sql commands  names which are reserved for coremedia as database table names  blobcodetable  blobdata  blobs  changelog  cmgroups  cmrules  cmusergroup  cmusers  linklists  maxids  queryidtable  replicatoridtable  resources  sgmldata  sgmltext  system  texts  recherche names corresponding to the name scheme  doctype  digit  digit  i  char    where  doctype  stands for an already defined document type name   digit  for a number and i char   for a word which begins with the letter  i    
  in this chapter you will get a very high level overview of the unified api and a sketch of its possible applications  
  if you forget to set the encoding of a form that uses  html file  to  multipart formdata   struts presents you the somewhat cryptic message  argument type mismatch   so  if you see this error message  check the enctype attribute of your  html form  tag  
  the following example configures all property types and all property names except the property author of the document type article for indexing  a blob property is indexed if its major mime type is text or its concrete mime type is application pdf or application msword and its size does not exceed the configured maximum in bytes  an xml property is indexed if its grammar is coremedia richtext      fastindex             propertynames      excludeproperty doctype  article  name  author        includeproperty      propertynames     propertytypes      blob mimetype  text    maxsize                 blob mimetype  application pdf  maxsize                 blob mimetype  application msword  maxsize                 xml     grammar  coremedia    cap grammar coremedia richtext            string       integer       date       linklist      propertytypes         fastindex  
  rights determine  which operations user and groups may perform on processes and tasks  a rights policy is used to decide whether a concrete user may perform an operation on a workflow object    the rights policy  which is used by the coremedia workflow server is configurable  by default  the aclrightspolicy is used  it determines the rights based on access control lists  acl  for each workflow object  the acls are defined by granting and revoking rights for a user or a group  the following rules apply   rights for a user are calculated from concrete rights defined for a user and the rights from all the groups the user is a member of  a revoke precedes a grant  concrete rights for a user precede rights for a group the user is member of    rights for a group precede rights for another group if the other group is a subgroup of the first group   for example  
  the following example shows how to create a new folder with a fixed name  while not interesting in itself  it contains all the steps needed to establish a connection and to perform some work  
  this class is also provided in the cap examples jar as distributed with the release  simply copy the file  capclient src com coremedia examples capclient helloworld java  to the file   classes com coremedia examples capclient helloworld java  in your installation directory  compile the class using   javac  classpath    lib cap unified api jar lib coremedia common jar    classes com coremedia examples capclient helloworld java  where cap unified api jar contains the unified api interfaces and coremedia common jar contains some reusable utility classes   to run the example class  invoke java as follows   java  classpath lib cap client jar classes    com coremedia examples capclient helloworld  you may notice that cap unified api jar and coremedia common jar have been replaced by cap client jar on the command line  the file cap client jar contains the implementation classes for the unified api  actually  there are even more jars needed when running the example  but all of these jars are included implicitly through the class path specified in the manifest file of cap client jar  so that you do not have to list them individually    having run the example class  a folder named hello world should have appeared in the content repository  you may want to open the coremedia editor for verifying the success of this operation   
  in the next example  you will see how to create and control a process using the unified api  before running the createprocessexample  the standard three step publication workflow must have been uploaded  please see the administration manual for details   the example code starts with retrieving the process definition via the well known name and creates a process instance afterwards  the process has to be started before its first task can be started     processdefinition processdefinition       repository getprocessdefinition  threesteppublication      process process   processdefinition create      process start     when the process is started  the process definition on the server takes control  in the case of the three step publication  this leads to the compose task eventually being offered to the process  owner  the code repeatedly tries to accept the task  which may fail because the task is not offered yet  or because it was already auto accepted by a connected coremedia editor     task composetask   process gettask  compose      while   composetask isaccepted          try         composetask accept          catch  illegaltaskstateexception e             not offered yet  or race condition with editor           thread sleep             now that you are sure that the task is accepted  you can freely access its variables     composetask getview   set  subject    a subject      connection getsession   flush      thread sleep              let the user have a good look   composetask complete     here one variable is set to a new value and the change is flushed to the server  just as with content  writes are buffered for workflows  too  after providing you with some time to inspect the new variable value in the editor  the compose task is completed  because the change set was not changed and is still empty  the three step publication process terminates automatically  
  workflow variables may be defined directly in the process  as well as locally in any of the tasks  while performing a task  a user needs to inspect  and possibly modify  some of those variables   which variables the user needs depends on the concrete task   therefore  each task definition contains a view definition  which specifies the variables to be accessed  and the kind of access required  read or write   while performing the task  the view definitions of different task definitions may reference the same variables  for example to share a common process description  or a common list of content objects to operate on   the unified api represents a view as a special kind of capobject   a view appears to have properties that can be read and written  while in fact  each of those properties is stored in some task or process  each read and write access to a view is redirected according to the view definition   by inspecting the view definition  which is a subclass of captype  the available properties can be listed   
  this acl for a process gives the user admin the right to create  start  suspend  resume and abort the process instance  whether the user admin is in the groups composer or suspender is not relevant  users  that are member of the composer group  may create and start process instances  if a composer group member  is in the group suspender  too  he may suspend and resume  the process instance  too  users that are not member of the composer or suspender group have no rights on the process instance  
    search in document global search and replace query full text search main usage  search and replace in the current document search and replace in many documents detailed search for specific documents in the whole repository fast search for specific keywords in the whole repository speed fast slow slow very fast search scope current document freely defined document set whole repository whole repository versions only newest version only newest version all versions or newest version only newest version freely configurable  no no yes no search from  current document own workflow query window overview window  file chooser  coremedia editor only  search for text text text  metadata  folders     text in indexed fields and in specific binary formats  word documents       
  the unified api applies to three functional areas    content  workflow  user management    each area is accessible through a repository  a repository provides access to persistent objects and offers various services  many tasks can be performed while only accessing a single repository  but at times you need access to the full functionality  for each repository  you will find in the following an entire chapter containing a detailed discussion  this chapter  however  is limited to topics that apply regardless of the repository at hand   first  the connection object is discussed  it mediates between the individual repositories  because the connection is the primary entry point when working with the unified api  we explain in detail how a connection can be obtained and configured   then  we describe key concepts that apply equally to all three repositories  the basic structure of all repositories is essentially the same and also the persistent objects share many features  moreover  one should be aware of certain design principles that apply throughout the unified api  
   association type reference is stored in field dataview is applied at     cache lookup cache dependencies composition yes creation time no getter   dataview aggregation yes creation time yes getter   dataview static  default  yes property access yes getter dynamic no property access yes none  
  in this section  details of the connection object are discussed  it is shown how a connection can be created and which services it offers   while the connection also provides access to the three repositories  we do not view the repositories as integral parts of the connection  they will be discussed one by one in the following chapters  
  passing parameters directly  the most common way of opening a connection is provided by a method of the class com coremedia cap cap with four parameters    the ior url of the content server  the name of the user who logs in  the user s domain  the user s password  all parameters are passed as string values  the ior url is explained in more detail in the administration and operation manual  it is a means for bootstrapping the corba protocol   string url    http   localhost       coremedia ior   capconnection connection   cap connect url     user    domain    secret     the login call will fail with an exception if the content server is not reachable  a connection to the workflow server is also opened  if the workflow server is reachable  but its absence does not abort the login sequence   because the ior url is cumbersome to write  the unified api uses some rules for determining this parameter when it is omitted   capconnection connection   cap connect null     user    domain    secret     if the system property coremedia content server url is set  its value is used as the url  else  if the system property coremedia configpath is set  the system tries to determine the url from the file capclient properties  because the latter property is automatically set by the cm start script  there is no need to configure the url when the unified api client is started by means of a  jpif file   when you use the built in user repository of coremedia cms and not an ldap server for managing your users  you can set the domain parameter to null or omit it entirely   capconnection connection   cap connect url   user    secret    
  before working with the unified api  a connection to the server must be opened  the connection object implements the interface com coremedia cap common capconnection  there are a number of static methods in the class com coremedia cap cap that allow you to specify various sets of parameters for logging on to content server and workflow server  
  the coremedia editor and the coremedia webeditor integrate a fast full text search for documents  this search is limited to the last document version  in order to search for previous document versions you need to use the query   the full text search does not only find documents with the key words in simple text fields but also in specific blob fields  these may contain microsoft word documents or pdf documents   for the easiest search the editor simply enters a keyword into the search field and starts the search  the coremedia editor shows the result documents which contain the keyword and for which the editor has read rights  the editor can select documents from the result list for further editing   the full text search returns a result very fast  nevertheless  you should try to create the search in such a way  that the result set remains small  the editor needs more memory and time to view large result sets and its hard to work with large result sets  therefore  the coremedia content management server limits the size of the result set  up to now to      documents   this intends  that you will not always see the whole result set in the editor   the coremedia editor integrates the full text search into the explorer window and into the file chooser dialog  the following subchapters describe the search in these windows of the coremedia editor  in the coremedia webeditor you cannot search in the file chooser dialog  in addition there is no distinct search view in which to refine the search   not all character combinations are allowed search terms and some characters have a special meaning  the last chapter defines allowed search terms and describes special characters  
  passing parameters as a url  while flexible  the creation of a map takes some lines of code  so that we provide a simple method that works in many cases  the additional parameters beside the content server url are inlined as url parameters in that url  this permits the compact configuration via a single string   string url    http   localhost       coremedia ior       user admin password admin useworkflow false   capconnection connection   cap connect url    here we have disabled the workflow component entirely by the means of useworkflow false  this reduces the resource requirements when the workflow connection is not needed at all   individual parameters are separated by ampersands      the entire set of parameters is separated from the ior url by a question mark      possible parameters are   workflowurl   user   domain   password   useworkflow    note that the well known parameters are removed from the url before it is resolved over the network  in particular  the password is not transmitted in clear text  
  after being created using the cap connect      methods  a connection is open immediately  i e   its methods can be invoked and all read and write accesses to the associate repositories are possible  too  a connection that was created through cap prepare      starts off closed  it has to be opened by a call to open     an open connection will stay open until closed explicitly  in particular  an open connection does not become eligible for garbage collection simply by discarding references to it  there are a number of active threads inside a unified api connection that will keep the connection alive until explicitly closed   after you have closed the connection  all stateful objects that were retrieved from the connection become non functional  in particular the repositories  services and capobjects  immutable objects like strings or markup objects generally remain intact  but blobs become unusable    operations on closed connections  the only operations that are possible on a closed or not yet opened connection are calls to setters and getters for the connection parameters like user name or password   management of open connections  while a connection is open  you can also access the connection s management bean as provided by the getmbean   method  these are the configurable parameters  
  you can also create a connection without opening it immediately  here you may pass a number of parameters by means of a map  but you can set additional parameters later before opening the connection   map params   collections singletonmap cap content server url    http   localhost       coremedia ior    capconnection connection   cap prepare params   connection setuser  admin    connection setpassword  admin    connection open     the methods that are available for setting the parameters of a connection are   seturl       setuser        setdomain       and  setpassword       
        click the queue tab    choose the publication you want to prioritize from the list    select the menu item publication prioritize  or click  on the tool bar   your publication will be executed next   
  the classes manageablelistener and jmxexample contain a jmx enabled event listener that can be run as a permanent process and a control class that can set the cache size of the listener dynamically  in order to run this example  you must include the jar files mx j remote jar and mx j jar into your class path  e g   when starting the manageable listener  use the following command   java  classpath lib mx j remote jar lib mx j jar     lib cap client jar classes     com coremedia examples capclient manageablelistener      url http   localhost       coremedia ior      u admin  p admin  re opening connections  the unified api also supports the re opening of closed connections  after a connection has been re opened  the listeners have all been removed from the listener sets and blobs may have been rendered unusable  but the repositories  services and capobjects have returned to their previous state  allowing reads and writes    the cache object that is associated with the connection does not remain stable  instead  a new cache object is created whenever the connection is opened   this makes it possible to create a perpetually running client that releases its licenses when it is idle for an extended period of time  of course  the re acquisition of contested licenses may fail  so that this pattern is not suitable for system components with strict availability requirements   automatic reconnect after server or network problems  the unified api supports reconnects to servers after network problems and even after the servers are restarted  the connection remains open while a reconnect is attempted  but read and write accesses may fail with an exception   in the case of the content and user repository  the event streams are re established and no events are lost  in the case of the workflow repository  events may be lost  but all caches are properly invalidated after the reconnect   if the document types are changed in any way while the content server is down  a reconnect may fail in unexpected ways  always shut down all clients before modifying the document type declarations  
  when you open the publication window  you will see different tabs  you can use them  to get information about the publications  if you publish only few resources  the queue will be mostly empty  
   tab description own publication on this tab  you will find information about the execution of your current publication  queue on this tab you will find all publications in the queue  if you are using multi site management  the publications to all publication targets will be shown   all publications on this tab you will find information about all executed publications   
  selecting the queue for a certain publication target  if you are using multi site management and you have defined several publication targets  you can show the queues for all targets separately   proceed as follows  choose the publication target in the menu publication targets   another tab opens up  on which you can check the queue  
  the capconnection provides one service object  the servercontrol  which is reachable through the method getservercontrol  it provides means for inspecting and controlling the login process on the content server    in particular  it provides methods for inspecting the license information  for inspecting and tracking the set of currently opened sessions  for requesting trace level logging  for killing individual sessions and for changing the run level of the content server  
  as long as a connection is open  it maintains an internal cache to avoid unnecessary refetches of persistent data from the servers  you can configure the size of the data that is cached in behalf of the connection by means of the connection s management bean   you are free to use the cache for your own purposes  in particular for maintaining aggregate views on persistent data  typically  this is done using the framework of the coremedia content application engine as described in the delivery developer manual  the content application engine includes code generators for the rapid implementation of custom cacheable beans  you can also access the cache directly by means of the getcache   method of the connection object  please refer to the javadoc of the class com coremedia cache cache for details about this class   almost every read call is cache aware  meaning that the cache will timely invalidate cache entries that performed some operations by means of the unified api   there are  however  some exceptions to this rule  results of queries or search requests will never be cacheable  such computations are invalidated right away after being completed  therefore  these operations tend to be relatively expensive  when accessing user data that is stored in an ldap repository  invalidations are time based  that is  computed values will eventually be removed from the cache  but they may be present for a while in order to improve performance  other than that  caching and automated invalidation is fully available    please note that each time the connection is closed and re opened  a new instance of the cache is build  the cache cannot be used after the connection is closed  not even for tasks unrelated to the unified api  
  line    you have to import the wfserver class which you will find in com coremedia workflow  you need it to access the repository   line         this method gets the content of the document defined via the given id  the important parts are line   and    here the method getconnection   of the class wfserver is used to get a capconnection object  with this object and its getcontentrepository   method you can access the coremedia content management server repository using the unified api  with the method getcontent id  you retrieve a content object  in the last step you fetch the xml representation from the content using the method getmarkup field  tostring   which returns a java lang string  see the unified api documentation for details   this string may be inserted into the mail  
  the unified api uses the apache commons logging api when producing log output  on the apache web pages  http   jakarta apache org commons logging  you will find documentation on how to configure this logging api  the commons logging classes are primarily concerned with detecting other loggers and forwarding requests to these loggers  so you will have to continue with your configuration after you are done with commons logging    the great advantage of commons logging is that it allows the logging of the coremedia classes to be integrated with the logging of other components that you might want to use in your program  by default  commons logging uses the java     logging  which in turn is configured to print log messages on the standard error stream  the class jdklogconfigexample contains an example of how to configure the default logging in java util logging as shipped with the jdk    in a similar vein  you could also use log j  but you would have to add the file log j jar to your classpath  if it is not already present  and configure it as described on the log j web pages  http   logging apache org log j docs     
  there is no automatic recalculation of the user sets if there are changes in the user management  this may cause the following effects   new users or users assigned to new groups won t see any offers already pending  users removed from groups won t see already offered task disappear from their task lists  this is not a security problem  since the rights are checked on every access on the server   
  in the class hoxlogconfigexample  which you find in the examples distribution  you can see how commons logging is used to delegate to the classic coremedia logging package hox log  you might want to use this option while migrating from the scripting api to the unified api  using the following statement  you can redirect commons logging to coremedia logging   system setproperty  org apache commons logging logfactory     hox log hoxlogfactory class getname      actually setting up the classic coremedia log is more difficult  but as we are dealing with migration projects in this specific case  the necessary work has already been done  please have a look at the source code if you are interested in details  when starting this example  use the following line   java  classpath lib cap client jar classes      dcorem home  the corem home dir     com coremedia examples capclient hoxlogconfigexample  you have to pass the path to the base directory of the installation  so that the example can determine where to put the log file   note that the classic coremedia logging is no longer recommended  this section is simply intended to aid you in migration projects where you have to use hox log for easier integration of the unified api with other coremedia components  
  the coremedia workflow comes with a workflow client integrated in the coremedia editor  if you want to implement your own client  for example to trigger external events into the workflows or the query workflow state for reports etc  the unified api provides the workflowrepository   in order to create a workflow client  use a code like the following  
  remote action handlers  a remote action handler is responsible for executing a user tasks client actions on behalf of the clients user     handlers must implement the interface remoteactionhandler    a handler receives the command and parameters to process    it has to return an actionresult   a client action is the result of one of the following client calls to the server   task accept   task complete   task retry    the client call is blocked at least until all client actions have been handled  
  the generator provides the bean hox corem servlets beans xmladapter which allows you to create xml for any generator resource  this bean also has some additional methods that might come in handy  refer to the api documentation for further details   
  never implement client actions requiring any user interaction by a remote action handler   they will block server transactions for an undefined time and will eventually time out  they won t work in a synchronous client   
  now that we have seen what the xml representation of a resource looks like  we ll discuss the xml properties of documents which can hold arbitrary xml  this xml is usually not included  inline  by the resource xml for reasons of validation  instead  these elements carry a  href  attribute which is a uri pointing to the actual contents of the property  if such an uri is not present the property contains no xml   by default a coremedia xml property contains markup conformant to   corem home lib xml coremedia richtext     dtd   this dtd offers the following benefits to you     all elements of the coremedia richtext     dtd can be printed out directly and can be displayed by every browser  only standard html and css tags are used    you can edit this markup with the coremedia editor which is convenient and easy   drawbacks include     only html browsers support the tags  you can t browse this content using a wap phone    the richness of expression is flexible yet limited   
  the unified api provides a common superinterface for all persistent entities  capobject  a capobject can be thought of as being contained by a repository  within that repository  it is made unique by an identifier  the available object classes have already been named in this text  folders and documents  users and groups  processes and tasks   folders and documents are jointly presented through the interface content  documents may exist in more than one version  the version and content interfaces are subsumed under the contentobject interface  likewise  user and group objects share a common superinterface member and the interfaces process  task and workflowview are derived from the interface workflowobject  all of these interfaces extend capobject   two capobjects refer to the same persistent entity if they are equal as per object equals object   in general  there may be more than one java object for the same persistent entity  
  this chapter describes some configuration tasks you can perform for the coremedia webeditor  
  every capobject and captype is equipped with a stable string id that can be persistently stored and converted back into an object reference as needed  to this end  capobject has got a method getid   for retrieving the id  methods for converting ids into object references are typically provided by the repository objects   it is recommended that you treat the ids as opaque strings  because the exact format of the strings might change in future releases of coremedia cms  still  we provide detail information about the ids for the purposes of debugging and for interfacing the unified api with legacy clients which might insist on using numeric ids   the class com coremedia cap common idhelper is provided for formatting and parsing all sorts of id strings  note that all methods in that class may be redefined arbitrarily in the next coremedia cms release   the following table summarizes the various id formats for capobjects  
   id string interface description coremedia    cap content  int  content   document or folder coremedia    cap version  int   int  version   version of document parameters  numeric content id version number coremedia    cap process  int  process   process coremedia    cap task  int   int  task   task parameters  numeric process id numeric task id coremedia    cap initialview  int  workflowview   initial process view parameter  numeric process id coremedia    cap processview  int  workflowview   ordinary process view parameter  numeric process id coremedia    cap taskview  int   int  workflowview task view parameters  numeric process id numeric task id coremedia    cap user  int  user user coremedia    cap group  int  group group  
  the captypes are also identified by an id  
   id string interface description coremedia    cap contenttype  string  contenttype content type coremedia    cap grammar  string  xmlgrammar xml grammar coremedia    cap processdefinition  int  processdefinition process definition parameter  numeric process definition id coremedia    cap taskdefinition  int   int  taskdefinition   task definition parameters  numeric process definition id numeric task definition id coremedia    cap initialviewdefinition  int  workflowviewdefinition   initial process view definition parameter  numeric process definition id coremedia    cap processviewdefinition  int  workflowviewdefinition ordinary process view definition parameter  numeric process definition id coremedia    cap taskviewdefinition  int   int  workflowviewdefinition task view definition parameters  numeric process definition id numeric task definition id  
  there are some other objects that are also assigned an id  but that do not implement capobject or captype  such objects implement the method getid    but they do not provide getters and setters for properties  
   id string interface description coremedia   cap publication  int  publication a publication that has been enqueued coremedia   cap publicationtarget  string  publicationtarget a publication target coremedia   cap session  int  capsessioninfo a session that has been opened on the content server coremedia   cap service  int  capserviceinfo a service of the content server for which logins are possible  
  configure the url of the coremedia content management server in the file capclient properties  set the property cap client server ior url to the value http    server   port  coremedia ior    replace  server  with the name of the host where the server runs and  port  with its port  the port must match the value of cap server http port in the capserver properties file of the content management server  
  unified api objects that define an id are equal in the sense of object equals object   if and only if their ids are equal and if they belong to the same unified api connection  
  to circumvent some of the mentioned problems  you might want to use the feature to upload a jar together with a workflow definition  this separates the classes for each workflow definition  but when you update the jar for an existing workflow definition  the same problems occur as when loading the classes from the workflow servers classpath   additionally  references from the classes inside the jar to classes outside of the jar are likely to cause problems  it might seem  that packaging all classes that are referenced by the customized workflow classes into one huge jar is a solution  but consequently  you would have to package the transitive closure of your workflow classes into that one jar  that may not be feasible  it s better to document the dependencies of the customized workflow classes and to keep care that they are always fulfilled when running the workflow server  
  never compare two objects of the unified api using the    operator  this operator will typically return false even though two objects refer to the same persistent entity  always use object equality instead  
  it is recommended to use the ids for external storage only  the identified objects of the unified api are lightweight  so that it makes no sense to store ids in main memory for a long time  ids are more difficult to handle and often larger than their object counterparts  but for storage in a database or a file  ids come in handy   ids are also used by some of the administrative command line tools and for generating debugging output   
  this chapter describes the properties of the config bsh and struts config xml file   
  the beanparser  that is used to parse the coremedia editor configuration allows to configure all bean properties of the beans that are introduced in the following  since not all configuration hooks will be explained  it s always a good idea to consult the javadoc and discover all configuration possibilities  
  the beanparser  that is used to parse the coremedia workflow definition allows to configure all bean properties of the beans that are introduced in the following  since not all configuration hooks will be explained  it s always a good idea to consult the javadoc and discover all configuration possibilities  
  objects of the unified api can store property values of various types  not all property types are available for all repositories  however  please see the documentation of the individual repositories for an overview of the supported property types   most of the values are well known in the java language  string  integer  calendar  and the like  there are some special property values for which the existing classes are not sufficient  we will discuss these values in more detail now  all values share the common feature that they are unmodifiable in the sense that they will not change spontaneously and that they do not provide methods to change their state  
   property value default description generator setaccesscontrolenabled true   true  false  be sure that this method is set  true  otherwise read rights of individual users are not checked by the generator webeditor  generator sethashfilenames true   true  false  writes cached pages with a  hashed  name created from the original file name and path to the file system  this avoids problems with path names exceeding the os limit  mainly under windows  which are frequently encountered with the web editor and thus optimizes the cache usage  only set the method to  false  if you need to get the original filename from the pages cached in the file system  viewdispatcher addviewvariantrule new parameterviewvariantrule  variant       this allows the web editor to specify viewvariants by a parameter  see documentation of the viewdispatcher    default defbean com coremedia cap wage xmlformatparserfactory class getname    new com coremedia cap wage util xmlformatparserfactoryimpl     factory name  a factory for xmlformatparsers that parse the text submitted by an xmlproperty editor  it can be extended by own parsers  otherwise no configuration is necessary  object nameandiconpathfactory   new com coremedia cap wage util basicnameandiconpathfactory   generator getservletcontext   setattribute  namefactory   nameandiconpathfactory  generator getservletcontext   setattribute  iconpathfactory   nameandiconpathfactory   factory name  a factory for names and icon paths of active delivery server objects like resources  resource types  etc  wageconfig setenabledirectpublication true   true  false  this ensures that the buttons for approval  disapproval  publication  and publication preview are displayed as buttons and included as menu items in all relevant windows  use the option if publication is not done using workflows  wageconfig setenableworkflow false   true  false  this disables all references to the workflow component in the editor  use this option if the users are not concerned with workflows at all  wageconfig setworkflowsynchronizationtimeout         milliseconds       this configures the timeout in milliseconds after which attempts to synchronize the web editor with pending workflow operations times out  wageconfig setshowcurrentuser true     true   false false show the current user in the title bar  true   wageconfig setusernamepattern                  define a user name pattern as described in java text messageformat  wageconfig setshowcurrentpath true     true   false false show the current path in the title bar  true   wageconfig setcurrentpathpattern                define a path pattern as described in java text messageformat   
  as the web editor is a web application that uses struts  see the wage developer manual  you can configure some features of the web editor using the file  tomcathome  webapps editor web inf struts config xml  in general don t change the attributes of the  controller  element  
   property value default description  set property property  generatorid  value  generator     this property must match the name of the application scope generator bean in config bsh   set property property  workflowtemplatepath  value   wftemplates       this property sets the root uri path for the workflowviewdispatcher   set property property  defaultcharacterencoding  value  utf          this property sets the default character encoding   set property property  previewuriprefix  value   coremedia        this property sets the root uri path for the preview   
  in the context of the workflow this element of the xml file is used for sorting   the entries in the menu file new workflow when used in  processes   see the example   the worklist when used in  columndefinition  of  tabledefinition    
   attribute description class name of the class in which the sorting comparator is defined  the class must contain a public constructor without arguments and must implement an interface depending on the objects to sort  see the api documentation    
  some properties contain an entire list of values instead of a single value  for content objects  only lists of content are possible  for workflow objects  all kinds of property types are also available as aggregation properties  such properties always use implementations of java util list for representing values   when retrieving an aggregation from the repository  the resulting object is dead and unmodifiable  it will not change due to concurrent actions and it cannot be changed by the client  when you want to change the value of a list valued property  you have to provide a new list with the correct state  possibly copying the previous list into a new collection   when reading a property with a typed getter  lists are automatically converted to atomic values and vice versa  lists of different types are automatically converted by converting the individual entries  see the javadoc of capobject for details  
  blob properties take blob objects as values  like markup objects  they are api objects that are immutable  they provide access to metadata and to an input stream that contains the actual binary content   when a blob is read from the content repository  it is cached on disk and not in main memory  it is even possible for the disk cache to be cleared while you still hold a reference to the blob object  therefore  a content repository blob is a comparatively cheap object   the workflow repository supports blobs  too  such blobs are always loaded into main memory and they cannot be garbage collected as long as they are directly or indirectly referenced from client code  normally  this is not a problem  because workflow repository blobs often serve very special needs  being used for the compact storage of complex data structures  workflow blobs are generally not recommended for storing large images or audio stream   when you want to set a blob property  it is possible to use a blob object that you obtained by a previous read operation  the class blobfactory allows the creation of blob objects from either a file  a url  an inputstream  or a byte array  it returns a blob object that you can pass into the setter   normally  you obtain a blob by calling the method capobject getblob string   when you call capobject getblobref string  instead  you get a reference to the blob instead  encapsulated as a capblobref object  while ordinary blobs are immutable  blob references can change over time  reflecting concurrent changes to the capobject  blob references are cheaper than blobs  reducing resource requirements  they can also be useful when you want to indicate the origin of a blob as compared to its content  e g   when generating urls that link to image properties  
  for xml properties  a markup object is provided as the property value  a markup represents an immutable xml document fragment  it consumes less memory than a dom representation and can generate sax events faster than a sax parser  conversion and interaction with the standard apis sax    dom    jaxp  and trax is possible   note that while the memory footprint of a markup is comparatively small  such objects are still kept entirely in main memory  if you handle many large xml texts  it becomes important that you make them eligible for garbage collection as soon as possible   markup instances are read only and encourage a functional programming style like in markup m    m transform       sax based and xslt based transformations are available  the class markupfactory allows the creation of markup objects from an inputstream  a reader  an inputsource  a jaxp source  a dom node or a string   markup instances carry an optional grammar identifier as a hint regarding the structure of the xml text   note that unlike other value objects  markups do not declare a special object equals object  method  so that they cannot be easily compared  if required  you should design your own comparison algorithm that takes the actual xml format into account   please refer to the javadoc of the package com coremedia xml for details about the markup interface and the associated classes  
  every capobject is an instance of a type  a type defines the properties that are appropriate for that object  types are represented as captype objects  types are named and they may be put into a subtype hierarchy  which can be queried through the captype objects   for each property  a type aggregates a cappropertydescriptor object  there is one subclass of cappropertydescriptor for every kind of property value  integerpropertydescriptor  linkpropertydescriptor  and so on   property descriptors provide further information about the property  in particular  the method iscollection   indicates whether the descriptor belongs to a collection valued property   the type and descriptor objects allow you to inspect the structure of the type system algorithmically  this is not required for many applications  but it allows you to write reusable algorithms that are supposed to act on capobjects regardless of their actual internal structure   often  types act as factories  using create methods  it is possible to build additional instances of a type  the methods for doing this are defined in the sub interfaces  though  they require additional information that depends on the repository that is used   for more details on the type system  see the javadoc of the mentioned classes  
  the coremedia xml importer clients serve to transfer content from external sources into coremedia cms  they can handle any xml format  and even non xml legacy formats can be transformed into importable xml files  for each different xml format you want to import  a specialized importer instance is required to transform the relevant components of the source documents into corresponding fields of coremedia documents    the importers are non interactive and  according to their configuration  stop processing after a single import or run and import continuously at periodic intervals   before you start a xml importer  it must be configured  e g  where to get the input or the coremedia user name and password   the following sections describe how to   configure and start stop importers   in the following all given file paths are relative and relate to the coremedia installation directory   
  the beanparser  that is used to parse the coremedia editor configuration allows to configure all bean properties of the beans that are introduced in the following  since not all configuration hooks will be explained  it s always a good idea to consult the javadoc and discover all configuration possibilities  
  having opened a capconnection  all actions are executed on behalf of the single user whose credentials where provided when logging in  in some contexts  it is desirable to use different users for different tasks while maintaining a shared cache  to this end  the unified api allows you to use multiple sessions per connection    every session is represented by an instance of capsession  the session that is created while the connection is opened is also known as the connection session  additional sessions can be opened by the connection s login methods  having obtained a session  this session can replace the default connection session by calling the method setsession capsession  on the connection  afterwards  all accesses in the same thread that set the session are performed on behalf of the new session   capsession session   connection login user  password   connection setsession session       session close     the previous code fragment shows how a second session is created from an existing connection  notice that the call to setsession was necessary  because the login call does not automatically set the session  only between setsession and close we can see the newly created user as the user of the current session  in fact  in other threads the original session still applies  after closing the session  the connection session is again active   in other cases you might want to save the original session and reestablish it after the work of the second session is complete  without closing the second session  that way you can save the time that is required for opening the session  of course  a session that is held open consumes a concurrent license all the time   all accesses to the repositories are subject to the limitations of the requested session  during reads and writes  the rights check is based on the identity of the session s user  write rights may happen to be reduced  but it is also possible that additional rights are gained by switching to another user  however  the read rights available to any session are at most the read rights of the connection session  this is required in order to ensure efficient caching and to avoid accidental information leaks  due to this restriction  it is recommended that the connection session s user should be allowed to read all repositories in their entirety  if additional sessions are expected to be created   when attaching a listener using the unified api  the current session is recorded  before events are delivered to the listener  that session is re established as the current session  this way  listeners inherit the privileges of the code that attaches them   note that it is always possible to reset the current session to the connection session  therefore  setting the current session is not sufficient for enforcing access restrictions when a capconnection object is passed to untrusted code  multiple sessions show their greatest potential in trusted applications which receive help in restricting user views while maintaining a shared cache   certain privileged connections have the ability to create new sessions for arbitrary users without providing a password  in particular this is true for the workflow service  in this case  logging in another session might be as simple as   user user        capsession session   connection login user    note that it is not possible for ordinary user code to create a privileged connection  instead  a privileged connection is returned by framework methods like wfserver getconnection     
  when writing properties of a capobject  these writes are initially buffered and not sent to a server  afterwards  the accumulated changes are sent to the server during a flush   call on the session object   writes are buffered per session  if a session is made the current session in more than one thread  all of these threads will share a common write buffer  this means that they can see each other s changes and that one flush call on the session objects will flush all changes at once    for this reason it is not normally a good idea to work with more than one thread using one session  the threads will continually lock out each other as the unified api synchronizes for accessing the write buffer  leading to reduced performance  it is advisable to use one session per thread in a multi threaded environment  you might even want to log in multiple times with the same user in this case   the write buffers are also flushed when a call is made that cannot be handled locally by the unified api  currently  all calls except setters and getters will flush the write buffers  but this may change in future versions   it is a good practice to flush the write buffers before any user interaction is resumed  before long delays are expected  and before returning from public methods that may be called from arbitrary code  
  all exceptions that are thrown by the unified api are derived from the single class capexception  which is a runtime exception    because runtime exceptions are used  you do not have to catch the exceptions explicitly  the exceptions are documented in the javadoc  however  so that you can easily catch those exceptions that you expect and can handle reasonably   exceptions are equipped with error codes that simplify the analysis of the actual problem  however  these error codes are not supposed to be used algorithmically  the codes may change at any point of time in the future  they are solely intended for debugging purposes   instead  for the most important problems and groups of problems  own exception classes were created  these exceptions can be treated specially in order to recover from errors  they will not change  although new exceptions may enter the hierarchy   individual exception classes can provide further hints about the problem at hand  for example  a contentexception references the content that was involved into the failed operation   as it is possible for a write buffer flush to occur almost everywhere  it is possible that the associated flushfailedexception is thrown at almost every point in the code  if an application cannot be made robust with respect to such exceptions  care must be taken to flush all writes as soon as possible after the setters were called   some method calls involve bulk operations  i e   they operate many resources at one time  when such an operation fails  a bulkoperationfailedexception is thrown  from that exception you can retrieve the bulkoperationresult that provides more details on the failed operation  bulk operations only return normally when they succeed completely  this ensures that a problem is detected reliably as soon as possible  
  most listener classes come with an abstract handler class whose name can be derived by adding base to the interface s name  you can inherit from these classes when you want to handle only a small subset of the events provided  for example  a contentrepositorylistener might be based on the class contentrepositorylistenerbase   listeners are informed about changes asynchronously  no guarantees are made about the possible delays  however  it is assured that a listener will receive exactly those events that arise out of operations that are executed after the listener is added and before the listener is removed  furthermore  all changes of an operation are visible through the unified api before a listener is notified about the changes  in particular  the internal cache is invalidated as needed  it may be  however  that subsequent operations have already overwritten the state that was generated by the operation that caused the event  for example  a renamed document may have already been re renamed before the event of the first rename operation is processed   listeners are called in a single thread  events are processed in order and each event is delivered to all interested listeners before the next event is handled  this means that a slow listener can create a backlog of unprocessed events  even for other listeners  it also implies that listeners must not wait for events to arrive at other listeners   you can set a listener priority to define the order of notification when adding a listener  a listener with a higher priority will be notified about a single event before all listeners with a lower priority  the default priority is caplistener default priority   listeners may access the unified api for processing events  they may even make write calls that cause additional events  however  a listener must not add or remove listeners  it may not even remove itself from the set of listeners  spawn a separate thread if you have to do this   when a capconnection is closed  all listeners that are attached to the connection or its repositories are automatically removed  no more events are delivered  even when the connection is re opened  if desired  new listeners have to be attached  
  blob  grammar  empty   the blob element is used to specify a single constant blob value within expressions or variable initializers  
     attribute   type   default   description value cdata    implied   the blob value in bytes mimetype cdata  required the blob s mimetype  
  if you want to read more about setting up and configuring the various servers with which the unified api interacts  we propose the administration and operation manual as further reading  in that manual  you will also find information on how to create users and grant the users access to the repositories   the javadoc provides much more detailed information about the interfaces and methods that make up the unified api  it is suggested that you use the javadoc as a reference while programming  but it is also useful for getting a more detailed overview   look at the class com coremedia cap cap in more detail to find out about the methods for establishing a connection  now inspect com coremedia cap common capconnection  but upon first reading view it solely as a means to get access to various repositories and to close   the connection after you are done   afterwards  you should have a look at the other classes in com coremedia cap common  in particular  make yourself comfortable with capobject  captype  capevent  caplistener  capexception  and the type hierarchy of blob  the package com coremedia xml is also recommended for dealing with xml properties   the subsequent chapters will deal with the individual repositories and their functionality in more detail     
     attribute   type   default   description   value   nmtoken    required   the name of the content type  
     attribute   type   default   description   varies   additional parameters according to the implementation of the action class  
  the content repository stores versioned documents that are organized in a folder tree  it allows the user to create  retrieve  read and update stored documents and folders while checking access rights  it also ensures that content can be published from the content management server to the master live server   the content repository is augmented by six services     accesscontrol for determine rights    publisherservice for controlling the publication process    queryservice for performing structured queries    searchservice for performing full text searches    propertyservice for accessing persistent properties of the content server    workflowcontentservice for finding workflows that access a given content   the publisherservice  the workflowcontentservice  and all modifying methods are only available on the content management server  
  the content repository is concerned with the handling of folders and documents  the unified api presents folders and documents jointly through the interface content  which is a sub interface of capobject  in releases prior to coremedia cms        the term resource was used to refer jointly to folders and documents  but that term was meant to indicate a very much reduced signature that allowed only for those methods that are common to folders and documents  the interface content  however  provides all methods that are applicable to either documents or folders  besides content  there is the version interface  which represents a historic version of a content  
  the types of both content and version objects are defined by contenttype objects  contenttype inherits from captype  but not all kinds of properties are supported  only integer  string  date  blob  xml  and link list properties are provided   documents and versions are using the types that are configured at the content server  for folders there is a special pseudo type without property descriptors  two other abstract pseudo types are provided  one for documents of any type and one for content in general  including folders and documents   you can obtain a reference to a type by calling contentrepository getcontenttype string  with the name of the type  the pseudo types are provided by the methods getfoldercontenttype    getdocumentcontenttype    and getcontentcontenttype    the pseudo types are properly integrated into the type hierarchy   types also allow you the creation of new content objects  to this end  you have to call one of the create methods and pass parameters that will allow the server to determine at least a name and a folder for the content  
  the accesscontrol service of the content repository is responsible for maintaining the set of rights rules and for evaluating the rules to determine whether a user is allowed to perform a certain operation on content objects or not   overview of rights  the following rights are defined for the unified api  
  if the command class is a hox corem editor commands mapcommand  all the parameters are passed to the command as a map   examples for remote control urls are   http   localhost       coremedia control command openresourceinexplorer resourceid       opens the document with the id      in the explorer view    http   localhost       coremedia control command opendocument resourceid       opens the document with the id      in a document view    http   localhost       coremedia control command showresourceinformation resourceid       opens the resource information view for the resource with the id         http   localhost       coremedia control command openwfinstanceinworkflow processinstanceid   taskinstanceid    opens the task instance   from the process instance   in the workflow view    http   localhost       coremedia control command storeproperties documentid      text test  stores  test  in the property text of the document with id         http   localhost       coremedia control command createdocument parentid      type article name newdocument text test  creates a new document named newdocument with the document type article below the folder with id      and stores  test  in the property text of the document     http   localhost       coremedia control command createfolder parentid      name newfolder  creates a new folder named newfolder below the folder with id         prior to using the commands  you have to check the access control  requests are only accepted  if    their origin is the same computer as the one the editor is running on and   their command is activated in the remote control policy file   the remote control policy file  install dir properties policy editor policy is a standard java policy file and may be edited with the java policy tool  it grants execute rights to commands by specifying the name and the package of the command  
  the publicationservice allows you to control the publication process and to inspect the state of the publication queue   when a content is created  it exists on the content management server only  the process of transferring the content to the master live server is referred to as publishing the content  before a content can be published  it has to be approved  in general  the approval of a content refers to its location in the folder tree  it is approved that the content appear on the master live server at a given place  hence the name place approval for this type of approval which can be performed by the method approveplace content   when a document is published  a version must be created on the master live server  too  to this end  the version itself must be approved using the method approve version   only an approved version can be published  even if a content is published  subsequent movements  renames  and property changes happen on the content management server only  new places or new versions must be published explicitly   when a content is supposed to leave the master live server  it must be marked for withdrawal or deletion using the methods tobewithdrawn content  and tobedeleted content   after that operation is place approved  the content can be included in a publication set  during the subsequent publication  the content is removed from the master live server instead of being updated  in the case of a mark for deletion  it is also moved into the archive on the content management server     
  both internal and target ids can be used in the attribute id  
  a publication is initiated by the publish      methods  you can also request a publication preview by means of the preview      methods  a preview does not actually copy information to the master live server  but makes all checks to determine whether a publication would be successful  possible arguments to the publish and preview calls are a single content  a collection of contents  or a publicationset   when contents are given as argument  the actual publication set is determined heuristically  to this end  the publication service selects versions to be published with the content  if that is appropriate given the current marks and approvals  you can also create a publication set by providing collections of contents and versions explicitly  taking care that no versions are included whose content is marked for withdrawal or deletion   after a publication has completed successfully  a publicationresult is returned  the publication result informs about all contents that were involved in the publication and about the actions that were performed  if the publication is unsuccessful  a publicationfailedexception is thrown  which wraps a publication result that details the cause of the error   as an example  let us look at an excerpt from the class publicationserviceexample that is available as a source code example   publicationservice publisher   repository getpublicationservice    publisher approveplace folder   publisher publish folder   publisher tobedeleted folder   publisher approveplace folder   publisher publish folder    a folder that has been created before is approved  published  marked for deletion  approved again  and deleted by publishing  this example summarizes the entire lifecycle of content publication in a few lines  obviously  real applications will not use all of these methods in one place   the publication service also provides a means to inspect the current state of the publication queue  you can get a list of all pending publications and access a summary of each publication s characteristics  a publicationservicelistener informs about changes to the publication queue   if you have enabled multi site management for your coremedia cms  there may be more than one publication target  each publication target represents one master live server and includes any number of base folders  you can retrieve all publicationtarget objects from the publication service  the administration and operation manual provides more information on how to set up publication targets  
  the unified api offers some administrative functionality for dealing with process definitions   as described in the workflow developer manual  a process definition consists of some xml  which may contain references to custom java classes   the byte code of custom java classes has to be supplied either in the workflow server s class path  or in an accompanying jar file   code that is deployed in the workflow server s class path is shared between all versions of all workflows   it can only be changed by shutting down and restarting the workflow server  which disrupts service and causes significant delays for reinitializing users  work lists etc  in contrast  custom code that is uploaded together with the process definition s xml is used only by this version of this process definition   such code runs in a separate class loader  and therefore will not share classes and static fields with other process definitions   currently  custom code on the workflow server only has access to the content and user parts of the unified api  for accessing workflow objects  server side code uses the traditional  workflow api  further details on the server side workflow api and the interfaces for server side code can be found in the workflow developer manual and in the javadoc   the method workflowrepository createprocessdefinition is used to upload an xml process definition together with an optional jar file to the workflow server   later  the data originally uploaded can be retrieved using processdefinition getprocessdefinition and processdefinition getprocessclasses  
  this chapter describes the installation of the coremedia web editing server  you can install   the wage webapplication the webeditor webapplication the webdav webapplication  proceed as follows    select the coremedia wes  option and click  next    the next window opens up and shows the components of the web editing server to install  you can select the wage api  wage webapplication   the coremedia webeditor  webeditor webapplication  and or the coremedia webdav support  webdav webapplication    
      select the components you want to install and click  next    now the window shown below will open  you can decide whether the default servlet engine tomcat should be installed or not  if you choose yes  tomcat will be installed and the components will be installed in  webapps of the tomcat installation  no  only the component s context will be installed  you have to integrate these components in the servlet engine of your choice manually   
  if you want to install the coremedia unified api proceed as follows    select the coremedia unified api option and click  next    the next window opens up where you can select the unified api libraries  java libraries   a simple java example  java sourcecode  and the interactive bean shell  interactive bean shell    
      select the components to install and click  next    now you will be asked for the destination directory etc  as described in the  general installation information  chapter  afterwards  you will be prompted to configure the unified api      because there are no properties to configure  select  no    now the files of the unified api will be copied to the installation directory  the last window opens up and asks you to finish the installation     click  finish  to finish the installation of the unified api  
        click  browse     to select the directory and  next  to continue   a dialog to configure the coremedia search engine appears next  the fields have the following meaning   
  pads is configured with a list of root keys to specify what should be generated  a key is an identifier in the form of an uri  uniform resource identifier   for each configured key a java object value is computed by its responsible builder  a builder implements the interface com coremedia generator builder  during computation a builder can read fragment values and establish links to top level values  fragment values are cached separately and can be used in several other values  links are used to trigger the computation of other top level values  pads computes all values which are reachable through links from the configured root keys  pads tracks dependencies to coremedia resources and fragments which were accessed during value computation and invalidates dependent values on changes   the following figure shows five top level values  blue boxes  and one fragment value  gray box  with their links and dependencies  the olive arrows show invalidations of dependent values which will occur if a read value or resource changes  
  a builder is invoked to compute an output value for a given key  values are java objects which implement the interface java io serializable  builders must implement the interface com coremedia generator builder  they are called if the key was configured as root key or a link was established to the value with that key  they are also called to compute fragment values which are read during the computation of other values   each value is identified by an unique key  which is an uri  uniform resource identifier  see rfc       consisting of scheme and scheme specific part separated by a colon   scheme   scheme specific part   the scheme defines the builder to be used whereas the scheme specific part contains builder specific arguments that tell the builder what to build  keys are used to configure which values should be generated and to which uploaders they should be passed  they are used to read fragments and to link to other top level values  uploaders use them too  e g  the fileuploader uses the key s scheme specific part to construct file names   there are two different kinds of computed values  top level and fragment values  the method builder isfragment defines whether a value is a fragment or not  uploaders receive top level values only and you can only configure top level values as root values   during the computation a builder can read fragment values which are cached separately  fragment values can be used for the computation of several other values  pads automatically tracks dependencies to accessed fragments and resources  whenever a resource in the coremedia content server or an accessed fragment changes  the dependent value gets invalidated   when a fragment is invalidated it is either deleted from the pads cache or instantly recomputed  the behaviour is defined by the return value of the method builder instantlyrecompute of the fragment s builder  if it is deleted from the cache  the invalidation will be propagated to all values that depend on this fragment  instant re computation only makes sense  if there is a fair chance that the value remains unchanged  in such a case invalidation of dependent values isn t needed  non fragments are always recomputed immediately on invalidation   a builder may trigger the computation of top level values by establishing a link to it  often this is the only purpose of the configured root keys  e g  to trigger computations with another builder for all cap resources below a certain folder    you can write and configure link predicates to restrict the computed values  link predicates are asked if a link that a builder requested during computation with given source and target key should be created or not  i e  if the value for the target key should be computed or not  if no link predicates are configured  all requested links are created  link predicates must implement the interface com coremedia generator pads linkpredicate   you can write and configure repository event predicates to prevent the invalidation of computed values for certain events from the coremedia content server  repository event predicates must implement the interface com coremedia cap generator pads repositoryeventprediate  
  repository event predicates  you can register repository event predicates to prevent the invalidation of computed values for certain events from the coremedia content server  for example you could ignore document saves if pads is running at the coremedia content management server  repository event predicates must implement the interface com coremedia cap generator pads repositoryeventpredicate  they are registered with the element repositoryeventpredicate inside the element pads  repository event predicates are called in order of their configuration  the decision is made by the first configured predicate which returns that an event should be used for invalidation or not   example  
  external dependencies  if you access external resources during value computation and these external resources are subject to change  you need to track and invalidate those dependencies manually  external resources are anything other than coremedia content server resources and values computed by pads  use method generatorcache dependencyon string  during value computation in a builder to manually establish a dependency from the value to an external resource  the method takes an uri key as parameter to identify the external resource  you should only use uri schemes that start with a custom prefix like your domain  
  write a repository event predicate  repository event predicates can be used to filter the repository events that trigger invalidations of values or pages computed by pads  a repository event predicate must implement the interface com coremedia cap generator pads repositoryeventpredicate  it can filter events globally for all values or depending on the key of the to be invalidated value  when an event is received from the coremedia content server it will be passed to the configured predicates which can decide that the event should not invalidate any value computed by pads  if the event isn t ignored at that time  the predicates are called again later for each to be invalidated value where they may ignore certain events for certain values only   please read the javadoc api documentation of com coremedia cap generator pads repositoryeventpredicate for more information   the following example predicate ignores all save events globally  
   the coremedia proactive delivery server  pads  is a web application which creates output data like html pages each time new content becomes available through a publication  this complements the more common use case of the coremedia active delivery server  ads   where rendering is triggered by requests for uncached pages  pads is configured with a list of root keys to specify what needs to be generated  pads generates a  value  as output data for each of these keys  in the simplest case  values are pages generated with templates as known from the ads  however it is also possible to develop custom extensions to generate arbitrary output values as described in the coremedia developer manual   generation of values can trigger more values to be generated  for example a page can trigger other pages it links to  dependencies to coremedia resources and other values are automatically tracked during computation  dependent values are invalidated and possibly recomputed if one of their sources changes  for this pads maintains a connection to the coremedia content server which notifies it about changes in the repository   pads sends generated output values like html pages to configured uploaders  the release contains uploaders which write the values to the file system  fileuploader   to java message service queues or topics  jmsuploader  or a simple database message service  you can develop own uploaders to process the generated values   see the developer manual for details  
  if you want to install a coremedia live server  master or replication  proceed as follows    select the coremedia content server option and click  next    a new window displays the content server type options   
        select the live server type you want to install and click  next    now you will be asked for search options   
  if you want to install an importer proceed as follows  select the coremedia importer option and click  next    the following dialog box allows to select the available coremedia importers     
  note  that the index of the coremedia search engine is updated asynchronously and therefore does not always represent the current state of the content repository  note further  that the coremedia search engine searches for current documents only   if you need up to date results or want to search for folders or document versions  you should consider using the queryservice  
     abbreviation   component   ads   coremedia active delivery server   cae   coremedia content application engine   pads   coremedia proactive delivery server   sct   coremedia smart content technology wage web application generator extensions  
  note  that both the search and the searchfast methods may return documents for which the user of the current session does not have read rights  you must handle rights yourself and filter out unreadable documents if needed  
  a content server can store an arbitrary number of persistent key value pairs in a dedicated database table  these values can be used to store global resource independent states  for example  some values are used internally to store the current database schema version and other information   the propertyservice allows you to access this persistent store  the propertyservice presents the table as a map from strings to strings  you can get individual entries or the entire map and you can set and remove key value pairs   it is advisable to keep the number of key value pairs moderate  it would be possible to store the path of a configuration folder or perhaps the time of the last run of a certain script  it is not recommended to store individual values per document and folder    please refer to the documentation of propertyservice for information about reserved keys that may not be used for arbitrary purposes  
  the searchservice provides full text search capabilities and can be obtained from the generator object with the method getsearchservice  you can use its methods to quickly find documents based on their current property values and some of their implied properties  e g  document creator    the interface hox corem servlets searchservice and its use is nearly identical to the searchservice of the unified api  the only differences are caused by different interfaces for resources and resource types  because of that  please read the documentation in section  the content repository search service  of the coremedia unified api developer manual to learn how to perform searches in the coremedia active delivery server  you can find the differences to the unified api in the javadoc api documentation  
  the user repository stores information about users and groups  it allows you to create  retrieve  read and update user and groups that are stored in the built in user management of the content server  it also provides read access to additional users and groups that are managed in an ldap server that may be associated with the content server  
  the contentrepository supports two different listeners  the contentrepositorylistener and the publicationservicelistener   the contentrepositorylistener can be registered directly at the contentrepository  it receives events about content creation  update and destruction and about operations of the publicationservice on content  e g  approvals  deletions or publications  the listener methods of these two categories of events are separated into two sub interfaces contentlistener and publicationcontentlistener  in addition  methods for handling rights rule changes are defined directly in contentrepositorylistener    while these interfaces highlight the conceptual differences between the various events provided to a contentrepositorylistener  the full implementation of the entire contentrepositorylistener is allowed when registering a listener  the class contentrepositorylistenerbase helps with an abstract implementation when you want to react to a small subset of events   when attaching a contentrepositorylistener  you can provide a timestamp  the timestamp has to lie in the past  e g  you might have obtained it when listening to an earlier event  exactly those events that occurred after that timestamp will be propagated  once the past events have been delivered  the event stream switches transparently to the live stream of events   a special timestamp constant timestamp synthetic replay indicates that a synthetic sequence of events should be delivered instead of the real events that occurred in the past  a synthetic replay is typically shorter than a full historic replay  but the load and memory requirements on the content server while generating the synthetic events can be significant  if possible  it is recommended that you attach listeners with relatively recent timestamps or with no timestamp at all  the publicationservicelistener is provided with events about the state of the publisher itself  an event is sent whenever a publication is enqueued  started  completed or aborted  the listener is also informed when the publication targets of a content management server with multi site management are redefined  
  the user repository manages user objects and group objects  a group can contain an arbitrary number of member objects  which may be users or groups  the unified api distinguishes between membership and direct membership  only the latter is directly stored  the former is computed dynamically  a member object is a member of a certain group  if there is a chain of direct member associations that ultimately leads from the group to the member   every member has a name and a domain  there are typically only very few domains in any given coremedia cms installation  leaving the name as the main identifying feature of a member  a user is often designated in the  name   domain  format  e g   joe mydomain or admin   as you can see  for built in users  the domain part is left empty   the domain that is represented by the empty string provides access to the built in user management of the content server  for members of this domain this is also indicated by the method isbuiltin    only members of the built in user management may be changed under direct control of the unified api  users of other  external domains are mapped into the system from external servers by means of the ldap protocol  only read access is allowed for external domains  you can access the distinguished name of an external user through the unified api in case you need to connect back to the ldap repository   for users of external domains  the getter methods of capobject  which is a super interface of member  may be used to access custom string attributes stored in the ldap server  the built in user management does not support member attributes  note that there is no fixed set of captype objects for members  because ldap does not enforce a strict typing  instead  there is one artificial type per member that describes the available properties for these objects  
  the userrepository interface contains a number of methods that allow you to get access to user and group objects  as in all repositories  you can obtain a member with a given string id using getmember string   it is also possible to retrieve members based on their name and optionally their domain using the getuserbyname and getmemberbyname methods   you can issue a query for users or groups that provides only a substring of the actual name  in this case  the methods findusers and findgroups return a collection of matching objects  using these methods  you can set an upper bound on the number of results  reducing the load on the repository  
  the userrepository provides listeners with events about all changes to user and groups  the interface userrepositorylistener is partitioned into three main parts    the super interface userlistener contains methods regarding the creation  update and destruction of users   the super interface grouplistener is concerned with groups   a userrepositorylistener defines two additional methods to be called when a group gains or loses a member   the class userrepositorylistenerbase provides an empty default implementation that can be overridden as needed  attach your listener using the adduserrepositorylistener method of the userrepository    because ldap does not provide an event mechanism  the content server has no immediate means to detect changes to members that are imported from an ldap server  when being accessed for the first time  a creation event is generated  note that the first access may be seconds  days  or years after the user was actually created   ldap data is cached for a certain amount of time and not re fetched from the server  during that time  changes to the ldap server are not detected  if an ldap member is accessed again after it expires from the cache or if it is explicitly updated using the calls invalidate   or refresh    the content server may detect some changes and send appropriate events  no events are sent for custom properties of members  no events are sent for changes of the group member association  in short  while you may find it convenient to monitor the events for ldap members  the events are incomplete and may arrive late  
  if you want to install a coremedia active delivery server  ads  proceed as follows  select the coremedia active delivery server option and press  next       the window shown below will open  you can decide whether the default servlet engine tomcat should be installed or not       
  to learn more about the design of a document type system  see the corresponding chapter in the administration and operation manual it will also provide you with additional information on rights and rights rules   the javadoc of the unified api is the recommended source for in depth descriptions of individual classes and methods  if you want to skim the javadoc at this point of time  you will get some hints now   the most common use cases involve the access and modification of content  for this  look at the package com coremedia cap content  particularly at the interfaces contentrepository and content  look at version for getting an idea of how to handle the historic states of content  afterwards  it will be interesting to inspect the content meta model  which is represented by the class contenttype   in the case of content  the following service objects are provided  publicationservice  accesscontrol  propertyservice  queryservice  searchservice  and workflowcontentservice  have a look at the individual services and their getters in contentrepository  so you can refer back to them when the functionality is required  you may want to investigate the publicationservice in more detail right away  because the approval of content and its transfer to the live servers are important in many contexts  
  with the help of the coremedia installer you can update an existing coremedia installation  this may only be done for installations of the same release in order to import updates  new builds  of this release  it can not be guaranteed that newly installed components will work together with old ones on system updates between major or minor different releases   if a file must be renewed during the update  the graphical installation asks whether this file should be overwritten or not  if the file is overwritten  it is saved in an internal zip archive of the installer in the directory  uninst and made available again on possible deinstallation  in this way  no files or settings of the previous installation are lost   as a rule  all coremedia files  e g  coremedia jar  coremedia editor jar  coremedia spellchecker jar and coremedia workflow jar  must always be renewed when updating a release build  on the other hand  properties and jpif files  for example  can generally be retained  so as to keep the configuration of the previous coremedia installation  
  refer to the administration and operation manual for more information on how to connect coremedia cms with an ldap server and on how to create users by means of the built in user management   the access control services of the content and workflow repositories must take the structure of users and groups into account when computing rights  the worklistservice  too  is dependent on the specific user who accesses the worklist   the javadoc of the unified api is the recommended source for in depth descriptions of individual classes and methods  look at the interfaces userrepository  user  group  and member in the package com coremedia cap user primarily  
     attribute   description   document   document type from which the field is taken   content   can be used as a wildcard for all document types    property   property of the document type which should be displayed  two types of properties exist for a document  the properties which are defined in the doctypes file and the predefined properties in all documents like id  or name   see the developer manual for details   
  coremedia sci comes with the richtext editing component which allows comfortable editing of text   this richtext requires a special document type  it can be utilized in both the coremedia editor and the webeditor or their customized implementations  
   wfapi name uapi name check taskguardscheckedevent accept taskacceptedevent run taskenteredevent validate taskcompletedevent finish taskexitedevent reset taskdeactivatedevent timeout tasktimerexpiredevent complete taskcontroltransferredevent  
  the related method of the web service looks very similar to the other method because only a single method call is required to get the desired data  as usual  the rest of code is concerned with conversion   
  the method connect    which is not an overloaded method of defaultmutabletreenode  combines all passed document types to a tree  regrettably  the web service returns only a flat data structure without further information about the relations of the contained elements  the initializing class  not yet introduced  requests the data and processes each document type in two loops  the corresponding code looks as following   
  configuration not mandatory  by default  there are no additional fields  
  note  that the search engine feeder does not update already processed documents after changing the fields to index  a configuration change only affects newly processed documents  if you want to update all documents  restart the search engine feeder with an empty collection  
  element fields  there can be exactly one element fields below the element fastindex  it contains the configuration of additional fields to be indexed  it can contain multiple xpathfield elements with different name attributes   parent element  fastindex  child elements  xpathfield  attributes  none 
  element xpathfield  the element xpathfield specifies an additional field to be indexed with the content of a fragment of an xml property  the fragment is selected with an xpath expression  which is specified in the subelement xpath  for each indexed document the first matching property subelement defines the xml property that is used as source for the element  the field will be empty if there is no matching property   parent element  fields  child elements  xpath  property  attributes  
   attribute  value  default  description  name field name none  required attribute  the name of the field which matches a field in the index profile of the coremedia search engine  defaultvalue string value empty string a default value that is indexed if the selected fragment does not contain plain text   
  element xpath  there can be exactly one element xpath below the element xpathfield  it contains the xpath expression that selects the indexed xml fragment  the namespaces of elements and attributes used in the expression must be declared in namespace subelements   parent element  xpathfield  child elements  namespace  attributes  
   attribute  value  default  description  expression xpath expression none  required attribute    the xpath expression used to select the indexed xml fragment   
  element namespace  the element namespace defines prefix and uri of an xml namespace that is used in the xpath expression of the parent element  note  that you have to define all namespaces that are used in the xpath expression  the xpath expression does not support a default namespace   parent element  xpath  child elements  none  attributes  
   attribute  value  default  description  prefix namespace prefix none  required  the namespace prefix  uri namespace uri none  required  the namespace uri   
  element property  this element specifies a property   parent element  xpathfield  child elements  none  attributes  
   attribute  value  default  description  doctype document type name or regular expression     all types  the name of the abstract or concrete document type of the property  name property name or regular expression     all names  the name of the property   
     field type   symbol   characteristic   text field          hold strings  length of strings is defined in document types   number fields          hold positive or negative numbers   date fields          hold dates in dd mm yyyy hh mm format  day month  year hours minutes   other formats programmable    structured text fields          hold formatted text  including links  tables  etc   of any length  internally  this text is saved in an xml format according to a structure as defined in the matching dtd  document type definition   it also defines possible text formatting     binary data          save digital data of a specified type according to a special mime type  e g  images  viedo or sound file formats    link list fields          hold a number of links to documents of the same type grouped in a list  
  a double click on the selected document in the document overview  highlighted blue  opens the document in a separate window for editing  
  folders can contain both subfolders and documents  but only documents are displayed in the document overview    to find out whether there are subfolders  see the marks in front of the folder icons in the folder overview  window          the folder contains subfolders  click on the cross in order to open        the view of the folder is fully expanded  all subfolders are shown        the folder contains no subfolders    only one folder can be opened at one time  the open folder is marked by the open folder symbol   you can also select multiple consecutive or non consecutive folders from the folder hierarchy or documents from the document overview  
  create query  to create a query  proceed as follows  open a query window by selecting window new query window from the menu bar      now create your user defined query  which you can limit in terms of   document types search criteria     the search criteria depend on the fields which are defined for the particular document type  e g  heading  date  text  etc    in selecting search criteria you can specify the search for e g  approved  published or deleted documents  you can combine search criteria with each other by adding other search criteria to the query     limit the query to a specific document type by selecting the desired type from the document type list field  or select all document types   add search criteria by selecting a search criteria from  the property list        a new search criterion is added under the selection field for document types     select the field of the document which should apply during the query in the property selection field    give the value which this field should have in the entry field to the right  in this way it is possible to combine any number of search criteria with each other     once a query has been set up  it can be saved and  at a later point in time  loaded again and performed   select date for search criterion  for a search criterion containing a date  e g  approval date  you can enter the date directly or use the calendar as follows  select the search criterion by a mouse click into the date field  click  in the tool bar   the calendar opens up     click the appropriate date and close the calendar   insert resource for search criterion  for a search criterion containing a resource  e g  path   you can insert a resource as follows  double click the three dashes behind the search criterion  choose the desired resource from the opening resource chooser  click  choose    or select the resource from the overview window  copy the resource to the clipboard by clicking  on the tool bar  select the search criterion by a mouse click into the resource field  paste the resource by clicking  on the tool bar   remove resource from search criterion  to remove a resource from a search criterion  you can either directly insert a new resource or remove the old resource as follows  select the search criterion by a mouse click into the resource field  click  on the tool bar   the resource will be removed from the search criterion    remove search criterion  conversely  search criteria can be deleted as follows  mark the search criterion to be deleted by clicking on it with the mouse delete the search criteria by clicking the remove condition symbol from the tool bar   the next table describes the search criteria you can use  
     menu item   sub items   function   undo    undoes last action in editing   redo    redoes an undone action   cut    saves the selected resource to clipboard  resource remains at original position until pasted at destination   copy    saves the resource to clipboard  creates copy at destination   paste    paste document or text to destination from clipboard  not possible to paste document into document  just into folders  paste text  past text as plain text to destination from the clipboard    select all    select all documents of the current folder   full text search    opens window for full text search query in folder     opens query window for query in current folder search in document     search after a combination of characters within a document  for cross document search use the query feature or if available the global search and replace workflow    replace in document       replace one string with another within one document  for cross document work please use the global search and replace workflow   
     menu item   sub items   function   open      opens the selected document in a document window   open in explorer      opens a document selected from the publication result in the overview window  simultaneously the correspondent folder will be opened in the folder overview    new workflow   project specific number and type of workflows   starts a new workflow of the chosen type  delete  deletes the selected document or folder publication required to make changes effective on live serversdeleted document can just be viewed  not edited revoke delete  only not yet published resources can be restored once in recycle bin after publication  resources lose all path information    mark for withdrawal      marks the resource for withdrawal of the publication   publication required to make changes effective on live servers    revoke withdrawal      revokes the withdrawal mark    preview      opens document in a browser for preview  project specific  internet explorer and netscape are default options     links of a document      starts a query which shows all documents which have a link to the selected document    links to a document      starts a query which shows all documents to which the selected document links  approve  direct approval of a resource  this function must be enabled  revoke approve  revokes approval directly  this function must be enabled  preview publication  simulates the publication and shows the result  publish  direct publication  without workflow  of a resource    properties   tabs  history  rights  and rules   properties of a resource  history of editing  publication  etc   close tab  closes the current tab    close      closes the active  overview  window  but does not exit the application     
     menu item   sub items   functions   explorer      opens a new overview window    workflow      opens a new workflow window    query      opens a new query window    publisher      opens a new publication window    user manager      opens a new user manager window    document types      opens a new document types window    active tab      the active tab will be shown  if you are editing several user and or groups   
     menu item   sub items   function   previous document    displays the previouos document that has been opened in this window before  only if there are to navigate to     next document    moves forward to documents opened in this window  only if there are to navigate to     links of a document    opens a preconfigured query window that searches for documents linked to from the selecte document   links to a document    opens a preconfigured query window that searches for documents that link to the selected document   copy to clipboard    copies the current document to the clipboard   
  the workflow server supports timers  which implement a reaction when some part of the workflow takes too long   there are system defined timers  which observe the time it takes to complete a process or a task  and the time it takes until an offered task is accepted  and there are user defined timers  which are enabled and disabled according to the process definition   at any time  a timer can be in one of three states  off  running  or suspended  a timer is initially off  and starts running when it is enabled  a running timer is suspended exactly when its containing process is suspended  and becomes running again when the process is resumed  when a running timer is disabled  it is turned off again   as long as a process is suspended  its timers cannot be enabled or disabled   also  suspending a timer that is off has no effect on the timer s state   in addition to its lifecycle state  a timer holds a time limit and an expiration flag    a time limit can be given either in relative or in absolute form  the relative form indicates a time distance  represented as a number of seconds  and is used for system defined timers  and  usually  when initializing a timer inside a process definition  the absolute form indicates a fixed point in time  represented as date and time  and makes most sense when a time limit is set interactively by a user   we need this article by next friday      when a timer first becomes running after setting a time limit  the timer s expiration date is computed  either adding the relative time limit to the current time  or directly using the absolute time limit  the expiration date remains fixed even if the process is suspended and resumed again   when a running timer reaches or exceeds its expiration date  it expires   this has the following effects     the expiration flag is set    a timerexpiredevent is sent    all server side timer handlers registered for this timer are invoked  timer handlers are defined in the process definition   as long as the timer s expiration flag is set  no further timerexpiredevents or handler invocations take place  the expiration flag is cleared each time the time limit is modified   if a timer s expiration date is reached while the timer is suspended  the timer will expire as soon as the process is resumed   in the following  the different system defined timers and the handling of user defined timers are described   process completion timer  the process completion timer observes the total execution time of a process  its relative time limit can be set in the process definition using the defaulttimeout attribute  as described in the workflow developer manual  the process completion timer is enabled when the process is started  and is cleared when the process completes or is aborted   by default  the process completion timer adds a warning to the process when the timeout expires  different handlers can be defined in the process definition   task completion timer  the task completion timer is defined for user tasks only  and measures the total time the task is waiting for users  from when the task is first offered  to when the task is completed by a user  the relative time limit is set using the task definition s defaulttimeout attribute   if the guard of an activated task becomes false  the task goes back to the waiting state  and the timer is disabled   however  the timer s expiration date is not changed   the timer is cleared when the task is completed  interrupted  or skipped  or when an alternative task in an implicit choice is accepted   by default  the task completion timer adds a warning to the task when the timeout expires  causing the task to appear on the tasks with warning work list  different handlers can be defined in the process definition   task acceptance timer  the task acceptance timer is also specific to user tasks  and measures the time from when the task was first offered to when it is accepted  it is configured using the defaultoffertimeout attribute in the task definition   the task acceptance timer is enabled exactly when its containing task is in the activated state  the timer is enabled when the task first changes from waiting to activated  it is disabled when the task is accepted  or becomes waiting again because the guard condition becomes false  when the task becomes activated again  because the guard condition becomes true  or because a previously accepted task is cancelled   the timer is enabled again  and continues running with unchanged expiration date   like the task completion timer  the timer is eventually cleared when the task is completed  interrupted  or skipped  or when an alternative task in an implicit choice is accepted   by default  the task acceptance timer adds a warning to the task when the timeout expires  causing the task to appear on the tasks with warning work list  different handlers can be defined in the process definition   user defined timer  additional timers can be defined in the process definition  by defining a timer variable   these timers are not enabled or disabled automatically  but need to be handled explicitly using enabletimer and disabletimer actions   a timer variable consists of two parts  the time limit is a value like all other property values that can be freely read and written to the containing workflow object property   the timer object itself observes the value of this variable  and can be accessed using workflowobject gettimer name   or  gettimers or  gettimersbyname    t get  mytimer       property access t gettimelimit  mytimer       typed property access t gettimer  mytimer   getlimit       this works  too  absolute and relative time limits are implemented using the value classes absolutetimelimit and relativetimelimit  which implement the timelimit interface  and may be freely constructed by an application programmer   t set  mytimer   new relativetimelimit        calendar abs   dateconverter converttocalendar                                        t                  t set  mytimer   new absolutetimelimit abs     
     menu item   sub items   function   create document   all system resource types and project specific document types   creates a new document of the chosen typen in the current folder    create folder      creates a new folder in the current folder    new workflow   project specific number and type of workflows   starts a new workflow of the chosen type    open      opens the selected document in a document window    check out      check out a document for editing  status and current owner visible to all users     revoke check out      undo the check out of a document  the document is accessible for others again   attention  this undoes all changes of the current version   check in      check in applies changes and make them available to all other users  rename  renames the selected resource via dialog box  double naming prohibited across all documents also of different types within the same folder    save      saves the current changes  approve  direct approval of a resource  this function must be enabled  revoke approve  revoke approval directly  this function must be enabled    delete      deletes the selected document or folder  a publication is required to make changes effective on live servers  deleted document can just be viewed  not edited    revoke delete      only not yet published resources can be restored    once in recycle bin after publication  resources lose all path information  mark for withdrawal  marks the resource for revoking of the publication  this will delete the resource on the live server  this change must be published to take effect  revoke withdrawal  revokes the mark for withdrawal  preview publication  simulates the publication and shows the result    publish      direct publication  without workflow  of a resource    preview      opens document in a browser for preview  project specific  internet explorer and netscape are default options    properties   tabs  history  rights  and rules   displays properties of a resource  history of editing  publication  etc    close      closes the active  overview  window  but does not exit the application   exit      exits the coremedia editor and closes all windows  
     menu item   sub items   functions   new workflow      project specific number and type of workflows   starts a new workflow of the chosen type  open in explorer  opens the document in the explorer window    check out      checks out a document for editing    revoke check out      undo the check out of  a document  attention  this undoes all changes of the current version    check in      check in the document and save all changes  rename  renames the selected resource  a dialog box asks for the new name  it s not possible to have two resources with the same name in a folder     save      saves the current changes    preview      opens the layout previw of the document   the used browser is project specific   approve  direct approval of a resource  this function must be enabled  revoke approve  revoke approval directly  this function must be enabled  delete  delete the selected document or folderpublication required to make changes effective on live serversdeleted document can just be viewed  not edited  revoke delete  only not yet published resources can be restored once in recycle bin after publication  resources lose all path information  mark for unpublication  marks the resource for revoking of the publication  this will delete the resource on the live server  this change must be published to take effect  revoke unpublish  revokes the mark for unpublish  preview publication  simulates the publication and shows the result    publish      direct publication  without workflow  of a resource    properties      shows the properties of  a resource  the history  publications etc    close      closes the current window  but not the application     
     symbol nr    function         refresh the query window      cut resources and text      copies resources and text into the clipboard      pastes resources or text from the clipboard into the query document      direct approval of a resource  this functionality needs to be activated      opens the layout preview for a document       simulates a publication of the query document and shows the result       direct publication of the query document  without workflow            saves the query document           revokes the check out of the document  changes will be lost           check in the query document  all changes will be saved       opens a date chooser  only visible if you select a search condition with a date       opens a file chooser  only visible if you select a search condition which contains a resource  e g  path        removes the current resource from a search condition  only visible if a search condition with a resource is selected       opens a resource in the explorer window  only visible if a search condition with a resource is selected   
     menu item   sub item   function   explorer      opens a new explorer window    workflow      opens a new query window  query  opens a new query window    publisher      opens a new publisher window  user manager  opens a user manager window   
   icon description  you have checked out the document for editing  with this checkout  a new version of the document is created  this new version can only be edited by the user who has checked it out  adminitrators can check in all documents  if necessary for further editing   this document is checked out by another user   the last version of the document has been checked in by you  each authorized user may check out the document  approve it or publish it   the checked out version of the document has been checked in by another user  now  the most recent version of the document can be edited by all authorized users  a checked in document version can again be checked out  approved or deleted   the current version of the document has been approved by you    the version of the document has been approved by an authorized user  approval is precondition for publication  the approval of a version can be undone   the version of the document has been published by an authorized user   
     icon   description       the document is not published at the moment  it does not exist on the live server       the document is not published at the moment  it does not exist on the live server  but has been approved       a version of the document exists on the live server  this version must not be the current version of the document  see the symbol in the version column        the document has been published and was later renamed or moved  this change has not been published  be careful  the document has not to be checked out for renaming or moving  because no new version will be created  you need to publish the document in order to transfer the change to the live server       the document has been published  and afterwards it has been moved or renamed and approved  this change has not been published yet       the document has been published and afterwards marked for withdrawal       the document has been published  marked for withdrawal and has been approved   a document yet published has been marked for deletion  the publication will move the document into the recycle bin and will delete it on the live server   the document has been published and has been marked for deletion  afterwards it has been approved       the document is in the recycle bin  you can restore it  using a query   
  a folder can be in different states during the editorial process  it can be opened or closed and locked and unlocked for the current user  if a folder is locked for you  the folder name is written in grey  depending on the current state  the folder symbol indicates  
     closed   opened   description   this is a published base folder of a system with multi site management           the folder hasn t been published yet    the folder has been approved          the folder has been published          the newly created folder has been renamed or moved and the current place of the folder has been approved          the folder has been published at the current place  but afterwards it has been renamed and moved                  the folder has been marked for unpublication                  the folder has been marked for unpublication and afterwards it has been approved          the folder has been marked for deletion          the folder has been marked for deletion and afterwards it has been approved     
  a right is the permission to access and or modify a resource  we differentiate between resource rights and individual rights   individual rights can be can be allocated to a resource within a group  resource rights are attached to selected document types  they are only valid for these document types and their subtypes   the combination of these rights makes up the rules  rules are the combination of individual rights and resource rights for a resource  they can be viewed via the  icon or the file   properties menu item   the following rights can be granted  
    enter your current password into old password  now enter the new password into new password  please enter the new password once more into repetition  this checks that the new password was entered correctly  since the entry is hidden  all characters are shown by stars  confirm with clicking    the password is changed  the change is effective for the next login   it is not possible to modify the user name  
  before you withdraw a resource  mention the following    when a folder is marked for withdrawal  all contained published resources are marked for withdrawal  too    when a mark for withdrawal of a folder is revoked  this also affects all contained resources with the same mark    if you use direct publication and approve a folder that is marked for withdrawal  that approval implicitly extends to the contained resources that are also marked for withdrawal    disapprovals extend to contained resources in the same way   in order to withdraw a resource  proceed as follows    mark the resource    select file mark for withdrawal or click  in the tool bar    publish the resource in order to execute the withdrawal on the live server   in order to revoke the withdrawal  proceed as follows  mark the resource  select file revoke withdrawal or click  in the tool bar   
        enter the source in the cite     field    close the attribute editor by clicking  ok    remove the quotation   select the paragraph with the quotation    remove the quotation by     choosing remove blockquote from the context menu or   by clicking  and  in the tool bar   
  creating internal links  in order to designate a selected text section as an internal link proceed as follows    mark the text in the document which should appear as a link      designate the marked text as an internal link with the following actions     select format internal link from the menu bar or internal link from the context menu    click  and  on the tool bar    press the keyboard shortcut  ctrl   shift   i    the following dialog box appears  
  cut and paste  to cut a section from your document and paste it to another position  carry out the following steps    select the text to be cut and pasted     cut the section by     selecting edit cut from the menu bar   selecting cut from the context menu   click  on the toolbar   press the keyboard shortcut  ctrl   x    the text is saved in the clipboard  to paste the section to it s new position         click at the target position    paste the text in either way     select edit paste or edit paste text from the menu bar   select paste or edit paste text from the context menu   click  on the toolbar   press the keyboard shortcut  ctrl   v  or  ctrl   t    the text section is pasted from the clipboard as formatted text  paste  or plain text  paste text    
  copy and paste  to copy a section and paste it to another position in this or another document  carry out the following steps  mark the section which you want to copy and whose copy you want to paste to another position  copy the section to the clipboard by   selecting edit copy from the menu bar selecting copy from the context menu clicking  on the toolbar pressing the keyboard shortcut  ctrl     c    the selected text is copied to the clipboard  to paste it to it s target position     select the position by clicking with the mouse  paste the section with formatting from the clipboard by one of the following ways   select edit paste from the menu bar  select paste from the context menu  click  on the toolbar  press the keyboard shortcut  ctrl     v      paste the section as plain text from the clipboard by one of the following ways   select edit paste text from the menu bar  select paste text from the context menu  press the keyboard shortcut  ctrl     t    the copied section is pasted from the clipboard  
    in the list tab     you can define the formatting of the whole list  next to the standard text formatting  you can select the list bullet in the bullet lists     field    in the list item tab     you can format each single list element   select bullet   set the cursor into the list    chose format  stylesheet attribute or click  under  to open the attribute editor    click on the list tab    chose the favored bullet from the bullet lists drop down list    click  ok  to close the attribute editor   
  for safety  every significant change you make to a document can be saved  you have the following possibilities of doing this     select file save from the menu bar    click  on the tool bar    press the key combination  ctrl   s    the document is now saved with all changes  you do not need to check in a document to save it  you can repeat this procedure as often as desired   additionaly  you can define an interval for automatic saving using the menu item options autosave interval  
  while you have checked out a document  no other user can check it out  if you want the document to be accessible again to other users for editing  you must check it in  you can do this in the following way   select check in from the file menu  click  in the toolbar press the key combination  ctrl   g    the check in symbol is shown in grey  the document has now been checked in and other users can edit it  
  in order to approve a resource  proceed as follows    check in the document  if necessary     approve the resource by     select file approve from the menu bar   or    click  in the tool bar   the document has now been prepared for publication  approvals are needed both after the creation of a new version of documents  but also after any movement  rename  or withdrawal of publication if the new resource state is supposed to be published  the coremedia editor offers a publication preview for testing whether a publication would be successful  a possible cause of error could be invalid links to other documents  furthermore  publication fails if not all documents linked to the document to be published are approved  the publication preview does not check for checked out documents   to check this     select file preview publication from the menu bar   or    click  from the tool bar for publication preview   the publication window opens and displays whether a publication would be successful or not  and possible causes of failure  
  from this publication preview result you can      approve documents     undo the approval of documents     check the links from documents to other documents     check the links from other documents to documents     start the publication preview anew  or    publish single documents    via  file menu   icons or context menu    after you have made the required changes  start the publication preview anew  if a positive result is displayed  this document is ready for publication  you can publish as follows      select publication from the file menu     click on the publication icon     in the overview window or in the publication window  select publish from the context menu    the document has been published  the status is shown by the status icon for  published     if you are confident in the correctness of your change set  you can also click the publication symbol directly  skipping the preview phase   
  to execute a query  proceed as follows  open a query window by selecting window new query window from the menu bar   now create your user defined query  which you can limit in terms of   document types   search criteria    the search criteria depend on the fields which are defined for the particular document type  e g  heading  date  text  etc    in selecting search criteria you can specify the search for e g  approved  published or deleted documents  you can combine search criteria with each other by adding other search criteria to the query     add search criteria to a query by  selecting the desired document type from the list field  or select all document types  add search criteria by one of the following possibilities   select condition add condition from the menu bar click the  symbol      a new search criterion is added under the selection field for document types       select the field of the document which should apply during the query in the property selection field  give the value which this property should have in the entry field to the right  in this way it is possible to combine any number of search criteria with each other   conversely  search criteria can be deleted as follows  mark the search criterion to be deleted by clicking on it with the mouse delete the search criteria as follows   select condition remove condition from the menu bar  or   click the  symbol    once a query has been set up  it can be saved and  at a later point in time  loaded again and performed   the next table describes the search criteria you can use  
  in order to use a query more often  you can set up the query and save it as a document in a suitable place  to do this  select file new query from the menu bar  name the query   define as many search criteria as necessary in your query     save the query   select save from the file menu  click    if the query was just opened with new query window from the window menu and saved by using save from the file menu is is saved in the user folder  changing the default name myquery creates a second query document and does not overwrite the previous version  
  to run a newly created query  proceed as follows   select start query from the query menu click the  symbol   you can cancel a running query   select stop query from the query menu click the  symbol   search results for which you have read rights are displayed in the lower window part of the coremedia editor  
  content is stored in a structure made up of folders and subfolders which you can edit in the overview window  initialy  there is only the root folder with the subfolders home  system and inbox   to create a new folder    select the folder in which you want to create the new folder    open the dialog for creating a new folder  either you     select file create folder from the menu bar  or   click  in the tool bar   
  you can save each change of a document choosing one of the following possibilities     chose the menu item file save    click  in the tool bar   now  the document is saved with all changes  you don t need to check in the document for saving    
  in order to get the preview of a document you can either    chose the menu item file preview  or   click  in the tool bar   
  the workflow window of the webeditor will not automatically be updated  if you want to see the most current tasks and workflows  you have to click the  icon  
  in order to use a query more often  you can set up the query and save it as a document in a suitable place    to do this  select file new query from the menu bar    name the query   a new query document opens  define as many search criteria as necessary in your query         save the query     select save from the file menu    click  on the toolbar   if the query was just opened with new query window from the window menu and saved by using save from the file menu is is saved in the user folder  changing the default name myquery creates a second query document and does not overwrite the previous version  
  to run a newly created query click  in the tool bar  this will start the query  it is not possible to abort the running query   if the query finishes  an additional window opens and displays the search results  
  you have two possibilities to open a document from the query result window     select file open in the result window or   click  in the tool bar   the document will be opened in a new document window   
  a base folder defines the publication target of the contained resources  hence  it determines the master live server to publish the data to  as long as you don t use multi site management  the root folder is the base folder of all resources  therefore  only one publication target for all data exists in your coremedia system and you don t have to think about top level folders  it doesn t affect your daily work   it s different  if coremedia cms is configured for multi site management  in this case  each folder below the root folder is a base folder for the contained resources  the root folder is only base folder for the directly contained documents  i e  each of these folders might have an own publication target  so  you might manage the data for the internet and intranet on the same coremedia cms avoiding all mixing   a published base folder with an own publication target has the   icon  in order to strictly separate the data of different base folders  the following actions will be prevented by the system   creating links between different base folders  moving a base folder into another base folder  moving a resource from one base folder into another base folder   if you try to achieve such an action  an error message will show up  
  you can use stylesheet attributes to assign an attribute to your text  this attribute will be evaluated during output and will affect the appearance of the output  to format a text section or a word with a style sheet attribute  proceed as follows    highlight the text section which you want to format    open the dialog for stylesheet attribute assignment in one of the following ways       select format stylesheet attribute from the menu bar or stylesheet attribute from the context menu    click  and  on the toolbar    use the keyboard shortcut  ctrl   shift   s    a dialog box appears for the stylesheet attribute  
  if you are using multi site management  you can not create links between documents in different base folders  therefore  only documents from inside the current base folder are shown in the resource chooser   only administrators are   in exceptional cases   allowed to create links between different base folders  
   icon description  simple task  escalated task  task offered to users  accept the task  also status accepted task   reject the task   assign the task to someone else   assign task to another group   assign task to another user   delegate task   skip the task   retry the task   complete the task you are working on   abort the task you are working on   
   icon description  simple publication workflow   two step approval workflow   two step publication workflow   three step publication workflow   global search and replace workflow   simple process  newly created process   not started process   escalated process  start the process  also running process   complete the process   abort the process   resume the process   suspend the process   
  troubleshooting  the following table may help to solve problems you may encounter while enabling preview based editing  
   problem check i enabled pbe  but no context menu appears    does the generated html source contain javascript elements where you placed the  contextinfo   tag  the javascript always begins with if  typeof com    undefined     new com coremedia easyedit contextinfo     does the generated html source contain  script src   coremedia pbe cap pbe js  language  javascript    script  the generated html source does not contain  script src   coremedia pbe cap pbe js  language  javascript    script    you forgot to place the  pbe head   in the jsp rendering your header  the java script is generated  but still no context menu appears    you may have forgotten to add the event attribute to your  contextinfo   tag  you may have forgotten to adapt the config bsh settings of preview based editing to your webapp  the context menu appears  but there is no hover effect    you may have forgotten to provide a css style sheet for the hover effect  the webeditor does not open when using the contextmenu from a remote computer    you probably used localhost for the webeditoruri in config bsh  replace it with the name under which the computer is known in the network  the hover effect affects other elements  too    the html elements that are surrounded by  contextinfo   are probably not valid  check the source and correct the errors     
   problem check i enabled pbe  but no context menu appears    does the generated html source contain javascript elements where you placed the  contextinfo   tag  the javascript always begins with if  typeof com    undefined     new com coremedia easyedit contextinfo     does the generated html source contain  script src   coremedia pbe cap pbe js  type  text javascript    script  the generated html source does not contain  script src   coremedia pbe cap pbe js  type  text javascript    script    you forgot to place the  pbe head   in the jsp rendering your header  the javascript is generated  but still no context menu appears    you may have forgotten to add the event attribute in your  contextinfo   tag  you may have forgotten to adapt the pbe properties settings of preview based editing to your web application  the context menu appears  but there is no hover effect    you may have forgotten to provide a css stylesheet for the hover effect  the webeditor does not open when using the contextmenu from a remote computer    you probably used localhost for the webeditoruri in pbe properties  replace it with the name under which the computer is known in the network  the hover effect affects other elements  too    the html elements that are surrounded by  contextinfo   are probably not valid  check the source and correct the errors     
  troubleshooting  the following table may help to solve problems occuring  
   symbol nr  function     creates a new document in the selected folder      creates a new folder in the selected folder      opens a selected document      opens the full text search      cuts selected resources or text  including tables   text will be cut immediately  resources stay at their old position until you paste them into a new folder      copies selected resources or text to the clipboard      pastes resources or text from the clipboard into a folder or document      marks a resource for deletion      removes  marked for deletion        approves the resource directly  the function needs to be activated        revokes the approval of the resource  the function needs to be activated        mark the resource for withdrawal  you have to publish this change  then the resource will be deleted on the live server       revoke the withdrawal       calls the preview of a resource       starts a preview of the publication       publishes the resource directly       opens the information window   
   menu item sub item function explorer  opens a new explorer window  workflow  opens a new workflow window  query  opens a new query window  publisher  opens a new publisher window  user manager  opens a new user manager window   
  the tool bar of the workflow window of the webeditor is divided in three parts       the standard functions for editing       the functions for the currently selected task or process       the functions you can perform in the variable view  
  the toolbar is divided into three parts       this part contains the standard functionality for the found resources       this part contains the functions for the query document      this part contains the functions for the search conditions  
  use the xml file  web inf properties corem pads xml to configure the functionality of the proactive delivery server  it can contain the following elements   pads database page pageselector pagelinkpredicate fileuploader jmsuploader databasemessageuploader root rootselector builder linkpredicate repositoryeventpredicate uploader  the elements root  rootselector  builder  linkpredicate  repositoryeventpredicate and uploader are used to configure custom extensions  they are described in the coremedia developer manual   pads is the enclosing element for all others  
   attributes optional description id no each uploader must be configured with a unique and persistent identifier  the identifier is used to detect new uploaders and to send them all values that were generated before the uploader was registered  you can disable the latter using the attribute receiveinit   directory no the directory where the files should be placed  if the uploader is deployed in a pads web application  the path is resolved relatively to the web application s base directory  if the uploader is deployed in a separate jms receiver  the path is resolved relatively to the installation root  filter yes using the filter attribute you can define a regular expression that restricts the pages that should be written by this uploader  only pages whose resource uri matches the filter expression are passed to the uploader  the default is       i e  all pages are written  receiveinit yes   set this attribute to  false   if the uploader was added to the configuration after the first start of pads  and should not receive notifications about existing values     if set to  true    default   the uploader will receive update events for all values that were generated and not yet removed by pads before the uploader was configured  the uploader receives these events once when pads starts and if it detects the uploader as new  i e  if the uploader was not configured at the time of the last start of pads     note that uploaders always receive notifications for updates and deletes which happen after they were added to the configuration     this attribute has no effect if the uploader is added to the configuration before the first start of pads or if it is configured in a jmsreceiver or dbmessagereceiver  builder yes if you have developed custom extensions to generate other values than pages  you need to set this attribute to the scheme of the custom builder  which is mostly the builder s class name   the attribute also accepts a comma separated list of several builder schemes  read the coremedia developer manual for information about builders and schemes   
  since coremedia sci      it is no longer allowed to used the wildcard   for describing the mime type of individual blobs  wildcards are only allowed in document type definititions  where they indicate that any actual type string may be substituted instead   when the system contains blobs with a wildcard mime type like      you are encouraged to replace the blobs with new versions that contain the correct mime type  otherwise  it will not be possible to publish the associated documents  for already published blobs  the mime type might get heuristically completed during replication  leading to inconsistencies between the documents on the master live server and the replicated documents   if you are concerned about inconsistent mime types  you should change the offending documents and republish them  in order to locate the mime types with wildcards  you can run the sql query  select documentid  documentversion  propertyname    from blobs  blobdata    where target   id and mimetype like        against the database that is used with the master live server  the query will return document id and version as well as the name of the property that stores the blob that needs replacement  
  the file chooser dialog contains a search field like the explorer window  it switches alike into the search modus if you click  search  or press  enter   the folder view will be replaced by a search area which contains no combo box for document types because this combo box is located at the bottom of the window  if you select a new document type from this list  a new search will be started  the search behaves alike the search in the explorer window as described before  
  the search utility invokes the full text search to find content in the repository    
   parameter description  t only search for documents of the given content type and inherited types   q the string to search for   f only search in the given folder and its subfolders    
  server side comparators for sorting rows  for rows  there exists no default comparator  a row can be sorted according to the different columns which are shown  own comparators must implement hox corem editor toolkit table nameddocumentversioncomparator  the following table shows the predefined column comparators which are implicitly used by the provided column classes  
  by default the approve and publication buttons are only enabled for users of the administrator    group  you can enable the feature for all users by setting some attributes of the  editor  element  thereby supporting publications without workflows   
  to create a new user  a new user profile is created by means of the  symbol  
  before any document is permanently removed from the recycle bin the xml representation is written   exported   to local filesystem  you may use a customized version of the xml importer to import these documents later  if you are sure  that you don t need these files anymore  you can use the option   noexport to suppress the export   usage  starts clean recycle bin in standard mode   bin cm cleanrecyclebin  connection parameters            directory  a      export delay  b             export threads  c      export to subdirs  d             noexport     after  e      before  f    starts clean recycle bin in simulation mode  this means that no documents will be destroyed nor anything will be exported   bin cm cleanrecyclebin  connection parameters           simulate    after  a      before  b    cancels a currently running clean recycle bin process   bin cm cleanrecyclebin  connection parameters    cancel  
   parameter description   simulate enables simulation mode   after only remove documents with modification date after or equal to the given date  format  yyyymmddhhmmss  e g                   default is  start of time  in the unix world    before only remove documents with modification date before or equal to the given date  format  yyyymmddhhmmss  default is    days from the actual date    directory this options specifies the directory where the documents will be exported before destruction  default is   destroy    export delay delay in milliseconds between the export of each document  default is        export threads concurrent threads to use for collecting and exporting  default is        noexport no xml files will be generated if this option is set  by default  xml files will be generated    export to subdirs  creationdate   modificationdate   exportdate   defines which date should be used to create the directory hierarchy  the hierarchy is build in the way year month day hour  i e  you have four directories below the main export directory   hour  directories are only created  if the  exportdate  is used  default is a flat directory structure    cancel will cancel the execution of the document collector  this can cause dead links  use with care   
  example  in order to remove all documents from the recycle bin that are not referenced by any other document outside the recycle bin and have a modification date that is less than or equal to            call   cm cleanrecyclebin   simulate   before                 performance  on systems with many documents in the recycle bin  the collection process might take a while to run it s mark and sweep phase  if the process seems to do nothing  i e  generates no log output  don t kill it  this phase might take an hour or more   
  run the clean versions using the following command line   cm cleanversions  options     simulate    path      recyclebin    id    id        this will   keep versions not older than d days before last version s modification date  keep at least the n last versions never destroy the latest version  never destroy the latest published version  never destroy the working version  of contents given by   path    recyclebin or  id     id          idn   clean versions will be recursively performed on every document of a given folder content  
   parameter description   recyclebin cleans documents inside the recyclebin   keep number minimum number of versions to keep  default        keep days do only destroy versions that are at least the given number of days older than the last version  default           published only     unpublished only cleans published unpublished versions only     approved only    unapproved only  cleans approved unapproved versions only   simulate do not destroy any version but perform a simulation    path paths of the resources to start cleaning from  i e  some folder   clean versions checks all recursively contained resources in the folder  this may be used alternatively or in addition to  id     id          cache capacity of cache    selector class   the class name of a custom versionselector  implementing com coremedia cotopaxi util versionselector   this will be used instead of the built in versionselector with its default behaviour  see above     selector param an optional parameter which will be passed to the custom versionselector    export export versions to file system as xml representation before destroying them     directory  this options specifies the directory where the documents will be exported before destruction  default is   destroy      export to subdirs  creationdate   modificationdate   exportdate      defines which date should be used to create the directory hierarchy  the hierarchy is build in the way year month day hour  i e  you have four directories below the main export directory   hour  directories are only created  if the  exportdate  is used  default is a flat directory structure   
  example for calling the clean version to simulate the cleaning of all documents beneath the root folder but the last two versions   cm cleanversions  u admin  p admin   simulate        keep number     keep days     path    example for calling the clean version using a custom versionselector on resource with id        cm cleanversions  u admin  p admin       selector class my package testversionselector       selector param  some parameter        performance and workload sharing  this tool is implemented as a remote client  and needs to load each visited document from the content server   this causes a lot of network traffic  and puts considerable load on the server  which means that cleaning will not be fast  to avoid obstruction of the regular editorial work  the tool should be run during off hours  e g  at night    the workload should be partitioned so that each cleaning run finishes after a sensible time  try running the clean versions every night and always give it a different folder to work on   custom versionselectors for cleaning  using the unified api it is possible to write your own selector mechanism for selecting document versions to be cleaned  given a list of versions of a single document  the selector returns all versions to be destroyed  the behaviour of your class may be adjusted using command line arguments  which are passed to its constructor   the named class must be a public class implementing com coremedia cotopaxi util versionselector  it must either define a public no args constructor  or a public constructor with only one argument of type java lang string  in the latter case  a string containing an additional parameter will passed to the constructor  simplest example of a customized predicate  
  the coremedia cleaners are tools for freeing up memory on the server and the underlying database  they are command line tools with no graphical user interface and are intended for use by system administrators only  administrators are advised to run these collectors regularly  i e  by cronjobs  in order to maximize efficiency and speed of the repository  they come in two versions   clean recylce bin  when you delete an unpublished resource or you delete and publish a published resource it is moved into the recycle bin  to remove the resource from the recycle bin use the clean recycle bin utility  it will remove a resource a permanently from the recycle bin if and only if there is no resource b outside the recycle bin that is linked to a  this ensures that no dead links exist in the system  or on a website that is based on the content   on high performance systems this collector should be run once a week   clean versions  the clean versions destroys unnecessary intermediate versions of documents  flexible parameterization allows for arbitrary version selection  the cleaner will not alter the servers runlevel  by providing some folders which are then processed recursively it is possible to divide the cleaning workload across multiple collection jobs   both types of cleaners are closely tied   although the actual processing is quite different  imagine two types of documents  navigation and article  navigation documents point to articles with some linklist property  articles change daily and are linked to a single navigation document  as long as some version of the navigation document still points to an article  this article cannot be collected  out of the recycle bin  the solution is to run the clean versions in order to delete the intermediate versions of the navigation document  this will also remove the old links to articles in the recycle bin   and thus allow the document collector to finally remove these documents from the recycle bin   this is the reason why clean recycle bin and clean versions should be run regularly  both types of cleaners run in a distributed system and are processing and io intensive  actual running time depends heavily on network latencies  database performance and number of resources processed  
  if you want to install a jmsreceiver proceed as follows  select the coremedia proactive delivery server option and click  next    the next window pops up   
  in order to find a text in a document with the full text search  the text must have been processed before on the search server  this takes some time  approx      minutes  only then you will find a document  you also have to wait  if you have moved a document from one folder to another and restrict your search to the target folder  
   field description repository url enter the url where to obtain the ior of the content server  repository domain enter the domain of the user used to connect to the content server  repository user enter the user name used to connect to the content server  the cae connects as the user webserver  repository password enter the password of the user used to connect to the content server  default is webserver but you should change this password as soon as possible   
  this manual is addressed to developers of coremedia projects who want to develop effective and appropriate content delivery solutions  they ll find a description of the four main delivery components   the coremedia active delivery server the coremedia proactive delivery server the coremedia content application engine the coremedia webservices engine  for an even more detailed documentation  this manual is augmented by the comprehensive javadoc pages  
  the coremedia smart content infrastructure  coremedia sci  is the future proof standard software solution for production  administration and distribution of multimedia content for digital services   content applications such as high volume web sites and device independent multi channel services are implemented cost effectively in minimal time using the coremedia smart content infrastructure   this delivery developer manual is written for developers  people who set up and tune  who integrate and implement coremedia sci  it describes how to make all the features work well and deliver content in the most effective way to the customer   out of the box functions for complete editing processes in the easily used coremedia editor  rapid prototyping features  an acclaimed architecture and a matching  proven process for content application projects guarantee excellent results and high  sustained customer satisfaction  
   production and live environments  cm content servers  cm workflow server  cm importer  cm active delivery server  cm proactive delivery server  cm content application engine  java   cm webediting server  excl  webeditor   
  the searchresult template calls the renderteaser templates for dish documents that match to the uri parameter searchstr  if more than three matches are found a next button for displaying the next matches is rendered  the offset is passed via uri parameter offset  take a look at the parameters of the search   result   sese search str    name   true  null  true   resourcetype  type  true  offset  max    this call returns documents matching str sorted by the documents name  ascending true   the search begins from the root folder  null  including all subfolders  true   the type we search for is dish in our case  including all subtypes  true   beginning with the current offset only three documents  max    are displayed   
  this manual is addressed to developers of coremedia projects who want to configure and customize the coremedia editor   for an even more detailed documentation  this manual is augmented by the comprehensive coremedia editor javadoc pages  
   search   child elements   tabledefinition   parent element   editor  
  within this element of the xml file  the result table of the full text search is configured  the element has no attributes  
  it is not possible to move documents between different base folders  
  to move a document  proceed as follows    select the document which has to be moved    select edit cut from the menu bar  cut from the context menu or press  ctrl   x     select the folder into which the cut document will be pasted    select edit paste from the menu bar  paste from the context menu or press  ctrl   v    the document is pasted into the selected folder  
  in the dialog box only documents that match the allowed document types of the link list are shown  you can search for a specific document using the search field   if the document exists  proceed as follows     select the document for pasting from the folder hierarchy  confirm by clicking on  choose    if you want to create a new document perform the following steps     choose the folder in which the new document should be created and open the context menu with the right mouse button  choose the appropriate document type in the menu item new resource      enter the name of the document in the opening dialog and click  create     select the newly created document in the selection dialog and click  choose    the selected document appears in the link list of the document  
  this manual is intended for developers  who want to create own workflow definitions or who want to program own extensions to the workflow system  you will find further information on administration of the workflow system in the coremedia workflow server section of the administration manual  additional information on the usage of the predefined workflows can be found in the user manual  
  development environment  additionally    cm servers  cm workflow server  cm importer  cm active delivery server  cm content application engine  
  this manual is addressed to developers of coremedia projects who want to write importers  components which import and transform content into the coremedia repository  
  for a detailed description of task and workflow overview    and detail information    window see section       of the user manual   
  coremedia sci comes with a special user interface for creation and administration of workflows  the main workflow window holds three sections below menu     and toolbar       task and workflow overview        tasks or workflows to be edited are displayed here  detail information window        here you find all relevant information about the workflow  partly editable  a document selected here opens in the document window  document window        displays a document selected in the detail information window before    
  coremedia sci includes the proactive delivery server which offers enhanced functionality for offline generation  if you do not need to stay with the offline functionalities of ads for compatibility reasons  it is recommended to use this component  
  the first thing you need for xml production with the ads is a java server page  jsp  that will create xml    put a new jsp in the template directory of your coremedia web application  e g   corem home jakarta tomcat webapps coremedia templates    start this jsp with the usual declaration and the correct content type       page contenttype  text plain  session  false     by using this content type  you can view the verbatim output of the jsp in both internet explorer and mozilla firefox  although  in ie the xml looks a lot better  there are some problems with conformance to standards  we recommend netscape firefox or opera for debugging purposes   the next line in your jsp should emit the xml declaration which sets the xml version in use as well as the encoding      out write    xml version       encoding  utf            the first byte absolutely needs to be the      this is mandatory for trouble free processing using any xml parser and is documented in the xml specification   note that the xml declaration should only be printed when producing an entire xml document  not a fragment  for fragments you have to define the text x coremedia fragment charset utf   content type   now we have our basic page which will produce an xml declaration and set the correct content type  for the actual xml production there are three approaches   construct a dom tree and output its content using the domunparser in conjunction with one of the many unparsers  construct an unparser on the servlet output stream and fire sax events manually  output the xml verbatim using neither dom nor sax  use a combination of these techniques   the first alternative uses more memory since the entire dom tree must be kept in memory  it is also slower  as rule of thumb  use the second alternative when you re either producing dynamic content or the page sizes will be very large  if neither of these cases apply  chose the method you re most comfortable with  
    open the dialog for creating a new folder  either you   select file new folder from the menu bar  or   choose the context menu with the right mouse button and select new folder from the menu bar or   click   in the tool bar   
  if you want to install a coremedia proactive delivery server proceed as follows  select the coremedia proactive delivery server option and click  next    
  the coremedia search engine can be accessed via the generator api  presumed that the search engine is configured and running  the generator bean provides the necessary service via getsearchservice      jsp usebean id  generator  type  hox corem servlets generator  scope  application           searchservice sese  generator getsearchservice         searchservice provides several search   methods for searching and getconnectioninfo   for information about the connection  the example contains a simple search template displaying dishes that match to a provided search string  
  once you have assigned a folder to a publication target  it must not be reassigned to another target  doing so would result in inconsistencies between content mangement server and master live server   when you configure base folders by name  a top level folder of that name may not be renamed and no other top level folder may be renamed to assume that name  this stops users from reassigning top level folder accidentially  when you want to rename top level folders that belong to a publication target  configure them using their numeric id in the file publisher properties  
  please make sure that no other java process is running on your os while installing the coremedia editor via jws   open the url http    host   port  coremedia  in a web browser   host  and  port  must match the values of cap server http host and cap server http port in the capserver properties file of a content server   follow the link named     install jre  not yet installed   on the displayed html page  alternatively  you can download and execute the jre by right clicking and selecting  save as      the link is provided at the bottom of the page  you don t need to install jws separately because it is part of the jre   this will launch a standard windows style installer that will guide you through the installation of the jre  the installer prompts for the installation directory  default is c  programme java  sufficient for most cases   click   next   the installer will create all necessary files and settings for the jre  the installation registers the file extension  jnlp and the mime type application x java jnlp file with windows  so jws can be launched from netscape navigator  mozilla and internet explorer  and most other browsers  if a link to a jnlp file is activated   a web start shortcut on the windows desktop and in the windows start menu will be created   
  in addition  these symbols can mark single paragraphs    pictograph description   tip  this denotes a best practice or a recommendation    warning  please pay special attention to the text    danger  the violation of these rules causes severe damage    summary  this symbol indicates a summary of the above text   
  please do not use special characters in resource names  they can cause trouble in publication  esp                               the server checks for the following resource names   which start or end with a space  which only consist of one or two dots  which are empty  which contain the slash       you can t create resources with such names  
  the coremedia editor knows how to treat xml conforming to the coremedia richtext     dtd  if you are using a different dtd  then you cannot edit documents with the coremedia editor without modifying the editor  
     attribute   description   language   the language used in the program  at present  there are locales for english   en   and german   de    the locales follow the usage in java util locale    country   country specific settings  at present  there are locales for the united states   us   and germany   de    the locales follow the usage in java util locale   
      attribute    description    name    with this attribute  the name of the bundle file is entered  the name must correspond to a file in the classpath  you must obtain the name of the bundle from your developers     
     attribute   description   name   name of the browser to start   any number of names can be entered here    command   command for starting the browser   the string   s  in the example is replaced by the url of the document for display    pattern   this attribute describes how the url passed to the browser is constructed    p protocol   h computer name   n port number   u uri prefix   i uri postfix   f combined  u and  i  example  pattern  wap    h  n wap  f   default   p    h  n  f optional   specifies whether this browser is optional when doing a preview with all configured browsers  e g  by clicking the preview button in the toolbar or by selecting file preview all   the editor only shows errors for non optional browsers or if no browser could be started at all   allowed values are true and false  default is false   
  pads prerequisites  database      pads uses an oracle database for persistence  so computed entries do not need to be recomputed at system start  please copy the database driver to web inf lib after installation   
     parameter   example   description   running   true   shows the running status of pads    usedmemory                          shows the used and reserved memory of pads respectively    transient cache size                    shows the number of values in the in memory value cache  the values in brackets are the minimum and maximum cache boundaries  the number of values in the cache doesn t fall below the minimum cache boundary after it has reached it the first time    running computations     running computation   shows the values which are computed at the moment    detected dead links       number of dead links  dead links point from existing and needed values to missing values  they arise from a changed configuration  e g  a pagelinkpredicate  or from errors during the computation of values  a computation is rescheduled for each dead link    updates pending on database       number of pending database transactions to update cached values    deletions pending on the database     number of pending database transactions to delete cached values   
   groups users administrators admin system   webserver  publisher  serverdump  watchdog  workflow  feeder    
     components   required disk space   jre        mbyte   cm editor        mbyte  
  you need to configure the db  database instance as follows   the tablespace s page size shall be increased when using large document types   db  create bufferpool bp  dbname all dbpartitionnums size        numblockpages   pagesize       db  create tablespace ts  dbname pagesize       managed by database  using   file  echo     db tablespaces ts  dbname echo             extentsize    prefetchsize    bufferpool bp  dbname   the parameters applheapsz  stmtheap and app ctl heap sz may be modified when having problems with long queries    db  update database configuration for  dbname using applheapsz       db  update database configuration for  dbname using stmtheap       db  update database configuration for  dbname  using app ctl heap sz        next row locking must be disabled for use with coremedia sci  as the database instance owner proceed as follows  enter db set db  rr to rs yes at the shell prompt of your database computer  restart the database instance   you can use one of the following drivers    db  joint combined access com ibm db  jcc db driver  recommended  db  jdbc application driver com ibm db  jdbc app db driver db  jdbc network driver com ibm db  jdbc net db driver   your driver choice depends on the used platform  if one of the drivers does not work on your system you might try to apply the other one  in all cases  copy the file of the driver  e g  db java zip  into the lib directory of the coremedia installation and rename the file to db java jar   joint combined access driver  when using the joint combined access you have to configure the sql properties as follows  sql store driver com ibm db  jcc db driver sql store url jdbc db     db host   db port   db name  sql store user  db user  sql store password  db user password  sql store dbproperties corem db   application driver  if you are using the application driver  an additional db  client installation on the coremedia server host is required    you configure the application driver in sql properties as follows   sql store driver com ibm db  jdbc app db driver sql store url jdbc db   db name  sql store user  db user  sql store password  db user password  sql store dbproperties corem db   network driver  if you are using the network driver  you need to start the db jstrt daemon  part of the db  installation  which is used by the driver to connect to the database  start the daemon with   db jstrt  port   use the port defined by the sql store url property in the sql properties file   when you use the network driver you have to configure the following properties in sql properties   sql store driver com ibm db  jdbc app db driver sql store url jdbc db     db host   db port   db name  sql store user  db user  sql store password  db user password  sql store dbproperties corem db   
  if you perform a query and you find resources in the recycle bin it s easy to restore these resources  mark the resources you want to restore  select restore in the context menu   the resources will be moved to their last position in the coremedia repository  deleted folders which are necessary to restore this position will also be recreated in the repository  no other deleted resources contained in these folders will automatically be restored  
  after installation you can use the default user admin with password admin to log on to the content servers  please change the password of this user immediately for security reasons  
  the file capclient properties contains information about the location of the ior of the coremedia server  about the home and system folder as well as global information on the timezone and on special elements in xmltext properties  
  if you want to copy several resources simultaneously   e g  a folder with its contained documents   there is a feature to consider  all links inside the resource set will automatically directed to the copied resource   example  you want to copy documents a and b  c will not be copied  a contains a link to b and b a link to c  you paste the documents as ac and bc into a new folder  now ac contains a link to bc  bc links to c   copy resources as follows  select the resource s   then  select file copy from the menu bar or select copy from the context menu         select the folder where you want to paste the resources  then  select file paste from the menu bar or select paste from the context menu  
        select if you want to enable the full text search and the coremedia search engine feeder    now  you are asked for the license file   
  comparators for sorting folders     default comparator   sorted objects   description   generictreecomparator   folders   hox corem editor proxy resourceholder   the default comparator sorts the folders in alphabetic order  own comparators must implement java util comparator   
  the file content properties configures the following values  
  the richtext pane supports only a subset of css  
  you can use well known css syntax to define your own style groups and styles  nevertheless  the richtext pane of the coremedia editor does not support the display of all possible css formats  some formats will be displayed in a wysiwyg style  e g  bold  italic  understroke      others will be displayed in a symbolic way  color  value of a style group etc    the actual layout of the text depends on the definitions and structure of the generated web site and can only be seen in the html preview of the browser  in the webeditor all css styles supported by the internet explorer will be shown in a wysiwyg manner  style groups will be displayed as combo boxes in the tool bar and will be added to the appropriate attribute editors  styles belong to a style group and will be shown as new options of the respective combo box   define new style groups  a style group is a list of css style classes  that share a common prefix ending with       e g   font name  arial  font name  times  is a style group font name consisting of the two styles classes font name  arial and font name  times  you can limit the usage of your style group to single elements by adding the name of the element in front of the style group separated by a dot  
  postgresql is an open source sql database available from http   www postgresql org  for the certified postgresql database you need the following jdbc driver     postgresql     jdbc   build       the jdbc driver is available from the url http   jdbc postgresql org   configure the following settings in the sql properties file   sql store driver org postgresql driver sql store url jdbc postgresql    host   port   databasename  sql store user  db username  sql store password  db userpassword  sql store dbproperties corem postgresql  in a standard postgresql installation the port is       so replace  port  with      and  host  with the name of your postgresql computer  replace  databasename  with the name of the postgresql database you created using the createdb command  
  when creating the database  take care to select unicode character encoding   createdb  e unicode  my databasename  
  you need to create a schema for each database user  because coremedia cms requires that the schema name equals the user name  otherwise  all tables would be created in the public schema  you also have to create the schema before starting the content server for the first time  for example  the following commands can be used at the psql command line in order to create one database user for the content management server and workflow server  named cm mgmt in the example  and one database user for the master live server  named cm master in the example    revoke create on schema public from public  create user cm mgmt password  secret   create schema cm mgmt authorization cm mgmt  create user cm master password  topsecret   create schema cm master authorization cm master   it is your choice whether you use different schemas in one database  or separate databases  both deployment variants are supported  
  members of administrator groups are supposed to do administrative work in the coremedia system  therefore these members have special privileges   see all workflows see all rules attached to a resource and differentiate between live server groups and content server groups  check in and check out resources of all users direct approval and publication create new users and groups create wide links in a multi site environment  right after installation there exists only one administrator group with one user  the group administrator with the user admin  it is not possible to revoke the administrator flag from this group in order to prevent the admin user from lock out  from all other administrator groups you are able to revoke this flag   
  in the coremedia workflow  a workflow is defined in a file using xml syntax comparable to the configuration of the coremedia editor  a formal description of the syntax of this xml file can be found in the corresponding dtd in  installationdir  lib xml coremedia workflow dtd  in principle  the workflow file must obey the dtd  but cannot be validated against the dtd in all cases  the reason is that coremedia workflow xml can be customized by using your own extensions  it is not possible to capture all future extensions in a static dtd  so the dtd only describes the basis for coremedia workflow xml   in the following sections the important syntactical concepts of the workflow description are explained  the elements of the workflow definition can be seen as elements of a programming language  the following table shows this correlation  not all xml elements are included   
  client  deprecated  see assignment instead  
  initialclient  deprecated  see initialassigmnent instead  
  lines         here you define the workflow variables from which the action will take the information for the mail  as shown for the variable receiver  you can define default values   lines          here you define a client view which permits the performer of the task to enter the receiver  the field and the document o send of the mail   line     in this line you will configure the action bean  the action bean to use is defined via the attribute class  the names of the variables are set using the attributes in the lines below  here the component which analyzes the workflow definition  the beanparser  will call the setreceivervariable    setdocumentvariable  setfieldvariable   and setsuccessvariable   of the action bean using the variable names as parameters   you will see right away in example      c how to prepare your action to accept these attributes   
     directory file   description   jakarta tomcat    installation directory   jakarta tomcat bin    start stop scripts   jakarta tomcat conf server xml   main server configuration  ports       jakarta tomcat common lib runtime resources   jakarta tomcat logs   tomcat logs   jakarta tomcat webapps   auto deployed webapps  
  embedding the active delivery server in the apache web server  embedded operation  has the advantage that cached pages from the active delivery server can be delivered directly by the web server  furthermore  standard log files can be obtained in this way for evaluation   this behaviour is achieved as follows   the documentroot of the web server must point to  cm jakarta tomcat webapps   alternatively  e g   cm jakarta tomcat webapps coremedia generator can be linked to the corresponding position in the document tree of the web server  the directory tag must point to the same directory  the active delivery server properties servername and serverport refer to the apache  cache lookup and possible forwarding to the active delivery server are implemented by inserting a rewrite module rule in the apache httpd conf  the modules mod rewrite and mod proxy are attached and configured as follows   
  the easiest way to deploy a web application into the container is to move it to the auto deployed webapps directory of your tomcat installation  tomcat will automatically deploy the web application  alternatively  an deployment  xml descriptor or the admin console can be used   please note  that the ads must be deployed as an exploded application  if packaged as a  war file  it will not run in a container that does not explode  war files at deployment time  such as bea weblogic  
  only use the jre jdk binaries listed in the table above or further approved versions mentioned in notes xml  don t use any other than the specified patch level of an jre jdk version  a different patch level is not supported and probably causes errors in service  there is only one exception to this rule  some servlet containers require jdk jre     and do not support more recent java versions  for these containers  you can run the required components  ads  cae and the webediting server  with the jre jdk      whenever possible  you should use the approved java versions as these are more intensely tested  
  the  menu site   is a simple demo with a handful of document types  if you already know older versions of this demo  which are not based on cae  then you must take into account some adaptations  hence  experienced developers should read this section  too  due to some conceptual changes this demo got the new name  new menu site    the complete sources are part of the example package and can be found in the directory cae menusite  before you build this example you should take a look at the files cae readme and cae menusite readme   think of a small but fine french restaurant called  chez andre    the owner wants to attract customers by describing the delicious dishes on his own website  that will give him the pivotal advantage over his competitors  as a smart guy  he decided to use the cms       he knows that the cae with its object oriented functionality is the right approach for future challenges  e g  caching of time consuming operations  external data sources and personalization   at first  the required data structures have to be described by a document type model  the following table gives you an overview about the relevant elements  
  if you know the old menu site example then you may recognized category as new document type  the reason for this new element is that folders are not longer used to structure the content because they have no business functionality  in the case that you want or have to use folders you can still use them but it could be an indicator for an improvable design  
   name description dish represents one dish  the supported properties are description  ingredients  price  calories and pictures  picture contains the binary data for one picture  page stores central data like a title picture and the navigation  it also contains the recommendations of the chef  category comprehends all dishes of one type  e g  fish or poultry   
  remember the mechanism how content ids are transformed to real instances  each url exactly represents one object and this leads to an essential question  how can the navigation and the title image be rendered when you call  for example  a dish object  should the dish template undertake this rendering  the answer is obviously  no   because this would lead to duplicate code scattered over several templates  the correct solution is inheritance  take a look at the following class diagram  
  the dish interface inherits from document as well as page and category  thus  the code for the navigation and the title picture should be placed in a template for document objects  but this solution leads to another problem  a template for a dish distinguishes from a template for a category or a page object  hence the rendering of these specialized objects should still remain in single templates  the object oriented behaviour of the view dispatcher allows a very elegant inclusion  just make a recursive call on the actual object with a different view name  e g  render  therefore you need to create at least four templates     document jsp  renders the title picture and the navigation  the rendering of the center is delegated to one of the following templates    dish render jsp  renders a detailed dish description    category render jsp  renders a brief list of related dish descriptions    page render jsp  renders a brief list of dish descriptions recommended by the chef   think of a dish object  for example  and you would get the following call hierarchy  
  the used url is resolved to a dish object which is passed to the view dispatcher  this part of the cae looks for an adequate template  and due to no specified view it cannot use the template dish render jsp  the next step is to look for a template of a super class of dish  in this case document  it is no surprise that document jsp matches and the rendering can begin  somewhere inside this template you can find the following tag delegating the rendering of the dish to a template with the view  render      cm include self    self   view  render     thereafter  the result is sent back to the client and the user sees the offers of  chez andre    regrettably  the example omitted an awkward detail until now  how can the template document jsp render the navigation and the title picture  it has no access to these properties because they are not part of the dish object  you could extend this document type but this is asking for troubles  a central place seems to be the better solution and this is were the already mentioned page object comes into play to cope your problem  it contains the data about the navigation and the title picture  but how can you access it  due to its central nature  only one instance is needed which could be stored at a defined place  the following code retrieves it from the folder menusite   
  this method is part of the class helper  package com coremedia examples cae beans   you have to extend the interface document because a template  has access to the addressed object only  the following class diagram represents the result  
  the implementation  which is just one line of code  can be found in the class documentimpl  package com coremedia examples cae beans   the last templates of this example you should know are responsible for the rendering of pictures  pictures are rendered in different sizes  hence it makes sense to outsource this functionality to separate templates  if a large image is required then you should include a picture object with the view  large    in this case  picture large jsp is called to render it  the following figure illustrates all involved templates to render one dish   
  now you know enough to create your own beans and templates  another important part of the cae are controllers  which are used when you want to provide additional functionality  each controller gets its own url or a range of urls  which are described by regular expressions  this example needs a controller that allows users to enter an url without a content id  until know  all calls must address a certain object  otherwise an error message will be returned  the following controller fetches the actual page object and returns a redirect with the according url  in contrast to the helper class  it uses the contentbeanfactory instead of the actual bean   
  the name of the interceptor class in this example is logininterceptor  it observes incoming requests and looks for an existing authentication object  if such an object does exist then the interceptor sets up the capconnection to the user s current session  otherwise  it redirects to a login controller  logincontroller   which asks the user for his her credential  the ideal place to store the authentication object is the current http session because all components can access it   now you know all involved components but how do they work together and in which order they are called  the communication diagram in the next figure illustrates these relations   
  as you can see  the object dispatcherservlet is the entry point for all requests  it is part of the spring framework and you must not care about how it is called  all other steps are described in detail by the following enumeration    prehandle    a request arrives matching the protected url space  secret    setattribute    the interceptor looks for an actual authentication object in the current session  because it is the first call and no authentication could happen it wont find the required object  therefore  the interceptor returns a redirect but this action deletes the current url  a protected controller expecting a query would not work anymore  and thus the interceptor must store the requested url in the session    sendredirect   in order to allow the user to authenticate  the logininterceptor sends a redirect to a known login controller which returns a simple html form    onsubmit    after the user has entered his her name and the password the browser will send a form submit  the spring framework converts this request to a call of onsubmit      login    the passed values are used to login on the cms      and the expected result is a valid session  if something goes wrong the login form will be displayed with an explaining error message    setattribute   the valid session will be stored in the current http session  this allows later calls to reuse the session  please keep in mind  that a session is thread local and must be removed after the call is completed  otherwise  the next call  probably sent by another user  served by this thread runs with the previous session and your application is seriously insecure    getattribute    after the login the logincontroller gets the previously called url from the session    sendredirect   this url is sent back as a redirect to the client    prehandle   the interceptor is called because the redirect url is still protected by the interceptor    getattribute    this time the interceptor finds a valid authentication object and retrieves it from the session    setsession    the session will be set and all activities on the coremedia cms      run under the rights of the logged in user    handlerequesinternal    now the really wanted call of the controller can be executed    aftercompletion    after completing the call the dispatcherservlet calls the method aftercompletion   to reset the current session    setsession   resets the current session to the default one  
  with the right permissions your web application can start new workflows  if you have not read the previous section you should do this first because this example depends on the described login mechanism  in order to start a new workflow the web application requires an own controller covering the single steps  most code of this class deals with the processing of the data submitted by the following form  
  fortunately  spring comes with some predefined controllers making the developer s life easier  in this case the simpleformcontroller is the base class of choice because it does the hard work for you  all you have to provide is a new bean  which stores the entered data  and a html form containing special binding tags  when the user submits the data from the form the spring framework processes this request and calls the method onsubmit   of your controller  it passes an already initialized bean and you can start with your business logic  thanks to the spring magic you do not have to deal with nasty form evaluations   the class workflowbean must have apparently six properties  subject  comment  approver  express  time and change set  only the change set is defined by the calling page and cannot be changed  all other values are specified by the user and you will find them in the passed command object   
  after the cast the method startworkflow    which will be described next  does the workflow job and the resulting view gets the workflow data as central object  this allows the success view to present selected information     the mentioned method startworkflow   consists of some unified api calls building and starting a workflow   
  first  it retrieves a process definition for a workflow with the name  foureyesdemo    you can find the definition of this workflow in the folder misc of the example  the resulting process object is filled with the entered data and started  because the  compose   task is already done it is convenient for the users to accept and complete it automatically  for more information about workflows please refer to the manual of the unified api  
  sometimes you need more sophisticated security mechanisms and because the owner of  chez andre   does not feel to reinvent the wheel  he decided to use an existing framework for the next example  the benefits of this approach are obvious  less programming effort and more functionality  this example uses  acegi    pronounced  ah see gee     a comprehensive security framework for spring  it is open source and can be retrieved from http   acegisecurity sourceforge net  the following enumeration lists some features     single sign on  use  central authentication service    cas  of the university yale to realize a enterprise wide single sign on environment  secures beans  define  access control lists    acl  for your beans  secures http requests  protect your http requests and use regular expressions to define the url patterns  supports http basic authentication  allows fast and simple authentication by using the built in browser authentication  supports http digest authentication  in contrast to basic authentication this method never sends the password over the network making it more secure  meanwhile  supported by all modern browsers  supports x    authentication  use mutual authentication to demand certificates from the client  form authentication  design your own html forms to get an individual login mask  chanel security  enforce the use of https requests  different authentication backends  retrieve the user data from different sources  e g  xml file  database  ldap or the coremedia cms      user repository   this flexibility  of course  has its price  you have to learn how acegi works and you must configure a lot of objects along the way  apparently  this example cannot cover all aspects of acegi  hence you will miss the one or other explanation  if you need more information about a certain subject please refer to the reference documentation of acegi  available on the mentioned website   the rest of this section focuses on the protection of http requests  this example uses an html form and the coremedia cms user repository to authenticate users  but before you get acquainted with the details you should know more about the call order of the single components  if you have read the section  login  then you have an idea how a login can be built with spring  the dispatcherservlet calls an interceptor before the controller  allowing you to validate the authentication  acegi works differently because it is executed before the servlet  following figure illustrates the resulting relations   
  the top level bean controls the authentication process but does not implement the functionality  therefore it asks the providermanager  a bean  the name says it all  which manages several authentication providers  these providers are the so called authentication backends implementing the functionality to access  for example  the coremedia cms      user repository or an ldap service  in this case two providers are connected  one for anonymous authentication and one expecting a user and a password  regrettably  acegi does not support domains  hence you have to implement your own provider when you need it  the class caeauthenticationdao uses some unified api methods to login and returns a special authentication object containing the current session  take a look at the following code   
  after the login this method maps the cms roles to acegi roles by adding the prefix  role    to each group name  these roles can be later used in security rules  in contrast to the former login example acegi does not set the cms connection to this session   the ehcachebasedusercache uses spring s cache environment to reduce the calls to the cms  otherwise each login request would entail a new authentication with the resulting costs   the second object diagram in the following figure depicts the object hierarchy for the security enforcement  
  this part of the filter chain checks the authentication object to make a decision  when the access rights are sufficient the operation is permitted  otherwise an exception will be thrown indicating an authorization problem  in this example  the securityenforcementfilter contains to objects  the filtersecurityinterceptor  which performs the security check  and the authenticationprocessingentryfilter  which is the entry point for a new login  the security check bean offers a defined interface and uses other beans implementing the required operations  a decision manager asks an arbitrary number of voters to make its own decision  in this case  an affirmativebased decision manager is used  returning a positive result when at least one voter accepts the request  with a rolevoter  checking the group membership   now you know how you can set acegi up  but how can you integrate it into your own application  the owner of  chez andre   wants a new item in the navigation that directs to the login page  before the login  all resources are accessed under the anonymous user  regrettably  acegi only stores the actual url during an authentication violation but not for a user change  if you want to avoid a standard entry page  you should open the login form in a new window  after a successful login the result page contains some code  which reloads the actual url in the main window and closes the login window  following sequence points up these steps   
  after the login you can see the name of the current user in the second screen shot below the last dish  in order to logout  the item  login   changed to  logout    all you need to implement this item is a simple controller invalidating the current session  the related source code is following     
  the first line of this method generates a new view name by calling getnewviewname    it is defined in the super class personalizedview  which could also be found in the package com coremedia examples cae view  and simply appends   p    this renaming is necessary because you just want to add the user object and delegate the rendering to a real template  as you can see in the last line  hence  you need a template with an equal but different name  the rest of the code retrieves the current authentication object and puts it into the scope of the template  just use the el  as usual  to gain the desired values    div you are logged in as  c out value    user username      div  
  the document model browser can be found in the  coremedia template development  area  located in a standard coremedia installation under the url http    generatorhost generatorport coremedia develop  there   browse document model  should be selected    the document model browser has various functions which can be executed via hyperlinks in the upper region  as well as the actual diagram  which also contains various hyperlinks   the diagram can be expanded in stages in order to display a certain section of the document model  a white box is displayed for each document type  containing the type name and the type symbol  if it exists   the type symbols must be saved under the path  corem home  tomcat  webapps coremedia images doctype icons according to the scheme  doctypename  gif  abstract document types are written in italic   each document type box can be expanded or collapsed  the state is changed by clicking on the type name or symbol with the mouse   collapsed types are shown in gray  expanded types  on the other hand  are shown in black  with their properties  views  if viewdispatcher is being used  see the delivery developer manual   and subtypes  according to uml notation  subtypes are connected with their supertypes by an arrow   the properties are displayed in the format name  type  corresponding to the document type definitions as shown in following table  
  the coremedia workflow comes with five predefined workflows  four of these workflows deal with the approval and publication of resources  the fifth workflow handles the global search and replace functionality  if you have purchased the coremedia workflow server  single workflow edition   you can choose the global search and replace workflow and one of the four publication workflows after installation of the system   simple publication    a user  who needs approval and publish rights  creates a workflow with all necessary resources  the resources will be published  and implicitly approved  by the same user  two step publication    a user creates a workflow with all necessary resources  a second user  who needs approval and publish rights  can approve the resources  after the successful completion of this task  the resources will be published automatically  two step approval    a user creates a workflow with all necessary resources  a second user  who needs approval rights  has to approve the resources  the workflow will terminate after the successful completion of this task  afterwards  the resources can be published manually by an authorized user or automatically  three step publication    a user creates a workflow with all necessary resources  a second user  who needs approval rights  has to approve the resources  after successful completion of this task  another user  who can be one of the two other users  can accept the publication task of the workflow  then the publication starts automatically  global search replace      a user collects a set of documents  defines the search and replace options and starts an automatic or interactive search and replace run on this documents  see the appropriate section in the user manual for details     
  this demo is based on section  security   and it is recommended to read it before  when you are familiar with the authentication of users you can continue with the personalization of the new menu site  the owner of  chez andre   wants a rating system allowing him to improve his menu card  these additional data are not part of the actual content model and it does not make sense to extend it  though rating data relate to their content it is better to store it in a different place  a database is an ideal remedy for this task and with spring it is very easy to get connected  the data access objects  dao  offer a general interface for different technologies  with sql templates and special objects the framework allows a very object oriented approach  do not worry about mappings or used resource  spring will take care of it   before you go ahead you need a data model for ratings  in this case  the user id and the content id are a unique primary key for a rating value  thus  the table for the ratings needs three columns  you can find following code in the class datasourcepopulator located in package com coremedia examples cae dao   
  basically  this class contains a simple sql template and a method mapping a result set to a rating object  in order to use this object the dao just calls the method execute   with an array of two values  the user id and the content id  the result is a list of rating objects   you could use the dao directly in your application but it is a better idea to offer a special service  in this demo the service class is ratingmanager  which offers two methods for getting and setting the ratings   now you have a lot of classes and the communication between the related objects is hard to comprehend at the beginning  as already mentioned  the rating service has only two methods  the following sequence diagram illustrates the program flow of a getter call   
  the second method sets a rating and the ratingmanager must recognize if an existing rating needs an update or a new one has to be created  the next sequence diagram illustrates the details  
  the next step is to integrate the rating service into the web application  as you might guess  this demo will use views to reveal the ratings to the templates  each presented dish owns a rate form with three radio buttons for the respective grade and a submit button  the template rendering this view uses the view dishview to retrieve a possibly existing rating  there is nothing special or new about this view  hence it will not be further explained  the controller ratecontroller receives the submitted data and stores the rating  in the following figure you can see a rated dish  which got the grade  good    
  if you want to install the coremedia search engine you have to do some prerequisite work  proceed as follows    create a temporary directory and unpack the coremedia search engine archive file for your operating system into it  the following table lists the archive file to use for different operation systems   
  it is not very difficult to offer additional data by views but how about manipulation  a view has full access to the passed data  hence it is possible to change  extend or remove it  but take care and avoid so called side effects  thus it is recommended only to extend the data model  in this example  the logged in user shall see the dishes ordered by his her actual rating  for example  if a dish got a good rating then it will appear in the section  dishes you prefer   a bad rating will move the dish to the section  dishes you do not like   in the next figure you can see a typical screen shot  the responsible code  which sorts the delivered data  can be found in the class categoryview  
  the events utility prints out all events reaching the content management server and the workflow server  
  the events utility has the following options    parameter description  t timestamp  this parameter gives the date of the last synchronisation with events  if you restart the utility  all events which happened after the moment given with the parameter  t will be reprocessed  i e printed to the console   so  t should be omitted when the events utility is used for the first time  if you start events without the parameter  t  all events from now on will be printed  a timestamp has the format  seq no   sub no   id tag  and is printed out before the event  see javadoc of com coremedia cap content timestamp fromnumbers int int int  for further details  note that session events don t provide timestamps   
  postgresql requires regular maintenance for proper operation  please see the postgresql manual for vacuum and analyze  you may also want to use pg autovacuum  
  cm usedlicenses is a utility for license management  it displays and deletes entries in the sql table cmlicenses  this table has two columns  username and servicename      username holds user ids     servicename one out of the following coremedia service names    debug  dotnetappbridge  feeder  editor  filesystem  importer  publisher  replicator  system  webserver  workflow   this utility has the following syntax   cm usedlicenses   print  deleteuser   userid    the parameters have the following meaning  
  install a coremedia sci component as a windows service in a command prompt console with the following command    cm  component  install   a    u  user    p  password     the parameters have the following meaning  
   parameter description  a use the parameter to start the service automatically on system start up  otherwise you have to start the service manually   u the user of the service  if no user is entered  the default user  localservice  will be used  it is not possible to use the  localservice  user when the installation drive is a network drive  because  localservice  has no permission to access remote resources   p password of the user  if not set  you will be asked for the password   
  most of the coremedia services  including tomcat  require full access to their installation path  windows services run independently from the logged in user  with a windows account specified during installation  therefore you have to take care to grant this user the appropriate access permissions  a good practice is to install windows services to run using a newly created  dedicated  local account such as   coremedia  to do so pass the  u argument to cm  service  install   cm  service  install  u  computername  coremedia  the account used must be granted appropriate file access permissions  however  if  u is not specified  the built in default service account  ntauthority localservice  is used  this account does not usually have full access to most installation locations  if you really want to use the default account  grant full access to localservice   lokaler dienst  on german windows installations  below the installation root  for security reasons  it is strongly discouraged to run services with domain user accounts  especially  if the same account is used to run services on other machines in the domain   
  the following example shows the output of a query which searches for all documents below the  menusite fish folder   cm query  u admin  p admin  q  below path   menusite fish    the result shows the id  the type and the path name of the found documents  
  on the command line  the query string will usually be surrounded by quotes  so that the shell interprets it as a single argument  you may also have to escape quote characters inside the query string   the next code block shows the formal definition of the query language using ebnf   
  the next table shows the definitions of the identifiers and literals of the query language  
   property value default description cap client server ior url   url format  http    server   port   coremedia ior  this property determines where to get the ior of the server   server  must be the name of the server host  for  port  you have to set the server s web server http port  both values must match with the corresponding value in the capserver properties file on the server  cap client timezone default timezone ect   this parameter determines the used timezone  the standard value is ect   further timezones are documented in the class java util timezone    warning  never change the timezone after the first start of the server    
   property value default description cap client server ior url   url format  http    host   port  coremedia ior  this property describes for the coremedia editor the location where it gets the ior of the coremedia content server  since the editor is usually installed on a different computer from the coremedia content server  the property is given as http url  the editor then receives the ior from the server with an http query  in general  work is only carried out on the content management server  in exceptional cases the administrator can access the master live server  on the master live server  no resources should be changed with the editor  so that consistency of the master live server with the content management server is ensured   
  the following tools are useful during the development of a portal web application  they retrieve pages and referenced binaries directly from a servlet of the portal application  the portalcontent command line tool can be used to validate pages and output them at the console  the portletemulation web application delivers portal content to a web browser but is also able to perform an xsl transformation before returning content to the client  because of this it may be used to test a portal web application without a portal server  
  portalcontent command line tool  the portalcontent tool is a simple command line tool that can request pages and binaries from the servlet of the portal application  it outputs pages and information about binaries to the console  the portalcontent tool is provided as a java archive  jar  which is located inside the portletemulation webapplication under jakarta tomcat webapps portletemulation web inf lib portalcontent jar    usage   java  jar portalcontent jar   p  page path       b  binary path   available options    b  binary path            path info for binary request   p  page path              path info for page request   url  service url          service endpoint url   validate                  enables content validation  
  as opposed to the usual browsers the css support in java swing is limited and does not cover the complete css attributes  therefore java swing will display some css attributes flawed or not at all  see also the javadoc of the javax swing text html css class for details   because of these limitations you should always use the preview function of the coremedia editor for a check of the used css styles   
  don t merge the attributes in the coremedia richtext     css file  for example don t write  border  solid  px red  but  border style solid  border width   px  border color  red    if you edit coremedia richtext     css with tools like microsoft frontpage take care that the attributes are not merged on saving  
  up to now the coremedia editor supports the following attributes   font family   font size  supports relative units    font weight   color   background color  with the exception of transparent    text decoration  with the exception of blink and overline    text align  justify is treated as center    margin top   margin right   margin bottom   margin left   margin   padding top   padding right   padding bottom   padding left   padding   border style  only supports inset  outset and none    border color  only one color    list style type  the next attributes are supported but they will be drawn erroneous   vertical align  only sub and super    list style position  does not work as expected   the following css attributes are supported but will not be drawn at all   font variant   background attachment  background always treated as scroll    word spacing   letter spacing   text indent   text transform   line height   border top width  this is used to indicate if a border should be used    border right width   border bottom width   border left width   border width   border top   border right   border bottom   border left   border   width   height   float   clear   display   white space   list style  
   parameter description  b  binary path  retrieve a binary from the given path    p  page path  retrieve a page from the given path    url  service url  the url of the endpoint  
  in the figure the transitions denoted with numbers in circles have the following meaning    the server starts up and remains in administration mode  at this time  no active delivery server can connect  the server connects with the master live server and asks for changes  if there are changes  replication begins    the master live server is not reachable  it has either broken down  has been stopped  is working defectively  or communication is disrupted  in this case  replication pauses  every    seconds  the slave live server attempts to connect to the master live server    the slave live server was able to reconnect to the master live server  replication starts again as described in      replication is finished  the slave live server is switched to online mode  if the slave live server is started in transition   for the first time  it does not switch to online mode automatically  instead you have to switch to online mode manually with cm runlevel  u  user   p  password   r online  g    later the server switch is done automatically  once the slave live server is switched online  it continues to monitor the master live server for changes and  if necessary  starts the replication    as in     the connection to the master live server is lost  replication pauses  but the slave live server remains online  every    seconds  the slave live server attempts to connect to the master live server    the slave live server reconnects to the master live server and  replication starts again  as described in      the database of master live server has been reset  replication stops and the slave live server remains online  in order to synchronize with the master live server  the database of slave live server must also be reset   
  the development of a portal application differs from a standard cae development in a marginal way only  all cae concepts like content beans or caching may be used the same way  for that reason  it s assumed that you are already familiar with cae development    
  in a portal application there are two types of contents  page  a document to be presented inside a portlet  it is represented as xml and will be interpreted and transformed on portal side   binary  a content of arbitrary content type  such as a gif image  which has been embedded in a page and won t be processed at portal side    a page may contain links to other contents  these link types exist   page link  a link to another page  when clicking the link  the resulting page will be typically displayed in the same portlet  binary link  a link to binary content which will typically embedded the binary into the page  therefore  binary links won t be clicked by the user  external link  an external link may point to any resource in the www  when using such a link  the portlet will be left  resource link  a link to a resource which is located in the portal  such as special images used for the portal look   feel   
  the coremedia cms portal integration contains two portlets  aka  iviews   for use in sap enterprise portal    the first portlet called content portlet may be used for displaying content  retrieved from a cae portal application  inside the portal   the other portlet called navigation portlet is optional and may be used when the content portlet s navigation should be included into the global portal navigation  see above   from a technical point of view  the navigation portlet will be embedded into the portal navigation area and simply displays content consisting of navigation elements only  clicks on navigation links then will be delegated to an associated content portlet   the portlet archive com coremedia cms portal par consists of this structure  
  the changepassword tool changes the password of a user  an administrator can change the password of every other user  all other users may only change their own passwords  
  the options have the following meaning    parameters description  n name of the user for whom the password should be changed  this option is only available for administrators  for other users the username will be taken from the  u option   w new password for the user   
  the dumpusers tool writes all groups  users and rules currently managed in a content server into an xml file  you can use this file later on with the restoreusers tool to restore the user settings  the structure of the xml file is defined by the lib xml coremedia userrepository xsd schema  or alternatively by the lib xml coremedia userrepository dtd  it contains a nested structure of group elements which contain rules defined for this group and elements representing the members of this group   
  the restoreusers tool reads an xml file which has been written using the dumpusers tool  the structure of the xml file is defined by the lib xml coremedia userrepository xsd schema  or alternatively by the lib xml coremedia userrepository dtd  it contains a nested structure of group elements which contain rules defined for this group and elements representing the members of this group  to provide for membership in multiple groups a userref or groupref element can be used which refers back to a previously defined user or group   members are identified by their capid attribute  if given  if no capid is given  the member is identified by name and domain  if no such member is found  a new member is created  members can only be created in the built in user repository   the identified member is updated to the corresponding values in the xml file  such as name  password  home folder and a group s isadministrative flag  a new home folder is created if the given path does not exist yet  
  you can use custom actions to perform some actions in the richtextpane  to this end  you have to perform the following steps  
  enable searching  configure the location and collection of the coremedia search engine as described above  set the property cap server search enable to the value true to enable searching  
  the order of the field elements in the example corresponds to the order of the fields in the definition of the document type text  but this is not required  as any order can be used    coremedia xml supports the document fields of type structured and unstructured text  number  date  blob and linklist these are now described in detail  all field elements have an attribute name for the document field  the attribute is not explicitly listed below    text   corresponds to an  xmlproperty  in the document type definition  the coremedia dtd allows  pcdata as content  the format of the  text  content deviates at this point from the dtd  the content of  text  must conform to the grammar dtd defined for the field    string   corresponds to a  stringproperty  in the document type definition  the attribute value holds the string content    string name  heading  value  new market on descent     integer   corresponds to an  intproperty  in the document type definition  the attribute value contains the number    integer name  priority  value          date   corresponds to a  dateproperty  in the document type definition  in addition to the name attribute  there are three further attributes     date  the date must be entered in the format yyyy mm dd  e g               time  the time must be entered in the format hh mm  e g        or hh mm ss  e g             timezone  the format corresponds to the java   api  java util timezone    e g  europe berlin or gmt   all three attributes are optional  if date is left out  the whole date is undefined  on the other hand  the default values       and java util timezone getdefault   are used for time and timezone  resp    date name  autopdate  date              time         timezone  europe berlin      blob   corresponds to a  blobproperty  in the document type definition  the element has two further attributes     mimetype  the mime type must match the mime type defined in the corresponding  blobproperty  element in the definition of the document type  wildcards  like image   are not allowed    href  the url of a blob  it is given either absolute or relative to the value of the xml base attribute of the  coremedia  element    blob name  onlineimage  mimetype  image jpeg  href  chart jpg      linklist   corresponds to a  linklistproperty  in the document type definition  it can have both  document  and  link  child elements   document  children are imported like other  document  elements  the empty element  link  has an attribute idref with an id value  the consistency rules given above apply to these idrefs  all documents of a  linklist  must have a type that corresponds to the type specified with the linktype attribute of the corresponding  linklistproperty     linklist name  images   link idref  pic      linklist  
  the options have the following meaning    property description  e defines the encoding for the output  default is utf    an encoding can only be used when the tool dumps in a file   f file name of the user repository dump   
  many attributes cannot be changed once a group or user has been created  the domain of a user or group  the name or password of an external  ldap  user  the flags  iscontentgroup  und  islivegroup  of a group  the name of an external group   if a mismatch is detected  the restoreusers tool exits with an error message  in addition  the tool can only add or change rules and can only add memberships  but cannot remove them   
  the options have the following meaning  parameters description  f the file name of the user repository xml file   
  ask your coremedia administrator for the supported browser versions and make sure that you have such a browser installed  de activate all pop up blockers in your web browser and enable cookies before starting the webeditor  if you use firefox  you have to activate cut  copy and paste functionality  see below   
  in order to optimize your oracle database  you should consider the following hints      use an i o subsystem with write caches     five hard disks are recommended for database operation  one each for redo logs  rollback  index  data  and archive logs     striping increases performance further  hard disks could be mirrored in pairs  and striping could be defined across the mirror pairs     raid   should be avoided for performance reasons     larger redo logs might be necessary  e  g      mb   the aim is to rotate the logs less than once every three minutes  larger redo logs increase recovery time     large redo log buffers  e g      mb  are recommended     the tables blobdata and pk blobdata should have larger than default values of init trans  e  g      or     depending on the number of concurrently active database connections  which in turn is defined in the sql properties file of the content management server    the parameter init trans determines how many processes can write to a single block in parallel  large  waits for data block  in the statspack report indicate an init trans problem  increasing init trans by   requires about    additional bytes per block for management information    to check if init trans is too small  this command shows the waiting database jobs   select sid  sql text from v session s  v sqltext t where s sql hash value t hash value and s sid in  select sid from v session wait where event    enqueue   order by sid piece  be sure to update the database optimizer statistics on a regular basis  
  in the following table you will find some options for the java virtual machine which are recommended for proper operation with the coremedia cms   
  the options have the following meaning    parameter description  a start date for documents to be republished  the format is yyyymmddhhmmss  by default  the start date is two days before now   b end date for documents to be republished  the format is yyyymmddhhmmss  by default  the end date is the current date   f the base folder for republication  it s only mandatory for multi site systems  by default  the root folder will be taken as the base folder   
  in coremedia sci      the user password combination admin admin was used to connect to the master live server for replication  in coremedia sct     this combination changed to replicator replicator  you have to use initcapserver on the  master live server and adapt the replicator user and replicator password properties in the replicator properties files on the slave live servers to the new user name and password  
  before deploying the portlet archive  you have to do some configuration concerning  contentservice which is a connector between the portlet and the portal application  typically the portal application s url needs to be set  homepage uri which is an uri denoting the homepage of the portal application  e g       for example  if the home page is accessible from your portal application under http   host port portal servlet content       the homepage uri is  content        these aspects may be configured optionally  css files  a comma separated list of css files which shall be included into every portal page  e g   style default css style special css   these files need to be packaged with the portlet archive  javascript files  a comma separated list of javascript files which shall be included into every portal page  e g   javascript default js javascript special js   these files need to be packaged with the portlet archive  portal resource files  as mentioned above  portal resources are another type of documents besides portal pages and portal binaries  these documents need to be added to the portlet archive before addressing them like portal resource    images myimage gif   the configuration process generally consists of these steps  unpacking the portlet archive using a zip archiver  e g  winzip or jar  into an empty directory  you may use the command jar xvf  path to portlet archive  for extracting the portlet archive into the current directory  editing configuration files as described below   adding additional files to portlet archive  repacking the portlet archive  again using the zip archiver  and naming it like before  you may use the command jar uvf  path to portlet archive    for putting the current directory s files back to the portlet archive     
  in order to secure your portal application against unauthorized access you may want to enable http basic authentication and or ssl on servlet container level  when using tomcat as servlet container you have to edit  tomcat s conf server xml and enable the ssl connector  this is self described in the file  the portal application s web inf web xml and enable the sections  security constraint    login config  and  security role  like   security constraint    web resource collection     web resource name secured portal backend  web resource name     url pattern     url pattern     http method delete  http method     http method get  http method     http method post  http method     http method put  http method     web resource collection     auth constraint     role name myportaluserrole  role name     auth constraint    security constraint    login config    auth method basic  auth method    realm name coremedia cms portal integration  realm name    login config    security role    description portal user  description    role name myportaluserrole  role name    security role   in addition you have to add the above referenced roles to the tomcat user database  please see the servlet specification as well as the tomcat documentation for further informations   
  because document is only used as a supertype for the other document types but not as a  real  document it is defined as abstract   the other document types inherit from document  using the parent attribute  other fields like ingredients are added in the declarations  most of the properties are stringproperty  which means that these properties are stored as strings  the description is an xmlproperty  allowing text including markup and links as content  the linklistproperty pictures makes it possible to attach several pictures to a dish  images are binary data represented by the blobproperty image  for more information about document types see the  document types  chapter in the administration manual   
  in this section you will find a description of how to deploy and configure the portlets for ibm websphere portal and sap enterprise portal  
  the first three lines instruct coremedia sci to use the sun j se orb instead of the bea orb  the last line enables an alternative page cache algorithm   please note in section       in the delivery developer manual the x coremedia dynamic content type  
  coremedia sci has an inheritance concept for document types and properties  in the  doctype  element  there is an optional attribute  parent  if this attribute is set to the name of another document type  the new document type inherits all fields of its parent document  a property in the inheriting document with the same name and type as a property in the parent document will override the parent s property  you have to set the attribute override to true in a property element to use overriding  overriding is only possible if it specializes the type of the property    strings of the inheriting document type have to be shorter or equal   blobs a more specicific mime type   xml grammars must be a child of the parents xml grammar  and link lists a link type that is a subtype of the parent s link type    in addition  a document type can be defined as abstract  for it  the attribut abstract must be set to  true  in the  doctype  element  by default  a document type is defined as not abstract  a document of abstract type cannot be created by the server   the following example shows the document type image and a special type  imagewiththumbnail  which offers the field thumbnail in addition for a reduced version of the image  
    select the components to install and click  next    if you have selected the template or the development tool the following window will open  select whether you want to install the default servlet engine tomcat or not   
   parameter description  t  paths  enter the paths of resources for which you want to dump the attached rules   
  the administrator can use the rule selection drop down box to change the view    for current user  shows all rules attached to the groups of the current user which are valid for this resource  for any content server group  shows all rules attached to content server groups which are valid for this resource  for any live server group  shows all rules attached to live server groups which are valid for this resource  defined on this resource  shows all rules directly defined for this resource  
  if a process definition with the name of the uploaded process definition exists already  that definition is superceded by the uploaded definition  process instances of the old definition run to completion  but additional instances are built using the new definition   if your process definition references custom java classes  such classes are preferredly loaded from the jars located in the workflow server s lib directory  only if a class with a given name is not found there  the server will read the uploaded jar   if you upload all custom classes with the process definition and refrain from deploying jars at the workflow server  it becomes easier to use updated versions of the classes  in this case the new classes will only be used with the new definition  while the existing definitions and instances use the original versions  therefore it is not necessary to run the tool cm workflowconverter to resolve possible serialization issues   
  in csm      all icons have been changed  published documents are the most prominent ones and they represent the  normal  state of a document  to highlight this status  published documents have no icon at all  
  the template is optimized so that the data of the blob is not output on an http head access  line      on the other hand  for a normal get  the data is written directly into the output stream of the http response  line       
   element typographic format example   source code   command line entries  parameter and values courier new cm httpd start menu names and entries bold  linked with      open the menu entry  format normal   field names  coremedia components italic   enter in the field heading  the coremedia component entries in quotation marks enter  on   simultaneously  pressed keys bracketed in       linked with     press the keys  ctrl   a  emphasis italic it is not saved buttons bold  with square brackets click on the  ok  button glossary entry    shaped icon    webdav code lines in code examples which continue in the next line      cm contentserver    start  
  this chapter covers the fundamental principles of coremedia system administration and operation   an overview of the directory structure of the coremedia system  configuration settings for internal system communication and general aspects of starting and operating coremedia components  
  the following directory structure shows the directories located below the coremedia sci root directory  
  each coremedia component has its own start file with the ending   jpif   which is executed on startup  the name of this file corresponds to the name used for starting the component with the cm cmw command  e g  cm editor uses editor jpif   you ll find these files in the  coremediahome  bin directory   jpif files for components determine which java class should be executed on starting the component  further settings for the operation of the component can also be stored in this file  this file can be used to modify the java virtual machine  jvm  where the component runs  while parameters can be passed to the jvm  
  the used jvm installation is determined depending on the platform   unix system  the jvm used to start the installation  java  jar cap  rel no  jar  p  installscript   will be the active jvm  the location of the jvm will be written automatically in the  coremediahome  bin pre config jpif and  servletcontainerhome  bin pre config jpif files by the installer  if you want to use a different jvm you must change the settings in these files   windows system  there are two possibilities  the information about the jvm to use is read from the property java home in the pre config jpif file or from the environment variable  if java home is not set  a jvm installed in the coremedia installation directory or in the servlet container directory of the coremedia installation will be used as the active jvm  the installation directory of the jvm has to be located directly below these directories  e g   coremediahome  jre     
  coremedia components are configured mostly with property files which are located in the  coremediahome  properties corem directory or in the  component  web inf properties corem directory below the  webapps directory of the servlet container installation   each component of the coremedia system has one or more relevant property files where the operation of the component can be configured  the configuration sections of the coremedia sci components chapter contain descriptions of how to use the relevant property file s  to configure each cm component   the property files are in ascii format  the properties in the files have key value format   property name value   the first part describes the name of the configuration setting and the second part the value   the hash sign     is used for labelling comments  or to deactivate all other entries of a property   in the following example  different entries for the user name for coremedia login are given    user and password for convenient login login username example  login username test  login username user  the name example would now appear in the login window  the user does not have to enter his name again  if he is the user example   if the entries are not commented out  the last entry is used  this allows properties to be handled flexibly and to be adjusted quickly  
      log name    description    trace    logs sessions connnected with the server  this logging must be started using the utility program tracesession     corem imports serverimport    log of the server import     cap server    main log of the server     cap server garbagecollector    log of the garbage collector     cap server license    log of the license manager     cap server login    log of the server login method     cap server publisher    log of the publisher activities on the server     cap server replicator    log of the replicator activities on the server     cap server store    log of the repository  database     cap server usermanager    log of the user manager     cap server webstart    log of webstart activities  
  only members of administrator groups are entitled to create new users and groups  for administrator groups  the administrator group flag is set as shown in the next figure  
  the properties of a group can be characterised by the combination of multiple resources with their special rights  
  after creating a group  you may continue with either adding members to groups  or assigning rules to groups    in order to add members to a group  open the group in a tab choose edit   members and users or groups that you want to add as members to your group    now you may continue with assigning rules to resources     open the group tab click on the  add  button at the bottom of the window   to assign rules to a group choose a resource after that a resource type  depending on your supervise rights on this resource    if you don t have supervise rights on that resource you cannot choose a resource type  you can assign rights to a folder by choosing  folder  in the field resource type   
  if a folder with this name already exists  a new name will be created according to the following scheme  a counter which counts from   to      will be used to attach a unique number to the user name  username    no     if    fails the time elapsed since          in ms will be attached to the user name   username    timeinms    if    and    fail an error message appears and no folder will be created  this might indicate problems with rights or the network   you may create your own naming pattern by adding an entry for the property save user homefoldernamepattern to your custom editor bundle  read the localization chapter of the editor developer manual for more details on own bundles  you can use these variables to create unique names        the user name      a counter which counts from   up to      until a unique name is found or the threshold is reached      the time elapsed since          in ms  example   the editor bundle mybundle properties contains  the following entry   save user homefoldernamepattern userfolder       the user manager will create home folders userfolder    userfolder       userfolder       if the user manager is not able to create new folders according to this scheme  the escalation scheme         described above will be used   alternatively  you can create a home folder by your own  choosing any desired name  nevertheless  you should create the folder in the  home folder   you can allocate one or more groups to the user determining his rights in the coremedia system   every user can change his own password later  furthermore  all users can view the rights structure of the different groups in user administration but can not change it   since the user name is involved in password encryption  it is not possible to change a user name  to do so  you have to create a new user and delete the old one  
  the rights of the groups of the current user for a certain resource can be seen in the rights tab in the properties of the resource  here you will see the merger of all rights provided by all groups the user belongs to  specified by the resource types    
  using the tab rules  the applicable rules of all groups of the logged in user for the current resource are shown  
     user   group   directory   read   edit   delete   approve   publish   grant   folder   usera   sport    news   x         usera   politics    news   x   x   x     
  in the file sql properties the connection of the coremedia server to the database via a jdbc driver is configured  the jdbc driver jar files must be installed in the lib directory of the coremedia installation  
  the property file replicator properties configures the replicator process in a slave live server  
  the file capclient properties configures the ior url of the server as well as the global timezone  
  the following chapter provides an overview of the recovery scenarios for the coremedia server s databases   the databases of the content management server  the master live server and the replication live server  the recovery strategy depends on the server whose database has been corrupted  
  you need to have database backups to recover from database failures  the backups are created with database tools  the chronological order of the backups is crucial  backup one of the slave live servers  backup the master live server    backup the content server     
  if the database of a content server is corrupted  proceed as follows  stop the content server  the sessions of the connected clients will be closed and no more content changes are possible  restore the content server with a backup  note  that this backup must be newer than the backup of the master live server   stop the master live server  restart the content server  right now  it is possible again to change content  but no new publications are enabled  recover the master live server and the slave live servers   note that the use of incremental backups is advised in order not to loose any data  
  fast recovery with slave live server s backup  be aware  that it might be necessary to copy the database backup to other slave live servers  as well  see step       stop the master live server   to select the slave live server database from which you want to take the backup  you have to take the current sequence numbers of all slave live servers  you get the sequence number by executing the following sql statement on every slave live server database      select    from system where property  replicator remote      the sequence number of some  or all  slave live servers will be the same  if not  determine the most often occurring sequence number  in the following  this sequence number is called dedicated sequence number      choose one of the slave live servers that has the dedicated sequence number      in the following  this server is called the dedicated slave live server  its data will be used to recover the master live server and all slave live servers with a different sequence number than the dedicated sequence number     it is important that the dedicated slave live server is in an consistent state  to check this  the table replicatoridtable has to be empty  if the table is not empty the slave live server is inconsistent  to see the table content  execute the following statement  if the server is inconsistent  choose another slave live server as the dedicated slave live server     select   from replicatoridtable     create a backup of the dedicated slave live server s database using database tools  note that the slave live server needs not to be stopped  if the passwords on the dedicated slave live server have been encrypted via cm encryptpasswords  the rijndael key of the slave live server in the file  coremediahome  etc keys  databasename   dbuser  rijndael has to be copied to the respective directory on the master live server   databasename  and  dbuser  have to be adjusted to the appropriate values of the master live server database   if the directory does not exist on the master live server  you must create it      the file must also be copied to all slave live servers with a different sequence number than the dedicated sequence number     delete the full master live server database schema using database tools   import the database backup into the database of the master live server using database tools   on the master live server  fetch the last changelog entry with the following sql statement and note the values of  sequenceno  and  idtag       select   from changelog where sequenceno    select max sequenceno  from changelog      on all slave live servers with the same sequence number as the dedicated sequence number  adjust the replicator settings with the following sql statement  note  that the slave live servers do not have to be stopped  but make sure that the master live server is still not running   replace  sequenceno  and  idtag  with the values obtained above      update system set content   sequenceno   where property  replicator remote      update system set content   sequenceno   where property  replicator local      update system set content   idtag   where property  replicator tag      all slave live servers with a different sequence number than the dedicated sequence number must be recovered  to recover  execute the steps         and     read slave live server instead of master live server   restart the master live server and the slave live servers  now you can publish content from the content server  and slave live servers can replicate the content   note  there might be some inconsistencies between content server and master live server in respect of some publication events  that did not reach the dedicated slave live server   this is the case  if the dedicated slave live server is not the one with the highest sequence number  if the dedicated slave live server  has not been connected to the master live server for a longer time  i e  that there were publication events that did not reach the slave live server  if the master live server database crash did hinder the replication process between master live server and slave live servers   in all these cases  you have to replay all affected publications on the content server  to detect the affected publications  you can use the coremedia editor to query all publication events in the specific period  
  the following diagram shows the different states of the slave live server  
  the following information is replicated from the master liver server   created folders created documents created document versions destruction of document versions destruction of documents renaming moving of documents and folders  certain information is not replicated   document editing state  by definition  there are only documents with state  published  on the master live server  nevertheless the flags for approved and published still exist on the master live server  but get lost during replication    document types  any changes in the document type definitions must be carried out by hand on all server instances    user and group data  any changes must be carried out by hand on all server instances  
  when a new document is published on the master live server  the replication process receives a change event and starts to read the document data from the master live server  in rare cases  situations with potentially inconsistent data can arise   in the time period between the change event and the document data transmission the relevant document is destroyed     to resolve this inconsistency the replication process waits until the destruction event for the corresponding document has arrived  the document does exist but in the time period between the change event and the document data transmission the relevant version was destroyed     since there are only two document versions on a live server  this can only happen during a short period during publication or if a replicator which has not been running for a long period catches up  to fix this inconsistency  the replication process waits for the publication event of the new version and the deletion of the old version    the replication process only resolves inconsistencies when the slave live server is in  online  mode  since temporary inconsistencies must be avoided here  
  in addition to scalability  the replication of content on several slave live servers ensures system stability  a live server or active delivery server  that fails to operate  can be replaced by a running component  the following scenarios describe various types of system failures in an example live system  
  this is the example setup used for the error scenarios that follow   coremedia content server  with coremedia editor and active delivery server for preview  coremedia master live server  server  coremedia slave live server    server  coremedia slave live server    server  coremedia active delivery server     coremedia active delivery server     coremedia active delivery server     coremedia active delivery server     database instance of content server database instance of master live server database instance of live server   database instance of live server   all coremedia components in this setup are monitored with their own watchdog  running on the same machine as the components being monitored  alternatively  the production system and the master live server can be monitored with the high availability software of the operating system   you can install the production system with all its components on a single machine  as we deal with failures on the live system  it is not affected and we only mention it for the sake of completeness  the master live server and the slave live servers   and   are each installed on their own machines  if one machine breaks down  only the installation on that machine is affected  each of the two slave live servers processes the requests of two ads  which ideally should each be installed on their own machines  the ads answers requests from a load balancing system  the latter is not covered here   the database instances ought to have their own separate installations  distribution over several computers is even more secure  security against breakdown of the database must be guaranteed by mechanisms of the database system or operating system  
  this scenario describes a master live server malfunction  this error influences two processes   publication  publications are cancelled as defective  blocked or cannot be carried out because the master live server is not reachable  replication  replication is disabled  the slave live servers stay online and the connected active delivery servers continue to operate with the already replicated content base   possible errors are  
  malfunctions that occur on the slave live server can affect two components   replication  replication is interrupted and the content of the slave live server becomes out dated depending on the publication activity of the content server  after restart the slave live server continues replication at precisely the point where it was interrupted and will only go online when its content is up to date  active delivery servers  requests which lead to server inquiries can block active delivery servers  a slave live server failure forces all logged on active delivery servers to shutdown   
  a failure in the active delivery server directly affects web page generation with jsps  this applies to non cachable content as well as cachable content generated for the first time  
  the following sub sections explain how to     install replication live servers    restore a replication live server database from a replication live server database backup   restore a replication live server database from a master live server database backup   uninstall replication live servers  
  the database content of slave live servers is exchangeable  i e  it is possible to restore the database of one slave live server with the database content of another slave live server  complete replication of the master live server takes far longer for huge databases than restoring a database with a backup  on average the replication process creates      documents per second in the repository  depending on the document size  therefore   execute regular database backups of a slave live server restore the slave live server database with a backup   note that content server  master live server and slave live server databases stand in a fixed temporal order  the state of the content server must be younger than the state of the master live server  the state of the master live server must be younger than the state of the slave live server  backups must follow this order  therefore     create backups in the order slave live server  master live server  content server   the following section explains how to restore the database in detail  
  the master live server has no information about the connected slave live servers  a slave live server can simply be stopped and de installed  
  if you must restore the master live server database with a backup  you also have to restore all slave live servers databases  proceed as follows  stop the master live server using  cm contentserver stop     the replication on all slave live servers stops automatically  but the servers remain online     restore the master live server database with a backup  restart the master live server with  cm contentserver start     the slave live servers now log on again to the master live server  discover that the state of the master live server database is older than their own state and stop replication  but remain online  to synchronize the databases you can apply the following strategy      stop the first half set of the slave live servers one by one with cm contentserver stop and restore  the databases with a slave live server backup which is older than the master live server backup  start the slave live servers with  cm contentserver start continue at step   for the second half set of the slave live servers    
  if you are a skilled administrator  you do not need to create backups from slave live servers  instead  you can use a backup from the master live server  however this procedure requires that you execute some sql statements  to restore a slave live server database from a master live server backup you have to do the following  stop the slave live servers  if the database does not allow to take online backups ensure that all publications are finished and that the last publication was successful  freeze the content of the master live server  i e  no new publications are allowed  if possible  stop the master live server  create a backup of the master live server database with the database backup tool  if the passwords on the master live server are encrypted with cm encryptpasswords  the rijndael key of the master live server in the file  install dir etc keys  databasename   dbuser  rijndael has to be copied to the respective directory on the slave live servers   databasename  and  dbuser  have to be adjusted to the appropriate values of the slave live server database   if the directory does not exist on the slave live servers  it has to be created  if stopped  start the master live server  you may continue to start publications again  delete the full slave live server database schema  if existent  restore the database of the slave live servers with the backup  on the slave live server  fetch the last changelog entry with the following sql statement and note the values of  sequenceno  and  idtag    select   from changelog where sequenceno    select max sequenceno   from changelog      on the slave live server  adjust the replicator settings with the following sql statement  replace  sequenceno  and  idtag  with the values obtained above   insert into system  property  content  values   replicator remote      sequenceno     insert into system  property  content  values   replicator local      sequenceno     insert into system  property  content  values   replicator tag      idtag         remove the content of the named license tracking table      delete from cmlicenses     set the proper server type   update system set content  live  where property   repository server type  and content  publication   as a result you must see  updated   rows     restart the slave live server   
  uncomment the  then successor  alldocumentsdone    line and comment out the  then successor  finish    line in the if task  uncomment the tasks following this if task  you can insert the publication workflow  that you want to start in the attribute subprocess of the forksubprocess task  see the workflow developer manual for details   
  to remove a document lock click on the appropriate  remove lock  button  members of the administrator group can also unlock the documents of other users  this is useful if an application has not unlocked an opened document  for example because the application has crashed  normally  it is not necessary to unlock a document manually  
  for  coremediahome    host  and  port  you have to insert the appropriate values  
  the program cm sql is used to access the databases of coremedia servers manually  this program should only be used by those with precise knowledge of the sql query language as well as of the table structure of the coremedia system  table contents can be displayed or manipulated with it  
  if there is no windows environment active  unix  no display variable set   a command line prompt appears which allows sql commands to be entered  
  keep in mind that you have to terminate a sql statement on the command line with a semicolon but in the graphical interface a semicolon is not allowed as a terminator of the statement  
  the utility program transform transforms an xml file by means of an xsl file  the usage is   cm transform  xml  url   xsl  url   out  file   mode  pretty   tidy   normal   the parameters have the following meaning  
  the utility program validate validates a given xml file    the usage is   cm validate   e   file  
  the watchdog is installed with the server  the workflow server and the importer  the following actions can be executed with the watchdog     components of the coremedia system can be monitored for functioning    components can be locally stopped and or restarted    depending on the state of the system  further actions can be triggered   the watchdog is delivered in two versions     watchdog      the watchdog is an independent monitoring process which is used to test regularly whether components are functioning and  in case of error  to restart them     probedog      the probedog is a process for one time checking of the status of a component  this variant is used with integration of the coremedia system in a high availability cluster  the probedog can be used as a diagnostic tool for the momentary status during operation  the probedog delivers a returncode which can be evaluated by a shell script    
  an administrator configures the watchdog in the watchdog xml file  the watchdog executes actions to check the watched components and executes further actions depending on the check results  the watched components  the actions and the mapping from actions to actions are described by xml elements  the mapping from actions to actions is defined by  edge   tags     the general xml file structure is as follows      watchdog       component        anactionelement         edge         component       component        anactionelement         edge         component       watchdog     anactionelement  is a place holder for one of several possible action elements   component    anactionelement   and  edge   can occur multiple times    in the configuration file  components are linked with actions  the following code example shows a watchdog xml file  
  for each watched component you need a  component  element in the watchdog xml file  the element has the following attributes  
  an edge connects two actions within a component  depending on the result code of the first action  the edges and actions form a graph  the watchdog process walks through the actions and edges in the graph  edges are defined with  edge   elements in  component  elements after action elements   edges are configured with the following attributes  
  this section explains a simple watchdog xml file configuration  the file begins with the xml and document type declarations     xml version       encoding  iso               doctype watchdog system    lib xml coremedia watchdog dtd       i e  the dtd for the watchdog xml file with the name coremedia watchdog dtd is located on the local host under the installation directory in the lib xml directory    component name  watchserver  startaction  ws corbaquery       a component called  watchserver  is configured which immediately starts the action  ws corbaquery     serverquery name  ws corbaquery  url  http   localhost       coremedia ior  user  admin  password  admin        the start action ws corbaquery is defined as a serverquery action that requests the coremedia server ior url at  http   localhost       coremedia ior  and logs in with user name  admin  and password  admin     serverquery name  ws corbarequery  url  http   localhost       coremedia ior  user  admin  password  admin          action ws corbarequery is the same type of action with the same attributes  the meaning of this double definition will become clear below in the description of the edges    db name  ws checkdb  propertyfile  corem sql properties        another action to check the database  the file corem sql properties contains the connection parameters for the database     script name  ws restartserver  command  cm capserver restart  timeout      interval       events           this script action executes the coremedia server command cm capserver restart  if the server has not restarted successfully after    seconds  timeout attribute   the result code is     timeout   if the server is restarted four times within     seconds  interval attribute   result code     respanwingtoofast  is returned    script name  ws abort  command  echo watchdog  watch server  abort  timeout            this action prints out an abort message  command attribute   the timeout interval for this message is    seconds  timeout attribute   alternatively you can send an e mail to the adminstrator to inform him about the watchdog termination     now we connect the priviously defined actions with  edge  elements    edge from  ws corbaquery  to  ws corbaquery  code  ok  delay            in the error free case  when the result code is ok  the server is queried every    seconds    edge from  ws corbaquery  to  ws corbaquery  code  no licenses  delay            the same happens  if the result code is  no licenses   because there was no free license to log on to the server    edge from  ws corbaquery  to  ws abort  code  invalid login  delay           if the result code is  invalid login   because the authentication has failed  then the abort action is executed  the administrator must correct the login configuration and restart the watchdog component later    edge from  ws corbaquery  to  ws checkdb  code  error  delay           if ws corbaquery returns an error  the action ws checkdb is invoked immediately without delay  the latter action checks whether there is a database error  as the result code  error  is the default code  this action is also invoked for all the result codes for which no  edge  element is configured    edge from  ws checkdb  to  ws corbarequery  code  ok  delay           if the database check results in no error  the action ws corbarequery is called to check the server again  in this way  a possibly unnecessary restart of the server can be avoided  remember that ws checkdb was called as a reaction to an error from ws corbaquery  if the reason for this error was a database problem  the server will continue to operate without restart as soon as the database is online again  the server is restarted only if the database is ok and a following check on the server fails again    edge from  ws checkdb  to  ws checkdb  code  error  delay            the database is checked every    seconds as long as the database returns an error result  as the result code  error  is the default code  this action is also invoked for all the result codes for which no  edge  element is configured    edge from  ws checkdb  to  ws abort  code  no jdbc driver  delay           if the database check fails due to a missing jdbc driver  the abort action is invoked without delay  the administrator must correct the driver configuration and restart the watchdog component later    edge from  ws corbarequery  to  ws corbaquery  code  ok  delay            if the server check results in no error  the error free state is reached again with the action ws corbaquery being called with    seconds delay    edge from  ws corbarequery  to  ws corbaquery  code  no licenses  delay            the error free state is also reached with    seconds delay when there are no free licenses to log on to the server    edge from  ws corbarequery  to  ws abort  code  invalid login  delay           if the result code is  invalid login   because the authentication has failed  the abort action is invoked without delay  the administrator must correct the login configuration and restart the watchdog component later    edge from  ws corbarequery  to  ws restartserver  code  error  delay           if the second server check yields an error again  the action  ws restartserver  is invoked to restart the server  at this point the database works correct and there seems to be an internal server error  we hope to solve with a server restart  as the result code  error  is the default code  this action is also invoked for all the result codes for which no  edge  element is configured    edge from  ws restartserver  to  ws corbaquery  code  ok  delay            if the server was restarted successfully  the error free state is reached again with the action ws corbaquery being called with    seconds delay     edge from  ws restartserver  to  ws abort  code  error  delay           if the server restart has failed   the abort action is invoked without delay  the administrator must analyse the reason  why the server fails to start and restart the watchdog component  as the result code  error  is the default code  this action is also invoked for all the result codes for which no  edge  element is configured    edge from  ws restartserver  to  ws abort  code  respawning too fast  delay           if the server is restarted more than three times in     seconds  the abort action is invoked without delay  the administrator must analyse the reason  why the server fails to start and restart the watchdog component later     component  
  the coremedia active delivery server serves to create web pages  with its flexible template technology it allows to create any export format  xml  wap  pdf  etc      the creation of pages is done by accessing a java api with the help of jsp templates  see developer s manual   the templates determine the appearance of a web page in connection with the content from the coremedia system   modes of operation  three different types of operation of the active delivery server are possible     standalone operation  since most servlet containers already contain a complete web server  they can also process http requests directly beside jsp servlet execution      embedded operation  the coremedia active delivery server can be embedded in another web server  e g  apache  and only deliver the dynamic pages not yet in temporary storage      offline operation  the coremedia active delivery server can generate pages independently and  for example  stores these pages in the file system  from where they can be processed further by means of an independent mechanism  in this way  the generator itself receives no http requests     deployment  in coremedia sci the active delivery server is packaged in the form of a servlet     conforming web application  http   java sun com products servlet   running in servlet containers of various manufacturers  which means  that    an active delivery server instance is a self contained web application in a directory or  war file  web archive       all jar files go to the web inf lib directory    all configuration and log files go to the web inf  directory    no system properties need to be set    the container s classpath need not be manipulated     the new setup causes the following improvements     it is possible to run multiple active delivery server instances in the same container with diverging configurations  connected to different servers etc    the log configuration of one context does not interfere with others  especially  you need not choose different log facilities for each context    deployment to any standards compliant servlet container follows the standard procedures  documented in the container s manual     a few open issues remain     mostly due to filesystem accesses the coremedia active delivery server cannot be deployed as a  war file unless the container internally explodes the  war file such as tomcat and resin do  in other cases  you must deploy the context as a directory     the active delivery server web application is organized in the following directory tree  
  for each coremedia active delivery server the url of the content server s ior must be specified in the file capclient properties  for this  the property cap client server ior url must have the value http    server   port  coremedia ior   server  refers to the name of the computer where the server runs  if server and active delivery server are running on the same computer   localhost  can be used  for  port  you have to use the respective port number          as default  this port number must be equal to the respective value of cap server http port in the capserver properties file of the server  
  the active delivery server logs configuration into var logs httpd log   
  since a servlet container is not able to process an unlimited number of queries  in some implementations the number of open connections must be limited by so called thread pools     
  the optimal configuration of the tomcat servlet container depends on your configuration and project demands  a reasonable configuration would be as follows   configure the apache webserver with a high number of clients e g       which transfers requests of pages not in the cache to the servlet container with the help of the mod proxy plugin  configure a load limiting threadpool for the http protocol on port      in the file conf server xml   
  the rewrite module checks the availability of the requested file and  in the negative case  passes the request on to the active delivery server   the option  multiviews   http   httpd apache org docs mod core html options  must not be activated  since otherwise the web server also delivers non valid pages from the cache   web server plugin instead of mod proxy  a similar configuration based on a container specific web server plugin such as mod jk  tomcat  or mod caucho  resin  instead of on the proxy module is also possible  only slightly more complicated   since these web server plugins do not allow conditional processing depending on the coremedia cache  a preliminary rewrite rule must modify the uri accordingly so as to distinguish the cases  file available in cache  and  file not available   for this purpose  two different prefixes are chosen   coremedia  like the servlet context  and  for example   coremedia  the directory  context  generator must now be linked to the web server as  docroot coremedia  the servlet container must be attached to the web server under  coremedia generator  the externally visible uris must have the prefix  coremedia  this must be configured in config bsh  generator setresourceuriprefix   coremedia     the rewrite rule must have the following logic   if the requested file  coremedia xx is not available  then the uri must be rewritten to  coremedia generator xx and  on processing  passed through to the servlet container module   
  for loopback connections  the servlet container must also have an http port configured  the loopback uri in config bsh must point to the http port  while apache connects to the port for the container specific protocol  ajp         the following figure explains the configuration  
  to connect the iis with the tomcat servlet container proceed as follows   use the tomcat iis howto  http   jakarta apache org tomcat tomcat     doc jk  jk iishowto html  apply the following changes to the  coremediainstall  jakarta tomcat  conf server xml file according to the configuration of the isapi redirect dll described in the tomcat iis howto     activate the ajp connector e g    ajp  connector port        address                
  https is a variant of http which enables encrypted data transmission between server and client  it is therefore recommended to create the servlet container client  webdav  web editor  connection via https  
  in addition to the creation of a key for https communication some entries must be made in certain configuration files   servletcontainerhome  stands here for the home directory of the servlet container   entry in  tomcathome  conf server xml  in the file  servletcontainerhome  conf server xml you must insert the following section after the already existing  connector  elements  
  the generator can pre generate the complete content or parts of it in the desired format determined by the templates  for example to burn it onto cd or transfer it to an external web server   for this purpose  it can be configured so that the full transitive envelope  starting from a configurable root  is generated  independent from external requests  on changes to the repository only the affected parts are updated   if it is a non personalised site  high performance delivery by a web server of all content is possible this way  like a static site  the intelligent dependence administration of the generator continually ensures rapid and precise updating of the site  
  the administration pages support the administration of the coremedia sci system  this is a web page from which more jsp pages related to the active delivery server can be reached   
  the start of the active delivery server depends on the installed servlet container  see the respective documentation of the servlet container   for tomcat a compatibility httpd jpif file will be delivered  thus the active delivery server in the tomcat servlet container can be started via   cm httpd start  alternatively to startup sh start  in a windows environment you can optionally launch the coremedia active delivery server from the corresponding menu item     like all coremedia services  the active delivery server is controlled with cm  servicename   start run restart stop status     
  in the following section  the configuration of the coremedia editor via the file editor xml is described  
  in the following sections the meaning of elements and of the corresponding attributes is described  in addition  a short example for the syntax of each element is given  
   locale   child elements  parent elements   editor   you can select the language and country settings which should be used by the coremedia editor with the element  locale   these settings determine the language used in the gui of the coremedia editor  the element needs to be located in editor startup xml  
     attribute   description   language   the language used in the program  at present  there are locales for english   en   and german   de    the locales follow the usage in java util locale    country   country specific settings  at present  there are locales for the united states   us   and germany   de    the locales follow the usage in java util locale   
   preview    child elements   browser    parent elements   editor     
   browser    child elements   parent elements   preview  
   documents    child elements   document    parent elements   editor  
  this element of the xml file designates the configuration of the document window  
   document    child elements   property     tab    parent elements   documents  
  this element of the xml file is used for entering the document type for which the view is defined and the class used for the view  
   property    child elements   varies   parent elements   document    tab  
  this element of the xml file is used for configuring some features of a property in the document window  
   explorer    child elements   treesorter     treefilter     filter     tabledefinition   parent elements   editor  
  the explorer configuration which can be choosen via the menu item view display is defined within this element of the xml file  
   resourcechooser    child elements   treesorter     treefilter     filter     tabledefinition   parent elements   editor   
  within this element of the xml file  the dialog for selecting an internal link is configured  the element has no attributes  
   query    child elements   tabledefinition   parent elements   editor  
  within this element of the xml file  the document view in the query window is configured  the element has no attributes  
  all necessary security updates for approved versions  recommended by vendors of infrastructure components  such as os  java  database      are supported by coremedia automatically  this does not apply to feature updates   
   filter    child elements   predicate   parent elements   explorer    resourcechooser    
   tabledefinition    child elements   columndefinition    parent elements   explorer    query    resourcechooser    workflow  
   displaymap    child elements    parent elements  columndefinition  
  blwithin this element of the xml file  the columns of the document table view are configured   
   columndefinition    child elements   displaymap     comparator     renderer     nameddocumentversioncomparator    parent elements   tabledefinition  
  this element of the xml file is used for entering which field from which document type is displayed in a column of the document view  
  most objects returned by the unified api support object serialization as per java io serializable for persistent storage  while you should normally keep all persistent cms data in the content and workflow repositories  serialization might be appropriate for short term storage  for example when maintaining conversational state in a web application   serialization itself requires no additional setup  mutable objects will write their identity to the objectoutputstream  while values write their value  one piece of information is lost  however  the connection is not written to the stream  this is because a connection maintains a complex dynamic state and because it keeps security credentials that should not be externally accessible   therefore  you have to provide a connection when deserializing a unified api object  this is done by registering a connection at the class defaultconnection  you can register a connection for the entire jvm  however  we recommend that you register a connection specifically for the thread that deserializes the objects  for an example  see the following code fragment     capconnection old   defaultconnection setlocal myconnection     try       object   objectinputstream readobject        finally       defaultconnection set old        here a specific connection myconnection is set before accessing the stream  by resetting the connection after deserializing  we avoid unexpected side effects to calling code   besides the connection  also its sessions  its repositories  and its services cannot be serialized  moreover  blob objects do not support serialization  while blobs provide a value semantics  storing them in the object stream would be undesirable due to their size  so that a write of a blob normally indicates an error  if you want to serialize blobs  you can do it manually by converting the blob to a byte array during a writeobject method  
  serialization is not recommended for long term storage  future cms releases might make incompatible changes to the stream format  
   documenttypes    child elements   documenttype     predicate     comparator     parent elements   editor  
  this element of the xml file is used to combine the elements for the document types configuration    the element has no attributes  if no  documenttypes  element is defined  all document types for which the user has the appropriate rights will be shown  except of abstract document types  and will be arranged alphabetically  
  within this element of the xml file  the configuration of the folder view is defined  the element has no attributes  if an  explorer  element contains no  treefilter  element  the folders for which the user has no read rights are left out  in order to activate a filter class  an  treefilter  element with the appropriate  predicate  element must occur  
   treefilter    child elements   predicate   parent elements   explorer     resourcechooser  
  this element of the xml file is used for sorting items   the document types shown when creating a new document in the coremedia editor when used in  documenttypes   the folders shown in the folder view when used in  treesorter   the elements shown in a column of the document view  when used in  columndefinition   the workflow menu entries when used in  processes   the worklist when used in  columndefinition  of  tabledefinition  of  workflow    
   comparator    child elements   varies   parent elements   documenttypes    columndefinition    treesorter    processes    nameddocumentversioncomparator  
  within this element is defined  how the folder view is sorted  the element has no attributes  if an  explorer  element contains no  treesorter  element  the folders are sorted in alphabetic order  in order to activate an own comparator class  a  treesorter  element must occur  
   treesorter    child elements   comparator   parent elements   explorer    resourcechooser   
  this element of the xml file is used to specify  a class which implements the interface propertymodelfactory and which should be used in the coremedia editor  here an own propertymodelfactoryclass can be programmed  see the api documentation  and  invoked by the attribute class     
   propertymodelfactory    child elements   varies   parent elements   editor  
   validator    child elements   varies   parent elements   propertytype  
  this element is used for setting validator classes which tests  when a document is checked in  whether certain conditions about the content of the document are fulfilled  it is possible to hand over parameters to the class via attributes of the element  
   initializer    child elements   varies   parent elements   propertytype  
  initializer fill the fields of a newly created document with default values  with the element a class for initializing can be provided  parameters can be handed to the class via attributes of the element  see the code example above    
   documenttype    child elements   propertytype    parent elements   documenttypes    predicate  
  this element of the xml file designates the following features    the documents usable in the editor via the parent element  predicate    the initiators and validators which should be used with document fields via the sub element  propertytype     the element has one attributes  if no  documenttype  element is defined  all document types will be shown  except of abstract document types  and will be arranged alphabetically   
   propertytype    child elements   validator     initializer     modelclass    parent elements   documenttype  
  this element is used to provide initializers  or initial values  and validators  or valid pattern  for the properties of the document defined in  documenttype   
   propertylanguageresolverfactory    child elements   parent elements   editor  
  this element is used to configure a class which determines the language used in a property  this information is used for the spellchecker for the default class hox corem editor defaultpropertylanguageresolverfactory the additional attributes language and country can be used to override the settings of the element locale  
   spellchecker   child elements   maindictionary    customdictionary  parent elements   editor  
       attribute   description   enabled   this attribute determines whether the spellchecker should be used   true   or should be disabled   false    as default  false  is used  
   maindictionary    child elements   parent elements   spellchecker  
  this element is used to determine the class used for integrating an external dictionary in the spellchecker  as a default  the microsoft word dictionary will be used  please keep in mind  that it is not possible to write from coremedia sci to the word user dictionary  if the word user dictionary should be used for spellchecking   you need to activate this option in word itself  please refer to the word documentation   
   customdictionary    child elements    parent elements   spellchecker  
  this element is used to determine the class used for integrating a customized dictionary in the spellchecker  the entries of this dictionary will be used for spellchecking and for suggestions  
   remotecontrol    child elements   parent elements   editor  
     attribute   description   enabled   this attribute controls whether the coremedia editor can be remote controlled   true   or not   false    default is  false     port   this attribute determines the port which will be used for the remote requests  default is          
   workflow    child elements   tabledefinition   parent elements   editor  
  this element is used to define  which information should be shown in the columns of the workflow list at the left side of the workflow window  
   tab    child elements   property    parent elements   document  
  this element of the dtd is used to define different tabs for the document view  the properties of a document shown in a tab are configured using the sub element  property    tab  can only be applied  when the view class tabbeddocumentview is used  
  using these elements  the appearance of the  worklist in the workflow window can be configured  
  using these elements  the configuration of the spellchecker can be done  
  using these elements  some general features can be configured  
  using these elements  for all windows of the coremedia editor  except the workflow window  using table views or tree views  it can be configured which properties and how the properties should be shown  the following windows can be configured   explorer window  element  explorer   query window  element  query   resource chooser window  element  resourcechooser   
  using these elements  the appearance of the document window of the coremedia editor can be configured  
  using these elements  the document types of the coremedia sci can be configured      the documents usable in the editor  creating by the menu file new resource       copy  move etc   via the sub element  predicate     the sorting of the documenttypes shown in the query view  the resource chooser and in the menu file new resource     via the sub element  comparator     the initiators and validators which should be used with document fields via the sub element  propertytype    
   predicate   see the description in  configuring document types  in this chapter  in contrast to this description  the sub element  documenttype  can not be used here   
   processes    child elements   process     predicate     comparator    parent elements   editor  
  this element is used to group the elements which define the view of the workflow variables   
   process    child elements   view     task     workflowstartup    parent elements   processes  
  preview based editing is a comfortable tool to edit websites that are generated with the coremedia active delivery server or with the content application engine  to use this feature  it is necessary to enrich the website templates with context information about the related coremedia resources  so that the generated web pages  know  about their corresponding documents in the content repository  the editor of the website triggers access to the editing functions via context menus in the web browser  if preview based editing is enabled you get a mouseover hover effect on those elements of the preview website that have a context menu  there are several predefined actions for opening the corresponding resources in the coremedia editors and for manipulating linklists  these predefined menu items are displayed in the following table  
  the picture shows the publishing preview of an example web page  the first teaser is highlighted by a blue hovereffect  as the mouse cursor hovers over it  the user opened a pop up menu with a right mouse click  it is now possible to open the rendered document in the coremedia editor for editing  to show it in the explorer window  to edit the containing element  the current page document    or to get the document information for the shakira article   given a working web site that was built using the cae framework  the next sections show how preview based editing can be added to the web site  preview based editing for the cae additionally allows you to create new custom commands for the context menus  described here also   the coremedia demo is a good example of how to extend preview based editing with custom commands  you should install the demo and refer to the provided sources as best practices  
  let us take a look at the renamepageaction  the configuration looks like the following    bean id  renamepageaction  parent  action  singleton  false      property name  name  value  navi rename       property name  command      bean class  com coremedia demo     editing    commands renamepagecommand     parent  contextinfocommand  singleton  false        property    bean   the main difference between a command opening a popup form and a  normal  command is the implementation of isready    when all information for a command is available isready   returns true  this is also assumed as default  with form commands this is different  as the user has to provide more information  in our case isready   returns false  if the label for the structure bean is null   public boolean isready           return super isready      label  null     when isready   returns false the template for the attached action as defined faces navigation xml is looked up  as did see above in the template renamepage jsp the value of the bean is set by the user via an inputtext field    h inputtext id  newlabel  styleclass  text                value    renamepageaction command label       our action shall only be available  if we are on beans of type structure  this is ensured in the isavailable   method of com coremedia demo     editing commands pagecommand   public boolean isavailable       return getcontentbean   instanceof structure     the renamepagecommmand  uses the default implementation of isenabled   which returns true  always    the business logic of the comand takes the first document in its linklist  sheet  and changes the property named  labels   this is done in the internalexecute    method   protected boolean internalexecute        content sheetcontent   getcontent   getlink  sheet       try     stringgroupbuilder labelsvalue      new stringgroupbuilder sheetcontent   labels      labelsvalue setstring getlanguagesymbol    getlabel        sheetcontent checkout      sheetcontent set  labels   labelsvalue getmarkup       getcontentrepository   getconnection      getsession   flush      sheetcontent checkin      return true      catch  exception e                 
   contextinfocommand get    description tag attribute   getcontainer    getcontainerbean   container    e g  a page  container getdocumentposition   position of content in  linklist of container documentposition getproperty   name of property in  container property   getcontent    getcontentbean   content resource  
  how is determined which menu items are displayed in a context menu and which are enabled or disabled  these questions are answered by the commands behaviour methods  the next table provides information about these methods  
   contextinfo is    description isavailable   determines  if a command is displayed at all in a menu  isenabled   determines  if a command is enabled or disabled  disabled menu items are usually displayed in dark grey and cannot be selected  isenablednessvolatile   return whether the enabledness of this command may change at any time  isready   determine if all data needed by the command is available  this flag should esspecially return false  if the user has to provide more information via a form  in this case you have to provide a form template and link it to the action in faces navigation xml  
  let us look at the implementation of the behaviour flags for the movetopaction  the isavailable   method is implemented in com coremedia easyedit commands modifylinklistcommand and looks like this   public boolean isavailable       return super isavailable         isusersessionactive         getlinklist     null     the call to super checks if a connection to the coremedia server exists  there has to be a user session also  as the linklist can only be changed  if a user is logged in  last but not least it is checked  if the attached contextinfo bean refers to a linklist  only if all three conditions apply does isavailable   return true and the command is included in the menu as menu item    when you provided a contextinfo tag in your templates the isavailable   method will be called for every command with the current contextinfo settings  this makes the method the central place to determine which commands are actually displayed in the context menu  often this depends on the type of the underlying content bean  e g  a content bean of a content type pressrelease may require a totally different context menu than a content bean of type organizationchart  other important dependencies are the access rights of the current user   if the command is available isenabled   checks if it is selectable also   public boolean isenabled       string dirid   getdirection      int index   getdocumentposition      if  index            return false        if  up direction equals dirid            top direction equals dirid       return index      if  down direction equals dirid            bottom direction equals dirid       return index getlinklist   getitems   size        throw new illegalargumentexception                 unknown direction id     dirid                    in movelinkcommand        as the implementation of isenabled   is used for all four move actions  up  down  top  bottom  the result depends on the direction the command was initialized with  in our case dirid was initialized with  top  which is equal to top direction  this property is checked in the first if statement  if the documentposition  stored in variable index  is bigger than zero the command is enabled  this is because a documentposition of zero is already the topmost position and requires no move   you should return false in isavailable   if a menu item shall never appear in a menu  but don t use it to switch of a menu item temporarily  this prevents a menu from changing its size on different situations  for temporary changes use isenabled    an example is the movetopaction  which is usually enabled  but disabled in the case  that the current element already is on top of a list   the isready   method looks like the following   public boolean isready       return super isready      direction  null     while the call to super checks  whether the contextinfo holds a content  the second condition determines  if the direction field was initialized  this field is initialized with one of the four possible directions for moving in a linklist  up  down  top or bottom  for our command it was initialized with  top  as stated in the bean definition in editing actions xml  if direction would not have been initialized  the controller would try to open a popup request to get the information  see following chapter    all steps from above are executed before the actual business logic of the command is executed  this business logic is implemented in the internalexecute    method of a command  in our case you find the implementation in com coremedia easyedit commands modifylinklistcommand    public boolean internalexecute         if   isenabled          return false       content container   getcontainer        try         container checkout          catch  alreadycheckedoutexception acoe          log debug  document is alread checked out                        container getid              ignore           linklist linklist   getlinklist        modifylinklist linklist getitems         container set getproperty                       linklist getpropertyvalue         container checkin        return true       the code checks out the container document and delegates the change of its linklist to modifylinklist   which is implemented in com coremedia easyedit commands movelinkcommand   protected void modifylinklist list linklist        string dirid   getdirection        int fromindex   getdocumentposition        int toindex   up direction equals dirid    fromindex               top direction equals dirid                down direction equals dirid    fromindex                 bottom direction equals dirid    linklist size           if modifylinklistcommand log isdebugenabled            modifylinklistcommand log debug            moving      fromindex          toindex             object item   linklist remove fromindex       linklist add toindex  item        this method removes the document from the linklist and inserts it again at the new position zero  which is the top position   if you created a new command by subclassing com coremedia easyedit commands contextinfocommand and provided your implementations for the above methods you should get a functioning menu item  
  this element is used for the configuration of the variable editors for the process variable view  in the  view  element  and for each task  in the  task  element   
   view    child elements   variable     aggregationvariable    parent elements   process  
  this element is used to group the elements which define the look of the workflow variables of a process  i e  with which editor the variables defined in the workflow xml file should be shown in the workflow window  
  in general  document types will be defined in the development phase of your content model  they are the  backbone  of your coremedia application and therefore are assumed to be stable  nevertheless  new requirements might demand changes in the document model while preserving the existing content  in this chapter you will find a description on how to add and remove document types and attributes to  and from your content model  
   task    child elements   variable     aggregationvariable    parent elements   process  
  deletion of document types is best done with a mixture of server utilities and sql commands  proceed as follows  start a query from the coremedia editor to select all documents of the document type to delete  mark all these documents for deletion  publish all the document  use the cleanrecyclebin utility to remove all the documents from the recycle bin  stop the content management server and the live servers  remove the document types to delete from the document types definition files of all content servers  verify that the table which represents the document type is empty   drop the table which represents the document type from the databases  start the content servers again   
  before you delete document types  make sure that the data is no longer needed   
  this element is used to group the elements which define the look of the variables of a task  i e  with which editor the variables defined in the workflow xml file for the task should be shown in the workflow window  
   workflowstartup    child elements    parent elements   process  
  always make a backup of your data before schema migration  stop the content server when you change document types  the changes take effect not until the content server has been started  choose log level  debug  and check the server log file for the impact of the new document types  
  this element is used to define  how the workflow should be started  i e  how the variables should be filled  
   attribute description id  unique id of the document  attribute is never null  version  version of the document  attribute is never null  isapproved  marker if this version of the document is approved       or not        ispublished  marker if this version of the document is published       or not        editorid  user id of the editor  approverid  user id of the approver  publisherid  user id of the publisher  editiondate  date of the last change  approvaldate  date of the approval  publicationdate  date of the publication  
  now you only need to add the style properties  please refer to the chapter labels and localization  
   variable    child elements   parent elements   view    task  
  this element is used to define with which editor a workflow variable should be shown in the workflow window  
  the primary key of the document type tables consists of the id  and version  columns  there exists a foreign key connection to the resources table via the id  column   the blobdata table  the primary key of the blobdata table consists of the following properties   documentid  id of the document which contains the blob  documentversion  version of the document which contains the blob  propertyname  name of the property which contains the blob   the linklists table  the primary key of the linklists table consists of the following properties   sourcedocument  id of the document which links to the other document  sourceversion  version of the document which links to the other document  propertyname  name of the property which contains the link list  linkindex  position of the link in the link list   
   aggregationvariable    child elements   parent elements   view    task  
  in order to delete properties from document types proceed as follows  stop the content servers  remove the attributes from the document types definition file  delete the property data from the database as described in the following table  
  before you delete properties  make sure that the data is no longer needed  
   property type how to change   intproperty  dateproperty  stringproperty   remove the column of the property from the document type table   e g    remove the attribute source of type stringproperty from the document type article using the following sql statement   alter table article drop column  source  blobproperty   remove the property information from the blobs table  don t delete anything from blobdata  this will be done by the content server  attribute names are only unique for one document type  therefore  you have to check if the property you want to delete belongs to the proper document type   e g   delete the blobproperty named logo from the document type article    delete blobs where propertyname    logo  and documentid    select distinct id  from article where id    documentid    commit  xmlproperty   remove the property information from the texts  table and the links contained in the xmlproperty from the linklists table  don t delete anything from sgmldata or sgmltext  this will be done by the content server  attribute names are only unique for one document type  therefore  you have to check if the property you want to delete belongs to the proper document type   e g   delete the xmlproperty named text from the document type article   delete texts where propertyname    text  and documentid    select distinct id  from article where id    documentid    commit   delete linklists where propertyname    text  and sourcedocument    select distinct id  from article where id    sourcedocument    commit  linklistproperty   remove the property information from the linklists  table  attribute names are only unique for one document type  therefore  you have to check if the property you want to delete belongs to the proper document type   e g   delete the linklistproperty named relateddocuments from the document type article   delete linklists where propertyname    relateddocuments  and sourcedocument    select distinct id  from article where id    sourcedocument    commit   
  this element is used to define with which editor a workflow aggregation variable should be shown in the workflow window  
   command  id  description copyaction copy list element from list   cutlinkaction cut list element from list  loginaction login to coremedia  user has to provide name  password and domain  logoutaction logout  movebottomaction move list entry to bottom of list  movedownaction move list element down in list  movetopaction move list element to top of list  moveupaction move list entry up in list  opencontaineraction  open containter resource in editor opendocumentaction open document in editor  opendocumentviewaction open document in editor overview  openinfoaction open info window in editor  pastelinkaction paste list element to list  removelinkaction remove list entry from list  separator this is not an action  but a seperator line for the menu  separator lines will be displayed between the menu items  but no two separators will follow each other   
   tabledefinition   see the description in  configuring windows with table views   
  it is possible to use either the coremedia editor or the webeditor for preview based editing  the following picture shows a context menu displayed on a website  
  simplefailovercontentservice  this is a pseudo contentservice which delegates all requests to one or more underlying contentservices  in case that one of these contentservices fails  e g  a portal application is currently not available  it will switch to the next one using the  round robin  algorithm  of course  all contentservices are typically configured for delivering exactly the same content  you may configure it by this property  
  errorpagescontentservice  this is a pseudo contentservice which delegates its requests to an underlying contentservice  in case of error  it returns   depending on the concrete error   a special error page from the local filesystem  an error page may be defined for each errorcode by creating a file named   errorcode  xml  e g  cap portal        xml  or by creating a file named default xml which is the default error page  configure this contentservice by defining these properties  
   comparator   see the description in the section  configuring document types   
   predicate   see the description in the section  configuring document types   
  ssl secured portal application  for an ssl secured portal application you must add the ssl certificate of the cae portal application to the ones trusted by portal server you can do this by adding the ssl certificate to the ones trusted by the java virtual machine in the file  jre  lib security cacerts  with the java tool keytool  the sap enterprise portal will use the ssl certificates of the jvm if you add the following java parameter with the sap j ee engine config tool and restart the cluster afterwards   djava protocol handler pkgs com sun net ssl internal www protocol  note  that the ssl certificate must match the hostname of the portal application url  
   renderer    child elements   varies   parent elements   columndefinition  
   bundle    child elements   parent elements    editor  
   nameddocumentversioncomparator    child elements   comparator   parent elements   columndefinition  
  this element of the xml file is used to define custom comparators  it defines if a comparator should be used on client or server side  if you combine a client side comparator with a server side filter   the attribute combinesortingandfiltering of the explorer element must be  false     be aware that combined client and server filtering and sorting may slow down the server dramatically   
  initializer fill the fields of a newly created document with default values  thus an initializer is defined in the element  propertytype  of the xml datei  a genericinitializer is provided which fills string  integer  date and sgmltext fields with a default value  in addition an own initializer class can be used which must be declared via the element  initializer   own initializers can be written  which must implement the interface hox corem editor initialization initializer  
  to configure the coremedia editor for your specific needs the editor api is available  you can use it to program your own editor  filter or validator classes  to keep the effort for the user as small as possible  the coremedia editor is delivered with a series of classes which already enable configuration  these delivered classes are described in the following sections   
     default predicate   filtered objects   description   genericdocumenttypepredicate   document types   hox corem editor proxy documenttypemodel   the default predicate filters the document types which are passed to the predicate class and sorts the remaining document types in alphabetic order  own predicates must implement the interface hox util predicate  
  column classes for user defined document properties     class   field type   genericcolumn   default class when no other class is defined  is not sorted    integercolumn  stringcolumn  datecolumn   basic properties  sorted according to value    sgmltextcolumn   sgmltextproperty  is not sorted    blobcolumn   blobproperty  sorted according to the size of the blob    imagecolumn   blobproperty with mime type image  sorted according to size    linklistcolumn   linklistproperty  sorted according to document type  
  column classes define how content is displayed in columns  a distinction can be made between column classes for different content   predefined content     these classes display the content of predefined properties of a document e g  documenttypecolumn  documentversioncolumn  resourcedisplacementcolumn and pathcolumn   different fields according to the document type    these classes display the content of document properties which are filled by the user  the column classes are configured by means of multiple child elements   displaymap document  document type  property  property name     the type     specifies a field which should be shown for all document types for which no field is explicitly given  content for workflows    these column classes display predefined content of workflows  the classes are shown in the following table   alternatively  a renderer can be set for each column class  the renderer carries out the display itself  for this purpose  an element   renderer class  renderer class     must be embedded in the columndefinition element  the renderer must be a subclass of the class hox corem editor toolkit columnrenderer layoutcolumnrenderer  see the api documentation     the standardized column classes  intcolumn  stringcolumn  datecolumn       as well as documenttypecolumn  documentversioncolumn  resourcedisplacementcolumn and pathcolumn define which contents are held in the columns  sort criteria can be chosen by a click on the column title bar  indicating the content type  another click reverses the sort order  
  column classes for predefined columns     class   field type   documenttypecolumn   type of the document  exists implicitly in every document  sorted according to document type    documentversioncolumn   version of the document  exists implicitly in every document     resourcedisplacementcolumn   state of the document  exists implicitly in every document  sorted according to the importance    pathcolumn   path of the document  exists implicitly in every document  
      initializer    description    genericinitializer    this initializer fills string  integer  date and sgmltext fields with a default value  the initializer is called implicitly  if the attribut initialvalue of the element   propertytype  is used  i e  the initializer is not explicitly specified via the attribute class  thus it is not allowed to use this initializer with the attribut class  if you want to initialize a date field  you can use the following date formats      yyyy mm dd    an iso     format according to java text simpledateformat     yyyy mm ddthh mm ss    an iso     format according to java text simpledateformat     dd mm yyyy hh mm    this format is locale dependent  it only works with a german locale     linklistinitializer    this initializer fills a linklist field with a document  either the document defined via the path attribute is used or   if you omit the document and enter only the folder   the first document with the appropriate document type found in the folder given via the attribute path is used    example     initializer class  linklistinitializer  path   default       
  document view classes define the look of the document window of the coremedia editor  you can write own document view classes  which must be a subclass of hox corem editor toolkit document abstractdocumentview or hox corem editor generic genericdocumentview  the following classes are predefined  
     class   description   tabbeddocumentview   the class hox corem editor generic tabbeddocumentview defines a tabbed document view with different tabs  image          a shows an example of a tabbed view  the tabs can be configured using the subelement  tab   using the attribute name  a label can be attached to the tab  the properties of a document belonging to a tab can be configured using  property  as a subelement of  tab   for an example  see the description of the element  tab   the position of the tabs can be configured using the attribute tabplacement of the element  document   the values top  bottom  left and right are allowed  
     default comparator   sorted objects   description   genericdocumenttypecomparator   document types   hox corem editor proxy documenttypemodel   the default comparator sorts the document types in alphabetic order  own comparators must implement the interface java util comparator  
  a comparator is used for sorting objects  there are different comparators for sorting different object types   document types shown in the file new resource menu in the coremedia editor  columns folders shown in the folder view of the coremedia editor  workflows shown in the file new workflow menu in the coremedia editor   comparators for sorting document types 
     class   description   genericpropertylayoutcolumnrenderer   combines the imagelayoutcolumnrenderer  linklistpropertylayoutcolumnrenderer  sgmltextpropertylayoutcolumnrenderer and stringpropertylayoutcolumnrenderer    stringpropertylayoutcolumnrenderer   usable for string  integer  boolean and date fields  displays plain text    sgmltextpropertylayoutcolumnrenderer   usable for sgmltext fields  with the attribute displaylength  you can define the maximum length of the text to display  default is         blobpropertylayoutcolumnrenderer   usable for blobproperty fields  the size of the blob in kb is shown    imagelayoutcolumnrenderer   usable for images of type  jpeg and  gif up to   kb size  the width and height  in pixel  of the image can be defined with the attributes width and height    linklistpropertylayoutcolumnrenderer   usable for linklist fields  two modi can be applied  using the attribute displaysummary   true   the default  will only show the number of links contained in the linklist field   false  will display one or more links included in the field  you can define the maximum number of shown links using the attribute norenderedlinks  default is       if you choose      all links will be shown    displacementcolumnrenderer   shows the displacement status of a document    impliedpropertylayoutcolumnrenderer   usable for implied properties of the document  see the table in this chapter above   display the property as plain text  and optionaly a state or document type icon using the attributes displaystateicon and displaytypeicon respectively  if you choose both icons to show  only the state icon will be displayed   
  renderer classes can be used to display the content of document fields in columns of the explorer window  query window and resource chooser window  the predefined renderers are listed in the next table  for own renderer classes  you need to extent the class hox corem editor toolkit table columnrenderer layoutcolumnrenderer  
   name type required description endpoint string yes an url pointing to the portal application s  httpcontentservice servlet  which is typically reachable at http    host   port   context  httpcontentservice authentication basicauthentication no authentication informations which will be sent to the portal application  currently only http basic authentication is supported   
   name type required description contentservices list of contentservices yes on or more contentservice instances where request are delegated to   
   name type required description contentservice contentservice yes a contentservice instance where all requests are delegated to  errorpagespath string yes path to a directory which holds the error pages   
      class    description    datepickeditor    a graphical date selector     jtextfielddateeditor    simple text field  this is the default editor  using the attribute format  the date format can be defined  the default is  dd mm yyyy hh mm      comboboxdateeditor    this editor is used to configure predefined dates which can be choosen from a combo box  if this class is used  the attribute fixedchoice can be added to the  property  element   false  will allow you to type own entries in the combo box   true  is default and will allow only the predefined items two different sub elements of  property  can be choosen       historyitem        the attribute value can be used to define a specific date  the date format of these entries can be configured with the attribut format of the element  property    with default  dd mm yyyy hh mm   all letters defined in the class java text simpledateformat can be used to define the format     example     property name  date  editorclass  comboboxdateeditor  format  dd mm yyyy        historyitem value                    property    thus              is shown in the selection list of the combo box            functionitem       the attribute class can be used to define some variable dates which depends on the actual date  the attribute label  optional  defines the name of the function item  to do so  the following classes can be used      notapplicable  no date is shown        tomorrow  the date of tomorrow is choosen        today  the date of today is choosen        nextweek  the date of today in a week is choosen        nextmonth  the date of today in a month is choosen        nextyear  the date of today in a year is choosen        endofmonth  the date of the end of this month is choosen        endofyear  the date of the end of this year is choosen       the whole qualified name of the class must be used  see example below   own classes can be written  which must implement the interface hox gui editor combobox functionitem     example     property name  date  editorclass  comboboxdateeditor  format  dd mm yyyy        functionitem class  hox corem editor toolkit property items tomorrow        property    thus  tomorrow  is shown in the combo box  if you choose this entry  the date of tomorrow is shown in the format defined in  property      
  the databases have only been tested in coremedia compliant operating environments and therefore are only approved on these platforms   the following databases are supported for the recommended sci  platforms  
  it is strongly recommended to use a utf   enabled database for your coremedia cms repository  
     class   description   jcheckboxbooleaneditor   a check box   true  is shown as checked   false  as unchecked     comboboxdocumenttypeeditor   a combo box with the allowed document types    groupchoosereditor   a window which shows the available group    resourcechoosereditor   a resource chooser window  like the one in the editor window    userchoosereditor   a window which shows the available users     
  using the file editor xml  you can configure the document overview  i e  the tabular listing of documents  in four windows   the explorer view in the explorer window  the query view in the query window  the document overview in the selection window for internal links to resources  the workflows in the workflow list   configuration is the same for all four windows  however  there is the additional possibility in the main window of filtering the documents in the document window   the example configuration described here for the query window can simply be used for the other windows  only the enclosing element has to be changed  query  explorer  resourcechooser  search and workflow are possible    creating a query view in the query window  you want to create a query view in the query window which displays the following information   the document type the document name the content of a structured text field  these column definitions are created within the  query  and  tabledefinition  tags  note that the document types and fields given in the following examples do not necessarily exist in your coremedia installation   
  creating filters  you want to make filters for the following documents available via the menu point view filter   published documents deleted documents  enter the following lines in the editor xml file   
  in the following examples  the attribut name is used in the  columndefinition  element      definition of the table column for the document type       the column should have the name  type   the minimum width should be    pixels and should scale with the width of the window  enter the following lines in editor xml     
  a workflow definition includes actions in several places  for example as entry and exit actions of user tasks  and in automated tasks  specific kinds of action are the so called remote client actions  while normally actions are executed on the workflow server  a remote client action is invoked on the user s computer   remote client actions can be used to invoke functionality that is not easily emulated using customized workflow variable editors  for example  a remote client action might open a publication window  it might present a modal dialog  or it might start a native application installed on the user s computer   a remote client action can only execute when a session is open from the client to the workflow server  similar to receiving an event  the session is informed that a remote client action should be executed  since the server needs to know which session to inform  this is only possible for task entry or exit actions  the session that accepted or completed the task is recorded and used for the following remote client action   for a remote call  the name and parameters of the action are passed to the client  there  the call is presented to each registered remoteactionhandler in turn  if a remoteactionhandler cannot handle the call  it returns null instead of an action result  and the next handler will be invoked  the unified api includes a remote action handler for all predefined workflow actions  additional handlers for custom remote client actions can be added using workflowrepository addremoteactionhandler  see the javadoc for details   remote actions that are not remote  in coremedia cms      as in sct   x  the same xml fragments and action names used for remote action invocation can also be used in automated tasks  where no client connection is available   in this case  the  remote  action is not actually remote  but is executed on the server  by a server local remote action handler   starting with coremedia cms       it is also possible to execute an action in the name of a user without requiring the user to be currently logged in to the workflow server  when using the xml attribute  uservariable  for an action in an automated task  a content repository session for the given user is established before invoking the server local remote action handler  the attribute  uservariable  contains the name of a uservariable of the task or process  which is read every time the action is executed  note that establishing the session will consume a license for that user  in coremedia sct   x  remote actions in automated tasks were always executed in the name of the workflow user    in order to deploy a custom remote action handler on the workflow server  you need to add its class name to the property workflow server remoteaction handler in the file workflowserver properties  which contains a comma separated list of fully qualified class names  your class should provide a public no args constructor and should implement the remoteactionhandler interface  the built in remote action handler provided by coremedia  com coremedia cotopaxi workflow builtinremoteactionhandler  should usually come last  the jar file containing your classes must be in the workflow server s class path  new or changed server side handlers only become effective when the server is restarted  
     in this case it is necessary only to make a few entries  since most of the default values can be used  for example  the default value for resizable is  true   i e  the column is automatically scaled  it is also not necessary to make any displaymap entries  since the document type is an inherent property of all documents  
  definition of the table column for the document name    the column should have the name  name   the minimum width should be     pixels and should scale with the width of the window  the document name should be displayed in this column for each document  enter the following lines in editor xml   
     mostly default values are also used in this case  however  because there is no special class for displaying the document name  the stringcolumn class must be used   you must make displaymap entries  since the name is defined in all document types  you can enter document      the document name is accessed via property  name    
  definition of the table column for the content of a structured text field    the column should have the name  content   the minimum width should be     pixels and should scale if the width of the window is increased  for a document of type  dish   the content of the description field should be displayed  enter the following lines in editor xml   
     the sgmltextcolumn class is used here for displaying the structured text field  sgml field   one displaymap tags is created for the document type dish  the next figure shows the configured query window  
  the fields of the document type dish should now be configured as follows   pictures    a selection list should be presented here  description    this field must be filled  since it is necessary for a dish  price    three different prices should be made available for selection here  name    this field should be filled with the initial value  new dish   calories    this field should only be displayed and filled with the initial value         once the configuration has been carried out  a document of type dish appears as follows  
  one of the two list fields is opened up here as example  if you try to save this document without entries in the fields description an error message appears  an entry in the field calories is not possible  the field name has the default entry  new dish   you achieve this configuration with the following settings in editor xml  
  the coremedia editor is internationalized and is therefore prepared for configuration to different languages  within a localization  program texts in menus  dialogs etc   as well as the names of the document types and properties which are shown  can be adjusted   the language and the country specific settings which the coremedia editor displays on the user interface are configured with the attributes  language  en   and  country  uk   of the locale element in the file properties corem editor xml  details for configuring the language settings are given in the administration manual   internationalization of the coremedia editor is based on the class java util locale  on program start  the default locale of the java environment is set to the value given in the configuration file properties corem editor startup xml  for identification of the locale  the iso     language codes are used  see http   www ics uci edu pub ietf http related iso    txt   new locales should use these language codes in order to remain compatible  
  under windows the coremedia editor can be started directly via the link in the menu setup during installation   if you don t use java web start and multiple lan connections are active under windows you can select the ip address of the lan connection with which the cm editor should communicate  for this  use the java virtual machine parameter ooc boa host  ip address  in the file editor jpif   if the editor should start under unix for administration purposes  the following must be entered in the bin directory of the coremedia installation   cm editor    
  the web editor is a web application which runs in the servlet container as context  editor   it contains an authoring server which connects to the coremedia server  configuration is automatically done on installation of coremediasci  manual web editor configuration is done in the config bsh file  similar to the active delivery server  with this file  the behaviour of the web editor can be configured  since the web editor is used in connection with a web browser  the browser settings below should be adjusted   
  the file web xml is the j ee deployment descriptor of the active delivery server application for the container  in general  correct configuration is carried out by the coremedia installer   the timespan for automatic ending of a user session can be configured in the section  webapp  behind  servlet mapping  with the parameter session timeout  value in minutes   
  a client side action consists of a client side and a server side implementation  so it s running partly on both sides  whereas client side actions run on behalf of the client user  server side actions run on behalf of the workflow user  while the client part of the action is running  the server side transaction is still active  client actions always have a timeout after which the action is aborted on the server side  the client side is not affected by this  clientactions should not require user interaction  if possible  to save precious server resources    precisely  a client action consists of three parts    a server side action  a client side event listener  a client side command to execute    the three parts will be executed in the following way   define the action from the workflow definition using the class attribute  the coremedia workflow server executes the server side stub  it creates the parameter list which it includes in the event  the event will be received by the client which calls the handle   method of the client side event listener  the event listener has to return a callback id to the server  you can evaluate the event and start some action from the event listener  e g  the event listener belonging to the coremedia editor will execute the action the server noticed in the event   
  rights policies protect access to process and task instance operations  they can be performed on the server and client side so a gui client component may limit the offered buttons  menus etc  to the actual permitted operations   the following rights are defined for process instances and can be granted to individual users or groups   read and write variables exported by the processes client view create new process instances start process instances suspend and resume process instances abort process instances  the following rights are defined for task instances and can be granted to individual users or groups   read and write variables exported by the tasks client view reject  accept  cancel and complete a task instance  assign  delegate and skip a task instance retry the last transaction of an escalated task instance  the policies are not directly accessible  checks must be performed via wfinstance haspermission    which checks the rights of the current session s user   customized rights policies must never access any client or server specific classes  as it will be executed on both sides  it may provide a client and a server specific implementation of an interface  that gives access to client or server specific classes  logging must be done to the generic logging facility defined by com coremedia workflow common common   interface to implement  rights policies must implement the interface wfrightspolicy    default implementation   if you only want to adapt the default policy to your needs  subclass the default rights policy aclrightspolicy and override the appropriate methods   
  here we will sketch typical use cases for the unified api   content delivery  situation  you want to deliver content that is stored in the coremedia cms  e g   when generating a web site   solution  the unified api is used inside the coremedia content application engine to access persistent data  the engine is used for efficient caching on higher levels  jsps render your content   form driven content modification  situation  you want to create a web application that allows certain recurring modifications of the content  e g   changing a price information   solution  again  you use the coremedia content application engine  this time augmented with the write functionality of the unified api   command line tool  situation  you want to create a command line tool that automates certain administrative tasks  e g   the creation of users with a predefined set of query documents   solution  you program the tool using the unified api  possibly starting with the base client provided as a code example   automated agents  situation  you want to create background processes that perform automated actions when certain events occur  e g   starting a workflow when a document is moved into a certain folder   solution  you create an appropriate repository listener using the unified api and add the required actions in java code   workflow actions  situation  you want to perform very complicated actions during certain workflow tasks   solution  you program a workflow action using the unified api  updating content objects and workflow variables as needed  you might want to create a user specific session for modifications   performers policies  situation  you want to control the set of users to whom a certain task is offered   solution  you program a performers policy using the unified api  evaluating the state of workflow variables and referenced content while determining one or more users who may execute the task  possibly  you also create a right policy to limit the permissible activities of the chosen users   
  the plug in interfaces action  expression  performerspolicy  and rightspolicy inherit from the interface java io serializable  that means that you must take care to make your implementations serializable  in particular by marking all non serializable fields as transient  remember that unified api objects are serializable  so that it is alright to reference such objects from your plug in  for example when configuring folders or groups   if you want to add special code for restoring transient fields after read  you can do so in a readobject method   it is advisable to define a serial version uid for your class to be able to indicate the compatibility of serialized versions appropriately  note that you may make changes that break serialization compatibility  but that you must invoke the tool cm workflowconverter while the server is down after such changes   
  actions are executed during the entry and exit phases of a user task  during the execution of an automated task  or during the processing of a runactiontimerhandler  this means that an action is typically executed in the context of a task  but that it may be executed in the context of a process  too  if used with a timer handler   by means of the interface action  you can only implement server side actions  that is  actions that run completely within the workflow server  actions are run on the server on behalf of the workflow user as configured in the file workflowserver properties   the main method of an action is execute workflowobject   where the argument is either a task or a process depending on the context of the action  while executing  the action implementation should only read and write variables of the argument workflow object and its view  it is recommended that the exact variable names are made configurable by means of bean style getters and setters   the method isexecutable workflowobject   should return false  when it is not currently possible to execute an action  normally  you should always return true from this method  but there are cases where you might want to wait for a workflow variable to be set correctly before processing an action   after execution  you may return a new instance of actionresult in order to indicate success or failure  if you use the attributes successvariable and or resultvariable in your xml workflow definition  the action result is automatically evaluated to set those variables  the action result can also take exceptions that are interpreted as warnings  if you include warnings in your result  they are added to the list that is returned from the method getwarnings   of the affected workflow object   the name returned by the method getname   of an action is used solely for logging and for parameterizing exceptions  it does not carry any semantic meaning  so that you may choose it as you like   in order to simplify the development of an action  you may derive your class from the predefined classes abstractaction or simpleaction  thereby  it is enough to implement a single method  namely execute process  in the former and doexecute process  in the latter case  because the exact task in which the action is executed is not included in the signatue of this methods  this approach requires that all relevant variables are defined at the process level  this is the typical use case   the server may run an action more than once  in particular when a transaction has to be restarted due to concurrent activity  therefore you should design your actions in such a way that either the second execution detects that the action has already been executed or that a repeated execution is acceptable  for example  it is preferable to set a variable to a certain value rather than to increment an integer or to toggle a flag 
  all workflow plug ins can be executed in the workflow server  while rights policies and remote action handlers are also executed on the client side  they still should be coded according to the server side rules in order to be executable everywhere  in the following  we will list the restrictions that apply when programming code for the workflow server   limitations of the api  the main restriction arises from the fact that the server calls workflow plug ins in the context of a transaction  in the workflow server  one transaction may write the variables of at most one process and its tasks  accessing multiple processes  even if they are instances of the same definition  is not allowed  all server side plug ins are passed a workflow object in the signature of their main business methods  it is this workflow object that should be read or possibly modified by the plug in   there are also some parts of the api that are not supported  normally  these parts are not needed for writing plug ins   no rights checks are performed when writing workflow variables  this ensures compatibility with the old wfapi  the accesscontrol service is still available without restrictions  when opening lightweight sessions by means of connection login       these sessions will have no influence on the objects of the workflow repository  this is because the plug in is already running inside a transaction whose owner cannot be changed later on  no state modifying operations like accept   or suspend   are permitted  this is because server side plugins are typically executed exactly during such state transitions and state transitions cannot be nested  worklists are unavailable  workflow repository events are not currently delivered inside the workflow server  already adding a listener results in an exception  only events regarding content and users are delivered  however  even such listeners should not normally be used  because plug ins are supposed to terminate quickly without waiting for external conditions  as a consequence of missing events  your own cache entries should only access objects of the content and user repositories  when accessing workflow objects  no invalidations will be generated  resulting in outdated cache entries later on   general remarks  a plug in should not engage in user interactions  it may still connect to external processes  for example when sending a mail message or when accessing an external database  but it should not freeze when a user does not respond    a plug in should be able to complete without requiring progress other parts of the workflow in order to avoid potential deadlocks   in order to resolve concurrent accesses to shared data  the server may restart a transaction  this may also happen during a system failure  but that is far less likely  in any case  a restart amounts to a repeated execution of your plug in  therefore your plug ins should be robust to handle such a situation  usually expressions  right policies  and performers policies do not result in side effects  so that it is irrelevant whether they are executed once or twice  but action are a more difficult matter   finally  keep in mind that your plug in will run in a server with an expected uptime of weeks or months  therefore  any memory leak should be avoided  preferably  your plug ins do not use mutable fields except those that are used for configuration and they do not use mutable static fields at all  when you create own threads  make sure that they are guaranteed to terminate  when you use system resources like sockets or file handles  make sure they are released sooner rather than later  
  performers policies are used when determining the users who are offered a certain task on their to do lists  this set of users is then stored persistently with the task in order to reduce server startup times  when users reject the task from their to do lists  the performers policy will be invoked again to update the lists   the interface to implement is performerspolicy  when implementing a policy  it is advisable to start with the class abstractperformerspolicy  which takes care of managing the policy state  namely   the forced user  who is set by means of the predefined action forceuser  the excluded users  who are set by means of the predefined action excludeperformer  the preferred users  who are set by means of the methods assignto user  and assignto group  in the interface task  the rejected users  who are set by means of the method reject   in the interface task   the policy state is maintained in four variables  which are defined in the method addinternalproperties propertybuilder  in the interface performerspolicy  such variables do not need ot be declared in the xml definition file  the interface propertybuilder provides one method per variable type  in own implementations  you may create as many variables as needed   this simplifies the encapsulation of the internal working of custom performers policies  note that these variables reside in the same name space as variables defined in the xml process definition  so that you should choose names that are unlikely to occur as ordinary workflow variable names   when using the class abstractperformerspolicy  you will have to implement only four methods and of those  the methods getname   and getdescription   are used for logging purposes  only   the method calculateperformers is the most important method of the policy  when called  the policy return a performers object  which is essentially a collection of users together with a boolean flag that determines whether the current task is being forced onto a user  some clients  most notably the coremedia editor may choose to accept a forced task automatically on behalf of the current user  in principle  you can use any algorithm to compute the collection of users  but you should normally respect at least exclusions and rejections in that computations    when no users are found  the policy is free to take appropriate measures to resolve this situation  for example by clearing the set of rejections  when an empty set of users is returned from the method  the task will be escalated   a collection is users is passed into the method calculateperformers  this collections contains all users that are permitted to accept the task in question  by taking this collection into account when determining the performers  you avoid duplicating the rights rules in the performers policy   the method maydelegateto is called when a user tries to delegate a task to another user  while the permission check for the executing user is done by a rightspolicy  the performerspolicy checks whether a designated user may possibly receive the task  typically taking the set of excluded users into account  
  in this section we will discuss examples for both the client api and the api for writing workflow server plug ins   all examples can be found in the examples distribution  the client examples are placed in the package com coremedia examples capclient  whereas the plug in examples are placed in com coremedia examples plugin  similarly  the compiled classes are found in cap capclient jar and cap plugin jar  
  action  the next example introduces a custom action that is capable of moving and renaming a content atomically  the class is named moveandrenameaction  it is derived from the base class simpleaction  which further reduces its complexity   the arguments for the action are taken from three process variables  whose names are configured in the xml definition and stored in three fields in the action  in the file move and rename xml as delivered with the examples  the action is configured as follows    action class  com coremedia examples plugin moveandrenameaction    contentvariable  content    targetvariable  target    namevariable  name      except for the three fields and the setters  the implementation consists of a single method   public boolean doexecute process process      content content   process getlink contentvariable     content target   process getlink targetvariable     string name   process getstring namevariable     content moveto target  name       return true     by returning true  the action indicates that it completed normally  
  this chapter deals with the customizing of the workflow by programming own extensions and configuring the workflow  the following types of workflow beans are supported   actions  server side and client side actions  expressions  used in guards  conditions  validators  rights policies performers policies  in addition you can implement own  clients  workflow startups   you will find some programming guidelines and examples for each bean in the following subsections  please refer to the workflow api or editor api for more details on the classes described in the following chapters   note that this manual describes the old workflow api that was the sole means for writing extensions up to cms       from cms      on  it is also possible to use the unified api for writing extensions  there called plug ins  please consult the unified api developer manual for details regarding this new api  most information from the following sections carries over to the new api   because the old workflow api is still used in the coremedia editor and in the coremedia active delivery server  it is not formally deprecated  however  using the unified api is recommended for new server side actions  expressions  rights policies  and performers policies  because development has become easier and faster  in general  old and new extensions mix without problems  please see the unified api developer manual for details  
  like all coremedia clients  the importer is started with a jpif script  the standard installation provides the template script cm xmlimport jpif in the bin directory    for every importer to install a copy of cm xmlimport jpif must be made but with a different prefix  each importer has a configuration file with the same base name and the extension properties in the directory properties corem   example  the configuration file properties corem my xmlimport properties belongs to the script bin my xmlimport jpif   the standard installation directory properties corem provides the file cm xmlimport properties  which serves as a template for these configuration files  
  using the unified api  it is not possible to write the server side parts of new client side actions  you still need the workflow api for this  note  however  that client side actions can now be replaced by unified api server side actions in many cases  because the unified api allows you to act on behalf of a particular user without having to open a separate connection  
  to install a xml importer make a copy of the file properties corem cm xmlimport properties in the same directory and rename the copy according to the naming rule described in the previous section  in this file  carry out the configurations described in the following  
  in this chapter you will find a table with all major changes made in this manual  
  you can insert different special characters directly into the coremedia editor using the keyboard   soft break  press  ctrl     enter  to insert a soft break  non breakable space  press  ctrl     shift    space to insert a non breakable space  if you place the pointer behind the non breakable space a message will be shown in the status bar  other special characters  you can enter more special characters by pressing  alt  and entering a code   xxx  with the numeric keypad  e g  with  alt           you will get the euro symbol   as the coremedia editor supports unicode  you can insert arbitrary characters using copy and paste  nevertheless  these characters will only be displayed correctly if the font supports them  
   property optimization setpageobjectcachesize default is     a higher value increases the memory consumption but also improves the performance  use      as a starting value   setdocumentcachesize default is       a higher value increases the memory consumption but also improves the access to coremedia documents  use       as a starting value setfoldercachesize default is      a higher value increases the memory consumption but also improves the access to coremedia documents  use      as a starting value setpagecachesize default is       the size of the page cache will be ignored if you use a pregenerator  because all dependent pages will be generated and managed by the dependency manager  if you use a dynamic ads use        as a starting value  if you get  out of memory  errors reduce the value  setevictingfragments   default is false  since coremedia sct     a new strategy for cache eviction has been introduced  fragments will be evicted from the cache when   the maximum size of the page cache has been reached the fragment has been selected by a lru algorithm  the fragment is not included by other fragments  the old strategy removed a fragment from the page counter but not from the page cache when it was included by other fragments  this was error prone because the actual size of the page cache could have been bigger than the configured maximum size  this could have caused  out of memory  errors  you should only use the old strategy if you need it for compatibility reasons otherwise use always the new strategy   false     
  all settings described in the following table are rules of thumb from coremedia projects  they are intended as sensible starting values for own tests  optimal settings depend on factors which are highly project specific  
   file directory meaning web xml the portal application descriptor  there is no need to edit this file  view xsl a xslt stylesheet for transforming portal pages into html  there is no need to edit this file  contentservice xml the contentservice descriptor  please edit this file as shown above  portlet xml   the portlet descriptor  please configure the homepage uri here like   config param   param name homepageuri  param name   param value    param value    config param   you may also register javascript and css files here   js    preferred location of additional javascript files  put your files here and register them by editing portlet xml like   config param   param name javascript  param name   param value js myfile  js js myfile  js  param value    config param  style    preferred location of additional css files  put your files here and register them by editing portlet xml like   config param   param name css  param name   param value style myfile  css style myfile  css  param value    config param  errorpages  preferred location of additional errorpages when using the errorpagescontentservice  the location needs to be defined inside contentservice xml   lib   java libraries which are used by the portlet  please do not modify this directory s content   
  portlet archive  the portlet archive coremediacmsportal war consists of this structure  
  deployment  the way of deploying portlets in an sap enterprise portals is described in the portal s manual  below you will find a  quick start  description for the sap enterprise portal   which you may follow as logged in portal administrator   upload  it s assumed that you have the pdk  portal development kit  installed in your portal   change to java development   tools   prt admin console upload the portlet archive   portlet sap ep com coremedia cms portal par  installation of the content portlet  change from content administration to any folder  select this folder  change to context menu   new from par   iview  choose com coremedia cms portal  click next  choose content  click next  enter any iview name and iview id as well as master language    press finish  click close wizard   double click  a page where the iview should be placed  select the iview  select add iview to page   delta link from context menu   right mouse button   click save   installation of the navigation portlet  change from content administration to the above used folder  select this folder  context menu   new from par   iview   choose com coremedia cms portal    click next  choose navigation  click next  enter any iview name and iview id as well as master language    click finish   click close wizard   double click  the page where the content portlet is placed already  select dynamic navigation on display  select the navigation iview  context menu   add to dynamic navigation  click save   configuration   change from content administration to the folder where the portlet is located    double click  the content portlet   select show all from property category   configure the required properties  which names start with com coremedia portal portlet  which are described above   click save  if you are using an associated navigation portlet  double click  the navigation portlet select show all from property category configure the property com coremedia portal portlet homepageuri  by setting the same value than in the content portlet  configure the property com coremedia portal portlet navigation  by setting it to the associated content portlet s context name  such as pcd portal content myrole myworkset mypage myportlet  this location is the concatenation of the containing page s pcd location  e g  pcd portal content myrole myworkset mypage  and the content portlet s id  e g  myportlet   the content portlet s context name is also printed of in the debug section of the portlet  tab  application  key  portlet id   just copy and paste this id to the above mentioned property  click save  log configuration  in order to enable logging for coremedia s portal component you may use the j ee engine visual administrator provided by sap  start the visual administrator and press connect  change to cluster   server   services   log configurator inside the log configurator select runtime   locations browse the tree and select com   coremedia   cms   portal select the desired severity   logging level   click save  select apply to current node only   the log entries may be found in the default logfile  
   file directory meaning contentservice xml the contentservice descriptor  please edit this file as shown above  portalapp xml   the portlet descriptor  please configure the homepage uri here like   property name  com coremedia portal portlet homepageuri  value       you may also register javascript and css files here  js    preferred location of additional javascript files  put your files here and register them by editing portlet xml like   property name  com coremedia portal portlet javascript  value  style myfile  js style myfile  js   style    preferred location of additional css files  put your files here and register them by editing portlet xml like   property name  com coremedia portal portlet css  value  style myfile  css style myfile  css   errorpages  preferred location of additional errorpages when using the errorpagescontentservice  the location needs to be defined inside contentservice xml  lib  java libraries which are used by the portlet  please do not modify this directory s content   
  this example describes the implementation of a rights policy  the aim of the policy is to implement a very simple rights policy that can grant rights to the user who started a process instance  the policy should be usable with very large user sets  e g   in an intranet  to this end  the policy computes the members of a group only when absolutely necessary  the policy can be used as a replacement of the default aclrightspolicy in the standard simple publication workflow  it is available bundled with its unified api equivalent in the examples distribution  which also contains the adapted workflow definition example publication xml  to try the example workflow  deploy the cap plugin jar from the examples in the lib directories of the workflow server and all clients you want to use  e g   in the coremedia editor   the new class onlyownerwfrightspolicy will be serializable by means of the interface wfrightspolicy  one field holds the optional id of the group that is granted create rights and one field denotes whether a group was actually set   public class onlyownerwfrightspolicy implements wfrightspolicy     private static final long    serialversionuid                      l    private int groupid    private boolean groupidset   false   the standard callback for setting the set of rights is unused  the policy grants or denies all rights    public void setrights string   rights      we need some methods for managing the policy configuration     public void setgroupid int groupid        this groupid   groupid      this groupidset   true        public int getgroupid         return groupid        public boolean isgroupidset         return groupidset        public void setgroup string groupatdomain  throws wfexception       int pos   groupatdomain indexof           wfgroup group      if  pos              group   wfserver getdirectoryserviceadapter            getgroup groupatdomain             else         string name   groupatdomain substring    pos         string domain   groupatdomain substring pos           group   wfserver getdirectoryserviceadapter            getgroup name  domain             setgroupid group getid          note that the last method is never actually called from java code  it is called dynamically during the process definition parsing   because the policy grants special access to the owner of a process instance  we can make use of a utility method for determing that user     private wfuser getowner wfinstance instance  throws wfexception           if  instance instanceof wftaskinstance          instance     wftaskinstance instance  getprocessinstance              return   wfprocessinstance instance  getowner         now we can write the methods from the interface wfrightspolicy  some group related methods are not shown  they are only called in the context of delegation to a group  which is not an appropriate use case for this class     public boolean haspermission wfinstance instance       wfdirectoryserviceadapter adapter  wfuser user       string rights    throws wfexception       return haspermission instance  adapter  user               public boolean haspermission wfinstance instance      wfdirectoryserviceadapter adapter  wfuser user       string   rights    throws wfexception       return haspermission instance  adapter  user              we will now look at the central method for permission computation  first of all  we must make sure to grant all rights to the internal server user  which performs certain automated actions  we d also like to grant all rights to the super administrator     private boolean haspermission wfinstance instance      wfdirectoryserviceadapter adapter  wfuser user    throws wfexception       if  user isinternalserveruser    return true      if  user getid      id admin  return true      if  instance    null     we are being asked for rights on the definition  this can only be a create operation that needs to be checked         if   isgroupidset    return false        wfgroup group   adapter getgroup getgroupid           return user ismember group         else    we already checked for the admin and for the internal server user  so that the remaining code is simple         wfuser owner   getowner instance         return owner    null    owner getid      user getid               when computing a worklist we sometimes need to compute the set of all users  expensive group operations are only needed in the case of rights on the definition     public wfuser   getusers wfinstance instance      wfdirectoryserviceadapter adapter  string right  throws       wfexception       if  instance    null          if  isgroupidset              wfgroup group   adapter getgroup groupid           return group getusers            else           return new wfuser                   else         wfuser owner   getowner instance         wfuser admin   adapter getuser id admin         if  owner    null    owner getid      id admin            return new wfuser   admin           else           return new wfuser   admin  owner                            finally we must provide a marshaller for transferring the rights policy to clients     public wfrightspolicymarshaller getmarshaller         return new onlyownerwfrightspolicymarshaller           the marshaller itself is implemented in a separate class  it is identified by its policy id   public class onlyownerwfrightspolicymarshaller implements wfrightspolicymarshaller     public string getpolicyid         return  coremedia    cap workflow rights policy onlyowner        the main methods affect the marshalling an unmarshalling of the policy group parameter  which has to be encoded as an array of bytes     public byte   marshal wfrightspolicy policy        onlyownerwfrightspolicy onlyowner          onlyownerwfrightspolicy  policy      int groupid   onlyowner getgroupid        return new byte            byte  groupid    byte  groupid             byte  groupid        byte  groupid              byte  onlyowner isgroupidset                         public wfrightspolicy unmarshal byte   data        onlyownerwfrightspolicy result   new onlyownerwfrightspolicy        if  data                  result setgroupid  data       x      ff             data          x    ff               data           x  ff                 data                     return result         this policy has also been implemented using the unified api  for details see the unified api developer manual  
  the importer is generic  hence  before starting you have to discuss some questions with the respective developer   how are the import data provided  which files in addition to the coremedia installation are needed by the importer  e g  xslt stylesheets   which additional java classes are required by the importer   additional java classes are stored easiest as jar files in the lib directory of the coremedia installation  if stored there  they are included in the classpath automatically by the cm mechanism   in spite of the open jaxp interface  java api for xml processing   experience has shown that objects of different implementations do not harmonize  to avoid such conflicts we recommend the exclusive use of the jaxp implementation as provided by coremedia  
  after import  documents remain checked out by the import user  or their content is empty   possible causes   the import does not operate strictly transactionally  if an error occurs between the actions create document  edit document  check in document  the repository remains in an intermediate state   possible solutions   the actual cause of the problem is indicated in the log file  var logs  my  xmlimport log  import the documents again after solving the problem  after a completely successful import the repository again has the expected state  
  the following code shows the xml definition schema of data views  
  portal resources  e g  images  may be added to this portal archive to any location outside of web inf   example  an image which has been added as images myimage gif  can be addressed as a portal link portal resource    images myimage gif  
  portal resources  e g  images  may be added to this portal archive to any location outside of portal inf   example  an image which has been added as images myimage gif  can be addressed as a portal link portal resource    images myimage gif  
  the generatorfactory class expects the following configuration parameters   import multiresultgeneratorfactory property inbox  directories of the image files to import  separated by     or      import multiresultgeneratorfactory property sleepingseconds  number of seconds which the importer should wait before importing again  import multiresultgeneratorfactory property filenamefilterclass  full java class name of type java io filenamefilter  for selecting jpeg files  this value is optional  if not entered  all files are imported whose names are different from  err  or  bak   in the configuration  the class com coremedia publisher importer jpegfilefilter is used as filter  and selects all files which end with   jpg  or   jpeg   ignoring case   two transformerfactory classes are specified  as shown in the following  
  component definitions should not contain cycles in which every edge has a delay of    such cycles can cause high cpu loads and excessive usage of system processes and open files  
  due to a bug in microsoft sql server  it is not possible to perform certain necessary schema updates automatically when migrating between coremedia cap     or earlier and coremedia sci     or later   after a coremedia content server has been started with coremedia sci     or a later version for the first time  it must be stopped again immediately  afterwards  issue the following sql command   alter table resources drop column ismarkedforunpublication   finally  the server can be restarted  
  the following state diagram holds not for the initial replication  the initial replication is not fault tolerant against connection losses but has to run without interruptions in order to succeed  
  the initial replication of a replication server is not fault tolerant against connection losses  the first replication has to run without interruption in order to succeed  if this is not possible  the database of the replication has to be build from a backup or the database of the master live server as described in the following sections  
  deploy the rights policy  you have to deploy the rights policy to the server and client  proceed as follows   deploy to the workflow server stop the workflow server with cm workflowserver stop copy the rights policy  class file with the complete path to  workflowserverhome  classes or copy the rights policy as a jar file to  workflowserverhome  lib  start the workflow server with cm workflowserver start upload the modified workflow definition with cm workflowupload  u admin  p  password   file  workflowdefinition  xml  deploy to the client  if you use the coremedia editor via webstart read section      installing java web start  in the administration and operation manual  there you will learn how to deploy coremedia editor extensions via webstart  if you use the coremedia editor without webstart proceed as follows  stop the coremedia editor  copy the rights policy  class  file with the complete path to  editorhome  classes or copy the rights policy as a jar file to  editorhome  lib  start the coremedia editor   defining the policy in the workflow definition  defining your own rights policy in the workflow definition is quite simple  you only need to add the policyclass attribute to the  rights  tag as shown in example   
  closing a window of the webeditor  select file close from the menu bar to close the current window  if there are any unsaved changes  a warning window opens up    terminating the webeditor  for terminating the webeditor application  select file exit  if there are any unsaved changes in the current window  a warning window opens up  if there are unsaved changes in any other window than the current window  no additional warning appears  in all cases  a warning window opens up which asks if you really want to terminate  the webeditor      
    attribute  description  class  this attribute is used to enter the editor class to use  default is hox corem editor generic genericeditor   loginname  this attribute is used to enter the default name for login  if no name is entered  the name from the environment is used  you can always change the name during login  it is just a preset  if a login name should be predefined  it must be set in the editor startup xml file  if a global editor xml file is used for all users it might be sensible to set the login name in the editor properties file   loginpassword  this attribute is used to enter the default password for login  if no password is entered  the login name is used  you can always change the password during login  it is just a preset  if a login password should be predefined  it must be set in the editor startup xml file  if a global editor xml file is used for all users it might be sensible to set the login password in the editor properties file   logindomain  this attribute is used to enter the default domain for login  you can always change the domain during login  it is just a preset  if a login domain should be predefined  it must be set in the editor startup xml file   loginimmediate  if this attribute is set to  true   an attempt is made to connect directly to the server with the login data given above  the login window does not appear  the default value is  false    showcurrentuser  if this attribute is set to  true   the name of the current user of the editor is shown at the top of the window  default is  false   i e  the user name is not shown   startup  this attribute defines the coremedia editor window to start with  possible values are  openexplorer   openquery    openworkflow    openusermanager  which will open the respective window  as default  the coremedia editor starts with the explorer window   normal  user  or with the user manager window   administrator  user    startupmode   this attribute defines the start up mode for administrators  if set to       the super user with id     always starts with the user manager window  all other users will start with the window defined using  startup     if set to       the super user with id     and all members of the administration group start with the user manager window  all other users will start with the window defined using  startup    default setting is           
     attribute description class this attribute is used to enter the editor class to use  default is hox corem editor generic genericeditor  loginname this attribute is used to enter the default name for login  if no name is entered  the name from the environment is used  you can always change the name during login  it is just a preset  if a login name should be predefined  it must be set in the editor startup xml file  if a global editor xml file is used for all users it might be sensible to set the login name in the editor properties file  loginpassword this attribute is used to enter the default password for login  if no password is entered  the login name is used  you can always change the password during login  it is just a preset  if a login password should be predefined  it must be set in the editor startup xml file  if a global editor xml file is used for all users it might be sensible to set the login password in the editor properties file  logindomain this attribute is used to enter the default domain for login  you can always change the domain during login  it is just a preset  if a login domain should be predefined  it must be set in the editor startup xml file  loginimmediate if this attribute is set to  true   an attempt is made to connect directly to the server with the login data given above  the login window does not appear  the default value is  false   showcurrentuser if this attribute is set to  true   the name of the current user of the editor is shown at the top of the window  default is  false   i e  the user name is not shown  startup this attribute defines the coremedia editor window to start with  possible values are  openexplorer   openquery    openworkflow    openusermanager  which will open the respective window  as default  the coremedia editor starts with the explorer window   normal  user  or with the user manager window   administrator  user   startupmode   this attribute defines the start up mode for administrators  if set to       the super user with id     always starts with the user manager window  all other users will start with the window defined using  startup    if set to       the super user with id     and all members of the administration group start with the user manager window  all other users will start with the window defined using  startup   default setting is        enableexplorer this attribute is used to disable the explorer window of the coremedia editor  false   default is  true   i e  the explorer window can be opened  enabledirectpublication this attribute is used to enable direct publication   true    default is  false   i e  no direct publication icons and menu items are shown  enableworkflow this attribute is used to disable all workflow related menu items and icons   false    default is  true   i e  workflow features are enabled   removeemptyparagraphs   the coremedia editor adds empty paragraphs around tables in order to enable the user to enter content before or after the table  this circumvents a swing problem   by default   false    these empty paragraphs are saved on the server  if you set this attribute to  true   empty paragraphs without attributes will be removed in the following cases when writing rich text back to the server   at the beginning of rich text  if a table follows   div  p   table  at the end of rich text following a table   table  p    div  at the beginning of a table cell  if a table follows  td  p   table    at the end of a table cell following a table    table  p    td     warning  if enabled  the representation of rich text on the server will be changed  if a document is saved in the coremedia editor  maychoosememberfromotherdomain if set to  false   default  only members of the administrator group are allowed to search for users in other domains using the user manager window  non administrators can only search in their own domain  if set to  true   every user may choose a domain for search     
  a peculiarity of jsp pages and servlets should be noticed here  either the jspwriter  available via the out variable  or the servletoutputstream  available via response getoutputstream    can be used  but not both  therefore  if the binary output stream is being used  you need to ensure that there is no template text located outside the jsp tags  since otherwise this is output via the jspwriter and causes an illegalstateexception  there must also be no line end character  newline  ascii     or carriage return  ascii    at the end of the file  
  the next section is concerned with xml text properties  the classes and methods used for output the img tag as well as the definition of the htmlunparser are illustrated there      
  reverse polish notation  in this notation  the operator connecting the two arguments is entered after the expressions for the arguments  therefore  an algebraic expression such as         would be constructed as          the advantage of this notation is that no brackets and no precedence rules are required                is generated as              and             appears as              
  in coremedia queries  constants and document fields take on the role of the numbers  and instead of arithmetic operations  there are logical operators and type specific comparative operators   access to the properties of a document type is only given if the corresponding document type is requested  otherwise  ambiguities could arise   the value of a property can be compared to constants and other properties of the same type  furthermore  a substring operator is also available in strings and sgml properties   if supported by the relational database in use  additional operators for full text search are also offered for xml properties  these operators search for xml properties in which a word appears which  matches the search word exactly  containsexact  begins with the search word  containsprefix  or has the same stem as the search word  containsstem   the operators supported by the database can be obtained from the copy of the hox corem servlets queryfactory class in use  if the database does not support any of the special full text operators  a substring search can still be carried out on the xml properties with the operator contains  however  no word boundaries are taken into account   as stated above  you can also refer to pre defined properties in the search criterium  in this way  boolean value property expressions can occur  when using these  it should be noted that access to a boolean value property  e g  isdeleted   is not a complete search expression  the queried value must be compared with a boolean constant   q field  isdeleted     q booleanvalue true   q equal      the pre defined properties in queries use slightly different names in comparison with the pre defined properties in document getproperty   the user value properties are replaced by an integer value property which gives the id of the particular user  to make the use easier  there are methods which directly compare the property with a user entered by name  the details are shown in the following table  
  use of the jsp include tag with coremedia resources   since this formulation is rather inconvenient in the long run  the coremedia geneator api offers a shortened form  a call of the include method of the hox corem servlets context class has the same effect as the jsp include tag just shown  the method is offered in several variants  in the most common form  the current page context  pagecontext  and the resource being inserted are expected  optionally  the id of the template which should be used for display and a parameter list can be given  the page context is used to actually include the fragment via javax servlet jsp pagecontext include    for include only pages  i e  fragments  it is a good practice to set the content type to text x coremedia fragment charset utf        
  for transformations two sources are needed  the style sheet is either stored inside an xmlproperty or just a plain file in the local file system  if it s in a property  write a jsp page that unparses the content and refer to it via the method described above    the advantage of storing the style sheets in coremedia documents is that a dependency between layout and content can be established  when the layout changes  in the style sheet   the website changes as well  this is quite nice  since style sheets can be tested and evaluated on the production system  once the work is finished the style sheet can be published to the live system and the layout changes  automatically   
  the following table contains an overview of the end of life dates and operating environments of all coremedia cms versions  the table contains the following symbols   c  the component is certified  s  the component is supported  d  the component is deprecated  
  it is possible to use identical templates for the content management server  where preview based editing should be available  and for the live servers  where editing should not be possible   simply edit the config bsh on the live servers and set previewbasededit to  false  to make the generated pages non editable   
  localization of the coremedia editor for use with webstart is similar to the standard localization described before  you only have to provide the property file as a signed jar file to webstart  proceed as follows  create a property file  here editor properties  with the localized properties in a path com customer cap as described before  create a jar file from the directory above com  with  jar cf editor properties jar com  you need a key to sign the jar file  if you have no key  create it with  keytool  alias  keyname   genkey  you will be asked for a password  which you have to remember for further use     sign the jar file with  jarsigner editor properties jar  keyname   when you are asked for the password enter the password from step       place the editor properties jar file into the lib ext  directory of your contentserver installation  by default  the ext  directory does not exist  so you have to create it  add the following entry to the editor extension jnlp file in webstart ext     resources           jar href  lib ext editor properties jar      resources     restart the coremedia editor   now  the editor can use the localized properties     
  for localization of texts and names shown in the coremedia editor defined in the coremedia server  a file following the naming scheme name   locale   properties can be used  it can be located in either class path or jar file   example for the naming   german  com customer cap editor properties  english  com customer cap editor en properties  french  com customer cap editor fr properties    the bundle name com customer cap editor is configured with the bundle element of the editor startup xml    within the files  name value pairs define the localized names  for each object a name and a tooltip text can be configured  the naming scheme is as follows    name of the object defined in the coremedia server    name of the property  label or     name of the object    name of the property  tooltip    the value is the localized name   if you want to change the embedded labels of the coremedia editor  e g  a menu item or the label of a button  you need to know the keys of these labels  you will find the keys in the file hox corem editor toolkit property property de properties which is located in the cap editor resources jar file of an editor installation   example   to localize some german names for use in english language  create a file  corem home classes com customer cap editor en properties  in order to rename a document type called bild to image  define   bildlabel image  to rename the property piktogramm to thumbnail and to add a tooltip saying  preview image  define   bild piktogrammlabel thumbnail  bild piktogrammtooltip preview image  it can be seen that properties are designated via the preceding document type name and are separated by a slash  therefore  the names of document types must not contain slashes for proper localization of properties  this file can be stored in a jar file to make distribution easier  
  the text formatting options equal those in the coremedia editor  
  the document window consists of the following components   menu bar      you can reach all functionality concerning the webeditor and the document from the menu bar  you have no access to the formatting functions from the menu bar toolbar      you have fast access to document specific functionality document name     second toolbar     you may save  check in  check out or revoke check out of the document  third toolbar     you have access to the document field specific functionality  the document fields     you can enter the content to the document   

  the document window contains three toolbars  which will be described in the following  the content of the third toolbar depends on the type of the selected field  
    menu item  sub items  functions  cut    copies the selected resource to the clipboard  the resource remains at the start position unless you paste it to the target position   copy    copies the selected resource to the clipboard  a copy will be pasted to the target position   paste    pastes the content of the clipboard to the current position   it s not possible to paste documents in documents    select all    selects all folders in the folder overview or all documents in the document overview  depending on the active part of the window    
   symbol nr  function     refresh the document window      cut documents and text      copies selected text or documents to the clipboard      pastes text or documents from the clipboard to the document      direct approval of the document or revoke of the approval  this function must be enabled      calls the preview for the document      simulates the publication of the document and shows the result      direct publication  without workflow  of the document      opens the information window of the document  
   symbol nr  function     saves the document      undo the check out of the document  this undoes all changes to the current version       this button offers in dependency from the state of the document the next  most possible  function  if the document is checked in for example  it will offer the check out functionality   
   symbol nr  funktion     opens the selected binary data with an external application      removes the selected binary data from the document   
   symbol nr  function     opens the selected document in a document window      opens the selected document in the overview window      opens a resource chooser  to select a document and add it to the link list  the chooser offers only documents which are allowed to add to the current field       deletes the selected document from the link list      moves the selected document to the start of the link list      moves the selected document one position up      moves the selected document one position down      moves the selected document to the end of the link list   
   symbol nr  sub items function     all defined paragraph formats formats the current paragraph with the selected paragraph format      all defined fonts  sets the selected font for the text      all defined font size sets the selected font size for the text      removes all formatting from the selected text       format text as bold       format text as italic          underline  strike through  superscript  subscript format text        allign left  center  align right  justify defines the alignment of paragraphs      all defined paragraph formats formats the current paragraph with the selected paragraph format       all defined background colors       all defined font colors sie w hlen die textfarbe       all defined languages sie w hlen eine sprache f r den ausgew hlten text         link     internal link     insert an image    sie f gen verweise oder bilder ein         insert a table     insert column left  add column right  delete selected columns  insert row above  add row below  delete selected rows  split merged cells  split cells horizontally  split cells vertically   insert and format tables       open the attribute editor for the selected element   
   menu item sub items functions cut  copies the selected text or document s  to the clipboard   copy  copies the selected text or document to the clipboard  a copy will be pasted to the target position  paste  pastes the content of the clipboard to the current position   
   menu item sub items function new workflow project specific number and type of workflows starts a new workflow of the chosen type  open in explorer  opens the document in the overview window  check out  check out a document for editing  status and current owner visible to all users   revoke check out    undo the check out of a document  the document is accessible for others again   attention  this undoes all changes of the current version check in  check in applies changes and make them available to all other users  rename  renames the selected resource via dialog box  double naming prohibited across all documents also of different types within the same folder  save  saves the current changes  preview  opens document in a browser for preview  project specific  internet explorer and netscape are default options  approve  direct approval of a resource  this function must be enabled  revoke approve  revoke approval directly  this function must be enabled  delete    deletes the selected document or folder  a publication is required to make changes effective on live servers  deleted document can just be viewed  not edited  revoke delete    only not yet published resources can be restored    once in recycle bin after publication  resources lose all path information  mark for withdrawal  marks the resource for revoking of the publication  this will delete the resource on the live server  this change must be published to take effect  revoke withdrawal  revokes the mark for withdrawal  preview publication  simulates the publication and shows the result  publish  direct publication  without workflow  of a resource  properties tabs  history  rights  and rules displays properties of a resource  history of editing  publication  etc  close  closes the active  overview  window  but does not exit the application  
  coremedia sci supports built in users and users from external sources like ldap servers  the coremedia server authenticates built in users  whereas authentication of ldap users is delegated to the ldap server  authentication is now based on jaas  different jaas login modules authenticate users from different sources  login modules are java classes that have to implement the interface javax security auth spi loginmodule  see http   java sun com products jaas    coremedia sci provides default login modules for built in user and ldap user authentication     caploginmodule    the class hox corem server caploginmodule authenticates built in users  built in users are system users created at cm server initialization time and those created later by an administrator with the cm user manager  this module is mandatory  because some system services are run by built in system users    ldaploginmodule    the class hox corem login ldaploginmodule authenticates users from ldap servers   you can implement your own login module classes to authenticate users from other origins  login modules are configured in the jaas conf file  
  the properties corem jaas conf file contains the following default configuration for login modules  
  the syntax conforms to the default configuration syntax in jaas  
  the syntax is defined in detail in the javadoc for the java class javax security auth login configuration  the application name in jaas conf is jaascap  this value is fix and must not be changed  the moduleclass values in jaas conf can be one of     hox corem server caploginmodule     hox corem login ldaploginmodule    or another user defined loginmodule    the value of flag is always set to sufficient  the moduleoptions is a space separated list of login module related arguments   the following table contains the module options of caploginmodule  
      caploginmodule options    description    predicate  n  class    java class name of a login predicate    predicate  n  args    arguments to the login predicate  use space value     for no arguments     
     ldaploginmodule options   description   predicate  n  class   java class name of a login predicate   predicate  n  args   arguments for the login predicate  use space value     for no arguments    host   ldap server host name   port   ldap server port number  if you want to use ldap over ssl switch to      which is the default port for ssl connection    domain   domain to serve protocol the protocol to use  change to  ssl  if you want to use ldap over ssl   
  the meaning of the first two predicate options for the ldaploginmodule is the same as in the caploginmodule  the last three options are mandatory  
  coremedia sci license management is based on named licenses  with named licenses only a fixed and determined number of users can log on to the cm server for a certain service  the following table lists the services and the associated types of coremedia applications  
  when a user  no matter if built in or ldap user  logs on to the coremedia server  he needs a named license for the desired service  the current named licenses in use are stored in a database  if a user logs on for the first time  the user name and the requested service are added to the database  if the maximum number of used named licenses for a service type is reached no further logins for users without named licenses are allowed  the authentication algorithm validates if the users listed in the license table still exist  if not  all used licenses for the non existing users are released and the user may log on  otherwise the login fails   example   assume that you have two licenses for the editor service  when user a logs on to the coremedia editor  he consumes the first license  when a second user b logs on to the coremedia editor he consumes the second and last free named license  now no other user than a and b can log on to the editor  even if a or b or both log out again  the two named licenses for the coremedia editor are reserved for user a and b  until a or b is deleted   
  loginpredicates  the login modules described in the previous section implement user authentication  so far a user may or may not log on to the cm server whatever coremedia service he wants to use  the caploginmodule and the ldaploginmodule can be configured to restrict user access to certain coremedia services  to do this  the two login modules use login predicates  a login predicate is a java class which implements the interface loginpredicate with the allowlogin   method  this method is invoked with a user and a coremedia service and returns a boolean value  a login module may use several login predicates  login predicates are evaluated before user authentication in the login modules is actually performed and named licenses are consumed  the evaluation order for login predicates in a login module is as follows   if no login predicate is specified in a login module  user authentication is performed against the login module   if multiple login predicates are specified in a login module  they are evaluated in order of their index number  n   if a login predicate for a user and service returns    false  then the user fails to log on immediately    true  then user authentication is performed against the login module  unless a following login predicate fails    null  then the result depends on the result of the other login predicates   the user fails to log on if all login predicates return null   the login predicate java classes are     hox corem login nameloginpredicate   hox corem login attributeloginpredicate   hox corem login jndinameloginpredicate   hox corem login trueloginpredicate   in the following these classes are described in detail    nameloginpredicate   this predicate returns true if the users name or the names of his groups match a regular expression  or null  if not  
  attributeloginpredicate   this predicate returns true if the users ldap attributes or the attributes of his groups match a regular expression or null if not  
  jndinameloginpredicate   this predicate returns true if the users jndi name or the jndi names of his groups match a regular expression or null if not  the jndi name is the ldap distinguished name  i e  the reference to the ldap user entry  
     jndinameloginpredicate options   description   negative   same as for nameloginpredicate   depth   the jndinameloginpredicate is not restricted to the user s jndi name but may also consider the jndi names of the groups  he is member of  the integer value specifies the depth of group nesting  defaults to          means the nesting is unrestricted  the values are logically or ed  if one of the values matches the regular expression  the predicate returns true   e g  with depth   only the jndi name of the user is used  with depth   the jndi names of the user and the jndi names of his direct groups are matched against the regular expression     service  regex   same as for nameloginpredicate   regex   same as for nameloginpredicate  
  trueloginpredicate   this predicate always returns true  it has no options but you must be configure the predicate  n  args property with a space character  because jaas complains if the space is missing   example   a simplified jaas conf file might use nameloginpredicate and trueloginpredicate with caploginmodule  
     service   applications   debug   applications used for debugging like cm dump   editor   editor applications like coremedia editor and coremedia webeditor server   filesystem   webdav in coremedia webeditor server   importer   coremedia importer   publisher   publisher in coremedia server   replicator   replicator in coremedia replication live server   system   system applications like cm documentcollector   webserver   coremedia ads and pads workflow coremedia workflow server feeder feeder for coremedia search engine  
  the result of matching the regular expression  serverdump publisher watchdog workflow webserver importer  is negated for users requesting the editor service  this means that the built in users with the names serverdump  publisher   watchdog  workflow  webserver and importer are not allowed to use the editor  trueloginpredicate allows other users to start the editor and all users to use non editor services   evaluation of login predicates is logged on the cm server in the debug log level  if you want to see login predicate results switch the log level from info  default value  to debug in the log configuration in the properties corem capserver properties file and look for the word  predicate  in the cm server log after a user has tried to log on  you do not need to restart the cm server when changing the log level  
  the ads offers the log facility generator statistics which can be used to monitor a number of key figures from the ads  
  not mandatory  by default  the statistics log is disabled  
  configure in   web inf properties corem log properties 
  before starting a component using run  please make sure that no other process of this component is currently running  especially don t use start and run at the same time  due to the fact that those processes would access the same resources  e g  files   this could lead to strange and unwanted behavior   
  after you have restarted the content editor the style group inlineformat will appear in the formatting button of the toolbar and the tab inline text of the attribute editor and the style group list style will appear in the list tab of the attribute editor    the attribute addstylesheetgroups   as you can see from the example above  multiple style groups can be added to the addstylesheetgroups attribute  simply separated by blanks  the element names in the brackets are optional  they limit the offering of the style group to the elements in brackets  therefore  the example style group inline format will only be offered for inline text but not e g  for paragraphs and the style group list style will be offered to bullet and numbered lists  you can use the p  table  tr  td  li  ul  ol  a and img  elements of the coremedia richtext     dtd file and the additional keywords inline  block or flow    inline  the style group will be offered for all inline elements   block   the style group will be offered for all block elements   flow  the style grou p will be offered for all elements    if you use one of these additional keywords  you cannot add any other element or keyword to the style group  for example inline format ul block  is forbidden   if you want to add a style group for free text you have to add the attribute string or identifier   string  enter free text  identifier  enter free text with characters which are valid for very strict css identifiers   e g  freetext string inline   the elements toolbar and stylegroup  you can use the elements toolbar and stylegroup to configure the appearance of the style groups in the toolbar of the richtextpane  you can define for each style group   to be displayed as a combobox  default   to be added to the  button  not to be shown in the toolbar   add the element toolbar as a child element of the element property and the element stylegroup as a child of toolbar  stylegroup has the following two attributes       
   attribute description name name of the style group to configure  show   how to display the style group  the following options exists   button  add style group elements to the  button  combobox  add as a combobox to the toolbar  false  do not show style group in toolbar   
  this chapter consists of    a general part for all installable components  and for each component   and component related parts that cover specific topics e g  configuration options during setup   a windows installation serves as an example here  an installation under unix is done in analogy   
   key value time time of statistics gathering  milliseconds since           interval number of milliseconds since the last statistics gathering and counter reset  the interval corresponds to the api configuration generator statisticsinterval  default   min    jvm 
   key value heap free free java heap in bytes  this value is a snapshot  the effective value after garbage collection might be higher  heap total java heap capacity in bytes   ads event queue 
   key value eventqueue length number of events still to be processed eventqueue received number of events received in the interval  eventqueue processed number of events processed in the interval  
   key value blobs streamed number of blobs streamed from the content repository database during the interval    documentcache size  foldercache size number of cached document folder objects    documentcache hits  foldercache hits number of accesses to an already cached document folder during the interval    documentcache misses  foldercache misses number of accesses to documents folders not in the cache in the interval    documentcache faults  foldercache faults number of loaded documents folders due to cache misses during the interval    documentcache removed  foldercache removed number of documents folders removed from the cache during the interval   
   key value pagecache size number of pages in the cache  pagecache hits number of accesses to already cached pages during the interval  pagecache misses number of accesses to pages not in the cache during the interval  pagecache faults number of newly entered pages during the interval  pagecache removed number of removed pages during the interval  pages allocated number of newly allocated pages during the interval   pagecache faults   pages deleted number of deleted pages during the interval   pagecache removed   pages recomputed number of cacheable page generations during the interval  pages invalidated number of page invalidations during the interval  pages revalidated number of pages revalidated without regeneration during the interval  pages delivered number of delivered pages during the interval  pages delivered cacheable number of delivered cacheable pages during the interval  pages delivered noncacheable number of delivered dynamic pages during the interval   
   key value pageobjectcache size number of deserialized pages  pageobjectcache hits number of accesses to already cached object pages during the interval  pageobjectcache misses number of accesses to object pages not in the cache during the interval  pageobjectcache faults number of newly entered object pages into the cache during the interval  pageobjectcache removed number of object pages removed from the cache during the interval   
  ads cache consistency requires the timely processing of repository events  since these events carry information about changes to the content repository  interruption of event processing over a longer period of time will thus lead to outdated cache contents  under normal circumstances the event queue should always be empty or emptied quickly    the event queue may become blocked as follows  an event for a content object that has just been read by a cacheable template can only proceed after that template has completed execution  the event and all following have to wait  if that template does not terminate or runs for a considerable amount of time  the event queue will stall  in such a case  the entry  invalidationstack  in the ads status page can help identify the offending template  it displays the stack of recursive invalidations up the stalled one   ads and content repository 
  the ads repository api does not cache access to blob data  each invocation of blob writeon is served from the content server s database  caching must thus be provided by the accessing template  the number of streamed blobs should not be increasing with every page access  otherwise the database gets easily overloaded   the values  misses  faults  removed  of the resource caches are interdependent  a cache miss normally leads to a cache fault  in a full cache another element must be evicted to make space for the new one therefore the three values will converge   an indicator for the effectiveness of a cache is the ratio of hits to total accesses  hits    hits misses     hit rate     page cache 
  the values of the pages   keys are complementary to pagecache   key values  the latter ones  as well as pages allocated  pages deleted  refer to objects in the page cache  the same object may be repeatedly used for page generations and is not necessarily removed from the page cache on an invalidation     rather it remains as  invalid  in the cache  the values of the keys pagecache   are therefore only significant for the cache s working set  how fast are pages rotated into and out of the cache   not of the number of page generations   page serialization cache 
  this cache accelerates the execution of the method hox corem servlets context getobject by caching the deserialization operation of the file into a java object  the same discussion as for the values of the pagecache   keys applies  too  pageobjectcache   is indicative only for the cache s working set  not for the invalidation rate  
  the coremedia cms is event driven  for each repository change an event is generated and send to all listeners  listeners are for example  the replicator of a replication live server the workflow server the pads  indexer etc   it is also possible to write own clients which act as listeners    all events are written to the changelog table in the database with a timestamp attached  therefore a listener which was offline for a while can catch up with the current repository state by replaying all events since it was offline  
  if you delete events from the changelog  listeners which try to retrieve these events will fail  in particular  replication that have not caught up with the master live server will become unusable  
  prerequisites  if you want to truncate the changelog table the following prerequisites should be fulfilled   little load on the system for example at the evening  all clients which use the changelog are up to date  new backup of the system has been made  truncate the changelog  if you truncate the changelog you should not delete all entries  you may leave        entries which is a good value proven by practice  proceed as follows  get the maximum sequence number from the database using the following sql statement   select max sequenceno  from changelog    delete all but the last        entries from the table  replace  limitsequenceno  with the maximum sequence number minus          delete from changelog where sequenceno    limitsequenceno   all but the last        entries are deleted from the changelog table  
  by means of the destroy tool  you remove the indicated objects permanently and irrevocably  use with great care  this tool is typically needed to recover from error conditions only  
   property value default description import user string importer the name of the coremedia user with which the importer logs on  make sure that the user has the rights required to carry out operations triggered by the import process  e g  creating a new document  editing  approving  publishing  for this purpose  the standard coremedia installation offers a pre defined user called importer  password also importer   import password string importer the password of the user to log on with  import autologoutseconds int    this property defines the time of inactivity in seconds after which the importer should log off  when the importer is active again  it will log on at the server automatically  a value of      means that the importer will not log out  import multiresultgeneratorfactory property sleepingseconds int    an importer remains logged on per default  whether data are imported or not  when configuring subdirgenerators  the property defines the number of seconds for the importer to be inactive after the completion of the import  if the number of seconds is very large  it is reasonable to logout the importer automatically  in this case  the released importer licence can be used by another importer  note that the special value      will cause the importer to terminate after importing the contents of the inbox directories   
  the following configuration deals with the preparation and transformation of source documents  both are generic  thanks to the importer api  since this part of the configuration depends on the source format  this part of the configuration should be conducted by the respective developer himself   the log action entries concern the amount and format of the log outputs  the debug output of the importer is voluminous and should only be activated for analysis of problems  for normal use  the level info is convenient  
   property value default description import loginattempts  int    this property defines the number of failed login attempts after which the importer aborts  if import loginattempts    the importer tries to login without abortion  import enforcecompleteversion  boolean true   this property handles the processing of xml importer files  see the importer developer manual for details on the coremedia xml format   import enforcecompleteversion true for each  version  element in the importer file a new version will be created in the coremedia repository  for all properties of a version the values must be given  it is not allowed to omit a property  import enforcecompleteversion false now it is possible to omit even all property elements of a version  if there are only action elements  see the importer developer manual  and the document already exists on the server  then no new version is created and the corresponding actions are applied to the document  delete  or to the latest document version on the server  approve  delete   if there is at least one  property  element in the  version  element then for every property that is specified in the document type but missing in the xml importer file  the property value of the predecessor document version ist taken  if there is no predecessor version  then a default value is inserted  that depends on the property type  the default property values are those that hox corem scripting folder createdocument   creates for a specified document type  import validate textproperty  boolean false if  true  the importer validates all xml text properties against the associated dtd  if a validation fails  no document is created on the server  for big xml properties the validation may take a while   
  when a document is checked in  validators test whether certain conditions are fulfilled  at the present time  four validators are delivered with the coremedia editor  these check  whether a field  is filled  is filled with a certain pattern  contains an integer in a specified range a link list field can be checked for a minimal  maximal number of entries and for unique entries  in addition the allocation of a linklist field can be checked   another class can be used to combine several validators and one always validates to  true    in addition own validator classes can be written  these classes implement the interface hox corem editor validation validator  and must be specified via the element  validator     
  all tabs of the attribute editor contain the already described attributes direction  background color  color  font  font size and language  in addition  you can use the following attributes    table tab   attribute summary      the use of this attribute is project specific    row tab   attributes vertical alignment      horizontal alignment      the text of the table row will be respectively vertically or horizontal aligned    cell tab   attribute vertical alignment      horizontal alignment      abbr       the text of the table row will be respectively vertically or horizontal aligned  the use of abbr  is project specific     copy tables and table cells  you can copy tables and table cells into tables  there exist two variants   copy into multiple selected cells copy into one cell  copy into multiple selected cells  if you copy tables or table cells into multiple selected table cells  the selected cells are merged and the cells to insert are integrated into the cell  the cell attributes of the cells to insert are conserved  table and cell attributes get lost  proceed as follows  copy a table or table cells into th clipboard  select multiple cells in the target table  paste the data from the clipboard   the table cells are merged and the copied cells integrated  
  copy into one cell  if you copy tables or table cells into one table cell  they are inserted as a nested table  all attributes of the inserted table or table cells are conserved  proceed as follows  copy a table or table cells into the clipboard  select a cell in the target table  paste the data from the clipboard   an nested table appears in the target table  
  script based installation allows automatic execution of the coremedia sci installer  by using a text script file coremedia components and their basic configuration can be installed without further user input or graphical display   this way the installation of different coremedia components could be done e g  on distributed unix computers from a central computer via telnet or ssh connection   to execute a script based installation  use the  p  function  play script  of the installer   the script based installation can be executed using the command   java  jar cap  rel no   jar  p  install script   if no file name is entered for the script file  the file install script is used as default  different configurations can easily be archived with the help of different script file names  if the installation is to be carried out on an external computer  the files cap  rel no   jar and install script must be copied to this computer in a directory with read write rights and then the command given above has to be executed   
  the methods setfileuploader and setjmsuploader are automatically called by the beanparser which parses the file pads xml  in order to set the default fileuploader in your delegate for example  you have to define the delegatinguploader as follows in the pads xml file    uploader class  my uploader delegatinguploader      fileuploader id  file    directory  upload  filter          uploader   for the jmsuploader it is straight forward  
  if you want to extend the functionality of an uploader without writing your own implementation you can use the decorator pattern  you have to write a class which implements uploader  and which has a method setfileuploader or setjmsuploader  
  between coremedia cap        and        there have been some changes in the workflow api  this chapter gives a short upgrade instruction due to the changes  the package names in the files workflowserver jpif  workflowclient properties and workflowserver properties have changed  merge the changes with your specific settings in the files of your previous installation  prepare your workflow system as follows  
  be aware that a document created on the content management server published to the master live server and replicated to replication live server will be independently created on each server  while implied properties like name or id are the same on each server  all properties concerned with creation  creationdate   creator   etc   are different on each server  that is  a call to getmodificationdate    for example  gives different dates on the multiple servers for documents with the same id  
    class  description  aggregatingimageblobeditor    this editor displays blobs of type image gif  image png or image jpeg in the property as an image  in addition  you can define other properties which contain scaled versions of the blob  this blobs will be computed from the original blob by the coremedia server  the size of the scaled images is defined in the imageconverter properties file  see the server chapter of the administration manual   you can use the following attributes to define scaled versions of the blob    onlineproperty   propertyname     sets the name of the property which should be converted when the blob contained in the property of the aggregatingimageblobeditor changes  the size of the image is defined with the onlinewidth and onlineheigth properties of the imageconverter properties file    originalproperty   propertyname    sets the name of the property which should be converted when the blob contained in the property of the aggregatingimageblobeditor changes     thumbnailproperty   propertyname   sets the name of the property which should be converted when the blob contained in the property of the aggregatingimageblobeditor changes  the size of the image is defined with the thumbnailwidth and thumbnailheight properties of the imageconverter properties file    example     document type  photo      property name  scannedphoto  editorclass  aggregatingimageblobeditor  thumbnailproperty  preview     onlineproperty  online        document   basicblobeditor  generic editor which only displays blob size and content type  files from the file system can be loaded and saved  using the property webdavuriprefix  the blob can be opened directly in the associated webdav application  for this  the property has to be set to the url prefix for the webdav server  if a prefix like http   server      webdav  is used on a blob in a document  inbox test doc  then an url http   server      webdav inbox test doc for webdav lookup is used   imageblobeditor  displays blobs of type image gif  image png or image jpeg as an image  if the size of an image exceeds the document window size  it will be scaled down  you can use the attribute imagescaledfordisplay  false  to disable the behaviour  textblobeditor  allows editing of blobs of type text   in a text field      
  to deinstall some or all coremedia components of a coremedia system  a graphical uninstaller exists   on unix platforms the unistaller is started in the  uninst directory of the coremedia installation with the command   juninst coremedia ju  under windows os  the uninstaller is activated by software administration in the system control panel  
  in both cases all files will be deleted which haven t changed  manually or automatically  while and after installation of the coremedia system   on deinstallation of components of coremedia sci the previous installation of these components will be restored  if available  
  the following features have been added to the rights system   the new right  folder  can be attached to a folder  if you use the database of a previous coremedia cap     installation  existing rules attached to a folder will be automatically extended by the  folder  right   rights can be granted to document types  if you use the database of a previous coremedia cap     installation  existing rights will be automatically granted to all document types  license groups  these groups have to be attached to a user  who should be enabled to use licensed features of the coremedia system  e g  a user  who should use the coremedia editor  must be a member of the editor service group   workflow groups  these groups have to be attached to a user  who should perform some tasks in the four eye workflow  e g  a user who should be enabled to approve a resource  must be a member of the approver rule group    
  the directory layout of the active delivery server has changed as well as the format of the configuration file  formerly known as config jsp is it now config bsh   directory layout  the layout of the generator is now compliant to the servlet standard  all required files are below the servlet context directory  the easiest way to upgrade is to install a new context via installer and copy additional or modified files to their respective locations   required jar files have to be stored in  context  web inf lib   all required libraries of the active delivery server core are installed by the installer  if you plan to run multiple coremedia contexts in the same container the orbacus orb  ob jar  is required to go in a shared classloader  it cannot reside in web inf lib   for tomcat  the installer automatically places the file in the application global library lib apps   property files have to be stored in  context  web inf properties corem   required are capclient properties  former corem properties   mime properties  log properties  templates using the sci client api also require the file validation xml  all these files are installed by the installer   configuration file  coremedia cap version   x uses a file named config jsp for configuration of the active delivery server which was executed once per active delivery server startup  since using the jsp engine during application startup is implemented differently by various containers  the initialization procedure has been changed to run a bean shell script  called config bsh  from the folder web inf   this file has java syntax  with optional ommitance of types  and has access to the instance of hox corem servlets generator through the variable generator   accordingly  usage of jsp usebean and jsp setproperty is no longer supported  instead the respective java equivalents have to be used   defbean  beanname   org beans bean class  defines an application scope bean    setting a bean property is now performed through invocation of the respective setter method   see the installed file config bsh for details  for more documentation on bean shell  please refer to http   www beanshell org  
  you are using sun solaris and while starting the server the error message  couldn t set locale correctly  appears   possible causes   the package sunwceuos is not installed on the machine   possible solutions   install the package  
  this manual is addressed to developers of coremedia projects who want to develop effective and appropriate content applications using the cae and editing services that was introduced with coremedia cms       it is also intended for developers who want to add content from the coremedia repository to an portal application  they ll find a description of ideas and concepts  building blocks  and detailed examples  
  richtextfield  text component for editing text in only one line  the text must correspond to the coremedia richtext     dtd  all the attributes from richtextpane are valid   richtextpane  text component for editing text which corresponds to the coremedia rich text dtd   lib xml coremedia richtext     dtd   you can configure the richtextpane with the following attributes  
   pastetransformation    child elements   transformelement     ignoreelement     parent element   property    use the  pastetransformation  element if you want to customize the paste operation of the richtext pane   
  some restrictions exist when using java     generally mixed usage of older java versions and java   is not supported for cms components    some of the recommended third party components only support java   under certain circumstances  hence the following restrictions exists   oracle database is only supported for coremedia components  if the oracle jdbc driver version        is used  microsoft sql server database is only supported for coremedia components  if the microsoft sql server      jdbc driver is used          
  a coremedia system has to rely on several different   rd party  software components  for proper operation  coremedia tests coremediacms      with the most common combinations used by our customers and distinguishes between two levels of approved infrastructure components   certified level certified infrastructure components are extensively tested to work with the coremedia sci system  every infrastructure component approved with the first final cms release is certified   it is recommended to use these components for productive systems  supported level   supported infrastructure components will also work with coremedia components but they are tested less exhaustively  because they are released after the first final cms release  they also can be used for productive systems  refer to the notes html file for announcements of additionally supported environments or the appendix of this manual     note  the state  deprecated  is also used on occasion  deprecated infrastructure components are either of certified or supported level in the current version of the coremedia cms but do not carry official approval by coremedia beyond this version  
  if you want to install a workflow server proceed as follows  select the coremedia workflow server option and press  next    you will be asked  if you want to install the analytics data aggregator  you need this component for every installation of an analytics engine   
    enter the ports of the tomcat installation into the appropriate fields and click  next    if you have chosen one of the web application templates and or editing services for jsf you have to configure the objectserver properties file  here you can enter the data necessary for connection with the content server    
  how to add properties depends on the property type   for properties of the type   xmlproperty blobproperty linklistproperty  proceed as follows  add the new property types to the document types definition file  restart the content server   for properties of all other types proceed as follows  stop the content server  change the document types definition file  be sure  that the properties sql schema checkcolumns and sql schema altertable in the  contentserverhome  properties corem sql properties file are set to  true  restart the content server   
  if your cm servers are running on a windows platform  register the servers as windows service with the command cm contentserver install   a    u user  p password  as described in chapter   start all the cm servers with the command cm capserver start  on windows platforms you can alternatively launch the servers from the corresponding start menu item or from the windows services window  see chapter for details   when executing for the first time  this command creates the data schema from the doctypes xml file  depending on the file size this can take some time  look into the contentserver out and contentserver log files in the var logs directory to see system and error messages   if your coremedia workflow servers are running on a windows platform  register each coremedia workflow server as windows service with the command cm workflowserver install   a    u user  p password  as described in chapter   start the coremedia workflow servers with the command cm workflowserver start   on windows platforms you can alternatively launch the coremedia workflow servers from the corresponding start menu item or from the windows services window  see chapter for details    now you need to choose and upload one of the predefined workflows to the coremedia workflow server instances  you can omit this step if you have purchased a coremedia workflow server  unlimited edition  and want to use only your own workflows with your own workflow groups  the valid predefined workflow names are defined in section        to upload one of the predefined workflows with the upload utility  execute cm upload  u admin  p  password   n  workflow name  and replace  password  with the password of the admin user  id    and  workflow name  with one of the names listed in section        e g  three step publication xml  be careful  if you do not have the unlimited edition  but a coremedia workflow server  single workflow edition   you may upload exactly one of the predefined workflows  your chosen workflow cannot be changed without support of coremedia  please make sure to select the right workflow  the license restriction does not apply to the global search and replace workflow  if you have chosen this workflow  you can later upload one of the other predefined coremedia workflows  but again only once   if you want to use the global search and replace workflow  recommended  you have to upload the global search and replace workflow with the upload utility  execute the command cm upload  u admin  p  password   n global search replace xml and replace  password  with the password of the admin user  id     to start this workflow a user must be member of the group composer role   if you have purchased a coremedia workflow server  unlimited edition   you can adapt the global search and replace workflow to your needs   if you have a coremedia workflow server  unlimited edition   you can continue uploading further workflows in the same way as described for the global search and replace workflow in the previous step  the upload utility is described in chapter   after successful initialization  the password of the administrator  admin  and other system users  watchdog  importer  etc   should be changed in order to guarantee the security of the system  go to the user management window in the editor for this purpose  see section         make sure to update all relevant configuration files   later cm server starts  later you start the coremedia server with  cm contentserver start   r maintenance   admininstration   online   wait  until the server is up and start the workflow server with  cm workflowserver start   in a windows environment you can optionally launch both servers from the corresponding start menu items or from the windows services window   for description of the options see section  you can omit the run level argument if you want to start the servers in online mode   the server can be stopped with  cm runlevel  r offline   g  grace period     running clients are informed in regular intervals about the server shutdown  if this method does not work  use cm contentserver stop  on a windows platform you can optionally open the windows services window to stop the registered service  if you have started the server under windows with cm contentserver run  close the dos window with  ctrl     c  or with the task manager   under unix  you can stop the workflow server with  cm workflowserver stop   in a windows environment you can optionally stop the workflow server in the windows services window  if you have started the workflow server under windows with cm workflowserver run  you can close the dos window with  ctrl     c  or the task manager   to check whether the cm server is running  try to reach the server  for example with telnet   telnet  serverhost   server http port   if the server is running  a connection can be established  otherwise it fails   start both servers before all other coremedia components which must communicate with them  a server restart is necessary when the database connected to the server is restarted  
  the meaning of the properties of the sql properties file are described in this section  please read the other sections of this chapter for database specific configuration   connect to the database  these properties are used to connect to the database   
  each webdav folder which represents a coremedia folder contains an html information file that displays some additional information  the information file is not contained in webdav folders that represent a coremedia document with folder mapping  the information file contains the following   the name of the logged in user   the exported document types   the file extensions associated with the exported document types   the locked documents of the user  members of the administrator group also see documents locked by other users  the name of the webdav application which locked the document   a list of error messages that occured during the last webdav requests      errors occur if you do not have the appropriate rights  http error code      or when problems appear during writing  for example when a string is longer than allowed by the string field     
   parameter description  g delays the runlevel switch for the specified number of seconds  this gives users the chance to save their changes and logout  during the grace period the runlevel switch can be aborted with the  a option   w if used with  r  the utility will not exit before the target runlevel has been reached  exit code    or the specified number of seconds have passed  exit code     the utility will not fail  if a runlevel change has already been scheduled  it will not reschedule another change  but just wait for the specified runlevel to be reached   if the server is not available when the utility is run  it will not fail but keep trying to connect or time out after the specified number of seconds  if time out is met runlevel will exit with exitcode     a abort a pending runlevel switch triggered by a recent invokation of runlevel   r specify the new runlevel  the legal values are see section       for details   
  merge tables  if you have nested tables  you might merge an inner table with an outer table   place the cursor into a cell of the inner table  select flatten tables from the table menu   the cells of the inner table will be added to the cell of the outer table which contains the inner cell  
  menu bar        the menu bar contains the menus as they are available according to the chosen resource and the user s rights  basically  they provide access to all webeditor editing functionalities and allow to open other windows  tool bar        the tool bar lets you access the most common features via icons  document overview     and document overview title bar        it displays the documents  but not subfolders  of the selected folder  these can be sorted by document type  document name  date of creation  and version  all ascending or descending      a double click on the document opens the document window  a separate  resizable window for editing  see illustration   folder overview        in the folder overview the folder hierarchy of the project can be viewed and modified  detail view      shows the chosen document with all its fields and contents in the chosen version  if you have only chosen a folder but not a document  you will see some folder information in this view   
  in addition to images all other kind of binary data can be used in coremedia sci  these data simply have to be defined by their mime type in a field of type blobproperty  by this  text files  mp  or flash files can be integrated  binaries are saved and loaded like images  in abbildung you see a document containing a blob property opened in the document window  
  system components  a coremedia sci system has the following components and features   content management environment  the content management environment  may consist of contentmanagementserver  workflow server  the coremedia search engine a preview ads  a preview cae supporting editing functionality with editing services for jsf   the analytics engine  the differencing engine  the editors and importers  connected to a database  it keeps the current documents as well as the recycle bin  an archive for the storage of deleted documents   coremedia editor    the coremedia editor provides a graphical user interface to create and edit documents in the production environment  furthermore  it features workflow management for editorial processes  user administration for access to documents  document status and version management  hyperlink management as well as web preview for the online appearance of content  coremedia differencing engine    the coremedia differencing engine  a new feature of coremedia cms       is a web application that computes the difference of two document versions  a user who displays a document in a coremedia editor can start a web browser to show the differences between two document versions    coremedia web editing server    the web editing server combines access to the coremedia repository without using the coremedia editor  it runs the so called web application generator extensions  wage  and is thus capable of modifying the sci repository and participate in workflows  it plays out web forms and dhtml pages that allow the user to interactively change document properties  create new folders and documents  accept offered tasks  modify workflow variables  and so on  it offers a framework which consist of server side components  an extension to the generator api and controller components based on jakarta struts  and client side components  based on dhtml   javascript  that are reusable and flexibly adaptable to the web application s needs  in addition  it supports the webeditor which can be seen as the web equivalent of the coremedia editor  it is a browser based editing tool that comes with limited functionality  without user administration features  but has all advantages of not having to install a client on a local disc  as a third functionality the coremedia web editing server offers webdav support  importer    content from external sources can be imported into the production system  a freely adaptable importer framework based on jaxp is used to build content sets and pipelines and to invoke content transformations  using xsl  dom and streams  workflow server    depending on whether you have purchased the single workflow or the unlimited edition of the coremedia workflow server  you can install a single workflow or an unlimited number of workflows  in both cases  the workflow server administrates all workflows  the workflow server is used to approve and publish resources   content delivery environment  the content delivery environment may consist of the master live server  several replication live servers  which are optional   the active delivery server  the proactive delivery server  the coremedia content application engine the search engine and the analytics engine  it holds the approved and published online data   replication live server the optional replication live servers replicate the content of the master live server in order to enhance reliability and scalable performance  active delivery server html pages are created with the coremedia active delivery server and coremedia templates  in the following also  templates    content and layout are combined for publication in the internet by the ads  the templates are based on the java server pages standard and provide the basis for layout  they can display both static and dynamic content  this technology allows to generate different export formats  xml  wml  pdf  etc    coremedia content application engine the coremedia content application engine represents a stack for building client applications with coremedia cms  it is a web applications framework which allows fast development of highly dynamic  supportable and personalizable applications  it also allows to create editing applications using editing services for jsf  portal server integration you can embed content from the coremedia repository into portal servers  the portal server integration allows to edit content right in the portal  please see the content applications developer manual for details  proactive delivery server the coremedia proactive delivery server  pads  is a web application which creates output data like html pages each time new content becomes available through a publication  this complements the more common use case of the coremedia active delivery server  where rendering is triggered by requests for uncached pages   shared components  coremedia search engine a coremedia cms system contains an integrated fast search engine which can be used from the editors on content management site and from the applications on content delivery site  e g  the editor can perform a fast full text search in the complete repository  coremedia web services engine the web services engine allows access to the coremedia system using web services  it can be used on production side  e g  to program own clients and on live side  analytics engine the coremedia analytics engine extends an existing coremedia content management and content delivery environment with capabilities to analyze visitor activity on produced sites and to report on the management environment s status  it comprises in site analytics for the fine grained and prompt visualization of current site visitor activity and an analytics dashboard for long term  drillable compilations of site visitor activity and repository status overviews  these two distinct applications provide users with an encompassing overview of site activities   technologies  the following technologies are featured by coremedia smart content technology   webdav    the coremedia sci supports webdav  this support allows you to edit content with webdav enabled applications such as photoshop  golive  etc     webdav  web based distributed authoring and versioning  is an ietf standard set of platform independent extensions to http that allows users to collaboratively edit and manage files on remote web servers  webdav features xml properties on metadata  locking   which prevents authors from overwriting each other s changes   namespace manipulation and remote file management  ldap    the coremedia sci supports ldap server for user management     lightweight directory access protocol  ldap  is a set of protocols for accessing information directories  it is based on the standards within the x     standard  but is significantly simpler  unlike x      ldap supports tcp ip  which is necessary for any type of internet access  because it s a simpler version of x      ldap is sometimes called x     lite   net coremedia sci allows to integrate  net applications   net is software for connecting information  people  systems and devices developed by microsoft   net provides xml based interoperability  web services you may access coremedia sct functionality via web services   communication  communication between the individual components on both the production side and the live server is performed via corba  the production and live systems can be secured with a firewall if the servers are located on different computers  the server contact the databases over a jdbc interface   processing  on the production side of the coremedia system  content is created and edited with the editors  with custom clients or imported by the importers  once editing or import of documents is completed  they are approved and published via the coremedia workflow  during the publication process  the content is put online onto the master live server  if  available  replication live servers get noticed and reproduce the changes  then the content is put online by the replication live server   the ads in connection with the web server or the content application engine creates html pages or any other format  wml  xml  pdf  etc   from the content and coremedia templates  usage of the pages generated by the cae could be analyzed using the analytics engine  
  this manual describes the customization of the coremedia editor by means of predefined or self implemented classes  the coremedia editor is a java swing application which offers a full grown editor api to the developer  the editor consists of four main windows which are all subject to configuration   the explorer window in which you can inspect and edit the folder and document structure  the document window in which you can edit the documents  the query window in which you can retrieve information  the workflow window in which you can create and edit workflows     configuration of the first three windows is covered in this manual but the workflow window is covered in the workflow developer manual   the next figure shows the explorer window of the coremedia editor   
  the coremedia smart content technology has been developed to provide a convincing and universal solution for the creation and management of content   the use of powerful development tools and open interfaces enables the system to be adapted flexibly to enterprise requirements  for this purpose  world wide standards for information transfer  such as xml  html  http  webdav  corba and the java platform are used or supported   a coremedia system is divided in the content management environment for content creation and the content delivery environment where the content is presented  the following figure provides an overview of the coremedia sci components  
  the file editor properties contains settings for the following points     user login   logging of the editor   the url of the xml configuration file of the editor   the url of the css file used for the rich text pane    embedded document view   the number of results from a user or group query in the user manager window  
  the proactive engine is a component for computing values and keeping them up to date  this chapter describes proactive engine related administration issues without explaining the underlying concepts  have a look at the content application developer manual for further details   configuration  the proactive engine application template s files are structured as  
  the following code fragment shows the basic structure of a page that uses the analytics tag library       taglib prefix  analytics             uri  http   www coremedia com analytics                 html     head               analytics head               head     body       analytics pagecontext object    self   view                         analytics link object    anobject   view                            analytics link                  analytics pagecontext      body    html   before being usable  the tag library has to be defined in the page and be associated with a namespace  the taglib s uri name pattern specifies the taglib s name  its version and the jsp version it is designed for  the current taglib s version is       jsp     vs  jsp      if your application is following the jsp     servlet     jstl     specification  you must include the taglib for the     version of jsps       taglib prefix  analytics    uri  http   www coremedia com analytics             if your application is following the jsp     servlet     jstl     specification  you must include the taglib for the     version of jsps       taglib prefix  analytics    uri  http   www coremedia com analytics             each html page that makes use of the taglib s functionality must define the  analytics head   tag in its head tag  the  analytics head  imports the necessary javascript library  next  the identity of the current page is indicated using the  analytics pagecontext  tag  individual links are marked using the  analytics link  tag  the link context tag also encapsulates the invocation of the link formatter for computing the actual target url  so that the overlay complexity of the page will hardly change   if a jsp is included in another jsp  it should not again invoke the  analytics head  or  analytics pagecontext  tags  you can simply use link contexts as shown above   in order to structure a page further  you can use the  analytics objectcontext  or  analytics namecontext  tags  which must appear inside the  analytics pagecontext  tag  both tags may be nested  different contexts distinguish links to the same target  so that you only need to use object contexts or name contexts if you link to the same target page more than once on a single page   
  the  analytics head  tag includes common javascript code for click tracking in a page  the tag should be placed before the first link  this avoids javascript errors when links are clicked while the page is still being loaded   this tag allows no parameters  
  the cae framework provides jmx access for several of its internal components which may be used for management and monitoring  each cae service features a jsr     based jmx connector server containing the cae s management beans  you may connect to this server using any compliant jmx console  such as jconsole which is bundled with sun s jdk      http   java sun com  or as mc j  http   mc j org   have a look at http   java sun com j se       docs guide jmx index html for a first introduction to jmx   each cae service  such as the cae web application  has a configurable property called management jmxremote url which defines a url under which the jmx connector server is reachable  as a default  the url is set to service jmx jmxmp   localhost       which starts a server on the service s localhost at port      using the jmxmp connector  in order to connect to this jmx server  you have to enter this url within your jmx console   for mc j  version    b   start mc j select management   create server connection  a new wizard opens  choose jsr    as server connection type  enter any value in the field name   enter the above mentioned url inside the field server url  click  next   a screen opens  click  finish   the new connection is is displayed in the mc j connections panel now   for jconsole  prerequisite  make sure that jmxremote optional jar   which is provided by the cae  is in jconsole s classpath  start jconsole  for unix      jdk   bin jconsole  j classpath   j  jdk   lib jconsole jar  path to jmxremote optional jar  for windows     jdk   bin jconsole  j classpath   j jdk   lib jconsole jar  path to jmxremote optional jar  where a system variable jdk  is set to the jdk     installation home     select connection   new connection  a new window opens   click the  advanced  tab  enter the url in the field jmx url  click  connect   a new console window opens     
  the  analytics namecontext  tag is used to identify a section of the page using a string valued name   for example  the following jsp fragment defines one link in the context ctx  and one link in the nested context ctx  ctx     analytics pagecontext         analytics namecontext name  ctx         analytics link          analytics link       analytics namecontext name  ctx           analytics link          analytics link        analytics namecontext      analytics namecontext    analytics pagecontext    by default  one rendering of an entire page is logged as a page view  however  by setting the logview attribute to true  every rendering of a name context will be written to the analytics log and will show up as a context view in the database  this is particularly useful when your pages contain variable parts like rotated teasers of session dependent content  allowing you to track the number of times that a certain element is rendered on a page  
   x x x x name string  the name of the context logview true false false whether to log the rendering of this context in the analytics log  
  the  analytics objectcontext  tag is used to identify a section of the page using an object  the object is converted to a string by means of an id provider   for example  the following jsp fragment shows a nested context consisting of two beans    analytics pagecontext         analytics objectcontext object    self beanone         analytics link          analytics link       analytics objectcontext object    self beantwo           analytics link          analytics link        analytics objectcontext      analytics objectcontext    analytics pagecontext    like in the case of a name context  you can set the logview attribute to true to enable the loggin of context views  
   x x x x object object  the object that defines the context logview true false false whether to log the rendering of this context in the analytics log  
  using the  analytics link  tag you can easily generate a link that supports click tracking  typically you only provide the target object and optionally the target view when invoking this tag    analytics link object    self targetobject   view  myview           analytics link   when rendering the page  the tag is replaced by an anchor element of the form  a href       onclick         the target url is computed from the given object and view  the javascript code rendered into the onclick handler also contains a representation of the click target    it is possible and often necessary to compute the target object using an el expression  the given object is then processed by the configurable target object resolver  which may replace it by another object  thereby normalizing the link   the locale of the target page is also computed using the target object resolver  if the target object resolver cannot compute a locale  the source locale is used  if you want to set the target locale explicitly  you can add the locale property to the tag    analytics link object       view       locale  en us    in some cases  the target url that is rendered by the tag library is not appropriate  in this case you can explciitly pass in the url    analytics link object       view       href    theurl     you still have to pass the object and the view  so that they can be used for the tracking mechanism  but you get the freedom to add more parameters to the url or render a nice shortcut url  obviously  the url has to resolve to the given object and view ultimately   most html attributes that are allowed for the  a  element are also allowed for the link tag and normally  the same name is used  an exception is the class attribute that has to be rendered using the styleclass parameter    analytics link object       view       styleclass  myclass    this is rendered as    a href       onclick       class  myclass    an onclick handler is generated automatically to support link tracking  if the onclick attribute is set explicitly in the  analytics link  element  the given value is appended to the generated onclick handler    adding parameters to analytics link  adding url parameters to  analytics link  using  cm params  is not feasible  if you want to add link parameters to  analytics link  you can use a workaround which employs  cm link  and  cm param  together with  analytics link   the following snippet shows how to enable url parameters in  analytics link     cm link var  paramlink  target    sk page self self          cm param name  foo  value  bar         cm link   analytics link object    sk page self self     styleclass  sk link  href    paramlink          the following table summarizes the permissible properties  
   x x x x accesskey string  the accesskey pass through attribute charset string  the charset pass through attribute coords string  the coords pass through attribute dir string  the dir pass through attribute href string the url formatted using object and view the href override attribute hreflang string  the hreflang pass through attribute lang string  the lang pass through attribute locale string the computed locale that language of the target page logclick true false true set to false to disable the generation of a javascript callback handler for tracking click on this link name string  the name pass through attribute object object  the object that defines the target page onblur string  the onblur pass through attribute onclick string  the onclick attribute  which is appended to the automatically generated onclick handler  if needed ondblclick string  the ondblclick pass through attribute onfocus string  the onfocus pass through attribute onkeypress string  the onkeypress pass through attribute onkeydown string  the onkeydown pass through attribute onkeyup string  the onkeyup pass through attribute onmousedown string  the onmousedown pass through attribute onmouseup string  the onmouseup pass through attribute onmouseover string  the onmouseover pass through attribute onmousemove string  the onmousemove pass through attribute rel string  the rel pass through attribute rev string  the rev pass through attribute shape string  the shape pass through attribute showstatistics true false true whether to show an overlay report for this link style string  the style pass through attribute styleclass string  the class pass through attribute tabindex string  the tabindex pass through attribute target string  the target pass through attribute title string  the title pass through attribute type string  the type pass through attribute view string the default view the view of the target page  
  the analytics engine keeps all data in a central database  except for some auxiliary tables  the schema is public and can be read from arbitrary applications that require access to the statistics  after an explanation of some basic concepts  all tables are discussed individually  
  the tables that are defined in the analytics database can be grouped according to their usage during data aggregation and rendering   during the aggregation process  page view events and other events are first written to the staging tables  based on the contents of the staging tables  dimension tables are maintained  dimension tables assign numerical ids to string valued attributes  possible even condensing multi column keys  this greatly reduces the space that is required for storing the actual data permanently  because long string values are only stored once  it also speeds up processing when comparing values and joining tables   using the staging tables and the dimension tables  the aggregation process fills the fact tables  fact tables contain the fully processed information about each individual event  in particular about page views  but also about searches and transitions from page to page  fact tables are long lived and may become extremely large  because individual page view events are often kept for years  while the staging tables are cleared automatically by the aggregation process  it is up to each individual installation to archive rows from fact tables  because the policies for doing so vary widely   two types of statistics are derived from the fact tables  overlay statistics and permanent statistics  overlay statistics are intended to be shown as soon as possible in the in site analytics component and it is acceptable that they have to be change later on  if additional data for past time intervals appears  they are also very finely resolved  on the other hand  permanent statistics are typically hourly or daily statistics that  once generated  should be immutable  this is reflected in the table structure  which contains tables for both kinds of statistics   for repository analysis there is one table that is continuously updated in order to reflect the current repository state  another set of snapshot tables stores the repository state at given times  generally  as soon as the time for a snapshot arrives  the snapshot is taken  even if there is a delay  the snapshot is still logically associated with the desired time for the snapshot  
  when processing events into concise reports  it is often useful to group those events that have happened in a coherent time interval  time intervals are defined separately for in site analytics reports and for dashboard analytics reports   all overlay reports use a very simple model where the day is split into intervals of equal length  the interval length here is configurable  but typically it ranges from one to five minutes  it should divide    minutes evenly  a new interval starts at       gmt  possibly assigning leap seconds to the previous interval  if coarser intervals are needed  post processing has to be done after reading the data from the database   permanent reports use a more elaborate scheme  reports for different granularities are precomputed and stored in different tables  using one table per granularity  the granularities are summarized in the following table  
  you can define bookmarks in the coremedia editor in order to find important resources quickly  the bookmarks are shown in the menu  bookmarks  in the bookmarks view and in the file chooser dialog  if you click the bookmark  the corresponding resource will be opened in the explorer view  if you move a folder in the recycle bin  the corresponding bookmark will be deleted  if you move a document in the recycle bin  it will not be deleted but it will open up in the document view instead of the explorer view  in addition it can not be opened from the file chooser dialog   create bookmark  in order to create a new bookmark  proceed as follows  select the resource  to which the bookmark should point  select bookmark add bookmark from the explorer window or select bookmark from the context menu or click  in the bookmark window   now  you have created a new bookmark  which will be shown in the bookmark menu   open bookmark  in order to open the document  select the bookmark from the bookmark menu   manage bookmarks  for better overview  you might edit the bookmarks  you can rename  move and delete bookmarks from the list  select bookmark manage bookmark   the following window opens up   
  this chapter will introduce the basic concepts of the analytics engine  rather than elaborating on the technical details  an abstract view will be maintained   however  it is necessary to define some terms in order to be able to interpret the generated statistics in a meaningful way  
   icon description   rename the bookmark    move the bookmark to the begin of the list    move the bookmark up    move the bookmark down    move the bookmark to the end of the list    delete the bookmark   
  the basic unit of information that can be rendered on a web site is the object  the analytics engine does not assume anything about the internal structure of objects  however  it must be possible to derive a number of values from the state of an object   identifiers  each object is represented by a string identifier  the internal structure of the id is unspecified  but because the analytics engine uses a coremedia content application engine for click tracking  the same ids are used in both contexts  the most commonly used objects are content beans  whose identifiers are built from a prefix contentbean  and a numerical suffix   sites  objects are grouped in sites  the site of an object must not change  objects are permanently bound to their site  sites are represented by a string id  by default  the site of a content bean is computed from the content s base folder  but other schemes are possible   it is assumed that the number of sites is comparatively small  ranging from one site to about     sites   types  each object must be associated to a type  the type is represented by its name  while the type assignment is typically immutable  this is not enforced  by default  the type of a content bean is the type of the content itself   like the set of sites  the set of types is expected to be small   categories  an object is associated with a category  categories are organized in a tree  a category can be identified by the path that connects it to the root category  where the path is a list of category names  an object may change its category  typical ways of assigning categories to content beans use linked category documents or carefully designed folder trees   it is assumed that the set of categories is large  both too deep  dozens of levels  and too wide  hundreds of children  hierarchies are generally not recommended  because they tend to be inefficient or difficult to understand and maintain   age  the date of the last change to an object is recorded  for the purposes of generating statistics  the duration since the last change is condensed into a small integer  first  a set of limit durations is configured  now the numerical age of an object is n   if the duration since the last change is longer than n of the limit durations    for example  the limit durations might be   day    days    week and   month  an object that has been changed   days ago would get the age of   because   days are shorter than a week      and longer than   days  whereas an object that is already   months old would get an age of   because   months is bigger than   month   deletion status  an object may be declared deleted  in that case it is assumed to have ended its life cycle  content beans are considered deleted if they have entered the archive   publication status  an object may be declared published  in that case it is assumed to be available to the general public  content beans are considered published if they are present on the live server  
  internally  the persistent cache consists of two sub components   persistent dependency cache   this component keeps track of dependencies occurring during value computations and for handling invalidations  the dependencies are made persistent by using a database   persistent value cache  this component serializes computed values  stores them in the local file system and removes them when they become invalid    there might be scenarios where the computation of values is less expensive than putting them into a store  for this reasons  the persistent value cache is meant as an optional component  which may be enabled or disabled     the persistent dependency cache internally uses an instance of coremedia s common cache  com coremedia cache cache  as a mechanism for tracking dependencies temporarily and for detecting invalidations  this cache provides functions for defining dependencies for a currently running computation as well as functions for triggering invalidations  it may be understood as a commonly used api which is used when dealing with dependencies and invalidations  as a default  such a cache instance is shared with the coremedia unified api so that any content repository s dependency tracking is integrated  out of the box     a client accesses the persistent cache via the interface com coremedia persistentcache persistentcache while the persistent cache sends invalidation events via the interface com coremedia persistentcache invalidationlistener back to the client  the client needs to provide an instance of the com coremedia persistentcache persistentcachekeyfactory which enables the cache to reconstruct any serialized com coremedia persistentcache persistentcachekey which has been passed by the client  
  title bar     the title bar displays the name of window  path and selected resource as well as the sequential number of the window  menu bar     the menu bar contains the menus as they are available according to the chosen resource and the user s rights  basically  they provide access to all coremedia editor editing functionalities and allow to open other windows  tool bar     the tool bar lets you access the most common features via icons  folder overview     in the folder overview the folder hierarchy of the project can be viewed and modified  a plus in front of the folder means that the folder may contain subfolders  but it must not  you have to check by clicking the plus symbol  bookmark overview     the bookmark overview shows the selected bookmarks  you can follow a bookmark from this view  document overview     it displays the documents  but not subfolders  of the selected folder  these can be sorted by document type  document name  date of creation  and version  all ascending or descending      a double click on the document opens the document window  a separate  resizable window for editing  full text search     the full text search allows direct search in the coremedia repository  detail view      shows the document chosen in     with all its fields and contents in the chosen version  a toolbar for editing     is shown    
  with the coremedia editor you can cut or copy individual text parts to paste them somewhere else  the marked text is saved in a clipboard so that it can be pasted again later  additionally  you can move text per drag and drop inside and between richtext panes   
  drag and drop  you can move and copy text inside a richtext pane and between richtext panes using the mouse   move text  in order to move text  proceed as follows  mark the text you want to move with the mouse  click into the mark and leave the mouse button pressed  move the cursor to the new position and release the mouse button   the text will be moved to the new position   copy text  in order to copy text  proceed as follows  mark the text you want to copy with the mouse  click the  ctrl  key  click into the mark and leave the mouse button pressed  move the cursor to the new position and release the mouse button  release the  ctrl  key   the text will be copied to the new position   
  enter the data for the new document and click  create    the new document has been created and the image will be shown in the richtext pane   insert images from the coremedia repositiory  in richtext documents you can insert images   coremedia picture documents   directly in text field at the current cursor position  open the document in the document window move the cursor to the position insert the image either  by choosing format   insert image at current position  or clicking  and  insert an image    in the tool bar    

  load an image  to integrate new images from the file system into image documents load the images to the coremedia sci   to do this  proceed as follows   select the document  in which the image should be loaded  open the document in the overview window  check out the document  select the field containing the blob  open the dialog for loading  by means of one of the following methods    select load from the menu binary data or from the context menu  click on the appropriate symbol on the tool bar   a dialog box opens  
  this list of links is displayed in the document window and can be edited by the following operations   move to top  in order to move a link in the link list to the top  select the link in the link list  move the link to the top position by choosing one of the next methods   select links to the top from the menu bar  select to the top from the context menu     move up  in order to move a link in the link list up by one position  select the link in the link list  move the link up by choosing one of the next methods   select links move up from the menu bar  select move up from the context menu     move down  in order to move a link in the link list down by one position  mark the link in the link list  move the link down by choosing one of the next methods   select links move down from the menu bar  select move down from the context menu     move to bottom  in order to move a link in the link list to the bottom  select the link in the link list  move the link to the bottom by choosing one of the next methods   select links to the bottom from the menu bar  select to the bottom from the context menu     cut  to remove a link from the link list and copy it to the clipboard  select the link in the link list remove the link by choosing one of the two possibilities   select links cut from the menu bar select cut from the context menu  create new document and link to it  to create a new document and paste it into the link list  proceed as follows  mark the link after which the new link should be pasted  create a new document  using one of the following options   from the menu bar select links create document    from the context menu select create document      in the toolbar click     a dialog for file creation opens up     enter the data and click  create    the document has been created and inserted in to the link list   paste  before   to paste a link from the clipboard into the link list before the currently marked link  mark the link before which the new link should be pasted  paste the new link by choosing one of the next methods   select links paste  before  from the menu bar select paste  before  from the context menu    paste  after   to paste a link from the clipboard into the link list of a document after the currently marked link  mark the link after which the new link should be pasted  paste the new link by choosing one of the two possibilities   select links paste  after  from the menu bar select paste  after  from the context menu    paste  with selection dialog   to paste a link to any document  which you can newly create here  into a document  mark the link after which the new link should be pasted  open the selection dialog by choosing one of the two possibilities   select links paste  with chooser  from the menu bar select paste  with chooser  from the context menu  a selection dialog box opens  
  external editing of images and reload  you can easily edit images from the coremedia repository with external applications and load back the edited image afterwards  proceed as follows  open the document with the image to edit  open the image in an external application  choosing on of the following options   double click the image  it opens with the standard application of your operating system defined for the current image format  drag and drop the image on the external application     after the editing  load back the image into the coremedia repository by one of the following options   select the menu entry binary data load back  from the context menu select load back  click  in the toolbar    the edited image has been load back into the document  the load back only works if you have opened the image directly from the document into the application  it does not work  if you have moved the image to the desktop or opened the image with multiple applications   delete images from a document  you can delete images from a document as follows  select and open the document in the overview window  check out the document  select the field whose image you want to delete  delete the image without safety check  by one of the following possibilities   select binary data remove from the menu bar  select remove from the context menu   
  define image section  you have the chance to define image sections  show only relevant parts of an image on your website   to do this  carry out the following steps  select and open the document in the overview window  check out the document  open the dialog window for selecting the image section   select image section from the binary data menu or from the context menu or click on the appropriate symbol   a dialog box appears showing the original image  the image section is selected from this  
  the proactive engine is a component for proactively computing values using the persistent cache   proactively  means  that it automatically computes values which are specified by a client and automatically re computes these values when they become invalid  furthermore  all computed values are passed to one or more client components   receiver    keeping the clients up to date  typically  a receiver s job is to hand the values over to another system  the receiver s state as well as the internal processing state is held persistent  so that the components may resume seamlessly after a restart     the proactive engine is a generic framework which supports many use cases such as  feeding a search engine with contents from the coremedia cms repository or any other data source actively generating documents  by reusing business logic which is already in use in a cae web application  and storing the documents in the local file system   
  for a high level overview on the proactive engine and its environment  have a look at the following figure 
  the proactive engine is based on the persistent cache which means that it works with persistent cache keys  an active client component called trigger is responsible for defining a set of such keys by adding or removing keys via a keymanager interface  one or more evaluator components are continuously computing the values for those keys whose values either don t exist or which aren t valid any longer due to invalidation events  one or more client components called receiver are notified about any key related changes by an internal component called sender  values which are computed by an evaluator are temporarily stored in a small memory cache called evaluator cache in order to be available when passed to the receivers   a receiver is notified about  add  a new key and its value is introduced  this happens after a trigger has added a new key and an evaluator has computed the key s value   update  a key s value has changed  this is a result of an invalidation and a re computation done by an evaluator   remove  a key has been removed by a trigger   the proactive engine s architecture uses an asynchronous event processing model  receivers as well as the proactive engine itself are allowed to do a deferred event processing in order to work more efficient  in each case  a finished processing is signaled via a callback mechanism  the proactive engine makes the receiver s callback results persistent so that it is able to resume seamlessly after a restart  
  content trigger framework  although potentially any data source may be integrated  the proactive engine s is especially suited for computations which are based on contents from the coremedia cms repository  from a technical point of view this implies persistent cache keys whose values are computed from content objects  this special use case becomes manifest in the content trigger framework consisting of some interfaces and some base implementations  
  this framework s main component is the contenttrigger component  together with its contentpersistentcachekeyfactory  which assumes complete control over the communication with the proactive engine  it uses two customizable sub components    contentselector  the contentselector is a com coremedia cap content events contentrepositorylistener which defines the contents considered relevant for processing  the configurable default implementation pathandtypecontentselector selects contents of certain content types which are located below a certain folder   contentevaluator  a contentevaluator is a kind of abstraction of the persistentcachekey s evaluate   method  it is responsible for computing a value which is based on a content  if you want to reuse your contentbean business logic from a cae web application  you can use the contentbeanevaluator instead    
  the http cache is a component deployed in front of a cae web application  which caches complete http responses based on client s requests or only fragments which are dynamically completed  caching those responses makes it possible to serve requests under very high load  responses that are expensive to compute may be stored and delivered from the cache instead of  re computing them on each request  furthermore  the http cache can serve conditional request  e g   if modified since    so the required bandwidth is reduced  too   the delivery of pages which combine cached content  static part  and non cached content  dynamic part  pays off for personalization for example  the web page might contain a frame which is the same for all users containing logos  navigation  content and a personalized part which contains the last viewed pages and favorites for example  the http cache is able to cache the former content and to include the latter content dynamically on request   by making use of dependency tracking  the http cache is able to detect the invalidation of cached responses  as a consequence  invalid responses will be removed from the cache until they are requested and therefore computed again  the  invalidation detection mechanism may also be used for integrating high level caching services  such as akamai    caching of rendering results  pages or fragments  has its place when personalized information is added in another post processing step  such as using edge side includes or client side javascript  or for sites or parts of sites that are not personalized  even in such a setup  you can still use the cae s efficient caching of object models   data views   for data shared between multiple pages  such as navigation structures  for rendering the personalized part of the site  or for page fragments requested during post processing  as described at the beginning of this chapter  data views prepare all information needed for rendering  and allow fast rendering on the fly on each request   with the http cache  you have the modeling power of the cae  and share business logic between personalized and mostly static parts of your web appearance  making full use of http caching where you chose to   
  this chapter describes the http cache s concepts and architecture from a high level and from a detail level perspective  understanding this chapter s contents is essential for understanding the subsequent chapters            
  the http cache is integrated in a content application engine  cae  web application as a servlet filter  intercepting all http requests which are sent to the cae  the http cache checks a persistent cache whether there is already a cached http response for this request  if so  this response will be delivered to the client without asking the cae  conditional requests  e g   if modified since   are also served based on the cached response   otherwise  if no response is cached for this request  the request will be delegated to the cae  the cae renders and returns a response while tracking the response s dependencies  this response is returned to the requesting client and additionally stored in the persistent cache  together with its dependencies   when a response becomes invalid due to changes of its dependencies  the response itself as well as its dependencies are removed from the  persistent cache   for instance  a response may have a dependency on a coremedia cms content object  if this content object changes  the response becomes invalid  furthermore  an invalidation event is sent to an optional event listener where custom business logic may be executed   the persistent cache works persistently by storing the dependencies in a database and the responses in a file system  after a restart of the http cache due to maintenance work or a crash  service is continued seamlessly without the need to rebuild the cache s entries  in addition  all invalidations which have occurred during downtime are replayed in order to assure that all invalidations are handled properly   
  in addition to images all other kind of binary data like text files  mp  files or flash animations can be used in coremedia sci  as a precondition  you need document types which support the appropriate formats  binaries are saved and loaded like images  
   binary data of mime type  text  can be directly edited in the document window  but it is not possible to move them in external applications using drag and drop    enter binary data using drag and drop  you can easily drag and drop binary data into appropriate document fields  for a text field  this works only for empty fields  
  cacheablerequestpredicate  this component is responsible for deciding whether an incoming request should be handled as cacheable or not  a website may have some pages  or other resources  which should be cached for performance reasons while there are others which shouldn t  an example of the latter would be a personalized page  which would only waste storage space if stored in the common cache  if a request is determined to be non cacheable  e g  by examining its uri  it will be forwarded to the cae directly without taking the persistent cache into account   requestnormalizer  the http cache defines a mapping from requests to responses  when an incoming request has passed the cacheablerequestpredicate  it has to be determined if a response to this request is already stored  in order to identify equal requests  a  normalization  needs to take place  where relevant request attributes  such as uri  headers  etc  are marked and other are discarded   for example  let s say that the request s user agent   browser   shouldn t play a role for the response  in this case  the user agent header should be marked as  not relevant    cacheableresponsepredicate  although the cacheablerequestpredicate provides a mechanism to differentiate between cacheable and non cacheable responses  there may be situations where a request based decision is not sufficient  in this case  an additional response based decision is needed  as an example  caching is usually not desired if the cae response consists of an error  e g  a       not found    the cacheableresponsepredicate is the cacheablerequestpredicate s counterpart  it is a customizable piece of business logic which  after rendering  decides whether the rendered response should be put into the cache or not   persistent cache  as described above  the persistent cache is used for storing responses and their dependencies persistently  while the responses itself are handled by the persistent value cache and stored in the file system  the dependencies are handled by the persistent dependency cache and stored in a database  in the context of the http cache  the persistent cache is also called content cache   metacache  the meta cache is a memory based cache which holds small bits of meta information based on the content cache s entries  this avoids expensive file system lookups when serving conditional   if modified since   requests   eventlistener  the event listener is an optional component for further processing of invalidation events  for example  when using an additional caching infrastructure  such as akamai   an event listener implementation may trigger removals from this infrastructure on incoming invalidation events  
  external editing of binary data and reload  you can easily edit binary data from the coremedia repository with external applications and load back the edited data afterwards  proceed as follows  open the document with the binary data to edit  open the binary data in an external application  choosing on of the following options   double click the binary data  it opens with the standard application of your operating system defined for the current data format  drag and drop the binary data on the external application     after the editing  load back the data into the coremedia repository by one of the following options   select the menu entry binary data load back  from the context menu select load back  click  in the toolbar   the edited binary data has been reload into the document  the reload only works if you have opened the data directly from the document into the application  it does not work  if you have moved the data to the desktop or opened the image with multiple applications   
  there are three kinds of utilities provided by the jsf editing kit  jsf el utilities for the ease of jsp programming  utility classes for implementing custom tags  components and renderers classes for setting up the jsf runtime environment   the first category jsf el utilities are in general maps that invoke some methods using the  key  as method parameter to compute some kind of result  the result may either be the return value of the maps get method or a map that performs the same kind of magic itself  this makes it possible to call methods from within jsf el  examples are the classes com coremedia editing kits jsf editing action jsfactionfactory and com coremedia editing kits jsf editing action jsfactionlistenerfactory   developers of custom jsf tag  components or renderers will find the utility classes rendererutils  facescontextutils  jsfutil and tagutils helpful  they define convenience methods to avoid code duplication   the third category includes the classes editingrenderkit  
  the coremedia portal integration is used for integrating content from a coremedia cms into portals like sap enterprise portal and ibm websphere portal  features like single sign on and portal specific look   feel will be supported  contents will be displayed inside a special portlet   portal component   as linked pages  which may be browsed by users very similar to www  but without leaving the portal  editing content is possible via integrating editingservices  in a portal adequate manner   from a technical point of view  the user s page requests will be forwarded to a content application engine  the so called  portal application   using a http based infrastructure  contents generated by this application will be transformed inside the portlet and displayed with the portal look   feel  this will be done dependend on user s authentication  e g  a certain user might not see the whole content   the portal integration consists of portlets for  sap enterprise portal  and  ibm websphere portal  which are ready for deployment  a special cae template for easy development of portal applications is contained too  
  user information  user authentication is implemented by the portal supporting  single sign on   current user information like user name domain will be passed to the cae portal application and may be accessed using standard servlet mechanisms   
  databases differ considerably in the names that are used for the basic datatypes  in the following description of the schema we will present a uniform view that does not elaborate on the individual databases  instead we use abstract type names that are easily converted to the name used for the individual databases  
  a page is characterized by three properties  an object as discussed in the previous section  a view and a locale   views  views of the analytics engine correspond directly to the views defined in the content application engine  for example  there might be different views for rendering the same object as html  as wml  as pdf and as an email message    views are characterized by string identifiers  typically  the number of views is small  while there are often many views in a content application  only very few of those views are used to render pages on the top level  however  only those views are relevant for the purposes of the analytics engine   the default view  which is represented as a java null value internally in the cae  is stored as the string default in the database  this is because some databases exhibit a very special behavior when working with empty strings  which would otherwise be a more natural representation   you should never use the view represented by the empty string when integrating with the analytics engine   locales  a locale identifies the language in which a page is displayed and optionally the region for which the page is localized  while the locale can be derived from the object and the view in many cases  some applications may want to show the same object in the same view differently for different locales   locales are characterized by two letter language codes like de or ja or by five letter codes like en us that include the country  typically  the number of locales is small  
  for example to dump a page use the following expression    java  jar portalcontent jar       p  portalmenusite servlet content           url http   localhost      portalmenusite httpcontentservice  to get information about a binary you call    java  jar portalcontent jar       b  portalmenusite servlet contentblob     image      url http   localhost      portalmenusite httpcontentservice 
  portletemulation web application  the portletemulation web application retrieves pages and binaries from the servlet of the portal application and delivers them to a browser  you can configure an xsl stylesheet to perform an xsl transformation of the content that is returned to the client   before using the portletemulation web application  you need to configure the url of the portal application servlet and the uri of the home page  configure the url of the servlet in web inf contentservice xml  e g      beans    bean id  com coremedia portal service contentservice           property name  contentservices       list       bean class     com coremedia portal frontend service httpcontentservice         property name  name  value  contentservice            property name  endpoint        value  http   localhost      portalmenusite httpcontentservice          bean         beans   note  that if the portletemulation web application accesses an ssl secured portal application  you will have to add the ssl certificate of the cae portal application to the ones trusted by the container  you can do this by adding the ssl certificate to the ones trusted by the java virtual machine in the file  jre  lib security cacerts with the java tool keytool  the ssl certificate must match the hostname of the portal application url   the uri of the home page is configured in web inf web xml  e g     web app     servlet       servlet name contentservlet  servlet name       servlet class        com coremedia portal frontend client contentservlet       servlet class       init param         param name homepageuri  param name         param value  portalmenusite servlet content      param value        init param       you can configure a custom xsl stylesheet in web inf web xml  the path must start with a     and is interpreted as relative to the context root  for example    init param     param name stylesheet  param name     param value  web inf xslt custom transformer xsl  param value    init param   you can get the configured homepage from the url   http    host   port  portletemulation  other pages can be accessed with   http    host   port  portletemulation page  path   for example    http   localhost      portletemulation    page portalmenusite servlet content      binary content can be accessed with   http    host   port  portletemulation binary  path   for example    http   localhost      portletemulation    binary portalmenusite servlet contentblob     image  to perform an xsl transformation with the configured xsl stylesheet you just need to append the query parameter com coremedia portal control transform to the url  for example   http   localhost                portletemulation com coremedia portal control transform 
  portal link     is a specification  designed by coremedia  describing the way of setting links inside a portal page  from a structural point of view  such a link has these properties   type  one of page  binary  external or resource uri  the  uniform resource identifier  locating the linked data   for types page  binary and resource it s formatted as   path   query   e g   webapp products phone view teaser  where path consists of  context path  servlet path  and pathinfo  see the  java servlet specification  for details    the type  external  is formatted as  scheme     authority   path   query   e g  http   myserver      webapplication servlet content id     fragment  optional   a certain section inside the content  container  optional   the place where the content should be displayed  the concrete semantic of a container depends on the type  for a page link a container denotes a portlet  for a binary  resource or external link a browser window name is meant  a value     dot   always denotes the current portlet window    container features  optional   additional container properties may be specified as key value pairs  e g   width    height      a feature  com coremedia portlet standalone true  asks the link target to be opened in a new window without the portal environment such as navigation etc  the use of certain features depends on the concrete portal  see below       xml portal links   when writing a link using xml  a single attribute uri with namespace http   www coremedia com cms portal link     must be defined  the attribute s value is formatted according to rfc      which defines a format like  scheme     authority  path   query   fragment   this format s parts are used as follows   scheme   for types page  binary and resource the scheme names portal page  portal binary and portal resource are used  for type external it s any other scheme  such as http or https   authority   always empty for page  binary and resource  for external it s  host port  for example   path   equal to uri s   path  as described above   fragment   equal to above mentioned fragment  query   equal to uri s  query  with additional container and container features parameter  as described above  like plink container name  containername  and  plink container feature  containerfeaturename   containerfeaturevalue    examples   img plink uri  portal binary    contentblob      image        xmlns plink  http   www coremedia com cms portal link         a binary link with uri  contentblob      image without fragment and without container      a plink uri  portal content    content      view      main plink container name mycontainer amp      plink container feature width     amp      plink container feature height    myfragment      xmlns plink  http   www coremedia com cms portal link         a page link with uri  content      view main  a fragment myfragment  a container mycontainer with container features height      width          a plink uri  http   localhost application plink container name      mycontainer      xmlns plink  http   www coremedia com cms portal link         an external link with uri http   localhost application and container mycontainer   links for sap enterprise portal  when developing a portal application for the sap enterprise portal  the link property container needs to be specified as qualified path for page links  e g  pcd   portal content myfolder myrole myworkset mypage myportlet  beside the above mentioned container feature  com coremedia portlet standalone  all features known from javascript such as toolbar   or scrollbars   may be used   links for ibm websphere portal  when using an ibm websphere portal  the container property for portal links always denotes the current portlet as there is no way to link to another portlet  container features like com coremedia portlet standalone and all known javascript features may be used   
  contentservice and contentservice xml  the portlets are retrieving their contents through a contentservice  this is a java based service for which several implementations exist  for instance  the default implementation  httpcontentservice  see below  connects itself to the remote portal application using a http based infrastructure    before describing these implementations in detail  the base configuration mechanism should be mentioned here  the spring xml beans notation  which is part of the spring framework  http   www springframework org  is used as configuration scheme  the contentservice xml file s content  included in the portlet archives  consists of a contentservice bean definition  like  
  although contentservice xml is pre configured  you have to do some simple changes before deploying the portlet   specify the cae portal application by editing the line  property name  endpoint  value  http    host   port   portal application context   servlet      and setting its endpoint url  alternatively you may want to use different contentservice implementations or configurations  below you will find a list of all available contentservice implementations as well as the configuration parameters   properties     
  httpcontentservice  the httpcontentservice is the default contentservice which uses http calls to access the portal application  this contentservice is lightweight and may be used for heavy load scenarios  configure the contentservice with the following properties   
  status bar    the status bar at the bottom displays the sort criteria of the document overview      and active filters         
  the staging tables are used to move the raw log data into the database as fast as possible  the staging tables do not use dimension tables for compressing the data  thereby update operations can be limited to a single table and to simple insertions most of the time   indices are maintained only if necessary for the import process  analysis is not supported on the staging tables  where possible  indices are disabled during import and recomputed after an entire set of logs is processed  
  save image into the file system  you can save an image from the document in the file system  to do this  the following steps are necessary  select and open the document in the overview window open the dialog for saving the image  using one of the following methods   select save from the binary data menu or from the context menu  click on the appropriate symbol on the tool bar   a dialog box appears  
  load binary data  you can load binary data directly  from the file system into documents    to do this  proceed as follows   select the document  in which the binary data should be loaded  open the document in the overview window  check out the document  select the field in which the binary data should be loaded  open the dialog for loading  by means of one of the following methods    select load from the menu binary data or from the context menu  click on the appropriate symbol on the tool bar   a dialog box appears  
  save binary data  you can save binary data  from the document in the file system  to do this  the following steps are necessary  select and open the document in the overview window  open the dialog for saving the binary data  using one of the following methods   select save from the binary data menu or from the context menu  click on the appropriate symbol on the tool bar   a dialog box appears  
  delete binary data  you can delete binary data from a document as follows  select and open the document in the overview window  check out the document  select the field whose binary data you want to delete  delete the image without safety check  by one of the following possibilities   select binary data remove from the menu bar  select remove from the context menu   
   to create a new document  select the folder in which the new document should be created  there are the following possibilities of creating a document   select file new document type from the menu bar  select new document type from the context menu  click  on the toolbar for creating new documents   a dialog box appears  asking you to enter a name  tpye  folder for the new document  in addition  you can choose to open the document immediately  
    select the document type  enter the name of your new document in the name field  check the open document box  if you want the document to be opened immediately  click  create  to confirm the procedure   
  the log consolidation phase reads data from the staging table and fills the dimension tables and the fact tables  
  this toolbar offers advanced formatting features such as      insert a new table     insert a column left of the selected column      add column right to the selected column     select a column    delete selected columns    insert row above the selected row     add row below the selected row     select row    delete selected rows    merge cells    split merged cells horizontally and vertically     split cells horizontally  left icon  and vertically  right icon     merge tables    set table attributes  all these options are available via menu or context menu too  to apply them  select the cells  and choose formatting options either from  the tool bar  the menu bar  format   table        or choose table       from the context menu   for formatting options within table cells  see section  section  and section   create tables mark the position in the richtext field where you want to insert a table  to create a table   either click  and  insert a table in the tool bar  choose format   table   insert table from the menu bar  or choose table   insert table from the context menu     enter the numbers of columns and rows in the dialog box    click  ok  to confirm     
  in this chapter you can find the description of the design principles that underlay the database design for the analytics datamart  knowing these principles will help you optimize your database or extend the schema   disable indices during bulk import for short lived tables  if during an import a table is  mostly  purged and the refilled  performance is improved by disabling indices before the import and rebuilding them afterwards  when accessing a single table concurrently  perform only inserts or only reads  but no updates  deletes or mixed operations  the internal locking in databases is quite complex and hard to predict  so that you want to avoid complex access schemes  because concurrent writes to a single table are likely scattered across a single disk  concurrent writing will likely not improve performance  write different tables concurrently  writes to different tables will not block each other  if the writes go to different disks  concurrent writing will greatly speed up the application  keep the content of auxiliary tables until the tables must be refilled  this helps during error recovery  use indices only where needed  maintaining indices is costly during write operations  write operations are particularly costly  because their cost cannot be reduced by caches  however  some indices will be necessary to keep the read performance up  use constraints only where needed  in particular  foreign keys can be quite costly during delete operations  necessitating additional indices that would otherwise be dispensable  constraints can help the database optimize your queries and they can detect certain error conditions  but generally the extra runtime cost is undesirable  avoid very small transactions  which lead to poor performance  let the database perform very large transformations  quite a lot of transformations are expressible in pure sql  databases are generally very good at optimizing these requests and they can make good of main memory for caching  use very large transactions only when single statements get very large  keep time arithmetic out of the database  time arithmetic is generally not portable and unlikely to match the java time arithmetic precisely  subtleties like leap years  leap seconds  timezones and daylight saving time are very difficult to delegate to a database  storing timestamps in utc and performing comparisions works well  though  if you have to perform some tasks in java code  try to limit yourself to tasks that parallelize well and use large thread pools    
  comboboxlinklisteditor  allows selection of a document from a combobox  whose content consists of the documents of a folder  the path attribute determines the path of this folder  automatically  only documents of appropriate type are shown  the emptyselection attribute configures the text displayed if no document is linked   as with the genericlinklisteditor  display is configured with a linklistrenderer   folderlinklisteditor  a folderlinklisteditor  displays two jlists side by side  the left list contains the resources from the link list of the document  the right list contains resources that are determined by the path parameter which points to a coremedia folder  all documents in this folder can be selected and thus be inserted into the documents link list   the following attributes can be used to configure the editor   path  the path to the folder whose content will be displayed in the folder list  showfolderlistoncheckout  indicates whether the folder list is shown when the document is checked out  true   if set to false  only the link list is displayed and the user must click a button to open the folder list    listheight  sets the height in pixel of the two lists  if the lists are longer  a scrollbar is displayed  the default value is     which displays approximately five list entries with a standard font size  for ten lines set the value to         in addition  you can configure the lists using the following sub elements  use the attribute class to define the classes to use   linklistrenderer  define a renderer which renders the content of the left link list  folderlistrender  sets the renderer for the right folder list  if not set a default render is used to display an icon and the document name  folderlistpredicate   sets a predicate to filter the right folder list  if not set all documents matching the given link list element type are displayed  folderlistcomparator   sets a comparator to sort the right folder list  if not set the folder list is sorted by document name   example    property name  testlinklist   editorclass  folderlinklisteditor   path     listheight          linklistrenderer  class   hox corem editor toolkit property imagelinklistrenderer   property  testblob      property   genericlinklisteditor  displays a list of the linked documents and allows links to be added deleted moved  display of the documents is determined by the linklistrenderer  this can be determined with a child element  linklistrenderer class  renderer class     the default is documenttypelinklistrenderer   which displays document type icon and document name   other renderers are documentstatelinklistrenderer and imagelinklistrenderer  the documentstatelinklistrenderer displays a state icon and the document name  the imagelinklistrenderer displays blob properties of the linked documents  the blob property which should be used is determined by the property attribute of the linklistrenderer element   example    linklistrenderer class  imagelinklistrenderer  property  small      you can configure the file chooser and file creation dialogs of the genericlinklisteditor  use the child element  dialogsettings  with the two respective child elements  newdocumentdialogsettings  or  documentchoosersettings   with the following attributes you can parameterize the dialogs  
   attribute value default description createpreselectedfolder true  false false if true  the preselected folder defined with preselectedresource  will be created if it does not exist yet  ignored if preselectedresourceid  is set   preselectedtype document type  name of the preselected document type  if no preselected type is defined or it does not match the linklist requirements  the first matching type will be used in a new dialog  preselectedresource resource path  absolute path or path relative to the current document  which defines the preselected resource  alternative to the preselectedresourceid attribute  if both attributes are given the preselectedresourceid  takes precedence unless no resource with the given id exists  preselectedresourceid integer  id of the preselected resource  alternative to the preselectedresource attribute  additional feature available only using the id  instead of specifying a folder id you may also specify a document id  in this case the document with the given id serves as kind of token where new documents will be created  or documents will be chosen from  because the document will be created in  chosen from  the very same directory where the referenced document is in  rootfolder folder path  name of the folder which defines the root of the file chooser dialog  alternative use to the rootfolderid attribute  if both attributes are given the takes precedence  rootfolderid integer  id of the folder which defines the root of the file chooser dialog  alternative use to the rootfolder attribute  upperbound document type  configures the sub type of the shown document types  that is  you will only see document types which are super types of the defined document type  including the specified document type unless it is abstract   typepredicate overrides any bounds set  lowerbound document type  configures the super type of the shown document types  that is  you will only see document types which are sub types of the defined document type  including the specified document type unless it is abstract   typepredicate overrides any bounds set  typepredicate class path  a class of type hox util predicate with a non arg constructor which filters the shown document types  if you set a typepredicate it overrides any upperbound  or lowerbound set   
  for the  newdocumentdialogsettings  element you can also use the following  two attributes    attribute value default description resourcename name  the name of the new document  if no resource name is defined  the name field will be empty  for all subsequent calls  the previously entered name will be used  opendocument true  false true defines the state of the open document check box in the dialog  if true  the newly created document will automatically be opened   
  example   document type  dish      property name  pictures  editorclass  genericlinklisteditor        dialogsettings         newdocumentdialogsettings       preselectedtype  picture        preselectedresource   menusite fish        rootfolder   menusite        upperbound  picture          dialogsettings      property    document       
  the in site analytics tables contain aggregated views on the reporting data that are useful for very short term  low latency reports  all tables integrate data using the shortest provided intervals   rows in these tables may changes after being written  if additional data is imported that affects old intervals  
  the dimension tables shown in the previous diagram were already discussed in conjunction with the fact tables  in the following  only the actual overlay report tables are discussed   overlaypageviews  this table stores in the column eventcount the number of page view events of a certain page in a given interval  page and interval are identified by the columns pageid and eventintervalstart  the column site redundantly stores the site to which the page under examination is associated   overlaypageentries  similarly to the table overlaypageviews  the table overlaypageentries counts page view events  but the count is restricted to those events for which the page view is the first event in a session   overlaypageexits  similarly to the table overlaypageviews  the table overlaypageexits counts page view events  but the count is restricted to those events for which the page view is the last event in a session   overlaycontextviews  this table stores in the column eventcount the number of context view events of a certain context of a certain page in a given interval  page  context and interval are identified by the columns pageid  pagecontext and eventintervalstart   overlaytransitions  this table stores in the column eventcount the number of transitions from are source page to a target page using a link in a certain context in a given interval  source page  source context and target page are identified by the columns sourceid  sourcecontext  targetid and eventintervalstart   overlaytransitionexits  similarly to the table overlaytransitions  the table overlaytransitionexits counts transitions  but the count is restricted to those events for which the transition is the last event in a session  
  the view report tables are used for long term tracking of page views and context views  normally values that are written to these report tables will never be changed again  
  the search report tables are used for long term tracking of internal and external search requests  normally values that are written to these report tables will never be changed again  
   attribute value default description createpreselectedfolder true  false false if true  the preselected folder defined with preselectedresource will be created if it does not exist yet  ignored if preselectedresourceid is set  preselectedtype document type  name of the preselected document type  if no preselected type is defined or the preselected type is not able to store the blob data  the first matching type will be used in a new dialog  preselectedresource resource path  absolute path or path relative to the current document  which defines the preselected resource  alternative to the preselectedresourceid attribute  if both attributes are given the preselectedresourceid takes precedence unless no resource with the given id exists  preselectedresourceid integer  id of the preselected resource  alternative to the preselectedresource attribute  additional feature available only using the id  instead of specifying a folder id you may also specify a document id  in this case the document with the given id serves as kind of token where new documents will be created because the document will be created in the very same directory where the referenced document is in  rootfolder folder path  name of the folder which defines the root of the file chooser dialog  alternative use to the rootfolderid attribute  if both attributes are given the takes precedence  rootfolderid integer  id of the folder which defines the root of the file chooser dialog  alternative use to the rootfolder attribute  upperbound document type  configures the sub type of the shown document types  that is  you will only see document types which are super types of the defined document type  including the specified document type unless it is abstract   typepredicate overrides any bounds set  lowerbound document type  configures the super type of the shown document types  that is  you will only see document types which are sub types of the defined document type  including the specified document type unless it is abstract   typepredicate overrides any bounds set  typepredicate class path  a class of type hox util predicate with a non arg constructor which filters the shown document types  if you set a typepredicate it overrides any upperbound or lowerbound set  resourcename name  the name of the new document  if no resource name is defined  the name field will be empty  for all subsequent calls  the previously entered name will be used  opendocument true  false true defines the state of the open document check box in the dialog  if true  the newly created document will automatically be opened  fieldname field name  name of the preselected document field where the blob should be stored  if no name is defined or the document field is not able to store the blob data  the first matching field of the document type is shown   
  the top section of the explorer window has three bars  the title bar     that displays the current location at the very top  the menu bar     and the tool bar      menu bar and tool bar provide access to all available functions  this availability depends on the selected resource s  and the rights of the user    the left section is named folder overview      it holds a tree structure of the project  below you will find the bookmark overview     with your bookmarks   the upper right section is the document overview  it displays the documents  but not subfolders  of the selected folder  these can be sorted by document type  document name  date of creation  and version  all ascending or descending      a double click on the document opens the document window  a separate  resizable window for editing  above the document overview you can use the full text search  simply enter the search term and click  search    most of these functions     are also provided  in the lower right section s document view      the status bar at the bottom displays the sort criteria of the document overview      and active filters        
    menu item  sub items  function  new resource  all system resource types and project specific document types  creates a new resource of the chosen typen in the current folder  new workflow  project specific number and type of workflows  starts a new workflow of the chosen type  new rule      administrators only    change or add rules to the selected resource  open    opens the selected doucment in a document window  check out      check out a document for editing  status and current owner visible to all users    already approved documents open an  undo approval  dialog box   yes  no approved version available   no  approved version keeps state and will be published no matter how many later unapproved versions exist  revoke check out      undo the check out of a document   document is accessible for others again   attention  this undoes all changes of the current version  check in    check in applies changes and make them available to all other users  delete      delete the selected document or folder   publication required to make changes effective on live servers   deleted document can just be viewed  not edited   revoke delete      only not yet published resources can be restored    once in recycle bin after publication  resources lose all path information   save  save the changed document  if you revoke the check out of a document all changes since the last check out will be deleted  you have to  check in  a document to create a new version of the document and to persist the changes  rename    rename the selected resource via dialog box  double naming prohibited across all documents also of different types within the same folder   approve    direct approval of a resource  this function must be enabled   revoke approve    revoke approval directly  this function must be enabled   mark for withdrawal    marks the resource for revoking of the publication  this will delete the resource on the live server  this change must be published to take effect   revoke withdrawal    revokes the mark for withdrawal of publication   preview publication    simulates the publication and shows the result   publish    direct publication  without workflow  of a resource   preview    opens document in a browser for preview  project specific  internet explorer and netscape are default options   properties  tabs  history  rights  and rules  properties of a resource  history of editing  publication  etc   close    closes the active  overview  window  but does not exit the application  exit    exits the coremedia editor and closes all windows   
   menu item sub items function open  open image in an external editor load   up  load image from disk load back  loads an image which has been edited with an external editor back into the coremedia repository save  save an image to disk remove  remove image from document clip image  select a section of the image for display  
   menu item sub items function open   opens the linked document in a new window open in explorer  opens the linked document in the overview window cut  cuts the link but does not change the document s location copy  copies the link paste  before   use esp  in linklists in to paste a link on top of the selected one paste  behind   use to paste a link behind the selected one create document     opens a dialog for creation of a new document  which can be inserted at the current position  it s only possible to create documents of a type which is allowed for the link list choose and paste     opens an overview window for browsing after the item  by default only matching document types are displayed  delete  remove a link from a linklist  does not delete the document  move to top  moves a link to the very top of a linklist move up  moves a link up one position move down  moves a link down one posistion move to bottom  moves a link to the very last position in a link list sort by document name  sorts all items in a linklist by document name  ascending or descending  marked by a small arrow symbol   
   menu item sub items function reuse windows  opens documents in the same window as long as they are not checked out  helps to stay clear with multi tasking  ask before critical actions  a warning dialog asks to confirm whether irrevokable actions such as deleting a document or shutting down the editor ask for new name while pasting  asks to rename a resource once a resource with the same name is detected in this folder  if turned off  the name is automatically supplemented with a trailing      check while typing  start spellchecking while you are typing autosave interval   off         min   time counts start at first change of a document  starts anew with every save  changes in interval settings do not become effective after restarting the timer    one timer per document show remote control commands   project specific  if enabled  remote control commands are displayed in a window preselect document from clipboard  a document from the clipboard will automatically be pre selected for a document chooser  load back changed binaries automatically  you have opened a blob via double click or drag and drop in an external application and you have edited and saved the blob  if you close the external application  the blob will automatically be reloaded into the coremedia repository    
   menu item sub items function add bookmark  adds a bookmark to the current resource  manage bookmarks  opens the window for bookmark management   
   menu item sub items function spell checking  starts the spell checker  
  the coremedia portal integration allows to use editing services in portals  you may develop pure editing services web applications  or preview based editing web applications  both kinds of applications enables the content modification and entry inside portals  this section describes how to integrate these techniques into a portal application  you will find information about   the architecture  the concepts used within this context  the configuration possibilities  and  an integration example which shows how to adjust an editingservices web application for using in a portal application   
   menu item sub items function open  opens the linked document in a new window open in explorer  opens the linked document in the overview window cut  cuts the link but does not change the document s location copy  copies the link paste  before   use esp  in linklists in to paste a link on top of the selected one paste  behind   use to paste a link behind the selected one create document     opens a dialog for creation of a new document which can be inserted at the current position  it s only possible to create documents of a type which is allowed for the link list choose and paste     opens an overview window for browsing after the item  by default only matching document types are displayed  delete  remove a link from a linklist  does not delete the document  move to top  moves a link to the very top of a linklist move up  moves a link up one position move down  moves a link down one posistion move to bottom  moves a link to the very last position in a link list sort  sorts all items in a linklist by document name  ascending or descending  marked by a small arrow symbol  publication preview  starts a publication preview and shows if the publication would succeed  complete reference  completes the document set for a publication   
   menu item sub items function spell checking  starts the spell checker  
  in order to return to the calling jsp  the editing services needs to know when it should return to the entry point  for that you need to define a custom navigationhandler  for details see the editing services chapter  which needs to be set for all commands actions finishing the editing process    the custom navigationhandler  which is described in the next subsection  has the class redirectingtoentryurlnavigationhandler  it sends a redirect back to the client with the url saved when beginning editing  
  in order to return to the url from which you started editing you need to set a custom navigationhandler for all actions which are instances of commandaction and which finishing the editing process   the following example shows the setting of the jsfredirectingnavigationhandler at a revertcommand  
   interval type code interval length interval start hh   hour every hour dh   day every hour dd   day every day wd   week every day bd   weeks  biweek  every day md   month every day ww   week every week mm   month every month ym   year every month qq   months  quarter  every quarter ff   month  half year  every half year yy   year every year  
  there are some types of intervals where a single point in time is contained in many intervals  for example  for the interval type dh  a one day interval starts every hour  therefore an event that happened at       would be included in the interval starting at       of the previous day  in the interval starting at       of the previous day and so on  up to the interval that starts at       of the current day  a similar structure applies to wd  bd  md and ym   for the interval types dh  and md there is the additional difficulty that days are not always    hours long due to daylight saving time and that months have got a varying number of days  this raises the question whether there is a monthly interval starting at march    or one that ends just before may     the simple answer is that these intervals do not exist  for these two interval types  an interval is recorded in the database only if the hours  or months  respectively  that mark the included start and excluded end of the intervals are numerically identical and exist  that is  the interval starting at march    and ending at april    is followed by the interval starting at april   and ending at may    
  in this chapter the necessary steps for adapting the data aggregator  are discussed   the data aggregator runs inside a workflow server  it consists of a singleton manager instance and a process that is executed by a workflow server   the manager provides access to the configuration in the workflowserver properties  it provides access to the database connection and it helps in limiting the number of running aggregation processes to one  it is implemented as the class com coremedia analytics wf aggregatormanager  if you need connection pools to data sources that are not handled by the existing manager  for example when integrating a shop system   you should subclass the manager class and maintain the pools there  similarly  you might want to provide access to own configuration parameters through a custom manager  in this case  you can simply change the manager class property in the file workflowserver properties   however  it is more likely that you can reuse the manager unchanged  but that you must extend the aggregation process  therefore  the chapter starts with a short introduction of the aggregation process  afterwards  the most important predefined automated actions are dicussed  which can be helpful in defining an extension  
  the content is held in a structure made up with folders and subfolders which you can create in the overview window     initially  there is just the root folder with the subfolders home  and system  these folders are created by the coremedia system      
  if you free a document for other users with revoke check out  all changes since the last check out are lost  even when you have saved in between  only check in creates a new version of the document and stores the data permanently into the coremedia repository  
  when using the editing services in a portal environment you may have the portal application running in a servlet and most commonly the editing services running in another servlet  this leads to the situation where you need to forward a request from one servlet to another  in this situation some cae specific information can be lost during these forwards  in order to prevent such situations use the interceptor  portalsetbaseuriinterceptor   an example on how to use this interceptor is provided below  
  if all documents in your document list have either been skipped or processed  the search and replace  workflow is finished   coremedia sci applications with freely configurable workflows allow to integrate an automatic publication workflow right after finishing the global search and replace   in any case processed documents have to be published in order to make the changes effective   you may collect these documents via the menu item navigation  to be published  
  in the report detail view  the report sentence     and report chart     are complemented by an report explanation     on the right side of the chart describing the visualized data and report parameters  the report phrase provides interactive drill down functions  a user may select the requested detail levels as well as report sub sections sub ranges for drill down  as an example  a user may narrow down the report s time range  in some reports clickable drilldown can be used to show detailed information  
  in site analytics provides a means to analyze individual pages of a site quickly and thoroughly  if in site analytics is available in your web site preview  you can enable the display of overlays  by default  only small overlays are shown  if you move the mouse to an overlay  the overlay will enlarge to display more detailed data   there are three types of overlays  which we will discuss now  all data is computed for the current page and locale of the current page  providing a focused view   page overlays  an overlay for the entire page visualizes the number of page views over time as a graph  each dot aggregates the page views of the defined aggregation interval  
  the pages which are delivered to the portlets by the cae need to be xhtml      described in http   www w  org tr xhtml    compliant  a very simple portlet page may look like    html xmlns  http   www w  org      xhtml     head     title my portlet page title  title     head    body     p hello world   p     body    html   the portlet interprets and transforms these pages and embeds them as a single fragment into a higher level portal page  due to this transformation process there are xhtml related things may cause the rendering behave not exactly as expected  this has to be considered when writing a xhtml based portal application   xhtml is case sensitive  use lowercase elements and attributes only the xhtml namespace  http   www w  org      xhtml  should be used for all elements although you may use xhtml s standard linking attributes  the links itself need to be written as portal link      e g   a href  portal page    content        or  img src  portal binary    contentblob    image    in addition  links which are dynamically generated by javascript won t work in most cases  most elements below  head  will be ignored  exceptions are   title     link rel  stylesheet  href   portal link     and   script type  text javascript  src   portal link      inside element  form  the method post should be used rather than get  encodings application x www form urlencoded and multipart form data are supported only for  form   the element  body  s attributes will be ignored completely   some portal servers are providing a mechanism where a portlet may define a  local  navigation  such navigations are structured hierarchical and are embedded in the portal s navigation automatically while preserving the portal s look   feel  when writing your portlet page s templates  you may add some special  and therefore not xhtml compliant  markup code in order to provide a navigation for your page  below the  head  element you have to embed one or more  pml navigation   elements like   html xmlns  http   www w  org      xhtml    head         pml navigation    id  portal navigation    xmlns pml  http   www coremedia com cms portal pml         xmlns plink  http   www coremedia com cms portal link         label  link to my page    plink uri  portal page    mypage        pml navigation label  another link      plink uri  portal page    mypage          pml navigation       head   body        body    html   a  pml navigation  is a hierarchically structured navigation node which consists of  an uri  attribute plink uri        which describes the navigation node s link target using the portal link     notation  see above  a link label  attribute label        a flag  attribute selected  true false   which indicates whether the link is  currently active  and therefore shall be displayed in a highlighted way  this feature is not supported by all portal servers   when using this navigation feature  you have to make sure that the top level navigation element contains an attribute id  portal navigation  as well as the namespace definitions xmlns pml  http   www coremedia com cms portal pml      and xmlns plink  http   www coremedia com cms portal link       
  when installing the coremedia analytics engine  a number of predefined business reports is provided  depending of the dashboard configuration some or all of these reports may appear on your dashboard  each of those reports will be described in the following section   for custom reports that are not described here  please refer to documentation provided by your company or organization   
  interactive report drill down  the report view allows a user to drill down using report parameters  these are rendered as selection boxes contained in the report phrase  after selecting new parameter values  please press the reload button in the right upper corner to update the report view  the performance report model provides the following three report parameters   the site parameter allows a user to select a  sub  site  the list of sites is automatically generated during data aggregation  
  logging out  in order to log out from the dashboard and to terminate your session  use the  logout  link in the upper right corner next the user s login name   report descriptions  in the next section the predefined reports which are bundled with the analytics engine installation will be described in detail  
  a feedable contains the identifier of the index document it creates or updates and a set of elements  elements map to fields of the document by their name  for example  an element named title of a feedable with the identifier doc  maps to the field named title of the index document doc  if such a field exists in the index profile   the following index profile fields are automatically set by the cae feeder  
   field name description id the identifier of the document  feederstate the state of the indexed document  for successfully indexed documents it contains the value success  feederinfo additional information about the document such as descriptions of indexing errors  feedertime the time when the document was created or updated by the cae feeder  freshness same as feedertime if not set explicitly  this field is used for ranking of the search results in the default index profile  textbody a string field which contains the concatenation of multiple element values  by default the values of all elements are stored in this field  it is one of the default fields a search applies to   
  the cae feeder template is based on the proactive engine to proactively feed content beans  the following components connect the proactive engine   the feedablecontentbeanevaluator creates feedables from content beans  it defines which and how properties of content beans are indexed  the feedingreceiver passes feedables and document identifiers to the cae feeder in order to add  update and remove documents in the index    follow these steps to customize the cae feeder for your application  specify the set of indexed content beans configure content bean classes customize feedables  
  see the api documentation for a description of all properties of the classes beanmappingfeedablepopulator  beanfeedablemapping and beanpropertyfeedableelementmapping in package com coremedia cap feeder bean  
  the cae feeder supports string  number  date  xml and binary element types  the following table describes the mapping from java bean property value classes to element types  
   property value class element type com coremedia cap common blob binary java util date and java util calendar date com coremedia xml markup xml java lang number and primitive number types number java lang string string  
  the first bean propertyconfigurer makes the cae feeder use the settings from the configured property files  the second bean starts the cae feeder when the spring application context is created and stops it when the application context is closed  the last bean stops the spring application context when the jvm stops  you can remove the last bean if your application closes the application context explicitly   create a cae feeder with the following java code and start it with the jvm working directory  installroot    
  because the coremedia analytics engine consists of a relatively long pipeline that gathers  consolidates and displays reporting data  the configuration of the analytics engine must be distributed across multiple configuration files  in particular  you can configure   the property files of the content application engine that gathers data  the property file of the object analyzer  the workflowserver properties file that is used by the workflow server that runs the aggregation process  thus acting as an analytics data aggregator  the property files of the content application engine that displays overlay reports  the property files of the analytics dashboard web application   for the basic configuration possibilities that apply to all cae installations  please refer to section   additional configuration possibilities are also discussed in the analytics developer manual  
  the following figure shows the components that interact with the differencing service  
  the following figure show the architecture of the differencing service  
  the  difference  element is used to configure a differencing service web application    difference   child elements   browser  parent elements   editor  
     attribute description host the name of the host machine where the differencing web application is running  port the http port of the differencing web application  uripath the name of the differencing web application  loginport the ssl port of the differencing web application   
  if regular expressions are used as configuration parameters  the syntax of the regular expressions always follows the conventions of the java class java util regex pattern  
    the time interval parameter allows a user to choose the time interval  the parameter selection box offers two alternative ways  relative time intervals  which express intervals relative to  now   examples are  last    months  and  last week   relative time intervals are values always available in the selection box and so far  the available values do not change dynamically    absolute time intervals  examples are  q          august       or    st of december        when selecting an absolute time interval  the values available in the selection box change accordingly  an up arrow identifies absolute values of broader time intervals  while down arrows indicate finer time intervals contained within the currently selected one  example  when the absolute time interval  rd quarter      is selected  the broader time interval   nd half year of       and finer time intervals july  august and september      are given as selectable choices  hint  you may need to move up to broader time intervals before you can select time intervals that are earlier or later than the currently selected   absolute time intervals shown in red denote intervals that are not yet completed  the end lies after the current point in time   no data will be reported for these intervals  still they can be useful to drill down to finer grained time intervals which are completed yet  example  in february      the time interval  q        is not completed yet  still it serves to drill down to  jan        which is already finished     
  the time resolution parameter determines the discretization of the time axis  the values available as valid time resolutions will change according to the time interval selected  example  if you select a time range of one month  you can only select time resolutions of equal or finer granularity  but not e g  quarters or entire years   
  interactive report drill down  the top viewed pages report model provides the following three report parameters     the number of entries parameter determines the number of top entries to display  please note that technically this is an  entry range  parameter  thus a simple extension of the available value set would allow entries like  top       or blocks like                  etc  see the analytics developer manual on how to extend report variables     
  in order for the report aggregator to run  the aggregation process must be uploaded and started   uploading the aggregation process  before reports are generated  the aggregation process must be uploaded  the standard process is contained in the file properties corem data aggregator xml  it can be uploaded using the following command   bin cm upload  u admin  p admin  f   properties corem data aggregator xml  if you need a customized workflow  please refer to the analytics developer manual for details of the aggregation process   starting the aggregation process  you can start an aggregation process using the workflow windows of the coremedia editor after logging in as a member of the group administratoren  simply start an instance of the process definition data aggregator  a popup will appear  asking you to specify values for the variable stopafternextimport and dispensablelogproviders  if you want to run just a single cycle of the import loop  check the box at  stopafternextimport  but normally you should just continue by starting the workflow   note that if you try to start two aggregation processes  the second process will detect this situation and terminate immediately   monitoring the aggregation process  by selecting the running aggregation process in the lower left frame of the workflow window  more details about the process are shown on the right   you can use this view to set the variable stopafternextimport to true  terminating the process cleanly   the view shows the current value of the variable failedlogproviders  it contains a comma separated list of identifiers of those log providers that did not answer a request for an analytics log during the last iteration or whose log was not correctly parseable  if some of these log providers are permanently disabled  you should remove them from the configuration   if there remain log providers that are configured  but that did not respond  then the aggregation process will not prepare the permanent reports for dashboard reporting  if you want to force the analytics data aggregator to proceed  you may insert to the variable dispensablelogproviders a comma separated list of identifiers of those log providers  that are down for known reasons   but that are known to have yielded all logs to the aggregator  if all failed log providers are declared dispensable  aggregation will proceed  note that overlay reporting is not affected the unavailable log providers  overlay data is provided on a best effort basis   additional read only variables show the times up to which the various aggregation steps are currently being performed  these variables allow you to makes sure that the aggregation process is progressing properly  
  interactive report drill down  the top entry pages report model provides the following three report parameters   the site parameter determines the  sub  site  the list of sites is automatically generated during report data aggregation  the number of entries parameter determines the number of top entries to display  please note that technically this is an  entry range  parameter  thus a simple extension of the available value set would allow entries like  top       or blocks like                  etc  see the analytics developer manual on how to extend report variables  the time interval parameter allows a user to select the time interval  see the performance report for time interval description and screenshots   as the top entry pages report is not a time series report  no time resolution parameter is provided   
  the predefined top internal search terms reports display a ranking of search terms entered into the coremedia search engine during the selected time interval  the coremedia search engine is an optional component extending the content repository with structured  full text and metadata search capabilities  see the administration and operation manual  chapter   for more information on the coremedia search engine   the searches of the coremedia search engine are always run against one of a number of so called collections  there is one report that displays the top search terms when all collections are joined into one and there is another report that allows you to query the top search terms of a single collection   in the analytics context  the coremedia search engine is called  internal search engine  in order to distinguish it from  external search engines   the latter term refers to engines outside the scope of a coremedia cms system installation  e g  google  altavista  etc  see the next section  the external search terms report  for a ranking of external search terms   please note that currently the internal search terms ranking is a consolidation of search terms over all sites served by the search engine  no  sub  site specific breakdown is available  however  the search collections may be configured in a way that collections correlate with sites  in that case  the associated collection may be selected for getting a site specific report   
  if you want to install a coremedia editor extensions engine that serves the advanced query editor  the bean query editor and the differencing engine  proceed as follows  select the coremedia editor extensions option and press  next    the window shown below will open  you can decide whether the default servlet engine tomcat should be installed or not  
    select  yes  or  no       if you choose yes     tomcat and the editor extensions engine web application will be installed in the tomcat  webapps directory  no       only the editor extensions context will be installed  you have to integrate these components in the servlet engine of your choice manually      
  if javascript is disabled in your browser  you will have to press the  reload  button on the right of the report header to update the report  
     the default tomcat servlet engine is configured with the file   conf server xml  in general  no configuration is necessary in this file  the default http port of the editor extensions engine is set to       the default shutdown port      is used to shutdown tomcat     click the  next  button      now you will be asked for the configuration of the objectserver properties file  here you can enter the data necessary for connection with the content server    
  interactive report drill down  the top internal search terms report model provides the following two report parameters   the number of entries parameter determines the number of top entries to display  the time interval parameter allows a user to select the time interval  see the performance report for time interval description and screenshots   if you are viewing a collection specific report  you may also set the following parameter   the collection for which the search requests are analyzed   please note that search term results are aggregated in a delayed way  hence you may not see search term rankings immediately  
   field description repository url enter the url where to obtain the ior of the content server  repository domain enter the domain of the user used to connect to the content server  repository user enter the user name used to connect to the content server  the editor extensions engine connects as the user webserver  repository password enter the password of the user used to connect to the content server  default is webserver but you should change this password as soon as possible   
  interactive report drill down  the top external search terms report model provides the following three report parameters   the number of entries parameter determines the number of top entries to display  the site parameter determines the  sub  site  the list of sites is automatically generated during report data aggregation  the time interval parameter allows a user to select the time interval  see the performance report for time interval description and screenshots   
    if you have chosen to install the web application template or the web application template with http cache  editing services for jsf and or the web services engine the window shown below will open  you can decide whether the default servlet engine tomcat should be installed or not   if you choose yes  tomcat will be installed and the components will be installed in  webapps of the tomcat installation  no  only the component s context will be installed  you have to integrate these components in the servlet engine of your choice manually   
      click  yes  if you want to install tomcat   
  the property repository url specifies the url of the content server  the properties repository user  repository password and repository domain define the account of the user used by the cae feeder to log in to the content server   configure the database  the cae feeder template includes an internal proactive engine  which persists the feeding state in an database  configure the connection to the database in the file caefeeder properties  the property jdbc driver specifies the class of the database driver  the property jdbc url contains the url of the database and the properties jdbc user and jdbc password specify the account of the database user  the property jdbc dbname contains the name of the database  for example  
  configure the search engine  the file caefeeder properties contains properties to configure how to connect to the coremedia search engine  this includes host name and ports of the installed search engine and the name of the target collection  each feeding application needs a different target collection  do not use the same collection for multiple instances of the cae feeder or the search engine feeder of the coremedia content server  the following example configures the cae feeder to use the collection named caefeeder of the search engine running on the same host with default ports  
  configure logging  logging uses apache log j and is configured in the file log j properties  see the documentation of log j for details  by default  the application logs to the file var logs caefeeder log  
  the differencing service is a web application based on javaserver faces  jsf  technology from sun microsystems and the coremedia editing services  special jsf components  renderer and models are defined to help rendering the result  to compute the differences of xml fragments a third party application named deltaxml is incorparated and accessible through an adapter interface  
  while the cae  cae  is tailored for building highly dynamic web sites  delivery   it offers no special support for interactive web applications that have to provide a graphical user interface  gui  for content entry  it can be argued that any web view framework such as spring mvc  struts  or jsf can be used together with the unified api to achieve this goal with the cae  but there are recurring problems when building guis that would have to be solved over and over again in each project or at least for each view technology and building content applications is more than assembling some gui widgets  but needs lots of services  models  and glue code that are domain specific   editing services for jsf is a subcomponent of the cae that is aimed at exactly that use case  building interactive guis for custom content applications that support content entry  it offers a large set of ready to use services  models  utilities  and ui components   widgets    predefined cascading style sheets  css  together with examples and a guideline make it easy to implement the appearance of the coremedia software style   for the end user  for example  the editor   applications built with es provide enhanced usability   special use cases can be presented through a custom gui that reflects the business logic  not the generic approach used to model the domain  examples are wizards  custom browsers  custom layout forms  and specific compound actions   macros    the coremedia software style offers a modern  and consistent look and feel  all standard content actions  table columns  types etc  are localized  currently  english and german   are visualized through an icon  and  where reasonable  offer a descriptive tooltip   for the project manager  realizing a project with es means   reducing development cost  see below   reducing total cost of ownership  easing deployment and improving maintainability by using a web application approach  a safe investment in standard  scalable products and technologies like j ee  jsf  spring  coremedia cms  and getting early visual feed back on the project status  since an iterative approach is supported   for the application programmer  es provide ease of development   typical simple content application uis can be created by editing and creating xml configuration files and jsp templates  no java programming necessary  localization and appearance of all standard actions  table columns  types etc  has already been taken care of  the time  effort  and skill set needed to create the application is reduced dramatically  compared to building a coremedia content application ui  from scratch   using e g  unified api   cae and spring mvc  the application programmer can build an interactive  modern web ui without caring about html  css  or javascript  widely known and accepted standards are adopted  if you are familiar with the model view controller  mvc  paradigm  jsf  and spring  you will have a quick start   this ease of development is achieved by providing reusable services  models  utilities  and ui components  
    click  yes  if you want to install tomcat   
  the cap  relno  api zip file of your coremedia cms distribution contains the javadoc of the editing services for jsf public api as well as the tlddocs of the es and diff tag libraries and the bean doc of the web application template s spring application context  the following subsections contain an overview of the previously mentioned tag libraries   these are the most important api for editing services for jsf application developers  
  the coremedia search engine adds full text search capabilities to the coremedia cms  you can use it to quickly find documents of a coremedia content server and content beans of a content application engine  by their textual data  it is possible to search for text in binary data of many supported formats   document search is available in the coremedia editor and the coremedia webeditor  you can integrate search functionality into your website and custom applications  
    enter the ports of the tomcat installation into the appropriate fields and click  next   afterwards  a configuration dialog for the analyticsdashboard properties will appear   
  editing services are organized in a modular architecture tailored for producing reusable services  models  components and utilities  to support different technologies and use cases and to be extendable  all beans provided by editing services are designed to be loosely coupled  spring is used to  glue  everything together  it is used as the overall factory  
  a recurring problem of uis is localization  for a graphical ui  localized strings are often complemented by a tooltip and a corresponding icon   editing services for jsf deals with java beans  localization is defined as the problem to find a localized text  tooltip  and icon for a given locale and bean  these three properties are grouped into a localizedlabel  a localizedlabelfactory is a factory that takes a locale and a bean and produces a localizedlabel  there is a delegatinglocalizedlabelfactory  that iterates over a  spring   configurable list of localizedlabelfactories until one is able to return a localizedlabel for the given bean  analogously to the idprovider in the cae     a localizedcomparablefactory takes a locale and a bean and creates a comparable that can be used for localized sorting  java supports localized sorting for strings by the java text collator class  another case of localized sorting is when an object is first localized  then sorted according to its localized name  e g  a contenttype    the localizationservice offers utility methods to create localizedlabels from beans  given a localizedlabelfactory for a specific locale  it can create a localizedlabel from a single bean as well as lists of localizedlabels from lists of beans or sorted lists of localizedlabels from a set of beans and an optional localizedcomparablefactory  the default implementation is the defaultlocalizationservice  it uses the locale from the current request  see editingcontext    utility classes are available to create a comparable composed from two given comparables  compoundcomparable  and to reverse sorting order  i e  return the opposite for a given comparable  reversecomparable    for more information about localization classes consult the packages com coremedia editing localization and com coremedia editing cap localization in the javadoc api   
  in a data based application like a content application  tables have to be presented and their sorting and filtering has to be changed interactively   editing services for jsf offers a so called beantable  the model underlying a beantable is a pair of beantablemodel  essentially a list of beans  and beancolumnmodel  which is a list of column definitions each given by a beancolumn  a beancolumn knows  given a bean from the beantablemodel  how to compute the  non localized  cell value used for rendering and a comparable used for sorting  if the beancolumn supports sorting   beantables allow configuration similar to what the editor xml offers for the coremedia editor   a beanrow collects the cell values computed by all beancolumns of the beancolumnmodel for one bean in a single object  which is cached using the cae dataview framework  beanrows are used for rendering by a table component  a sortedbeantablemodel sorts a given beantablemodel according to the comparable computed by a given beancolumn   for the beancolumnmodel  there are some sample spring configurations  that e g  provide a list of columns like the one in the standard configuration of the contenteditors   for more information about table classes consult the packages com coremedia editing table and com coremedia editing cap table in the javadoc api   
  an api has methods for operations  ui frameworks often  objectify  these methods into command or action objects  editing services provides an abstraction for this typical ui framework pattern  and implementations for a subset of the methods provided by the unified api  in the editing services framework the term action refers to the ui representation of a command with the command encapsulating the business logic to be executed  a command often wraps one method of a business object  but may contain arbitrary complex business logic  the base interface is com coremedia editing action having the following properties  
   field description repository url enter the url where to obtain the ior of the content server  repository domain enter the domain of the user used to connect to the content server  repository user enter the user name used to connect to the content server  the analytics dashboard  connects as the user webserver  repository password enter the password of the user used to connect to the content server  default is webserver but you should change this password as soon as possible  analyticsdashboard db driver enter the driver class name for the jdbc connection to the analytics database  analyticsdashboard db url enter the database url  analyticsdashboard db user enter the database user name  analyticsdashboard db password enter the password for accessing the database  analyticsdashboard db database enter the database type  which must be oracle  db   or mssql   
      edit the properties as necessary and click  next  to complete the installation of the dashboard    the following properties can be configured     
  jsf is a standard  component based web gui framework and part of j ee       out of the box  jsf uses javaserver pages  jsp  for its display technology  but jsf can also accommodate other display technologies  such as xul    jsf includes   a set of apis for representing gui components and managing their state  handling events and input validation  defining page navigation  and supporting internationalization and accessibility  a default set of gui components  two javaserver pages  jsp  custom tag libraries for expressing a javaserver faces interface within a jsp page  where one tag library is general and one is html specific  a server side event model  state management  managed beans  javabeans created with dependency injection    the jsf specification was developed under the java community process as jsr      which defined jsf     and      and jsr     which defined jsf      es uses jsf       jsf allows its components to access arbitrary java beans via jsf expression language  jsf el   which is similar  but not equal  to the expression language known from the java standard tag library  jstl   the main addition of jsf el over jstl el is that not only getter methods can be invoked through el  but also setter and event handler methods  this corresponds to what es adds to the cae  writing access to beans and user interaction through widgets  
  feeding the search engine  the search engine feeder is enabled or disabled in the configuration of the coremedia content server  you can change the configuration at runtime to stop and restart feeding without restarting the coremedia content server   when the search engine feeder starts the first time  it iterates over the documents in the repository and sends them to the search engine for indexing  after this initialization phase  the search engine feeder sends documents to the search engine after they have changed   when the search engine feeder restarts it automatically continues its work with the next document that needs to be indexed  this document is determined from a timestamp stored by the search engine feeder in the same collection of the search engine  during restart the search engine feeder retrieves the timestamp from the search engine to continue feeding   the coremedia search engine indexes textual data from document properties and a number of metadata attributes such as the path of the document  the name of its creator and the last time the document was published  in the configuration of the search engine feeder you can restrict the indexed documents by their type and its indexed properties by their name and type  note  that the coremedia search engine only indexes the latest document version  
  batches  for better performance the search engine feeder sends batches to the search engine  a batch contains changes of multiple documents  the search engine sends notifications back to the search engine feeder when a batch is persisted  a sent batch which was not yet persisted is called an open batch  the search engine feeder uses multiple open batches to improve the indexing throughput  
  error conditions  if the search engine feeder or the search engine is unable to process a certain document  an error document is indexed instead  it serves as placeholder for the original document in the index of the search engine  an example for such an error is a document with binary data of an unsupported format  error documents contain the value error in the index field feederstate and are not returned as search result by the content server  you can search for error documents using the administration page of the search engine feeder  an error document is replaced with the correct document when the document changes in the coremedia content server and the cause of the error has been removed   communication problems between the coremedia content server and coremedia search engine lead to search errors in clients and after some retries to the stop of the search engine feeder  with the default configuration the search engine feeder restarts automatically after one minute  search requests from clients succeed as soon as the communication problems have been resolved  
  restrictions  the coremedia search engine provides a fast and efficient full text search for the indexed documents  however  because of the asynchronous nature of the indexing process  search results do not always reflect the current state of the repository  a document appears in the search results some minutes after it was sent to the search engine  you have to use the more powerful but slower builtin query feature of the coremedia content server if you need up to date results   the coremedia search engine supports search in the content of the latest document version  if you want to search for older versions or for folders you have to use the query feature of the coremedia content server or use the coremedia cae feeder to index the required data as part of content beans  
  configure a coremedia content server to use a coremedia search engine if you want to search for documents in the coremedia editor  coremedia webeditor or custom applications  the coremedia content server connects to the coremedia search engine to handle search requests for its clients  
  the coremedia search engine feeder is an integrated component of the coremedia content server  configure the search engine feeder of the coremedia content management server to provide full text search for documents of the content management environment  for example in the coremedia editor and coremedia webeditor  configure the search engine feeder of the coremedia master live server to provide full text search for documents of the content delivery environment  for example on the website  
  disable feeding  set the property cap server feeder enable in the file contentserver properties to the value false to disable the search engine feeder   a disabled search engine feeder does not start when the content server goes online and can not be started with the search engine feeder administration page  changing the configuration stops a running search engine feeder   for example   cap server feeder enable false 
  configure the user account  the search engine feeder requires a user account to access the documents of the content server it runs in  during the initialization of the content server a dedicated user is created with the name and password feeder  for security reasons  change the password afterwards  the account requires at least read rights on the content to be indexed  a license of the service feeder is consumed by a running search engine feeder   
  the coremedia analytics engine extends an existing coremedia content management and content delivery environment with capabilities to analyze visitor activity on produced sites and to report on the management environment s status  it comprises in site analytics for the fine grained and prompt visualization of current site visitor activity and an analytics dashboard for long term  drillable compilations of site visitor activity and repository status overviews  these two distinct applications provide users with an encompassing overview of site activities   the analytics engine is specifically tailored for applications that use the content application engine for rendering the pages  neither the active delivery server nor any form of pregeneration are currently supported   this section will elaborate on the components of the analytics engine  on a typical deployment and on the configuration option  
  if you migrated from a release prior to cms       the search engine feeder fails to start when the coremedia content server starts the first time because the user account does not exist  in that case  create the user account manually  afterwards you can use the administration page to start the search engine feeder  
  the coremedia analytics engine consist of multiple components that are deployed in different places   the tracking component is deployed with a content application engine  cae   it is responsible for monitoring the traffic that arrives at the cae  it writes special log files that contain entries for page views and for clicks on links  it also provides access to these log files for remote processes  the object analyzer computes a number of properties for persistently stored objects in the repository  the properties are then written to the analytics database  the analytics data aggregator is a workflow server that is used for gathering logs from the delivery content application engines and for importing these logs into the analytics database  a number of different databases are supported for use as the analytics database  in site analytics is realized inside a preview content application engine that also uses the coremedia editing services for jsf for building an editing application  the analytics dashboard consists of a web application that can display various summary statistics regarding the traffic on the site and the state of the content repository   
  in the following  you will find a discussion of full deployments that include all components of the coremedia analytics engine  for low traffic sites  you can use the analytics data aggregator simultaneously as the workflow server for editorial processes  for high traffic sites  this is not recommended  because the log processing may slow down the editorial processes too much  therefore  a standalone analytics data aggregator is recommended for high traffic sites   standalone deployment  this deployment consists of   a content management server  a master live server  a workflow server  an analytics data aggregator  an object analyzer    a preview servlet engine  for example a tomcat   containing  a preview cae with in site analytics and an analytics dashboard  a delivery cae enabled for click tracking  databases for the servers and for the analytics engine   the following figure illustrates the deployment assuming a firewall between content management environment and content delivery environment  
  report drill down  per default  only existing content items are counted  regardless of whether they have been published yet  using the content item state filter  which is the leftmost report parameter  following content item states can be selected   existing   existing content items will be counted  deleted content items will be excluded  published   only existing  published content items will be included in the report  unpublished   only existing  currently non published content items will be counted  deleted   no existing  but only deleted content items will be included in the report   
  as you can see  the analytics database and the analytics data aggregator were placed on the delivery side of the firewall  this simplifies the operation of the analytics data aggregator  because it can access all delivery caes directly without going through the firewall and because it can easily be associated with the master live server in this way   shared deployment  a reduced version of the previous deployment can be seen in the following figure  the analytics data aggregator is reused as the workflow server in the content management environment  the object analyzer is also deployed inside the analytics data aggregator as a manager  this simplifies the operation of the system  because fewer jvms are running   note that in this case  the analytics data aggregator must be located on the private side of the firewall  but this should be acceptable for small installations  because there will be very few delivery caes that would need a connection to the outside  
  in this section you will find a discussion of the interaction of the components of the analytics engine   tracking of visitor behavior  when a visitor of a site visits a page  that page is fetched from the cae  after the page has been completely rendered  the relevant parameters of the request are computed and written to a log file that is managed by the cae  the referrer url of the request is also analyzed  giving information about the origin of the page view and potentially about the search engine query that led the visitor to the current page   alternatively  tracking images may be inserted into a page  in this case  page views are not directly counted  but instead the retrieval of the tracking image is detected and converted into an appropriate event  by default  the tracking images are fetched from a url similar to the following   http    host   port   webapplication  servlet tracker gif       tracking images are more versatile  but somewhat more difficult to set up compared to counting the rendered pages directly  they are absolutely required when the generated pages are supposed to be cached  for example by means of the http cache of the cae   while generating the delivered content  each hyperlink on the page can be augmented by a javascript onclick handler which sends an asynchronous request back to the server if the visitor clicks on one of the links  depending on the browser  this is either a request for an image similar to a tracking image or an xmlhttprequest using the following url scheme   http    host   port   webapplication  servlet tracker xml      the asynchronous request is logged by the tracking controller  this way  it can be determined precisely which link was clicked  improving the information previously gathered from the referrer url  of course  this requires javascript to be enabled  but for the vast majority of visits to internet or intranet sites  this can be safely assumed   it is possible to activate sampling  which ensures that only a fraction of the actual page views are tracked  for high traffic websites  this reduces the precision of the statistics only marginally  but cuts hardware costs for analytics considerably  when using sampling  javascript in the browser helps in minimizing the load on the tracking cae    all log data is kept in local files until the analytics data aggregator retrieves the logs by means of http  a servlet in the tracking cae is responsible for the management of external requests for retrieving the logs   analyzing the repository state  for all content objects some key properties like type  display name and category are computed and stored in the analytics database by the object analyzer  the object analyzer listens to the repository and updates the database continuously  taking all dependencies into account  normally  content data is read from the content management server   fetching and aggregating data  the analytics data aggregator runs an aggregation workflow  during normal operation  this process regularly starts an aggregation without user interaction  initially  the tracking caes are requested by means of http requests to rotate the logs and to provide a list of available logs  the used urls are of the form  http    host   port   webapplication  servlet analyticslog      the logs are fetched via http and written into the analytics database in a raw unprocessed format  as the aggregation workflow progresses  the data is refined  written into additional tables and aggregated to obtain summary statistics  ultimately  the data aggregator will discard old data and statistics  if so configured   alternatively  the data aggregator may parse log files  for example generated by an apache  and derive page view events from that   the aggregation workflow is also responsible for fetching logs from the coremedia search engine  it does so by calling a custom external process that moves the search logs into a directory that can be reached by the analytics data aggregator  afterwards  the logs are parsed  imported into the database  and aggregated according to the specification of the aggregation workflow  generating the final reports in the analytics database    displaying in site analytics  a cae with in site analytics displays overlay graphics in a preview of the web site  if this is enabled for a session  the overlays contain information about the frequency of page views  about the frequency of clicks on a link  or about the average loyalty of a user who views a page  to this end  in site analytics accesses the analytics database at the begin of a page and reads all relevant information from the analytics database  that information is processed and displayed as appropriate    displaying the analytics dashboard  the dashboard is a separate web application that displays statistics that are not specific to a single page  the number of page views in a given time interval or the top    search terms would be typical reports that appear on the dashboard  whenever a report is rendered  the analytics database is accessed and the statistics are retrieved  the dashboard is then rendered and delivered to the client  the analytics dashboard accesses a content server for authenticating its clients   
  this chapter describes the content of all configuration files which you can use to configure the coremedia content servers   some property files contain additional property entries which are not described in the administration manual  as a rule  these properties are for special  system relevant settings which you should not change  
  per default  no restrictions regarding content types apply  if you want to narrow down the repository information report to a content type  subsuming its subtypes   you may use the content type filter  the  nd report parameter  to specify a content type  after applying the filter  only content items of the selected content type or one of its subtypes will be included in the report   
  you can use the category filter  the  rd report parameter  to interactively drill down the repository s category structure   in the category filter selection box corresponding entries are listed  see screenshot     to navigate down the category hierarchy or drill into a subcategory  select a subcategory  the selected subcategory becomes the new current category and the chart visualizes the content item distribution within that category     to navigate up the category hierarchy or coarsen your category selection  choose the parent category in the category selection box  the parent category is marked with a minus sign      after updating the report view  the parent category will become the new current category and the former current category will be shown as one of many pie sections     
  the site parameter determines the site for which the repository information report is generated  please note that the categories available differ from site to site  thus a category which exists in a site a does not necessarily exist in a site b or may be empty  in the case that the currently selected category does not contain any data  a message indicating that the report is empty will be displayed  if you encounter such message  coarsen your category selection  navigate up  or select a different site  
  the point in time parameter allows you to compare the most recent repository structure snapshot with former repository snapshots  in the default configuration  a repository structure snapshot is taken once per day  with the most recent snapshot being taken the current day at midnight  per default the most recent snapshot is selected  but you may choose to select the following snapshots   from yesterday   the predecessor of the most recent snapshot  one week ago   the snapshot preceding the most recent by   days  one month ago   the snapshot taken one month before the most recent  a month ago usually refers to the same day of month  if possible  thus june    is  a month before  july     if no such day exists  the date is adapted  the date in the selection box will clarify what date is used  a quarter ago   the snapshot taken three months before the most recent one  half a year ago   the snapshot taken six months before the most recent one  a year ago   the snapshot taken twelve months before the most recent one   points in time for which no data is available are shown in red   
  the number format parameter allows you to choose between absolute numbers and relative numbers   absolute numbers   the total numbers of content items per category are indicated in brackets right to the subcategory name  percents   the relative number of content items of a category compared to all content items contained in the current category  including all subcategories  is indicated as a percentage value right to the category name  
  element indexdocumentfilter  there can be multiple elements indexdocumentfilter below the element fastindex  each element specifies a class that implements the interface com coremedia cap server feeder indexdocumentfilter  these classes must be added to the classpath of the content server  see the api documentation for details   parent element  fastindex  child elements  none  attributes  
   attribute value default description class class name none  required  the name of a custom class that implements com coremedia cap server feeder indexdocumentfilter   
  the unified api  uapi  provides a common  module independent client api for content  workflow  and user management  in cms       the uapi is used in the content application engine  cae   acts as a supplement for the deprecated scripting api  and all server tools have been re implemented using this api  cms      enables the use of the uapi in workflow server actions and in the importer   in order to also support graphical user interfaces  guis  using the uapi  editing services has been created to use the uapi in user interfaces  so far  the content part of the uapi is covered by the corresponding editing services implementations  for all relevant uapi content functions  there are gui actions   commands  and for all relevant uapi content objects  and also collections of these   there are factories to create representations for a localized gui   the advantages of a gui api based on the unified api are   custom business logic used in imports  workflow actions  or scripting clients can be re used as is  the same initializers and validators can be used e g  during import and in the gui  for the gui  all that is needed are generic adapters to the concrete gui framework used  some configuration of the gui can be shared between guis based on different gui frameworks  there is a clear separation of concerns between the business logic  the presentation logic  and the actual presentation  gui framework   which leads to modular  maintainable code   
  this section gives a short overview of the most important technologies used by es  namely the coremedia unified api  the spring framework  and javaserver faces  and explains their role for building web uis  
  the coremedia analytics engine tracks visitor behavior on a site in a fine grained fashion down to individual page views and clicks and stores the data for a potentially unlimited time  it is possible to plug in a strategy for identifying the user who is associated with a certain event  other data fields  too  may contain information that allows an identification of specific users  for example  in some jurisdictions already the storage of the requesting ip address renders the data as personally identifiable information   the storage and processing of such personally identifiable information may be subject to strict limitations depending on the applicable laws  additionally  your organization may have a privacy policy in use that restricts the permissible uses of the information further  for intranets  a special protection for employees might have to be considered  
  please analyse the privacy requirements carefully and amend the data aggregation process as needed    coremedia ag is not able to give any legal advice regarding these issues  consult a lawyer  if necessary  
  the content applications developer manual  section  cae feeder  describes how to set up a cae feeder for api use  which does not require a proactive engine and its database  
  for test installations  the analytics engine and a content server may share a single relational database  but due to load issues  this is never advisable for production installations   deployment variants  normally the object analyzer should be attached to the content management server  so that it can analyze unpublished content  too  it can be attached to a live server  however  if that is needed  when attaching it to a live server in a multi site environment  you should make sure to configure it for multi site operation as described in the administration and operation manual in the analytics configuration and operation section   when using tracking images  it is possible to use a dedicated cae to deliver the tracking images  routing the requests as appropriate by an upstream http server  this can be helpful in isolating the load for analytics  
  the analytics dashboard is a stand alone java web application which uses the analytics reporting database as its primary data source  in its basic deployment  it connects to a coremedia content application engine  cae  for authentication verification   predefined reports  see the user manual  do not access the production system infrastructure but only use the analytics database  built in cae connectivity allows you to create reports that merge publication system data with information from the analytics database   
  since editing services offers beans and jsf can use beans  we could stop here and leave wiring up of both frameworks to customer projects  but of course there are recurring tasks when using editing services with jsf  and some jsf specialties that require special adapters and utilities   jsf does not provide built in spring applicationcontext access  but comes with its own managed bean facility  to keep things consistent and application programmers from learning two syntactic variants of declaring beans in xml  we provide and extend utilities to use spring beans in jsf el  jsf el cannot invoke arbitrary methods  however  jsf el can invoke getters  indexed getters  map getters  action methods and event methods  to simulate a method call with parameters   faked  maps can be used that take a parameter as the key and return the function result as if it were the mapped value  even multiple parameters are possible using  currying   realized through maps of maps   some jsf concepts do not consequently implement the mvc paradigm  an example is the  f selectitems  construct  that does not separate the concerns of model  the list of beans to select from  and view  the renderer that provides an appearance for those beans   es provides clean concepts and adapters for jsf  jsf is still quite new and lacks some important features  for example  there is no standardized file upload component  taking beans from one view to the next requires storing them in the session  and there is no el function to compute the length of a collection or array  editing services offers solutions for these every day problems   if editing services only provided backing beans  this would in some cases lead to unnecessarily large and complex component trees  instead  es provides custom components that abbreviate recurring tasks  like constructing a jsf button for a given editing services action  note that you are not forced to use these special components  but you can still use jsf standard components or third party jsf components together with editing services beans   the most important editing services for jsf extensions to jsf are described in the following sections  
  editing services for jsf comes along with a jsf spring integration that allows to define scoped beans in spring     and to reference spring beans in jsf expression language  further jsf enhancements include custom jsf components and the  pageflow  scope  
  the dashboard application s central component is the report engine  the report engine manages report instances and drives the report generation   update process  it creates a report instance as needed  executes report queries against the analytics database and populates the report instance with the resulting query data   report visualization and user interaction follow the model view controller pattern  the  data populated  report instance represents the model which is rendered using report views  user interaction is handled by controllers which update report variables accordingly and request the report engine to update the model    report definition and customization  a report instance  type  variables  etc   is specified by a report definition  its appearance and level of interactivity supported can be customized using dashboard views  different dashboard views can be associated with user groups using dashboard profiles  these concepts will be explained further in the following sections   
  click through link overlays  in click through mode  an overlay for each link shows how many clicks on a certain link happened and how these clicks were distributed over time  like in the page overlay  a change is computed that based on a linearized version of the displayed graph and an indicator icon is shown   because link overlays tend to obscure the actual link  the link is duplicated at the bottom of the overlay  click on  follow link  to advance to the linked page  additionally  you can click on the remainder of the overlay to make it disappear when it obscures other overlays  
  sourceless clicks link overlays  in sourceless clicks mode  the link overlays show the total number of clicks to the given target page in the same page context  as defined by the template developers   but disregarding the page on which the click happened  this helps in evaluating links that appear on many pages like  e g   imprint links  the overlay contains the same elements as the click through link overlays   page views link overlays  in page view mode  the link overlays show the total number of page views for the linked page  regardless of the origin of the page view  the overlay contains the same elements as the click through link overlays   loyalty link overlays  in loyalty mode  the link overlays show the percentage of numbers of visits that contained   click or   or more clicks after this one  only clicks that are old enough for the session to time out afterwards are counted for this overlay   an indicator icon visualizes the loyalty  showing high  arrow up   medium  arrow right   or low  arrow down  loyalty as appropriate   if no single click was made on the link in the relevant time interval  the loyalty cannot be computed and is shown as not applicable   
  the data presented in the overlays is regularly updated  typically  page view data and click data is available after a few minutes delay  reload the entire page to receive current values   typical use cases  the following tasks are supported by in site analytics   detect unused content  in click through mode  locate the most rarely clicked links  these links might be removed  especially if interest is declining  it might also be possible to improve the context of the link  so that the link is more likely to be followed  detect misplaced content  if a link is clicked often  but placed at the bottom of the page or in another unfavorable position  consider moving it to a top spot to make it more attractive to visitors  detect misleading teasers  if a link is clicked often  but has a low loyalty  this is an indicator that the visitors were disappointed and left the site after viewing the next page  it might be advisable to adapt the context of the link to reflect the actual content of the linked page  detect dead ends  if an entire page and not only a link has a low loyalty  this may be an indicator that the page does not offer enough links or enough interesting links  if the page is viewed often  consider adding related items to prolong the visitor s attention   
   tag name attributes description examples panelgroup element  string  optional   attributes of jsf h panelgroup to produce valid  x html and be more flexible    es panelgroup element  div  styleclass  cmdiffchanges            es panelgroup  foreach itemelement  string  optional   listelement  string  optional   attributes of jsf h datatable where  h datatable  does not fit  e g  model driven lists etc   es foreach itemelement  span  var  action      value    contenttoolbar actions document        es button value    action       es foreach  selectonemenu autosubmit  boolean  optional   for  string  optional   attributes of jsf h selectonemenu autosubmit  es selectonemenu id  version  autosubmit  true      value    versiondiff leftversion       valuechangelistener    versionchangelistener processvaluechange     f selectitems     value    selectitems byfactory longversionlocalizer  versiondiff leftversions         es selectonemenu  inputfile contenttype  string  optional   attributes of jsf h inputtext file upload component  es inputfile id  imageupload      converter    converterfor document type descriptorsbyname image        value    document properties image     convertcalendar attributes of jsf f convertdatetime converter for java util calendar instances  h inputtext id  autoloeschdatumeditor        value    document properties autoloeschdatum       es convertcalendar type  date  datestyle  short      h inputtext  scope rendered  boolean  optional  scope for variables  es scope     es variable name  var   value  var        es variable name  var   value    currentuser name        h outputtext value  var     var     var        var         es scope  variable name  string  value  string  rendered  boolean  optional  shorthand notations for complex el expressions  es variable name  name  value    connection session user name       h outputtext value  hello   name        es variable    
  the analytics data aggregator is started by   cm workflowserver start  use the following command to start the object analyzer   cm objectanalyzer start  the analytics dashboard  the in site analytics web application and the content application engines with enabled tracking are started by starting their web application container  typically a tomcat  no special actions are needed   the first start  when starting the components of the analytics engine for the first time  you should adhere to the correct startup order  first  the workflow server that hosts the analytics data aggregator should be started  during startup  the database schema for the analytics database will be created  therefore  the first start of the analytics data aggregator will take longer than subsequent starts  if the schema creation or update fails  manual intervention will be necessary to repair the schema  next  the object analyzer should be started  its first start may take up processing power as it indexes the entire content repository  subsequently  only changes in the repository will be processed  the data aggregator process definition should be uploaded with cm dataaggregator  u admin init and started with cm dataaggregator  u admin start  only after the the data aggregator and the object analyzer are up and running  you should start the web applications that access the database  the tracking caes may be started at any time  but keep in mind that significant amounts of log data are accumulated locally on the tracking caes while the aggregation process is not running   when restarting the servers after a failure  no special startup sequence is required   restarting after an update  in case of an update  please stop the data aggregator using  cm dataaggregator  u admin shutdown  before the update  afterwards  follow the instructions for the first start and start the analytics data aggregator before all other components  during startup  the existing database schema version in the analytics database will be determined and the schema will be updated as needed  note that this involves uploading a potentially changed process definition using  cm dataaggregator  u admin init  and starting it with   cm dataaggregator  u admin start  if you accidentially kept the data aggregator running while doing an update  you might have to invoke cm workflowconverter  c before being able to restart the workflow server   
  this manual is addressed to developers of coremedia projects who want to integrate the coremedia analytics engine into their content application  they ll find information about   the architecture and deployment  the integration of the analytics engine into a web site that is implemented using the content application engine  the plugin interfaces available for advanced customization  the database schema  which can be important for extensions and for the integration of third party analysis software  the aggregation process and standard extension points in that process  the possibilities for extending the analytics dashboard   
  before reading this book  you should inform yourself about the following topics   the development of applications for the content application engine  as described in the content applications developer manual  the end user view of in site analytics and of the analytics dashboard  as described in the user manual  the basic configuration options and the installation process for the analytics engine  as described in the administration and operation manual   if you intend to extend the aggregation process  you should also have a look at   the available support for defining custom workflows  as described in the workflow manual   for understanding the aggregation process in detail  for modifying the process and for extending the set of reports  it is also assumed that you are skilled in database technology  particularly sql and jdbc  
  a page view denotes the delivery of a single page to a visitor of a site  a visitor is also referred to as a user in contexts where the viewing of a page is not the primary focus  a session can often be characterized by a user  the first page view for which a user can be computed  determines the user of the session   the count of unique visitors of a given time interval is the number of different users of sessions that contain viewed pages in the given time interval   transition  a transition denotes the progress of the visitor from one page to another page  a transition always corresponds to a page view  but not vice versa   session  a session denotes a sequence of page views  a session is terminated after a certain period of inactivity  typically after    minutes during which no page view occurred   entry  the first page view in a session is called an entry    exit  the last page view in a session is called an exit    stays  all page views in a session except for the last are called stays   loyalty  for a certain page  the percentage of page views that are followed by further page views in the same session is known as loyalty  similarly  the loyalty for a link is computed as the percentage of transitions using this link that are followed by further page views in the same session   
  in order to create a webdav folder on your computer   depending on your operating system   proceed as follows     windows xp open the windows explorer  select tools connect network drive  select  online disk space   click  continue   select  choose another network computer   enter the webdav server url      http    host   port  webdav      replace  host  with the name of the computer where the webdav server is installed and  port  with its port     click  continue   enter your coremedia user name and password  enter a name for the webdav folder  click  finish      windows      open a windows explorer window  select tools map network drive   in the next dialog window  select  web folder or ftp site  enter the webdav server url      http    host   port  webdav      replace  host  with the name of the computer where the webdav server is installed and  port  with its port      click  continue   enter your coremedia user name and password  enter a name for the webdav folder    click  finish      
  webdav exports resources in a way very similar to a file system  as folders and files  webdav folders are also called collections  the contents in the coremedia content management server are folders and documents  the mapping from coremedia folders to webdav folders is quite obvious  for coremedia documents however  there are two supported mappings    export as files  export as folders  export as files  a document which is exported as a file is easy to create and edit but has the restriction that only one field of the document is exported and editable with webdav  if you have more than one blob field in your document type which you want to edit via webdav you have to export the document as folders   export as folders  a document is exported as a webdav folder which contains files for each exported property of the document  this export is more flexible than the export as files but it might be more confusing for users because you have webdav folders for coremedia folders and documents   you can configure the mapping of documents to files or folders in the webdav properties file   webdav folders and files always have the same names as the folders and documents in the coremedia content server  by default  no additional extensions are appended  you can configure the webdav server to append a file type extension for all documents that are exported as file  the extension is derived from the mime type of the exported field and must be configured in the file mime properties   when you create a new document with webdav  the webdav server gets the document type from the name of the created folder or file  therefore a mapping from name extensions to document types is configured  you can use webdav to rename the documents after its creation  which of cause does not change the type of an already created document  the configured extension mapping is only used for the creation of documents  when you use the folder mapping for documents  windows creates a  new folder  first before you can specify the name of the folder  this leads to the creation of a coremedia folder with the same name  if you immediately rename the still empty folder to a name with an extension that is mapped to a document type  then the empty coremedia folder is deleted and a document of the wanted type is created instead  you can also configure the catch all extension   for one document type to create documents of that type for all names which do not match another configured extension  note  that if you configure such an extension for a document type which uses the folder mapping  you will not be able to create coremedia folders with webdav   with the folder mapping  document fields are exported as files in the folder that represents the document  the files are named after the names of the document fields  you can localize the field names as known from the coremedia editor  the webdav server appends extensions to the files depending on the type of the field  the extension for binary fields matches the mime type of their data as configured in the file mime properties  
   property value default description filesystem documentfiletype file or folder file the default mapping used to export documents  if this is set to folder  all document types exported without a filesystem export  n  filetype property are mapped to webdav folders  otherwise they are mapped to webdav files  filesystem appendfileextension true or false false if true  a file type extension is appended to all documents exported as files  the extension is derived from the mime type of the exported property and must be configured in mime properties  when creating a new document file  the extension will not show up in the document s name but will only be used to set the mime type of the stored blob field  for document file creation  the mime type and extension must be configured in mime properties in a way that it is possible to reconstruct the same extension from the mime type without ambiguities  filesystem export  n  doctype document type  defines the exported document type  all document types that inherit from the specified document type are also exported   n  is a number different for each document type  properties with the same number  n  belong together  filesystem export  n  filetype file or folder the value of filesystem documentfiletype the mapping used to export documents of the type with number  n   if this is set to folder  the document type is exported as webdav folder  which contains files for its exported fields  otherwise it is exported as webdav file with the content of a single exported field  filesystem export  n  property   m    document field  this property defines the exported fields  also named properties  of the exported document type  for the file mapping  only one field in a document type can be exported  for the folder mapping  replace    m   with different numbers to specify multiple exported fields  filesystem export  n  extension   m    extension  if a client creates a new webdav file or folder  a respective document or folder is created in the coremedia content server  the type of a created document depends on the extension of the created webdav file or folder  set the value of this property to the extension of the file such as  doc for a word document  replace  n  with the number for the respective document type  to map multiple extensions to a single document type  e g  jpg and jpeg   use multiple properties with different numbers for    m    you can use an asterisk     to configure a rule for all not explicitly configured extensions  note  that it is not possible to mix characters and such an asterisk  filesystem export  n  emptydocument path or numeric id of a document  if the exported field of a document is empty  a zero byte file appears in the webdav folder  some webdav clients such as microsoft word      have problems with an empty file  you can configure the webdav server to read the content from a property of a substitute document in the repository  replace  n  with the number of the exported document type and  path id  with the path or numeric id of the substitute document  the user needs read rights on this document  all further changes like save or delete are performed not on the substitute document  but on the originally selected document with the initially empty field   
  for example   filesystem export   doctype wordfile filesystem export   property data filesystem export   extension    doc filesystem export   extension    rtf filesystem export   emptydocument  substitute word filesystem export   doctype article filesystem export   filetype folder filesystem export   property   text filesystem export   property   image filesystem export   extension  article  the example exports the document types wordfile and article  documents of type wordfile are exported as files with the content of the field data  documents of type article are exported as folders with two contained files for their fields text and image  when a webdav client opens an empty wordfile document  the content of the field data of the document  substitute word is returned instead  the coremedia webediting server creates documents of type wordfile for files with extensions  doc and  rtf and documents of type article for webdav folders with the extension  article   localize field names  with the folder mapping fields of documents are mapped to webdav files below a folder which represents the document  by default the names of the files are the same as the names of the fields of the document with an additional extension  the names can be localized in the same way as in the coremedia editor  create additional files for the different locales in the same directory as the file webdav properties such as webdav de properties and webdav en properties  note  that only field localization is used from locale specific configuration files  localize the file names with properties of the following format   documenttype   fieldname label  replace  documenttype  with the document type and  fieldname  with the name of the field   for example   article textlabel   description article imagelabel   picture  session timeout 
  this section contains a description of the properties of the file webdav properties  the file contains the configuration of the webdav server such as authentication settings  exported document types and session timeout   authentication 
   property value default description authentication scheme  n  basic or digest    this property configures the supported methods of http authentication  this determines whether the password of the client will be submitted encrypted  digest  or in plain text  basic   webdav on windows vista does not support insecure http basic authentication and digest authentication does not work with ldap authentication on the content server    the digest authentication is recommended  but not all clients support this feature  if you are using webdav over ssl  it is sufficient to use basic authentication  if you want to allow both methods  you can add both schemes   authentication scheme   basic authentication scheme   digest  
   property value default description filesystem sessiontimeout seconds     the coremedia webeditor server opens a session to the coremedia content server for each user  after the specified time  in seconds  of inactivity the session is closed automatically and opened again when the user continues his work  there are two reasons why it is necessary to set this value  if the timeout value is small  the session is closed more often and the server response time increases if the timeout value is too big  a license is consumed and cannot be used by another user  the system checks all timeout    seconds  but at least all   minutes and at most all   seconds if the session timed out   
   property value default description filesystem infofile name file name info html this property configures the name of the information file  filesystem infofile false  true true this property suppresses the creation of the information file by chosing  false   filesystem remembermessages int   this property configures the number of error messages shown in the information file   
   property value default description uriencoding utf   or  iso        iso        neither http nor webdav specify the encoding which has to be used to transform the uri character representation into a byte sequence before hexadecimal escaping can be done  most of the current webdav applications use iso         latin    encoding  however some clients require utf   encoded uris  for example adobe golive      the behavior of the webdav server can be configured  using this property  the setting is valid for all applications using the webdav server   
  exported document types and properties 
  information file 
  encoding 
  a brief explanation of state and data model dependencies will be given as background before discussing mappings   state and data model dependencies  a state model variable s state implies constraints on one or more data model dimensions  as such  a state variable expresses one or more dimension constraints as aspects or partial state  it is the state s variables responsibility to keep state and aspects consistent   upon a state model update  which triggers the update of its variables  all state model aspects are collected and propagated to the data model  the data model in its turn may validate the update information and update its data model dimension constraints   each variable type defines a predefined set of aspects  whose names are defined by the state variable type  the following table gives an overview of predefined variable types and aspects   
   variable type aspect name s  aspect type aspect description   all genericvaluesetvariable types   browsertypedetaillevel  categoryvariable  contentitemstatevariable   contenttypevariable   numberformatvariable   pageclassificationvariable   pointintimevariable   searchtermresolutionvariable   siteselectionvariable  valueobjectconstraint dimension value object constraint the value object constraint indicates the variable s currently selected value entryrangevariable rangeconstraint dimension range constraint the range of relevant entries  defined by integer upper and lower bounds  timerangevariable rangeconstraint dimension range constraint the selected time range  defined by timestamp upper and lower bounds        dependentresolutionconstraint dimension discretizer constraint a time dimension discretizer that corresponds to the selected time range  timeresolutionvariable resolutionconstraint dimension discretizer constraint a time dimension discretizer   
  mapping state model variables to data model dimensions  in order to decouple state and data model  variable aspect names are mapped to dimension constraint names in the data model  all data model level components  as well as queries  aggregator and postprocessor  use the dimension constraint names   you define this mapping with the data model s  dimconstraintmappings  map property  the mapping function maps data model dimension constraint names to state model aspect names  the latter written as variablename     aspectname  a mapping example    property name  dimconstraintmappings      map       entry key  range  value  rangevariable rangeconstraint         entry key  resolution        value  rangevariable dependentresolutionconstraint        map    property   in the example  the state model variable  rangevariable  defines two aspects  a  rangeconstraint   which is a dimension range  and a  dependentresolutionconstraint   which is a dimension discretizer  the range dimension constraint is named  range  in the data model  while the resolution constraint is named  resolution    declarative and programmatic access to dimension constraints  data models provide generic access to dimension constraints for declarative   configuration only  report definition  any datamodel dimension constraint can be accessed using the data model s dimconstraint   method with the dimension constraint name as parameter  example       reportdatamodel datamodel       dimensionconstraint dc   dimconstraint  resolution         will return the dimension constraint named  resolution    if you require statically typed access to dimension constraints  create a java class for your data model with accessors  getter methods  to dimension constraints  in general you will not need specific java classes for data model  when creating a larger number of reports  we recommend sticking to generic access   
  header  the header row displays the document type icon and the document name   middle column  the top of the middle column contains two orange buttons and a counter display  the button above the counter display decreases the currently selected difference chunk by one  the button below the counter display increases the currently selected difference chunk by one  the counter display shows two numbers  the currently selected difference chunk and the total number of differences found for the two document versions  if a user clicks on a button  the number in the counter display is updated and another difference chunk in the two document versions is highlighted with orange background color   left column  the left column consists of two parts  a toolbar and the first document version  the toolbar contains the following components   version state icon  displays the current document state chooser for the first document version  if a different version is selected with the chooser the window will automatically load the new version with its differences  highlight changes toggle button  when clicked all differences are displayed with a different background color  when clicked a second time the background highlighting disappears again  show changes only toggle button  when clicked only the changes are displayed and not the whole version  in this state the highlight changes button is disabled  as it does not make sense  when clicked a second time the whole version is displayed again   the first document version is displayed below the header  depending on the state of the show changes only button either the whole version or only the changes are displayed  when the user clicks with the mouse on a difference chunk  this chunk will become the currently selected chunk   right column  the right column displays the second document version  the layout is nearly the same as for the left column  only the show changes only button in the header is missing  the user can decide if the left column displays a higher version  a lower version or the same version  which doesn t make much sense  as the version displayed in the right column  
   domain   variable type description time related variable types  pointintimevariable a dynamically computed set of time stamps used to select a single point in time  currently used in the repositoryinformation report to select repository snapshots  timerangevariable   a dynamic set of relative and absolute time ranges  used throughout all reports  the set of available values depends on the currently selected value  two subtypes of timerangevariable are defined  currently defines eight values  given by their symbolic name    r y   the last complete full year  aligned by years  in may       this is the year       r f   the last complete half year  aligned by half years  in may       this the second half of       r q   the last complete quarter year  aligned by quarter  in may       this is the first quarter of       r m   the last complete month  aligned by month  in may       this is april       r w   the last complete week  aligned by week  depending on locale configuration  this is either last sun sat  e g   in the usa  or last mon sun  e g   in europe  r mbyd   the last roundabout month        days   aligned to days  on may   th       this is april   th   may   th  r wbyd   the last   days  aligned to days  on may   th       this is may  th   may   th  r dbyh   the last    hours  aligned to hours  on may   th           pm  this is may   th      pm   may         pm  preconsolidateddata  timerangevariable a subtype of timerangevariable that is suitable for category reports working on data that is pre aggregated and pre consolidated by the analytics database  it does not define additional values  timeseries  timerangevariable   a subtype of timerangevariable that is suitable for time series reports  additional to the existing eight values defined in the supertype  it defines four more values   r q   the last   complete quarters r  m   the last    complete months r m   the last   complete months r m   the last   complete months timeresolutionvariable   a fixed set of time resolutions  can be dynamically constrained by time range variables  it defines the following values  given by symbolic names    y   year f   halfyear q   quarter m   month b   biweek     days  w   week d   day h   hour content related variable types  categoryvariable a dynamically computed set of categories  category variable values are set up from the analytics database data source  contentitemstatevariable   a fixed set of values defining content item states that can be applied as a content item filter  currently defines four values  given by symbolic names    pub   select content items that are marked  published  in the repository  notpub   select content items that are marked  not published  in the repository  exist   select content items that are not marked  deleted  in the repository  subsumes published and non published  del   select content items that are marked  deleted  in the repository  contenttypevariable a dynamically computed set of content types  defines a single fixed type     that subsumes all content types  content type value set is set up from the analytics database data source  page related variable types  pageclassificationvariable   a fixed set of page classifications  usually deduced from user actions   currently defines two values    entry   entry pages  exit   exit pages   site related variable types  siteselectionvariable a dynamically computed set of sites of a multi site cms  values are computed from site information available in the analytics database data source  ranking  top n  related variable types  rankrangevariable   a fixed set of integer intervals representing entry ranges  currently defines ranges                 and        possible extension point  ranges can be computed dynamically and need not start with    thus range blocks                    could easily be created  five values are defined   top    rank   through   top    rank   through   top     rank   through    top     rank   through    top     rank   through    search related variable types  searchcollectionvariable   the dynamic set of search collections as defined by the coremedia search engine  search collection names are retrieved from the analytics database     technically  this variable type is based on the generic value set variable type  see below   searchtermresolutionvariable   a fixed set of search term resolution levels  currently not used in any report  defines two detail levels    words   single word search terms searchterms   composite  phrases  search terms  miscellaneous variable types  numberformatvariable   a fixed set of values defining abstract number formats  not the actual format string   currently defines two values  absolute values and relative numbers  percentages   two values are defined   absolute   absolute numbers relative   relative  percentage  numbers  technically  this variable type is based on the generic value set variable type  see below    
  what is a property editor   a property editor is a part of the ui that enables a user to change the value of some property  in a wider sense  a property editor is the whole part of the ui that presents the property   usually  a label declaring the name of the property  with an optional help text that explains what should be entered  the actual editor component  a toolbar with buttons that works on the editor component  a place for input error messages   es provides a  es label  component that can be used to produce the label with icon and tool tip   the editor component part can consist of  one standard ui component  e g   a simple text input field   a combination of multiple standard ui components  e g  date input via three combo boxes   a custom component  e g  a richttext editor   or a combination of custom and standard components  e g  a blob upload component combined with a combo box for overriding the mime type of the uploaded file    for the toolbar   es button  and  es clientbutton  are used   input error messages are rendered by the standard jsf  h message  component   the following subsections explain how to assemble property editors for all available coremedia property types and give concrete examples  
  the jsf application behaves as a factory for components  converters and validators as well as a configuration bean used to set up the jsf runtime environment  the springapplication class used by editing services for jsf performs these tasks using the spring bean factory  in order to create components  converters and validators  the springapplication searches its spring application context for prototype beans prefixed as follows   component  component id  converter  converter id  converter for  class name  validator  validator id   having in mind that the springapplicationfactory sets up a chain of delegating application factories there are at least the following two ways to define a type specific converter   let s say for com coremedia xml markup  first the  plain jsf way of a converter definition in a jsf configuration xml    converter     converter for class      com coremedia xml markup     converter for class     converter class      com coremedia editing kits jsf converters markupconverter     converter class    converter   second  the spring bean definition prefixed as mentioned above    bean id  converter for com coremedia xml markup  class  com coremedia editing kits jsf converters markupconverter        singleton  false    
  the variables are defined in the map property variables of the state model  see the following configuration example    property name  statemodel      bean id  topviewedpages statemodel     class  com coremedia analytics definition report      statemodel defaultstatemodel              property name  variables      map     entry  key  value range  value   key       bean class  com coremedia analytics definition report        statemodel vartypes preconsolidateddatatimerangevariable        entry     entry  key  value entries  value   key       bean class  com coremedia analytics definition report        statemodel vartypes entryrangevariable        entry     entry  key  value site  value   key       bean class  com coremedia analytics definition report        statemodel vartypes siteselectionvariable          property name  sqlstatement  value  select id          siteid as name from sitedimension           property name  defaultsitename           value  core com          bean      entry      map      property              bean    property   the analytics dashboard framework provides a generic value set variable type which can be used to create custom variable types   the generic value set variable types can be used to define a set of unrelated  disjunct  values  values can be both static values known at configuration time or dynamic values read from the analytics database or a mix of both  each value is defined as a tuple of a symbolic name and a technical identifier  the symbolic name is legible  non localized value identifier at the user level  while the technical identifier is used within database queries   in order to define a value set variable  create a spring bean definition with the following attributes   properties   
  a report query is an abstract representation of a data model level data fetching mechanism  a relational report query is a specialization of a report query  which abstracts over relational database queries using sql as its query language  other report query types  like e g  multidimensional queries with mdx as its language  can be defined and integrated into an analytics application if required   one report query result consolidator  short name  consolidator  and one or more report queries are defined  the queries extract data from a  relational  data source and feed it into the consolidator  the consolidator folds merges data from queries  filters and post processes it and returns it to the analytics dashboard framework  which applies the report template to the data   hence  in order to create a report  you usually configure one consolidator and define one or more queries  the report definition has been significantly simplified  while formerly numerous java classes for different queries existed  almost all default reports are now implemented by configuration of generic queries  it s convention over configuration   configuration example        the containing data model definition      property name  datamodel      bean parent  timedim datamodel                      query result consolidator  given as prototype            property name  consolidatorprototype            bean parent     genericqueryresultconsolidator             property         queries  whose data will be merged by the consolidator            property name  queries            list                    query   definition  identified by its name              bean parent  preaggregateddata generictimeseriesquery                property name  name  value  q                                 bean                 query   definition                bean parent                     property name  name  value  q                                 bean            list          property                bean    property     
  typically you don t implement your own consolidators and query classes  but reuse and configure generic query classes and consolidators  basically  three report types are distinguished     time series reports show a timely ordered data set with the x values being points in time  an example is the  unique visitors  report  this type of report typically uses the predefined consolidator type timeseriesreport genericqueryresultconsolidator  the default query type is preaggregateddata generictimeseriesquery  configuration will be explained in detail in the following paragraphs      category reports show an  unordered  list of elements with x values being arbitrary objects  e g  folders  categories  channels or sites  an example is the  repository information  report  which displays information on a set of repository categories  this consolidator type categoryreport genericqueryresultconsolidator  and the query type preconsolidateddata genericcategoryquery have been defined for this type of reports      ranking category reports show a ranked  ordered  list of elements with x values being arbitrary objects  e g  pages  search terms  example report  the  top viewed pages  report  the consolidator type rankingcategoryreport genericqueryresultconsolidator has been preconfigured for ranking category reports  two query types have been predefined    the preconsolidateddata genericcategoryquery query type to fetch values and   the query type preconsolidateddata singlevaluequery providing single values  e g  total values used to compute percentages     
  finally  dimension constraints must be mapped to sql expressions  this mapping is not automatically done but must be specified in the query configuration via the  dimconstraintexpressions  list property    when a query is prepared for execution the specified mappings are evaluated sequentially  a from each mapping entry a partial sql expression is generated  which is bound to a placeholder name  finally  the statement placeholders are replaced with the generated expressions and the sql statement is executed  see section above   a dimension constraint can basically be mapped to any type of partial sql statement  examples are conditional clauses  equality expressions or element of expressions   a few mappings are predefined for relational queries     sql equality expression  columnname   value  as part of a condition clause     query addsqlequalsclause  string placeholder  string columnname  dimensionvalueobject dimensionvalueobject      this will generate a literal expression  tablecolumn   dimensionvalueobject  and add it to the condition clause that is bound to the given placeholder  if the condition clause is not empty  other expressions have already been generated for that placeholder   the newly generated expression will be added as a conjunctive term to the clause      sql element of expression  columnname in  val  val      as part of a condition clause     query addsqlelementofclause  string placeholder  string columnname  set dimensionvalueobject  valueobjectset      this will generate a literal expression  columnname in  value  value      and add it to the condition clause that is bound to the given placeholder  value   value   etc  are the enumerated values of the given value set  if the condition clause is not empty  other expressions have already been generated for that placeholder   the newly generated expression will be added as a conjunctive term to the clause    jdbc configuration parameters   query setjdbcmaxrowslimit  integer value    this will limit query s number of rows returned to the indicated value  providing null as value will actually set no max rows limit   finally  the jdbc fetch size can be set with the following expression   query setjdbcfetchsize  integer value    example        query definition      bean class           property name  queryname  value  performance pi query             property name  sqlstatement  value  select     from         cond  group by               defines a mapping of dim constraints to sql clauses        property name  dimconstraintexpressions      list     value query addsqlequalsclause   cond    stats site        datamodel dimconstraint  site     value      list      property    bean   in the example above  the current value of dimension constraint  site  is retrieved  assuming that value is  core com   an sql  fragment  stats site    core com   is created and bound to the placeholder  cond    the expression notation used in dimension constraint mapping expressions is very similar to native java expressions  with two exceptions   single quotes can be used to denote string literals  property access that follows standard javabean conventions can be abbreviated  x y z is evaluated to x gety   getz     the expressions are evaluated dynamically  at evaluation time  the variable  datamodel  is bound to the data model and the variable  query  is bound to the current query  the methods invoked are actual methods of the query classes  see class com coremedia analytics definition report query abstractrelationaldatamodelquery for sql jdbc operations  and data model classes  see class com coremedia analytics definition report datamodel abstractreportdatamodel for dimension constraint definition   you may add methods to your customized query classes and use them in the constraint mapping expressions  this very generic approach has been chosen to provide flexibility when mapping constraints to query languages like sql  please note that in later versions however  this generic notation might be replaced by a more restricted notation  
  in the following table the three relevant consolidator types are described in detail      consolidator type    spring bean name  description timeseriesreport  genericqueryresultconsolidator   consolidator type suitable for time series reports  it expects its feeding queries to filter out data which lies outside the expected time range  if it receives data for entries outside the time interval defined by the time range dimension constraint  it will raise an exception     the consolidator discretizes the entries  x values according to the data model s time range and resolution constraints  it then applies the defined strategies  the resulting list of consolidated entries will per default be sorted by point in time  i e  natural x value order   categoryreport  genericqueryresultconsolidator consolidator type suitable for unsorted unranked category  i e  non time series data  it applies the configured strategies  the resulting list of consolidated entries will per default be sorted by natural x value order    rankingcategoryreport   genericqueryresultconsolidator consolidator type suitable for ranked category  i e  non time series data  it applies the configured strategies  the resulting list of consolidated entries will be sorted by natural y  value order   
  with the result consolidation step finished  you now have a state model  data model  and queries defined  these components allow to fetch report data  in the next step  you will learn how to visualize the report data   
  you are not allowed to enter all arbitrary character strings into the search field  an error message appears if you enter a wrong search term  permitted search terms are   words and sentences  words  words are composed of one or several words which are separated by spaces  a words is composed of the characters  a  to  z    a  to  z  and the digits from     to      permitted words are for example   railway a   or  x   there is no distinction between lower case letters and capitals  the following words all give the same result set   car  car car  several words are combined by a logical and  e g  highway    will find all documents which contain the words highway and       you can use a minus      or plus       sign in front of a word  the plus sign is optional and has no meaning  e g  highway and  highway will give the same results  the minus sign excludes the following word from the search result  e g  highway     will find all documents which contain highway and do not contain     no space is allowed between the plus minus and the word   you can use the wildcards     and     in a word  the wildcard     represents an arbitrary number of characters  the wildcard     represents any single character  for example  car  will find all documents with words starting with car   sentence  a sentence defines a fixed order of words and is limited by quotation marks  e g   highway     will find all documents which contain the word highway followed by     plus and minus signs in a sentence will be ignored  
  the differencing service comes with its own set of jsp tags defined in the tag library html diff tld  the following table describes these tags  
   tag name attributes description examples container id  string  optional   value  differencingcontainer  required   rendered  boolean  optional  render the given value and provide a container for differencing panes and counters     diff container id  diffcontainer  value    differencingcontainer             diff container  pane id  string  optional   value  differencingpane  required   rendered  boolean  optional   style  string  optional   styleclass  string  optional  render the given value in a very specific way  as used by the differencing service  this tag must reside inside a container element     diff pane id  diffleft  styleclass  cmdiffscrollpane  value    differencingpaneleft            diff pane  property id  string  optional   mode  string  required   value  cappropertydifference  required   rendered  boolean  optional  render the differences of a document property  the mode attribute value must be one of changes  old or new   diff property value    propertydiff   mode  new    counter id  string  optional   rendered  boolean  optional   style  string  optional   styleclass  string  optional  render the index of the currently selected difference chunk  this tag must reside inside a container  element   diff counter   
  the first lines in diffcontainer jsp declare the content type and the used tag libraries  the prefixes f and h are declared for the two standard jsf core and html libraries  the last two lines bound the prefix es to the editing services tag library and the prefix diff to the differencing engine tag library       page contenttype  text html charset utf    language  java        taglib uri  http   java sun com jsf core  prefix  f        taglib uri  http   java sun com jsf html  prefix  h        taglib uri  http   www coremedia com jsf editing services              prefix  es        taglib uri  http   www coremedia com jsf differencing              prefix  diff     the root tag  diff container  is used to create a uidifferencingcontainer component that defines a container element with the id diffcontainer and the value   diffcontainer  which is a jsf expression language  el  expression referencing a container model bean  called diffcontainer    diff container id  diffcontainer  value    diffcontainer              diff container   its java type com coremedia diff differencingcontainer has two properties   leftpane  com coremedia diff differencingpane rightpane  com coremedia diff differencingpane  the two pane properties are backing bean models for the two version components  the root element contains a single child element that renders a three column panel grid for the left version  toolbar column and right version        left right version column and a toolbar in between       h panelgrid columns               styleclass  cmdiffpane            columnclasses  cmdiffcolumn  cmdifftoolbarcolumn             cmdiffcolumn            rowclasses    cmvfill           h panelgrid   the panel grid contains six child elements  the first three elements render the headline row and the next three elements render the two document versions with the toolbar column in between  the first and third headline elements are nearly the same and render the two toolbars above the document versions  the second element is an empty panel group  the document version headlines itself are rendered with panel grids which consists of two columns to allow different alignment of the child components  the buttons and labels in the first columns are left aligned and the buttons in the second column are right aligned          left right differencing pane toolbar       h panelgrid styleclass  cmtoolbar                columnclasses  cmtitle small cmhfill cmtoolbar small               columns              h panelgrid   the first component in the headline is a label which renders an icon and a localized text stored under the bundle key  difference version     es label value    diffresult left             text    localize label  difference version   text             styleclass  cminlinelabel     the el expression   diffresult left  in the value attribute evaluates to the left document version with the type com coremedia cap content version  which the label component renders as document state icon  the next tag  es selectonemenu  renders a version chooser listbox  the tag is an extension of the standard jsf  h selectonemenu  tag which adds autosubmit functionality to the component  if the attribute autosubmit  true  is specified  the form is submitted immediately  when the user changes the current selection  in this case the resource version    es selectonemenu id  version      autosubmit  true      value    diffresult left       valuechangelistener         versionchangelistener processvaluechange       f selectitems     value    selectitems byfactory longversionlocalizer                            diffresult leftversions        es selectonemenu   the method binding el expression   versionchangelistener processvaluechange  refers to the method processvaluechanged from bean versionchangelistener being invoked when the value has changed  the method resets the current difference index to   or    depending on the number of differences found between the two versions  if the number of differences is    the counter is reset to    if the number is greater than    the counter is reset to    the value binding el expression   selectitems byfactory longversionlocalizer  diffresult leftversions   returns an instance of uiselectitems required for the value attribute in the jsf standard tag  f selectitems   the expression diffresult leftversions returns a list of version instances for the left document  the version list and longversionlocalizer bean are parameters for the selectitems byfactory property which computes the uiselectitems instance  defined in the longversionlocalizer spring bean definition  each version in the listbox is rendered in the format version number followed by a vertical bar followed by the edition date of the version     the action of the right aligned highlightchanges button is executed on client side  so no request are send to the server  when the user clicks on the button  the tag  es clientbutton  is used to render buttons with client side actions    es clientbutton for  diffa                    value    highlightchangesaction                    mode  icon                   pressed    diffpaneleft highlightchanges                    styleclass  cmtogglebutton                   disabled    diffpaneleft showchangesonly      the action is specified with the value attribute where the value binding expression   highlightchangesaction  refers to the highlightchangesaction bean  configured in editing jsf diff xml  it only displays an icon  hence the mode icon  the button is disable in case only changes are rendered  showchangesonly true     the next button in the left toolbar is the showchangesonly toggle button  when pressed  it only displays the changes  and not the whole document version     es button value    showleftchangesonlyaction              pressed    diffpaneleft showchangesonly              styleclass  cmtogglebutton      the el expression in the value attribute binds the attribute to the showleftchangesonly action bean  the value of the pressed attribute is bind to the property diffpaneleft showchangesonly  if the property value is false  the value of the styleclass is used  if the property value is true however  the style class used for the component is the constant  pressed  appended to the value of the attribute styleclass  which in this example results to cmtogglebuttonpressed   the second row in the panel grid starts with the left differencing pane  the tag  diff pane  renders a uidifferencingpane component     diff pane id  diffa             styleclass  cmdiffscrollpane             value    diffpaneleft     the tag is only valid inside a differencing container element  the value attribute points to a differencingpane backing bean   note  currently the id attribute must have the constant values diffa or diffb   inside the element is a tag  es foreach  that iterates over the document properties    es foreach id  diff changes              value    diffresult differences               var  propertydiff              listelement  div              styleclass  cmpropertyeditor    the body of the iterator renders a label  if the  showchangesonly  toggle button is not pressed or the document property contains changes  the iterator also renders the differences of the property with the tag  diff property     diff property value    propertydiff     mode    diffpaneleft showchangesonly    changes     left       the value attribute requires a value binding to a cappropertydifference backing bean  the value of the mode attribute is set to changes or left in the left differencing pane and to right in the right pane  the toolbar column is a pane grid with three elements  the first and third are client button elements to in decrement the currently selected difference     es clientbutton for  diffcontainer                    value    prevdiffaction                     mode  icon     the second panel group element has two children  a differencing counter  diff counter   and the text output of the total number of differences    es panelgroup element  div  styleclass  cmdiffcounter        diff counter        h outputtext value     diffcontainer diffcount       es panelgroup   note  the panel group with it s child elements will be replaced by a more general jsf counter component in later releases  
  this section shows how to use editing services for jsf to create simple read only views offering just a few buttons in order to implement simple workflows  a read only view requires the definition of   a document that has to be presented a template  jsp  for rendering  a resource bundle for localization button or toolbar to set up actions that can be executed on the given document   in the case that multiple document views are required  navigation cases can be defined that link two content views  the navigation concept of editing services for jsf is introduced in this section as well   
   report template name description categoryreport aspiechart report template suitable for rendering a category report as pie chart  used by the predefined  repositoryinfo  report  rankedcategoryreport asbarchart report template suitable for rendering ranked category  top n element  reports as bar chart  used by  top viewed pages    top entry and exit pages   and  external search terms  reports  these report make intensive use of chart customizers to create a tabular view  multiple axes descriptions   timeseriesreport asbarchart report template suitable for single time series reports which are to be rendered as bar charts  not yet used by any predefined report  twotimeseriesreport asbarlinechart report template suitable for two time series reports with one data set rendered as bar and one as line chart  used by the predefined  performance  report   
  new report templates must be placed as  reporttemplates  reporttemplatename  jrxml files relative to the classpath root   after having completed configuring the report view  you should now validate your report definition  verify that it consolidates and displays data correctly  and finally publish it on one or more dashboard views  
  this section will give an introduction to the analytics dashboard application  an architecture overview and a description on how to define user profiles and how to customize existing reports  the last subsection will give a step by step description on how to create your own customized report types  
  this chapter describes the installation of the coremedia content application engine and all associated components  the next table shows all options which you can choose  
  resources that perform user authentication are login jsp and the logincontroller class  the former implements the form based approach of collecting a user s login data  the latter can be used to perform a login without user interaction triggered by another application that maintains a valid cap session  e g  the java content editor    editing services for jsf provides logininterceptor and caslogininterceptor as implementations of the handlerinterceptor interface for blocking unauthorized requests  both implementations handle the case that no valid cap session has been found  the logininterceptor class redirects requests as described above and the caslogininterceptor uses data provided by the cas framework to establish a cap session  
     bean id  jsfeditingsessioninterceptor      class  com coremedia editing cap editingsessioninterceptor        property name  connection  ref  connection        bean      bean id  jsflogininterceptor      class  com coremedia editing kits jsf controllers       caplogininterceptor        property name  loginuri  value   views login jsp         property name  reloginuri  value   views relogin jsp         property name  backuri  value   views back jsp         property name  redirectloggedinuri       value   views explorer jsp         property name  connection  ref  connection         property name  forwarduriattributename        value  jsflogininterceptor forward uri        bean      bean id  facescontrollermapping      class  org springframework web servlet handler      simpleurlhandlermapping      property name  interceptors        list         ref local  jsfeditingsessioninterceptor           ref local  jsflogininterceptor          list        property       property name  mappings          value  views    viewscontroller  value        property      bean      bean id  afterlogincontrollermapping      class  org springframework web servlet handler      simpleurlhandlermapping        property name  mappings          value  after login  value        property      bean      bean id  afterlogincontroller      class  com coremedia editing kits jsf controllers      forwardorredirectcontroller        property name  defaultforwarduri      value   views explorer jsp debug logincontroller         property name  forwarduriattributename      value  jsflogininterceptor forward uri         property name  synchronizeonsession  value  true         property name  redirect  value  true        bean  
  in order to set up a read only view of a document  you have to decide which document and which of the document s properties have to be presented  in order to keep things easy this example shows how to set up a view for a fixed document being the entry page document named foodoftheday  this can be done in spring using the contentfactorybean as shown below        bean id  foodoftheday      class  com coremedia editing cap contentfactorybean      property name  path  value   menusite foodoftheday       property name  caprepository  ref  contentrepository        bean     the next step is to create the jsp skeleton for the views that have to be developed  the skeleton includes the import of the required taglibs  the doctype and the content type declarations as well as the html skeleton including head and body tags  the body tag will contain the jsf jsp code for displaying the properties of the  foodoftheday  bean defined above  in the very first version it simply outputs the page s name property  the example code below shows the views renderpagename jsp of the cae editing example         page contenttype  text html charset utf    language  java        taglib uri  http   java sun com jsf core  prefix  f        taglib uri  http   java sun com jsf html  prefix  h     f view   h outputtext escape  false  value    htmldoctype      html     head       title simple editing services for jsf example  title      head     body       p         h outputtext value    foodoftheday properties name           p      body    html    f view   
  es extends jsf in order to provide a more consistent programming model and to add missing features  the main focus is to integrate jsf and spring much more tightly than spring jsf  one of the standard spring modules  does   to extend and customize jsf  its built in factories can be replaced or complemented by custom factory implementations  this section explains how es customizes jsf factories and how standard jsf artifacts like components  renderers  and converters can now be configured much more conveniently and flexibly using spring  
  now the files of dashboard analytics will be copied to the installation directory   the last window opens up and asks you to finish the installation     click  finish  to finish the installation of the dashboard analytics   
   tag name attributes description examples inputrichtext attributes of jsf h inputtext renders an html  input  element of  type   hidden   setting the clientid of the component as the value of the  name  attribute  and a rich text editor that stores its value in that field before the form is submitted  this component is a valid target for client side rich text commands   es inputrichtext id  teasereditor  value    document properties teaser                     disabled     document checkedoutbycurrentsession     label localizer  localizedlabelfactory  optional   iconstyleclass  string  optional   mode  string  optional   text  string  optional   attributes of jsf h outputtext renders a label with optional text  tooltip  title  and icon  this tag accepts both a key or an expression that evaluates to a bean as value  if text  title and icon are not explicitly set  these values are derived from the key or the bean    es label value    document type descriptorsbyname teaser     button type  string  optional   labelstyle  string  optional   labelstyleclass  string  optional   attributes of jsf h commandlink  attributes of es label a button renders an html button element containing a label  this tag is an extension of the command link tag enriched with the attributes of the label tag   es foreach itemelement  span  var  action                 value    contenttoolbar actions document        es button value    action      es foreach  clientbutton for  string  optional   attributes of es button a button that renders a button that is not a  submit  button but an active element that executes javascript code for client side commands    es clientbutton for  teasereditor  value    clientaction   mode  icon  disabled     document checkedoutbycurrentsession     converttext contenttype  string or mimetype registers a textblobconverter instance that transforms a string into a com coremedia cap common blob and vice versa  so that it strings can be stored in blob properties   es converttext contenttype    document type descriptorsbyname xml contenttype      
    the above referred gobackaction should trigger the redirect to the entering page  therefore we need a navigating action which does nothing but the navigation  usually such actions are defined as follows   
  the entryreferer pageflow  bean takes care of saving the referer header of the request in the pageflow   with these steps you have finished the setup of the example  now you may call the url of your application  for example  http   localhost      mywebapp views first jsp  the first view might be a log in dialog where you need to log in for you editing services environment  on the next page you will see the link pointing to a page with a simple button  which redirects back to the entry page  
  the content application engine  cae  is a framework for the development of content applications  because of this framework character  most aspects of the cae are covered in the content application developer manual   this chapter describes administrational tasks for some specific components of the cae  namely the http cache  the proactive engine and the cae feeder  in addition  managing the cae via jmx is described  
  it is common sense in web application development that authentication can be seperated from the core application being developed and there are several frameworks that support user authentication  i e  cas  or acegi   this implies that the login process should not be regarded as business logic  
  in jsf actions and navigation are closely related  the value of the action  attribute must be a methodbinding that evaluates to a method returning a string  this string will be passed to the jsf navigation handler   editing services for jsf supports this by defining navigation handlers that can be attached to actions  if the execution of an action succeeds the navigation handler will be invoked  this behavior implies that using the  es button  tag allows to invoke navigation handlers using the button s value  action and actionlistener  attributes  the value  actionlistener and action attributes will be evaluated in this order  note that all actions or action listeners defined by these attributes will be executed but only the first navigation handler actually handles the navigation  
  the preceding sections have introduced the  es button  tag and have shown how to use predefined actions and the actionfactory utility to set the action s target  the toolbar interface com coremedia editing action toolbar defines the method getavailableactions object  list that returns a list of actions that are available for a given target object  using the  es foreach  tag you can easily define a toolbar that works on the model of the current view  you simply have to set the list of available actions as value of the foreach component as shown below  the bean named contenttoolbar is a predefined bean of type com coremedia editing kits jsf action toolbarcontroller that wraps a toolbar in order to make it accessible using jsf expression language  the expression   contenttoolbar actions document   evaluates to the list of actions that are available for the bean named document  

  letting the user browse  hierarchical  lists of items is a highly interactive task  as it includes navigating  paging  and sorting  while this is not a use case of actual editing  it is required for other editing use cases such as list editing  when adding an existing item to a list by choosing it from a repository of items   following the mvc paradigm  es jsf lets you reuse the predefined or define your own models  views  and controllers  there are lists  tables  trees  and table trees  tabular representation of hierarchical data   all corresponding classes have a  bean  prefix to emphasize that we talk about lists  trees  etc  of java beans  especially for the table  this makes a difference  while general table models allow to arbitrarily compute the contents of each cell  a beantablemodel declares a list of beans that each correspond to one table row and computes the cell value from properties of the row bean   todo    diese themen sollten behandelt werden    jsf beantable tree  model   beancolumn model    h datatable     paging support  actions  rendering    sorting    sortedlistmodel  sortedbeantable tree model  sortcolumnmodel  beancolumn revisited    jsfbeantable tree   actions for sorting   selection  mkl     trees  upaction  opentreeleadselection  
  no partial data will be shown for time intervals which are not completed yet  as such  during the month of january  no data is being reported for that month  neither partial data nor predictions   forecasts are given in the predefined report  
  jpeg transformer   the jpeg transformer class parses the image file and outputs the datasets in record   of the jfif file  which are described in the importer developer manual  the output consists of an  image  root element with the attributes base and name and xml elements  dataset  with the attribute id for each dataset with the dataset content  the element attribute  id  contains the number of the dataset in decimal three digit form  an incomplete list of numbers can be found in the developer s manual in the  jpeg images  subsection of the  importers  chapter and is taken from the  iptc   naa information interchange model   iim  specification  for example  the dataset number     stands for the heading   jpeg xslt transformer  the xslt transformer transforms the generated xml tree into the desired coremedia xml using the given stylesheet  the stylesheet  which is installed by the installer  is written for a certain text and image type  it is highly likely that you have to change the stylesheet in order to suit it to your document types  
  see also the  coremedia xml importer  chapter of the administration manual for details of the jpeg importer  
  production environment  coremedia users work on a content server from creation to approval of a document  in this  they re supported and guided by the coremedia workflow  a workflow is an automated sequence of editing routines  there are different workflows for different editing routines available  you can also use a full text search or compare two versions of a document   publication transfers your documents and folders to the master live server  and   if implemented   to the slave live servers and creates respectively updates content that now becomes available for other groups of users   publication is not just the update of content but makes renaming  moving  or deletion of documents and folders become effective  all modifications of documents or folders can be made effective in the live environment only by means of publication  there is no way to perform editorial work in a live environment   using the coremedia analytics engine  you can analyze visitor activities on the produced sites or watch reports on the production environment status  
  live environment  a live environment may feature two types of live servers  master live servers and   in large scale projects   one or more slave live servers   modifications on the master live server are sent to slave live servers and replicated on their databases  now  the content is available at the slave live servers   this architecture provides a maximum scalability and reliability  the number of slave live servers can be adapted to project requirements  in case of a slave live server crash  the other live servers take over  and in case of a master live server crash  the slave live servers are able to stand in   additionally  the analytics engine aggregates user data on the live side and displays the data as reports on the production side  
  the richtext component allows to edit tables in wysiwig fashion  the next screenshot displays the options available for tables  
    search option  modifiers  definition  approval date    less than   greater than  determines the time span within a document had been approved  approved    true   false  lists all documents currently approved  approver  equals  user name   lists documents approved by this user  checked out    equal   true   false    creation date    less than   greater than  determines the time span within a document had been approved  creator  equals  user name   lists documents created by this user  editor  equals  user name   lists documents edited by this user  id    equal   less than   less equal than   greater   greater equal than  searches for documents of the defined id range  is referenced by   the document  lists all documents this document is linked from  last folder  equals  folder   lists documents which have been in this folder before  limit to stock or trash  select one  recommended for recycle bin search as well as in large projects  marked for withdrawal   true   false checks if document is marked for withdrawal modification date    less than   greater than  determines the time span within a document had been modified  modifier  equals  user name   lists documents modified by this user  name    equals   less than   greater than  searches for documents of the defined name range  numeric or alphabetic   only latest version    true   false  lists only the latest versions of all documents  path  descendant of  folder   searches in specified folder and subfolders  place approval date    less than   greater than  determines the time span within a documents path had been approved  place approved    true   false  lists only documents which place has been approved   true    place approver  equals  user name   lists documents which place had been approved by this user  place publication date   less than  greater than determines the time span within a documents path had been published place publisher equals  user name  lists documents place approved by the user publication date    less than   greater than  determines the time span within a document had been published  published    true   false  checks if the document had been published before  publisher  equals  user name   lists documents published by this user  references     lists all documents this document links to  selected for deletion    true   false  lists documents which are selected for deletion  to be published    new version  moved or deleted  version    equal   less than   less equal than   greater   greater equal than  searches for documents of the defined version number range  wide link  lists all documents which contain wide links    
    menu item  sub items  function  character format  default  bold  italic  underline  strike through  subscript  superscript  formats the selected text   background color  all defined background colors  sets the selected background color for the text   color  all defined font colors  sets the selected color for the text   font  all defined fonts  sets the selected font for the text   font size  all defined font sizes  sets the selected font size for the text   language  all defined languages  sets the selected language for the text   paragraph format all defined paragraph formats formats the current paragraph with the selected paragraph format  stylesheet attribute    enter style sheet value in a dialog box  project specific   internal link    insert a link to a document within your project  opens explorer window for selection   link    dialog box for  external  www links and target frame  leave empty or insert   blank  for new browser window   insert an image    inserts an image at current cursor position  a dialog box opens up in which you can select a document containing the image   lists  ordered list  unordered list  indent  outdent  edit lists   add blockguote    a paragraph is marked and formatted as blockquote   remove blockquote    removes the mark as blockquote   text alignment  align left  center  align right  justify  remove alignment  defines the alignment of paragraphs   table  all functions for editing tables  insert row        inserts a table at current cursor position  a dialog box opens up in which you can define the table size   horizontal scrollbar    adds a scrollbar if the text in a richtext field exceeds the visible area    
   menu item sub items function user manual  pdf   opens the pdf version of the user documentation  with the webeditor you can also call the html version  about this program  dislpays detail information about the release  the logged in user  the computer  the server type  and coremedia java vm  displays detail information about the java virtual machine memory usage  displays free and memory in use as well as cached resources  
  coremedia sci has a special window for creation and administration of workflows  this window holds three sections below menu bar     and toolbar       task and workflow overview        in this section you see the tasks and workflows you can edit  in my workflows you see the workflows you have started  so you can examine the status  if you click on a workflow  you can see the current value of the workflow variables in the detail information window  in my tasks you see the tasks you have accepted for editing  if you click on a task  you can see the current values of the task variables in the detail information window and you can start working on the task  in offered tasks you see all tasks you can accept for editing  if you click on a task  you can see the current values of the task variables in the detail information window and you can accept the task  if you make a right click on a task or workflow you get the context menu  here you find additional information concerning the task or workflow  detail information window        here you find all relevant information about the workflow which are partly editable  it also displays resources ready for approval  a document selected here opens in the detail view      document window        displays a selected document in the detail information window before  double click the document to open in a separate window  then  available menu entries are activated    
    menu item  sub items  function  new workflow     different  project specific workflows  starts a new workflow of the chosen type   load  only available for administrators  load a new workflow definition into the workflow server  start workflow    this function is only activated  using customized workflows  depends on the license   if so  it starts a newly created workflow   resume    continues the processing of a suspended workflow   suspend    suspends the processing of a workflow  a task edited by a user can not be completed   abort  aborts a workflow  accept task    accepts a task for editing   reject    rejects the editing of a task  it will be removed from your task list   skip    this feature can only be used in custom made workflows  depends on the license   if so  you can skip the current task and continue with the next one   retry    if a task aborts  it will be marked as erroneous in the task list  you can restart the task after fixing the error    nominate       you can nominate users or groups for the processing of the task in order to narrow the choice  you need the right to use this feature   complete task    you can complete the task after finishing all work on it    delegate    you can delegate an accepted task to another user  the task will be automatically accepted by this user   cancel    you can cancel a task you have already accepted  the task can be again accepted from all authorized users    save    saves changed workflow variables and or edited documents   properties    show the properties of the selected workflow process or task   close    closes the workflow window   exit    exits the coremedia editor and closes all windows    
  this menu is only available if you have a document containing binary data in the current task  read section for a description of the menu items  
   symbol nr  function     cuts text and moves it into the clipboard      copies text into the clipboard      pastes text at the current position      starts a newly created workflow      continues a suspended workflow      suspends a running workflow  tasks can not be completed      aborts a workflow definitely      accepts the selected task for processing      refuses the selected task       skips the selected task and continues with the next task of the workflow       completes the work at the current task       delegates the task to another user  a dialog box opens up  where you can select a user  the selected user accepts the task automatically        cancels an already accepted task  the task can be accepted again by other users  all changes you have made will be stored       saves the changes applied to workflow variables or documents        shows information concerning the current task and workflow    
    menu item  sub items  functions  show tree    shows the search criteria as a tree   sort  path  state  name  version  type  sorts the query results by the selected criteria    
    menu item  sub item  functions  copy    copies the selected resource to the clipboard   select all    selects all resources in the publication result    
   symbol nr  function     opens the document selected in the publication result      copies the documents selected in the publication result to the clipboard      approves the resource for publication      revokes the approval      opens the layout preview for the selected resource      starts the publication preview      publishes the selected resource      repeats the last action  either a publication or a publication preview      cancels your selected publication from the queue       prioritizes your selected publication       shows information on the resource selected in the publication result  the information window opens up     
  the richtext component provides enhanced wysiwyg possibilities for text formatting  the document window is organized in three parts    the menu bar with access to all functions       the tool bars with quick access to the most important functions    the tool bar with functions applicable to the document     the tool bar with the functions applicable to the version you work on independent from the current field      the tool bar with the functions applicable to the current field you work on     the working area for text input     
   menu items sub items functions new workflow    project specific number and type of workflows starts a new workflow of the chosen type  open in explorer  opens the document in the explorer window  check out    checks out a document for editing  already approved documents open an  undo approval  dialog box   yes  no approved version available   no  approved version keeps state and will be published no matter how many later unapproved versions exists  revoke check out  undo the check out of a document  document is accessible for others again  attention  this undoes al changes of the current version  check in  checks in the document and saves all changes  delete  delete the selected document or folderpublication required to make changes effective on live serversdeleted document can just be viewed  not edited  revoke delete  only not yet published resources can be restored once in recycle bin after publication  resources lose all path information  save  save the changed document  if you revoke the check out of a document all changes since the last check out will be deleted  you have to  check in  a document to create a new version of the document and to persist the changes  rename  renames the selected resource via dialog box  double naming prohibited across all documents also of different types within the same folder   preview  opens document in a browser for preview  project specific   approve  direct approval of a resource  this function must be enabled  revoke approve  revoke approval directly  this function must be enabled  mark for withdrawal  marks the resource for revoking of the publication  this will delete the resource on the live server  this change must be published to take effect  revoke withdrawal  revokes the mark for withdrawal  preview publication  simulates the publication and shows the result  publish  direct publication  without workflow  of a resource  difference  open the difference view with two versions of the document preview  opens a document in a browser for preview  project specific  internet explorer and netscape are default options   properties  shows properties of a resource  history of editing  publication  etc  close  closes the current window  but does not exit the application   
   menu item sub items function      open the selected document in a document window       open the selected document in the overview window       opens a dialog for creation of a new document which can be inserted at the current position  it s only possible to create documents of a type which is allowed for the link list       opens an document chooser for browsing after the item  by default only matching document types are displayed        remove a link from a link list  does not delete the document        moves a link to the very top of a link list       moves a link up one position       moves a link down one position       moves a link to the very last position in a link list   
  toolbar line     menu item sub items function      start spell checking for the document       undo the last editing step  you can undo any number of steps       redo the undone steps       save the changes       check out the document      revokes the check out  all changes since the last check in are lost       check in the document  all changes are saved   
   menu item sub items function      open the binary data with the application predefined for the mime type of the document       load binary data from disk into the coremedia repository       loads an image which has been edited with an external editor back into the coremedia repository       save binary data to disk       remove binary data from the document       select a section of an image for display   
   menu item sub items function     all defined fonts select a font      all defined font sizes select a font size for your text      all paragraph formats select a paragraph format       format text as bold      format text as italic       default  underline  strike through  subscript  superscript  background color  color  language  stylesheet attribute format the selected text       remove alignment  align left  center  align right  justify  ordered list  unordered list  indent   outdent  add blockquote  remove blockquote  format paragraphs       link     internal link     insert an image    insert images or links       insert a table     insert column left  add column right  select column  delete selected columns  insert row above  add row below  select row  delete selected rows  merge cells  split merged cells  split cells horizontally  split cells vertically  flatten tables  set table attributes insert and format tables  
   symbol no  sub items function      cut marked elements  text  tables  images      and move into the clipboard      copy marked elements into the clipboard      paste the content of the clipboard into the document      approve the document directly for publication  this function must be activated       revoke the approval  this function must be activated       open the differencing view for the document       open the layout preview for the current document      publish the document directoy  the function must be activated       publish the document  the function must be activated        get information for the current resource  toolbar    row 
  example   the example shows the configuration of a jmsuploader that publishes results to the jms topic mytopic  this example uses a swiftmq router as jms provider  other jms providers can be used likewise  copy required libraries for the jms provider to the web inf lib directory of the pads web application  
  pads can be used to generate pages  e g  html pages  for offline use  it uses templates to create all pages which can be reached transitively through links from the configured root pages  links are recognized during computation when uri objects are transformed into their string representation  i e  uri tostring is called  the followed links can be restricted using pagelinkpredicates  for configuration and operation see the administration and operation manual   template development follows the same rules as for the active delivery server with some exceptions   because pads uses a persistent cache which is backed by a database  cache invalidations  updates and lookups are slower than with the ads  for this reason  templates for page fragments should be less often marked as cacheable to minimize overhead  in some cases a computation might even be faster than a cache lookup  especially if the internal resource cache already contains all accessed resources  access control is currently not supported  the length of resourceuris is restricted by the maximum length of keys in pads  the maximum length of a key in pads is     characters  because keys for pages use a    character prefix  the maximum length of a resourceuri is     characters   when pads is started it detects changed templates and invalidates dependent pages  note  that it is not sufficient to change the  modification date of the template file  because change detection is based on md  hash values  if you want to force an invalidation of pages computed with a particular template  use the development pages instead  you must also use the development pages to announce template changes when pads is running   if you configure a custom uploader for pages  it will receive instances of com coremedia generator page for each generated page  this class provides methods to access the page content and the content type  please see the api documentation for details   
  note  that the key length is limited to     characters   
  you need to notify pads about changes of these external resources  there are two possible ways to do so   you can call method generatorcache invalidate string  with the key  for example you could write java code that fires such invalidations and start an own thread for it in web inf config bsh  note  that it should wait some time until pads is running before sending invalidations  use method hox corem servlets generator isrunning to check whether pads is running   you can use the develop pages to invalidate an external dependency    
  installing the object analyzer  if you want to install the objects analyzer proceed as follows  select the coremedia analytics option and press  next     the window shown below opens up for selecting the analytics components   
    check the analytics dashboard box and click  next    the window shown below opens up  you can decide whether the default servlet engine tomcat should be installed or not  
  the coremedia sci offers the facility for browser based content editing and publishing    
  the document window is a second browser window with title bar      the menu bar     and the detail view title bar     are displayed here as well  and not at last the document with all its properties   
   servlet api description   httpservletrequest     getuserprincipal       getname   returns the current user formatted as username domain  where  domain is optional   an anonymous user leaves httpservletrequest getuserprincipal    undefined  null     httpservletrequest     getlocale   returns the current user s locale as used in portal   
  it depends on your concrete portal application wether this data should be used or not  for instance content may be restricted for certain users  in order to obtain the current user s rights you may contact the portal s usermanagement  e g  a ldap server   in addition you also may support localization capabilities by evaluating the user s locale   errorhandling  errors may occur when running the cae portal application  in order to report these errors in a well defined way  you have to use these standard http error codes  
   statuscode description       ok   the request has been processed without any error  default        forbidden   the current user has no right to access the requested content       not found   the requested content does not exist       internal server error   an unspecified internal error occurred  
  cae portal template  the cae shipment contains a webapplication contentapplicationengine template  which serves as an entry for development of cae applications  a slightly modified webapplication template can be installed as an entry for portal application development  although these webapplications are nearly identical  there are some minor differences  an additional servlet named httpcontentservice servlet has been registered in web xml  this servlet accepts http requests from the portal and forwards them to the real cae application the default linkscheme  implementations have been replaced by portal specific ones  the main difference is that the links are prefixed like portal page     according to portal link      see above    you may access the content of the portal application directly  without accessing the httpcontentservice servlet  by calling the url http    host   port   contextname  servlet  uri   for example http   localhost      portal servlet content       accesses a content which is denoted as portal page    portal servlet content       in portal link     syntax   limitations and particularities  although portal applications may be developed using standard cae and servlet mechanisms  there are some limitations and particularities which need to be considered     due to the architecture contents which are send by an user  for example file upload  need to be buffered completely in main memory before transporting them to the portlet  depending on the content s size this may temporarily cause big memory usage       
   abstract type description varchar n  strings of variable length up to a maximum of n bit   or    often representing false and true  respectively integer    bit signed integers long    bit signed integers timestamp a point in time  represented in the utc time zone  
  individual databases use the following types for implementing the abstract types  
   abstract type oracle sql server db  varchar n  varchar  n  nvarchar n  varchar n  bit number    bit smallint integer number     int integer long number     bigint bigint timestamp timestamp timestamp timestamp  
  as you can see  there are times when the actual data types are capable of storing a larger range of values as specified in the definition  in these cases  the additional values are considered technical artifacts and should not be used  
  the title bar of the browser holds the document name  in the tool bar you find the symbols for check out  copy etc  of the document    these symbols are always visible  on click into    a richtext field  they are supplemented with the richtext toolbar  a linklist  they are extended by a link  list toolbar  
  like in the coremedia editor you can insert images   coremedia picture documents   at the current cursor position  nevertheless  it is not possible to insert images via drag n drop  open the document in the document window move the cursor to the position insert the image by clicking the symbol in the tool bar      the document chooser opens and displays all available documents  all documents with a filled blob property are shown with a preview   
  ther query window consists of the following components        menu bar   you can reach  nearly  all functionality from the menu bar  the query  the search criteria  views  navigation options and access to other windows of the editor        toolbar   you have fast access to nearly all functions   except view and window   using the tool bar         query information   here you will find information about the active query        annotations to the query   you can enter annotations describing the query              list of the selected search criteria   this fields can be used to define the search criteria  you can limit the document types to be searched in  the number of hits to             or all hits     and you can define the search criteria     you can add additional search criteria to the query using the add condition field           comment  add comments to the query     the search results will be shown in a separate window   
    menu item  sub items  functions  copy    copies the selected resource to the clipboard  a copy will be pasted to the target position   select all   select all resources   
  from a client s view  the persistent cache is accessed by using instances of a cache key  such a key is a special object which may be understood as a function  including its parameters  for computing a value  in order to obtain a key s value  the client passes the key to the cache  if the value has been computed before and has not been invalidated yet  a stored instance of the value is returned  otherwise  the cache  re  computes the value by calling the key s computation function and puts this value into the store before returning it to the client   besides the value computation  the key s function logic may define other objects the computed value depends on  during the computation of a key s value  these dependencies are internally tracked and stored  when the persistent cache receives a notification of an external object s modification this change is verified against all previously tracked dependencies  any key s value whose dependencies are concerned will be handled as  invalid  and removed from the cache  in addition  an invalidation event will be passed to a client s invalidation listener for all affected keys  to make sure that no invalidation is missed by an invalidation listener  all invalidation notifications need to be acknowledged   the persistent cache  does not perform any evictions  eviction is the automatic removal of items from the cache in case that a certain limit  such as the number of cached items  is reached  instead an explicit removal of items from the cache may be initiated by the client   in order to identify a key internally and to store the key s computation results  a serialized variant of the key is used  such a serialized variant consist of all the information which is necessary to reconstruct deserialize the key later on  the logic for serializing and deserializing a key is provided by the client just like the key itself  
  the toolbar of the richtext component consists of two parts  which are described in the following   toolbar first row 
  the folder hierarchy can determine the structure of a web site  documents contain the actual content  therefore documents must be placed in the appropriate folders    to create a new document     select the folder in which the new document should be created     there are the following possibilities of creating a document      select file create document from the menu bar     use the symbol on the toolbar for creating new documents  second from left in illustration    a dialog box prompts you to enter a name and document type for the new document  
      menu item    sub items    functions    cut        copies the selected resource to the clipboard  the resource remains at the start position unless you paste it to the target position     copy        copies the selected resource to the clipboard  a copy will be pasted to the target position     paste        pastes the content of the clipboard to the current position   it s not possible to paste documents in documents      paste image        inserts an image from the clipboard to the current position     
  in a standard coremedia installation  session handles and content are transmitted in clear text across the network between client and server  this is usually not a problem when the editorial workplaces and the servers reside in the same trusted network  however  for secure remote access  encrypted communication is sometimes required   if ssh tunneling is not an option  alternatively a secure socket layer  ssl  connection can be used for the corba communication between coremedia components  this feature is available since coremedia cms      version         for sun jdk     and sun jdk    it will not work with other corba orbs   the setup is slightly more complex than in the ssh case  because the certificate handling has to be administered explicitly for java s ssl implementation  and because the port mapping has to be specified in coremedia configuration files   in the following  it is assumed that communication has to be encrypted between a coremedia editor on the one side and the content server and workflow server on the other side   in the example  the following ports numbers are used  you may want to use different port numbers for your deployment     
     menu item   sub items   functions   new user       creates a new user  a new tab opens up where you can create the new user profile     new group      creates a new group  a new tab opens up where you can create the new group profile     open user      opens an existing user for editing  a dialog box opens up where you can select the user     open group      opens an existing group for editing  a dialog box opens up where you can select the group     close tab      closes the active tab  a dialog box asks for confirmation    save      saves a newly created or changed user group    delete      deletes the active user or group  a dialog box asks for confirmation  synchronize root folder  the rights of the root folder will be submitted to all publication targets  this function is only activated in a system using multi site management    close      closes the user manager window    exit      quits the coremedia editor   
   overlay element description upper left number total number of page views  change   a change percentage based on the displayed graph  to this end  the graph is numerically approximated by a linear function  the change value is computed as the total change of this linear function over the interval divided by the greater of the values at the start and at the end of the interval   example  the graph is approximated by a straight line with a starting value of     and an end value of      then  the change value is calculated as                         therefore  the value in question has increased by     over the given time interval  arrow the arrow visualizes the change percentage  indicating that the value is increasing  arrow up   unchanging  arrow right   or decreasing  arrow down   entries the number of visitors in the given time frame for whom the page was the first page in the session  this value is also shown as a percentage based on the total number of page views  exits the number of visitors for whom the current page was the last page in the session  only page views that are old enough for the session to time out  typically    minutes  are counted for this value  the percentage shown is also based on the total number of page views for which the session could have timed out afterwards  stays the number of page views such that the session was continued afterwards and  for which the session could have timed out afterwards  the percentage is computed similarly to the exit percentage  top external referrers those external web pages that directed the most page views at the current page  for each page it is shown how many page views resulted from links on that page  contrary to the previous statistics  the numbers shown are always based on the last full hour that has been processed by the aggregation process   
   server clear text port ssl port content server             workflow server              
  the content management server installation contains all manuals of the coremedia cms in the html format  you can call an overview page which contains links to all manuals  enter the following address in your web browser   http    serverhost   serverport  manuals 
  note that the term  services  as used here is not to be confused with  web services   it is meant as in the context of enterprise architecture  where  the term  service  refers to a discretely defined set of contiguous and autonomous business or technical functionality   wikipedia   systems architecture service    
   pre aggregated and pre consolidated data  the term  pre aggregated data  refers to the fact that the data has been pre aggregated following the coremedia analytics database schema for given time intervals  mainly for performance reason   the term  pre consolidation of data  refers to the fact that the queried data is and should be consolidated by the analytics database only  pre consolidated data is in fact pre aggregated but additionally data has been consolidated in order to identify the most relevant part of it  e g  the top n of all viewed pages   the data definitely should not be consolidated by a subsequent report query consolidator  mainly for performance implications and or excessive memory consumption during consolidation  an example for a pre consolidated data category report is the  top    viewed pages  report  consolidation of query data of more than one time interval would cause high memory usage as data for all pages would have to be loaded in order to aggregate them  the analytics database does pre consolidate data for this type of category reports   querying non aggregated   non consolidated data  queries that execute on non aggregated relational data should use the simplecategoryquery  or the simpletimeseriesquery respectively  these types of queries do not take the analytics database time model into account  they offer plain sql query functionality  please note that for the rest of this section  the examples shown will use pre aggregated and pre consolidated queries  not simple queries   
  content management covers creation of content in the repository and analysis of used content  there are basically two ways to populate the content repository   manual editing importing external content  out of the box coremedia cms supports manual creation of content by a variety of clients which are open for customization  in addition  customized clients could be created from the scratch using different frameworks  described in section   the coremedia editor  a standalone java application  configuration and customization of this editor is covered in the editor developer manual  the webediting server  a servlet which serves the coremedia webeditor for content editing  the webeditor offers nearly the same functionality as the coremedia editor but needs less installation  the webdav support  which allows to access the coremedia cms by webdav enabled applications  see the administration manual for details   the importer which is used to adopt existing external content  e g  from legacy systems or content providers  it must be customized concerning the location and the format of the source content  see the importer developer manual for details   for analysis of the content repository and the acceptance of your websites in the internet  or intranet  there is coremedia analytics  it offers a set of predefined detailed reports  the analytics dashboard  and easy to use reports directly integrated with the preview of your web site  the in site analytics   you might extend both report types by your own analytics report  see the analytics developer manual for details  
  according to the underlying content model the coremedia editor generates forms for resource editing  the default forms provide editing facilities for each property of a document  so called property editors   general editing functionality like copy paste and coremedia cms version control features  see user manual  basic knowledge   you can control the layout and behavior of these forms concerning the following aspects   use special property editors  e g  a string editor which automatically converts to upper case  coremedia provides some alternative property editors to use  but you can also implement your own   initialize and validate input  e g  make sure that an integer value is greater than     provide complex commands  e g  create a new document and link it into some navigational structure   furthermore you can control   localization language specific spell checking rich text formatting filters to hide some objects from the users  e g  document types they are not supposed to instantiate or folders that do not concern them  renderers to display objects  e g  the fields in the document table   many editor features can be achieved or controlled simply by configuration  without writing a single line of code  however  understanding all the possibilities requires some knowledge of java    see the editor developer manual for details  
  using the importer in order to import third party content you must basically take care for two aspects   serve the source content transform the source content into coremedia xml  the importer framework provides an out of the box solution for source content available as files  alternatively you can implement your own factory  e g  to serve content from a database  over some network protocol or to generate content on the fly  composed from arbitrary sources   as your source content is most probably not available in coremedia xml format matching your document types  you will have to transform it  the importer supports xslt transformations  you just have to configure the stylesheet  as well as stream based cross document transformations for arbitrary  even non xml  sources   see the importer developer manual for details  
  the use of the coremedia cms covers a range from sites maintained by a single editor to very large portals edited by many users in different roles  the more users are involved in editing  approving and publishing documents  the more difficult it becomes to coordinate tasks and schedules  computer support can greatly enhance productivity because the users do not have to deal with organizational issues too much    this goal can be achieved by introducing workflows  these workflows do not precisely prescribe how tasks have to be performed  but coordinate and support the timely execution of different tasks by different users with as much flexibility as possible and as necessary  the coremedia workflow has a non restrictive  supportive approach   coremedia users are given access to the right resources at the right time via tasks  in contrast to restrictively controlling users  coremedia workflow focuses on progress of the overall business processes   the coremedia cms is delivered with some standard workflows which control content publication  they are based on the inherent state model of coremedia cms resources  see the user manual  basic knowledge   while the simplest workflow publishes a set of resources immediately  the most complex one ensures that composing the set of resources  approving those resources and the actual publication are executed explicitly by different users    if these workflows do not fit your needs  you can define your own workflows  a workflow basically consists of a set of tasks which are processed in a specific order  usually linear  but also circles and branches are possible  and a set of variables which represent the state of the workflow  there are automated tasks which are processed automatically at their turn  like publishing some resources  and user tasks which have to be handled explicitly by a user  e g  composing a set of resources to be published     the tasks and variables of a workflow are defined in xml  you can use the workflow modeler to create your workflow definitions in a graphical way  the coremedia cms provides some content related standard actions you can choose from to inspire your tasks  but you can also implement your own actions  you can specify performer policies to prevent or enforce users to process a task   from the technical point of view  processing a task means executing some actions but also changing workflow variables  for user tasks the coremedia editor and the coremedia webeditor support this in a fashion similar to editing the properties of a resource  and just alike  you might want to use special editing components for restrictions or convenience  thus introducing custom workflows usually includes some editor customizing   see the workflow developer manual for details   
  in order to deliver your content  you have to transform it into the appropriate formats for the supported devices  e g  html  wap  pdf   in principle there are two strategies of generating the output data   on demand proactive  while on demand generation implies a longer response time for requests  proactive generation needs a considerable initial time until the output is available  but respect also that the performance of on demand generation can be improved significantly by fine tuned caching and that proactive generation only makes sense for content which does not change too frequently  as another criterion for the right strategy you might consider access statistics to identify hotspots of your application    in short  it depends on the particular content application which strategy is the best  and therefore the coremedia cms supports both of them  you can even combine them  e g  pregenerate your website up to a click depth of three and generate the rest on demand   for proactive generation you use the proactive delivery server  pads  api or the proactive engine and the http cache of the content application engine  cae    on demand generation in coremedia cms applications is enabled by the ads and cae  ads is still unbeatable concerning performance with static content and scalability  however  if you want to create web sites using content from arbitrary sources  using a flexible caching framework  working with content objects instead of documents you are better off with cae   see the delivery developer manuals for details of the ads and pads and the content application developer manual for details of the cae  
  different content domains deal with different data  while a news portal consists basically of short texts  pictures and navigation structures  mobile services deal with multimedia objects like ring tones  animations and games  each for a variety of devices  different content has different properties  e g  an article consists of a headline  the actual text and possibly references to related subjects  whereas a multimedia object needs binary data and maybe a description   the first step in designing a coremedia cms application is to define a content model which represents the particular domain  this content model is the base of the whole application  it concerns content management  delivery and persistence  and thus it affects nearly all components   the basic appearance of the editor  the xml format supported by the importer  the interface for jsp programming  the query facilities  and last but not least relationships among content objects themselves   convenience and simplicity of further customizing as well as the efficiency of the application crucially depends on a deliberate content model  design weaknesses may lead to vast and error prone extra effort    see the administration and operation manual for a comprehensive discussion of content modeling  
  coremedia cms offers different apis and frameworks for the creation of custom clients    the unified api which enables you to implement custom coremedia cms clients from scratch  taking over session handling and remote communication  it reveals the full functionality of the content server and the workflow server in a convenient and intuitive abstraction which allows you to concentrate on business logic  see the unified api developer manual for details  the webservices engine  which allows to access the coremedia cms using web services  you can use the unified api or the content application engine to develop your web services  see the delivery developer manual for details  the wage api  which enables you to access the coremedia cms using web based clients  the current webeditor is an implementation of the wage api  read the wage developer manual for details  you should only use the wage api for customization of the webeditor or if you need workflow functionality in your clients but not for newly designed stand alone clients  for this tasks use the more modern editing services for jsf    editing services for jsf  a framework which allows to create custom clients to access the coremedia repository  it is the successor of the wage api and offers many convincing advantages  es offers for example ui components and reusable beans  it uses modern technology like jsf and spring and builds on the unified api and cae  the portal server integration uses es  to add editing functionality to portals  read the content application developer manual for details   the unified api replaces the scripting api which you might know from coremedia sci      old scripting clients are still supported with coremedia cms       but for new implementations the usage of scripting api is deprecated  that is why the scripting api is no longer documented in the developer manuals  consult the sci     manual for maintenance of your legacy scripting clients  
  please note that in most cases  you will configure the consolidators via strategies  consolidators provide a set of pluggable strategies which allow merging  mapping  filtering of query data  the following strategy types can be set in a consolidator   
  as said in the previous sections  editing services for jsf is based on the cae web application template and uses a custom jsf spring  integration  the jsf servlet is wrapped in a spring controller and having the default mapping  views  the cae web application template defines the mapping  servlet for the dispatcherservlet and the default web application mapping of the editing services for jsf web application template is  editing  this implies that the url of any of jsps defined below the views folder in your editing services for jsf application will be http    your host   your port  editing servlet views  your jsp  jsp     example  using the default tomcat installation on your local machine this will be http   localhost      editing servlet views explorer jsp  
  using the  es button  tag is the easiest way to create a button that is localized according to the action being the button s value and invokes the action s execute   method  the definition of the login button in a custom login jsp might look like this    es button id  customloginbutton      type  submit  value    loginaction   mode  text     when using an action that does not have a predefined target you can set an ad hoc target using the the public api actionfactory application bean  this can be useful if an action has to be rendered multiple times each working on its own target  image you designed an edit view that works on two documents having the bean names document  and document   in this case you can reuse the contentcheckinoutaction action and define buttons as shown below    es button id  checkinoutbutton   type  button       value    actionfactory contentcheckinoutaction  document                es button id  checkinoutbutton   type  button      value    actionfactory contentcheckinoutaction  document        in some cases you might prefer the standard jsf  h commandlink   or  h commandbutton  tags  this will usually be the case if you have to use nested tags  e g   h graphicimage  or  h outputtext   with your button  in order to use these tags with es actions you have to create an action listener with the help of the public api listenerfactory application  bean  the definition of the login button in  a custom login jsp using standard jsf tags might look as follows    h commandbutton id  customloginbutton      actionlistener    listenerfactory loginaction  processaction              h commandbutton   the two utility beans listenerfactory application and actionfactory application can even be nested if an action listener has to be used with an action created by the actionfactory application utility bean  
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
   product certified version supported version microsoft windows   xp professional edition  sp     
  now the editing services web application is configured to run in the portal  you might install a portletemulation web application  or use one of the portlets to access your editing services web application    the following steps describes a configuration which allows to call an editing services editing form which redirects back to the entry page  create a single jsp  editing web app views edit jsp  in the same web application which contains editing functionality  the content of the jsp in this example is simple but effective  it is a button which triggers a redirect to the page which was previously called   
  cm ldap access  read only    product certified version supported version microsoft windows         server active directory   
  four parties are involved in the tunneling   a client   capclient  which cannot access the server directly  the client side ssh client  sshclient  which cannot access the capserver  the server side ssh server  sshserver  which can access the capserver  the coremedia server  capserver     capclient   sshclient  and  capserver   sshserver  can reside on the same machine respectively   two ports must be configured    httpport  is the http port for the ior   corbaport  is the port for corba communication   for this scenario you must   establish the tunnel  redirect client requests to the tunnel endpoint sshclient instead of capserver   proceed as follows  configure the http host name and port of the server as usual in the capserver properties files  configure the http address where to fetch the ior of the server in the capclient properties file as follows      cap client server ior url http    sshclient   httpport  coremedia ior    start a ssh server on  sshserver   no particular configuration is necessary  start the ssh client on  sshclient   on a unix system  open the tunnel on the sshclient with ssh  g  l corbaport   capserver   corbaport   l httpport   capserver   httpport   sshserver   replace the values in angle brackets with the appropriate settings      for the windows ssh client  ssh secure shell  choose edit settings profile settings tunneling incoming  you need to make two entries  insert as follows     type  tcp    listen port   httpport     destination host   capserver     destination port   httpport     and    type  tcp    listen port   corbaport     destination host   capserver     destination port   corbaport     this will instruct ssh to forward all requests on  sshclient   port  via  sshserver  to  capserver   port      in order to instruct a client that is not based on the unified api to contact  sshclient  instead of  capserver   you need to configure the client side orb in the clients jpif file  e g  editor jpif in the  instdir  bin directory for the coremedia editor  add the following entries to the java vm args property  replacing  capserver  and  sshclient  with the names of the appropriate computers and  corbaport  with the port number of the ends of the ssh tunnel      java vm args   java vm args  dcom sun corba legacy connection orbsocketfactoryclass com coremedia corba orbredirector       java vm args   java vm args  dcom coremedia corba orbredirector original host  capserver      java vm args   java vm args  dcom coremedia corba orbredirector redirect host  sshclient      java vm args   java vm args  dcom coremedia corba orbredirector original port  corbaport      java vm args   java vm args  dcom coremedia corba orbredirector redirect port  corbaport      in order to instruct unified api clients like the command line tools or the content application engine to contact  sshclient  instead of  capserver   you must also configure the host and port setting in the jpif file just as this is done for clients using other apis  the orb socket factory must be set in the connection parameters for the unified api  however      if you are setting up the unified api connection programmatically  consider using the connect map  method of the class cap   map parameters   new hashmap        parameters put   com sun corba legacy connection orbsocketfactoryclass         com coremedia corba orbredirector      connection   cap connect parameters       if you are using the cae  you must inject the parameter into the capconnectionfactory  to this end  you can add the following bean customizer definition to a spring bean definition file of your webapp    bean class   com coremedia objectserver util simplepropertycustomizer         property name  customizedbeanname  value  connection       property name  customizedproperty      value  otherparameters       property name  propertyvalue        map         entry  key  com sun corba legacy connection orbsocketfactoryclass          value  com coremedia corba orbredirector            map      property    bean      in any case  you may inject the parameter through the ior url passed to the unified api  for command line tools  you can pass the url on the command line   cm systeminfo  url http    sshclient   httpport  coremedia ior    com sun corba legacy connection orbsocketfactoryclass    com coremedia corba orbredirector    u admin  p admin      you can also set the extended url in the file capclient properties   cap client server ior url     http    sshclient   corbaport  coremedia ior     com sun corba legacy connection orbsocketfactoryclass     com coremedia corba orbredirector       it is also possible to configure an extended url in the objectserver properties when operating a cae  you can pass an extended url when opening a connection programmatically   an alternative to setting up an ssh tunnel might be the use of a vpn  or ssl  
  by default  both http port and the corba port are bound to all network interfaces  for example your server might be accessible through two network cards using the ip addresses            and             for security reasons  you might want to grant access to the servers only through one of the interfaces   to this end  the file contentserver properties provides the option cap server http bindallinterfaces  if set to false  only the single interface indicated through cap server http host provides http access   for limiting the access through corba  too  further properties must be set  by setting cap server http host to the correct ip address  you ensure that external clients contact the server through the correct interface  in order to bind only the correct interface  you must set two system properties during the invocation of the server  to this end  add the following lines to your contentserver jpif or workflowserver jpif   java vm args   java vm args  dcom sun corba legacy connection orbsocketfactoryclass com coremedia corba singleipsocketfactory    java vm args   java vm args  dcom coremedia corba singleipsocketfactory ip  ipaddress    replace  ipaddress  by the ip address of the network interface to bind  for example              
   parameter value description  xx newsize   total heap size    to    m the initial new size should already have the final size   xx maxnewsize   total heap size    to    m the maximum new generation size has a default value which is to small for server applications  the new generation size should have a size of between a     and     of the total heap size   xms  total heap size m the initial heap size should be set to the maximum heap size  any java server application will finally grow to the maximum heap size  setting it to the final size will avoid many full gcs for the application   xmx  total heap size m   the maximum heap size has to be picked dependent on the expected load and application profile of the application  java applications tend to start trashing with garbage collections when the old generation will be filled to more than     after a full garbage collection    increasing the total heap size requires sufficient physical memory on the system to avoid swapping  a java application should not page  increasing the heap will  however  lead to longer garbage collections with more side effects to the application  the advantages of increasing the heap sizes will have to be carefully balanced with the disadvantages  the parameters suggested above will lead to fixed size new and old generations  the total heap size depends on the number of objects to be used  the number of concurrent threads and the number of cpus to be used  the fixed size pools will avoid full garbage collections to widen the pools until they reached their final sizes   verbose gc  this option should be part of any productive systems  this option logs the gc activity  the amount of log data is small  less than   lines per minute   this log will allow later on to see if a system have had garbage collection issues under load   xx   disableexplicitgc this option disables the call system gc    applications may not anymore trigger garbage collections on their own  some applications needed to trigger garbage collections in the past  j se      in order to avoid out of memory exceptions  triggering garbage collections in j se       or higher versions creates significant overhead  setting this option is a precaution against third party applications which may do this  this option should not be set in j se       with a patch level lower than     virtual machines with patch level   and lower need to trigger full gcs from time to time in order to assure that random numbers are random   xx   useparallelgc this option enables the parallel garbage collection  in contrast to the standard garbage collection which stops the vm while collecting  the parallel garbage collection runs parallel    
  the unified api supports programmers and administrators in their work  leading to a significant productivity gain   programming is easy  while the api is comprehensive  a simple application might still not use more than half a dozen classes  this greatly reduces the initial learning effort for using the api  creating a connection to content server and workflow server is as simple as calling a single method  afterwards  the connection provides quick access to the entire system    as different parts of the api share a common style and in fact a common meta model  it is comparatively easy to acquire knowledge about new parts of the api    the api explicitly specifies pre  and postconditions and indicates the possible events and exceptions  leaving little room for ambiguities  convenience methods simplify common tasks    widespread java standard are embraced  in particular  this applies to the collections api  the commons logging api  and the java beans conventions  deployment is easy  deploying an application that uses the unified api is straightforward  adding a few jars to the class path is all that is needed  the api does not demand special configuration files  through a management interface it is possible to control unified api applications at runtime  the api is memory efficient  multiple sessions per connection are possible  sharing a common cache while providing individual rights checks  all stateful objects are thin wrappers that use little memory and fetch their state through the common cache as needed  the api is robust  the unified api can survive server restarts  providing a continuous event stream and maintaining cache consistency  the cache size is configurable in bytes  virtually eliminating fluctuations of memory usage by the api   
  deployment  the way of deploying portlets in an ibm websphere portals is described in the portal s manual  below you will find a  quick start  description for ibm websphere portal      login as administrator and use the following description to deploy the portlet   upload portlet change to administration   portlet management   web modules  click the button install select your portal archive and press install finish the installation process by pressing finish  assign portlet rights change to access   resource permissions  select resource type portlets find coremedia cms content portlet  click assign access  icon  key   click edit role for role user  icon  pencil   click add add any member to role click ok click done  assign portlet to page change to administration   portal user interface   manage pages select page where portlet shall be placed on  select edit page layout  icon  pencil   click add portlets browse through list and select coremedia cms content portlet click ok   for finishing click done    configuration  the configuration of the above mentioned parameters for a portlet instance may done using the portlet s edit mode   log in as a administrator user navigate to a page containing the portlet click the edit button  icon      in the portlet s upper right corner  a dialog will open  edit the properties click save  
   obtain the install webstart win jar from a coremedia distribution or the coremedia download area    extract it with  jar xvf  jar name   inside the content server installation root directory  check for the executable file webstart jre j re          windows i    p exe  it contains the jre  this file is requested from coremedia editors  if you want to use the coremedia editor with java   on windows vista provide the file jre  u  windows i    p exe in this directory    check property settings of editor configuration and editor startup configuration  you find these properties in  prodserverinstalldir  properties corem editor properties  they must be set to the following urls        http    host   port  coremedia files properties corem editor xml    http    host   port  coremedia files properties corem editor startup xml    where  host  and  port  must match the values of cap server http host and cap server http port in the capserver properties of the content server  if these were set correctly  the cm editor will load the xml configuration files from the content server     if you want to use coremedia editor with windows vista you have to comment out the  j se version         max heap size         line and remove the comments from  j se version       max heap size     m    in webstart ext editor jnlp    for a customized editor with own java classes the jar files with the classes have to be signed and stored in the directory  coremediahome  lib ext  their names have to be added to the file  coremediahome  webstart ext editor extension jnlp  if you have signed classes with different certificates  you have to use a separate jnlp file for each different certificate  refer to these jnlp files in  extension  elements of the main editor extension jnlp file        the customized jar files have to be inserted in a  jar  element inside the  resource  element like  jar href  lib ext  customer  jar      a short description and example how to proceed is in the file     
  jws will not recognize already installed jres during setups  it will reinstall  unless you configure jws  double click the jws desktop shortcut and start the jws application manager  select edit preferences  select the java tab and open the settings for java applications  create a new entry with the values from the next table   host  and  port  must match the values of cap server http host and cap server http port in the  instdir  properties corem capserver properties file of the content server  insert the correct path to your jre installation in the command field  for java    replace     with       
   field value  local  value  with internet  platform version             product version                product location http    host   port  coremedia jre http   java sun com products autodl j se command c  program files java j re         bin javaw exe c  program files java j re         bin javaw exe  
  assuming that you are reusing an action implementation  the following steps describe how to set a a command button that uses your localization  executes the action you defined and performs your custom navigation  further prerequisites are that you have already set up your resource bundle for localization and that your icons are available to the icon servlet   set up localization keys for your action  named myaction in the sequel  in your resource bundle  the action s name is used to look up the icon key  text and tooltip from the resource bundle  as long as you don t use a custom localizedlabelfactory  the default localizer performs a lookup of the keys action myaction tooltip  action myaction text and action myaction icon    deploy your resource bundle  e g  org example es   put the properties files into the classpath and add their base path to the global messagesource bean      bean class  com coremedia objectserver util listpropertycustomizer      property name  customizedbeanname  value  messagesource       property name  customizedproperty  value  basenames       property name  items        list         value org example es  value        list      property    bean   deploy your icons  put the into the classpath so that the icon servlet finds them      in order to deploy your jsf navigation rules add your standard jsf navigation definitions to the jsf configuration path  define your action as spring bean and set its name property to myaction  set its navigationhandler property to a navigation handler  e g  simplenavigationhandler  that outputs a navigation symbol fitting your navigation rules as defined in step    give your action a bean identifier e g  myactionbean  insert the button into your jsp  add  es button value    myactionbean      note that the jsp s name must match the  from view id  element in your navigation rule  
   property description target a property to set or get the target object the command works on  available a read only property that tells the framework whether the command is applicable to its current target  this lets the framework choose whether to offer the action at all  enabled a read only property that tells the framework whether the command is currently applicable to its current target  assumed it is available  this lets the framework choose whether the corresponding component will be enabled or disabled  grayed out   for some actions  this property can also be observed using the enabledobservable property  it may be null otherwise   if the enablednessvolatile property is true  the enabled property may change its state  spontaneously   so the corresponding component should be updated on every round trip  immediate if a command is marked immediate  possible value change events of the corresponding request have to be prevented in order not to invoke validation callbacks on any business beans  properties  execute   a method with which the framework tells the command to execute on the current target   
  thus  the action has to check the right type of target to decide whether its command is  available   if the right type of target is set  it has to check the state of that target to decide whether it is  enabled   the execute   method is guaranteed to be called only when an action is available and enabled  an implementation of execute   should invoke the business logic  catch and handle errors  the abstract default implementation is com coremedia editing action commandaction  the commandaction defines the method executecommand  its execute   method calls the executecommand method and applies command post processors  navigation handlers and command exception handlers if necessary   actions are intended to be configured using spring  since a command operates on a concrete target the corresponding action has to be defined singleton false usually  when an action has to be reused with multiple targets  action factories and toolbars can be used  an action factory wires actions and targets during a request s lifetime  
 q  i wrote a model bean that i have put into the pageflow  when i m accessing a jsp that uses it only half of the page is rendered  the html output is broken  what went wrong  a  es uses the jsf client side state saving method by default  this implies  that pageflow scoped beans will be serialized to the response stream  if a notserializableexception is thrown jsf behaves as you observed    q  i ve written a jsp that renders a form including several input fields and a button  nothing happens when i m pressing the button  what s wrong  a  either the js lib could not be loaded or your browser disabled javascript    q  i ve written a jsp that renders a form including several input fields and buttons  when i m pressing the button  the form is submitted but the button s action is not executed  what s wrong  a  if you are using a command button that renders a submit control like  input type  submit   it can be the same as in question    if not  the most likely cause is that a validation or conversion error occurs on the server side  try  h messages  in your jsp to output possible error messages   
  the following is the meta template for richtext properties    es panelgroup     element  div      styleclass  cmpropertyeditor cmtextwidth                   document checkedoutbycurrentsession                          cmdisabled        es panelgroup element  div  styleclass  cmpropertytoolbar        h panelgroup         styleclass    document checkedoutbycurrentsession                         null    disabled            es label       styleclass  cmpropertylabel      value    document type descriptorsbyname   property name            h panelgroup       es foreach         listelement  span          styleclass  cmtoolbar          var  clientaction          value    richtexttoolbar actions           rows              es clientbutton         for    property name editor          value    clientaction           mode  icon          disabled     document checkedoutbycurrentsession           es foreach      es panelgroup     es inputrichtext       id    property name editor        value    document properties   property name          disabled     document checkedoutbycurrentsession        h message for    property name editor      es panelgroup   this is the first property editor using a toolbar  one difference to the meta template defined in the previous section is that the style classes cmdisabled and disabled are applied to different elements  here  this is to avoid all property toolbar icons from becoming disabled when the property is read only  some actions may still be available  e g  an action to open a selected list element   the toolbar is model driven  i e  the offered actions defined for rich text editing are defined in a backing bean in spring  here  the backing bean richtexttoolbar is used  which contains all available rich text editing actions  to limit the number of buttons in the toolbar  this list is cut to    elements  rows   which leads to table actions not being shown  if you really want all buttons  just leave out the rows attribute  a  es foreach  component is used to render a button for each action from the backing bean  the  es clientbutton  must be assigned the  es inputrichtext  component as its target  for   the  es inputrichtext  component is the actual rich text editor  from the viewpoint of a template developer  it works as simple as a  h inputtext      
  in many cases  blob properties store images  for an inline preview of a blob property with mime type image    replace the  h outputtext  component inside the preview link by the following fragment    h graphicimage     rendered    document properties   property name   null       title     document properties   property name  contenttype                  document properties   property name  size  bytes       url       contentbloburl document    property name        styleclass  cmthumbnail     this preview component uses the bean contentbloburl to compute a url to the contents of the image property  since this url includes the servlet context path  so that it can also be used for links  but  h graphicimage  expects a context relative path  it needs to be prefixed with       using the style class cmthumbnail displays the image as a block and sets a standard size  of course  you can use any other css class or inline style  the best style would be setting a max width  but unfortunately  internet explorer   does not support this standard css attribute   
  for more details about actions consult the com coremedia editing actions  and com coremedia editing cap actions  packages and their sub packages in the javadoc api  for more details on action related classes take a look at the com coremedia editing action  package javadoc api  the most important classes and interfaces are   com coremedia editing action commandaction com coremedia editing action commandexceptionhandler com coremedia editing action commandpostprocessor com coremedia editing action navigationhandler 
   attribute value previewbasededit true false  turn preview based editing on off  webeditoruri the uri of the coremedia webeditor  e g  http   fnord      editor   remotecontroluri the uri of the remote control for accessing the coremedia editor  this is normally http   localhost       coremedia control  contextpath name of your webapp defaulturi uri of the template rendering the context menu contextinfofactory factory for context infos providing multiple services and configuration  menuactions pbemenuactions or pbemenuremoteactions to choose between webeditor and editor  default is pbemenuactions  webeditor    
  you can optionally restrict access to the report  any report created from this report definition must then comply with the access restriction   
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server wage web application generator extensions  
  the coremedia cms      is a powerful and flexible platform for sophisticated high end content applications like high volume websites or device independent multi channel services  its multifaceted possibilities of customization empower you to design content applications with maximum performance and convenience for such different domains as news portals  technical manuals or mobile services  the developer manual series shows you how to customize the coremedia cms      for your specific needs  this covers several aspects which can be roughly divided into three areas   content modeling content management  possibly workflow driven  content delivery  in order to benefit from this manual you should be familiar with the general coremedia cms concepts  especially with the component architecture as described in the administration manual and the basic knowledge as described in the user manual   coremedia cms clients have very different tasks which range from gui editing to html generation  also the necessary extent of customization differs widely  while the editors are fairly well usable even without any customizing  the cae is rather a framework which provides basic features like content access and caching  such differences require specialized apis which are covered in detail by the continuative manuals of this series     the following sections give an overview of customizing particular coremedia cms clients and developing new clients from scratch  its purpose is to give you an idea of what is possible  where to start and which continuative manual you should consult for details   
  the next figure shows an overview of the coremedia system  the part in dark blue highlights the application area of the analytics developer manual  
  the next figure shows an overview of the coremedia system  the part in dark blue highlights the application area of the content application developer manual  
  the coremedia cms      is a powerful and flexible platform for sophisticated high end content applications like high volume websites or device independent multi channel services  its multifaceted possibilities of customization empower you to design content applications with maximum performance and convenience for such different domains as news portals  technical manuals or mobile services  the developer manual series shows you how to customize the coremedia cms      for your specific needs  this covers several aspects which can be roughly divided into three areas   content modeling content management  possibly workflow driven  content delivery  in order to benefit from this manual you should be familiar with the general coremedia cms concepts  especially with the component architecture as described in the administration manual and the basic knowledge as described in the user manual   coremedia cms clients have very different tasks which range from gui editing to html generation  also the necessary extent of customization differs widely  while the editors are fairly well usable even without any customizing  the cae is rather a framework which provides basic features like content access and caching  such differences require specialized apis which are covered in detail by the continuative manuals of this series     the following sections give an overview of customizing particular coremedia cms clients and developing new clients from scratch  its purpose is to give you an idea of what is possible  where to start and which continuative manual you should consult for details   
  elthe next figure shows an overview of the coremedia system  the part in dark blue highlights the application area of the delivery developer manual  
  the coremedia cms      is a powerful and flexible platform for sophisticated high end content applications like high volume websites or device independent multi channel services  its multifaceted possibilities of customization empower you to design content applications with maximum performance and convenience for such different domains as news portals  technical manuals or mobile services  the developer manual series shows you how to customize the coremedia cms      for your specific needs  this covers several aspects which can be roughly divided into three areas   content modeling content management  possibly workflow driven  content delivery  in order to benefit from this manual you should be familiar with the general coremedia cms concepts  especially with the component architecture as described in the administration manual and the basic knowledge as described in the user manual   coremedia cms clients have very different tasks which range from gui editing to html generation  also the necessary extent of customization differs widely  while the editors are fairly well usable even without any customizing  the cae is rather a framework which provides basic features like content access and caching  such differences require specialized apis which are covered in detail by the continuative manuals of this series     the following sections give an overview of customizing particular coremedia cms clients and developing new clients from scratch  its purpose is to give you an idea of what is possible  where to start and which continuative manual you should consult for details   
  the next figure shows an overview of the coremedia system  the part in dark blue highlights the application area of the editor developer manual  
  the coremedia cms      is a powerful and flexible platform for sophisticated high end content applications like high volume websites or device independent multi channel services  its multifaceted possibilities of customization empower you to design content applications with maximum performance and convenience for such different domains as news portals  technical manuals or mobile services  the developer manual series shows you how to customize the coremedia cms      for your specific needs  this covers several aspects which can be roughly divided into three areas   content modeling content management  possibly workflow driven  content delivery  in order to benefit from this manual you should be familiar with the general coremedia cms concepts  especially with the component architecture as described in the administration manual and the basic knowledge as described in the user manual   coremedia cms clients have very different tasks which range from gui editing to html generation  also the necessary extent of customization differs widely  while the editors are fairly well usable even without any customizing  the cae is rather a framework which provides basic features like content access and caching  such differences require specialized apis which are covered in detail by the continuative manuals of this series     the following sections give an overview of customizing particular coremedia cms clients and developing new clients from scratch  its purpose is to give you an idea of what is possible  where to start and which continuative manual you should consult for details   
  the next figure shows an overview of the coremedia system  the part in dark blue highlights the application area of the importer developer manual  
  the coremedia cms      is a powerful and flexible platform for sophisticated high end content applications like high volume websites or device independent multi channel services  its multifaceted possibilities of customization empower you to design content applications with maximum performance and convenience for such different domains as news portals  technical manuals or mobile services  the developer manual series shows you how to customize the coremedia cms      for your specific needs  this covers several aspects which can be roughly divided into three areas   content modeling content management  possibly workflow driven  content delivery  in order to benefit from this manual you should be familiar with the general coremedia cms concepts  especially with the component architecture as described in the administration manual and the basic knowledge as described in the user manual   coremedia cms clients have very different tasks which range from gui editing to html generation  also the necessary extent of customization differs widely  while the editors are fairly well usable even without any customizing  the cae is rather a framework which provides basic features like content access and caching  such differences require specialized apis which are covered in detail by the continuative manuals of this series     the following sections give an overview of customizing particular coremedia cms clients and developing new clients from scratch  its purpose is to give you an idea of what is possible  where to start and which continuative manual you should consult for details   
  the next figure shows an overview of the coremedia system  the part in dark blue highlights the application area of the unified api developer manual  
  the coremedia cms      is a powerful and flexible platform for sophisticated high end content applications like high volume websites or device independent multi channel services  its multifaceted possibilities of customization empower you to design content applications with maximum performance and convenience for such different domains as news portals  technical manuals or mobile services  the developer manual series shows you how to customize the coremedia cms      for your specific needs  this covers several aspects which can be roughly divided into three areas   content modeling content management  possibly workflow driven  content delivery  in order to benefit from this manual you should be familiar with the general coremedia cms concepts  especially with the component architecture as described in the administration manual and the basic knowledge as described in the user manual   coremedia cms clients have very different tasks which range from gui editing to html generation  also the necessary extent of customization differs widely  while the editors are fairly well usable even without any customizing  the cae is rather a framework which provides basic features like content access and caching  such differences require specialized apis which are covered in detail by the continuative manuals of this series     the following sections give an overview of customizing particular coremedia cms clients and developing new clients from scratch  its purpose is to give you an idea of what is possible  where to start and which continuative manual you should consult for details   
  the next figure shows an overview of the coremedia system  the part in dark blue highlights the application area of the workflow api developer manual  
  the coremedia cms      is a powerful and flexible platform for sophisticated high end content applications like high volume websites or device independent multi channel services  its multifaceted possibilities of customization empower you to design content applications with maximum performance and convenience for such different domains as news portals  technical manuals or mobile services  the developer manual series shows you how to customize the coremedia cms      for your specific needs  this covers several aspects which can be roughly divided into three areas   content modeling content management  possibly workflow driven  content delivery  in order to benefit from this manual you should be familiar with the general coremedia cms concepts  especially with the component architecture as described in the administration manual and the basic knowledge as described in the user manual   coremedia cms clients have very different tasks which range from gui editing to html generation  also the necessary extent of customization differs widely  while the editors are fairly well usable even without any customizing  the cae is rather a framework which provides basic features like content access and caching  such differences require specialized apis which are covered in detail by the continuative manuals of this series     the following sections give an overview of customizing particular coremedia cms clients and developing new clients from scratch  its purpose is to give you an idea of what is possible  where to start and which continuative manual you should consult for details   
  the next figure shows an overview of the coremedia system  the part in dark blue highlights the application area of the wage developer manual  
  the coremedia sci scope of supply contains the documentation of the coremedia api in javadoc format  in order to use this documentation you need to unzip the cap  versionnr   api zip file in a convenient directory  under unix  copy the file in the directory and use the following commands  gzip  d cap  rel no   api zip  this will create subdirectories for the java api  publicapi java   the javascript api  publicapi js   the taglib api  publicapi tld   the beandoc  publicapi beans  and for the error codes  errorcodes   
  only use read commands on the database when the coremedia content server is running  if you want to write data via cm sql  be sure that the coremedia server is down  otherwise data corruption can occur  
  this chapter describes the installation of a coremedia cms system with a coremedia analytics engine  click tracking  in site and dashboard analytics will be covered  you might use this installation as a starting point for own customization or simply as a working example for coremedia analytics   the installation covers the following steps  installing the coremedia cms installing the cae menusite example starting the content server importing menusite content into the content server setting up the menusite click tracking and in site applications configuring the analytics dashboard starting the data aggregator process starting the object analyzer starting the cae hosting the menusite and analytics applications verifying the setup using coremedia analytics  prerequisites  in order to install the example you need the following prerequisites   the coremedia cms installation jar file  cap  ver no   jar  the coremedia cms examples jar file  cap examples jar  an oracle database certified for use with coremedia cms with an empty account the ant tool  ant apache org  reachable from the command line prompt     install coremedia cms  the following table lists all coremedia cms components you have to install  it also lists the sub components and options to choose and not to choose  please refer to the administration and operations manual for a detailed description of the installation process    make all components which need a database  use the predefined oracle database account  do not start any coremedia component after this installation  install the following components   
  the unified api supports one listener type that can be directly attached to the connection  the capconnectionlistener  a connection listener is notified about important events that affect the status of the connection   in particular  the listener is notified whenever the connection detects a problem in the communication with the server  in this case  the connectionunavailable method is called  as soon as the server or the network recovers  a connectionavailable is sent   when the run level of the server is changed  there may be an advance warning that the connection has to be closed  this is done through the method connectionwillbeunavailable  in the case that a run level switch is aborted  the method connectionwillnotbeunavailable is called to signal this condition   the method connectiondisrupted indicates the rare event that the connect has become permanently unavailable  so that no reconnect is attempted  possibly the connection s user was deleted in the database or the connection was shutdown by an explicit invocation of cm killsession  
  although the dashboard analytics provides many useful out of the box statistics  it is expected that customers will have at least some slightly different reporting requirements than those provided out of the box  for these cases the dashboard analytics application has been designed to be easily extendable   the analytics developer manual provides full reference details of all the available components and the information necessary to subclass or implement them   however  since an extension of reporting functionality can affect multiple components  the following  cookbook  takes you through some common extension scenarios step by step  this guide should also provide a good jumping off point for more advanced customizations     
  do not use any tables in the standard schema to store your custom aggregated data  this could corrupt your reporting data and your users  reports  
  the dashboard by default has only six slots available to display reports  if all six slots are already full  to add your new report you must replace an existing report definition in the analytics dashboardviewdefinitions xml file  thus removing the existing report from the dashboard  
  documents within the editing lifecycle can go through different states  in this  there is a difference between document states and document version states   the state of a document version is related to just this version of the document and its editorial state  whereas the document state labels the state of the document concerning its publication   the first paragraph names the states of document versions  the second paragraph surveys document states   
    select the entry  you want to edit  click the appropriate button to move  delete or rename the entry  see table   click  ok  to close the window  
  copy text from other applications  you can also copy texts from other applications into the richtext pane  you can choose between formatted copying or plain text copying  if the format of these texts in the clipboard is html and you choose formatted copy  the coremedia  application will try to convert the texts into the coremedia richtext format  otherwise the text will be copied as plain text   the transformation of html texts into coremedia richtext format can be configured  see the editor developer manual  and is therefore project specific  by default  the following elements of microsoft word texts can be transformed into the richtext format     bold  italic  understrike and strike through   superscript and subscript   headlines   tables   ordered and unordered lists  the following formats and structures can not be copied from microsoft word     colors   images and drawings   paragraph alignment  centered        format templates   language assignments   fonts and font sizes   frames   embedded objects  excel tables       at the moment  it is not possible to copy the following structures into existing lists  tables and blockquotes     several paragraphs   lists   tables   images  if you try  only plain text will be inserted   if you have copied text containing attributes which are not defined in a style group  i e  attributes you cannot use  all involved attribute editors will offer a button to remove these attributes  see figure   the same happens if you use legacy content from the sgml pane which contains attributes not supported in the richtext pane  
  in order to edit a document  you have to check it out  a checked out document is blocked for editing by others  and it is made visible to others that it is checked out by you    every check out creates a new version of the document  older document versions are saved  so it is possible to track down content modification  it is is possible to create a new document version out of any older one  and so to restore any older content    if you have finished your editing task with this document  you check it in again  and so make it available to your colleagues   who continue editing or approve for publication  whatever they or you are entitled to do  is defined by your group memberships  see chapter  users and groups      any version of a document has a state labeled by one of the following icons  
  a name and a password must be assigned to the new user   a home folder stores personal documents  as well as queries  the user defined dictionary  coremedia editor settings or draft documents of the user  if you do not enter a folder  it will be created automatically in the  home  folder  with the name of the user as the folder name  
  by default  a user has no rights on its home folder  you have to add the user to a group which has appropriate rights on this folder  see for example the predefined editor group  
   item example description identifier   article   parent  identifiers consist of java identifier characters  where the name of an identifier collides with a keyword or an implied property  the identifier can be enclosed in double quotes to preserve its meaning as an identifier   string literal  title text  string literals are delimited by single quotes  a single quote inside a string literal is represented by two successive single quotes   numeric literal      numeric literals conform to java syntax  essentially  a numeric literal is a sequence of digits  optionally preceded by a minus sign  date literal            t                the string used for date literals has to be of the form recognized by the dateconverter class  see the javadoc    path literal   menusite fish  path literals denote a content by giving its path  beginning at the root folder  it is an error if no content exists at the given path   user literal    admin    paul msad  user literals denote a user name and a domain name separated by an     character  if the domain name is empty  the     character may be omitted  id literal  coremedia    cap content    id literals denote a content  version or user by giving its id  as returned by capobject getid     
  as mentioned above  the dataviewfactory s caching mechanism takes care of dependencies  any dataview property may define one or more objects  called  dependencies   on which this property depends on  when caching a property  two things are stored in the cache  the property s value as well as its dependencies  in case that any dependent object becomes invalid  e g  by modifications on it  the dependent property value becomes invalid as well and will be removed from the cache automatically    example  a dataview property  headline  is calculated from a row in a database table and so this row is defined as a dependency  when caching an instance of this property s value  the dependency is tracked as well  changing the table s row causes the cached value to become invalid and this value to be removed from the cache   defining dependencies for a property value is done during the property s value computation by invoking the static method com coremedia cache cache dependencyon object  for each dependency  in order to notify the cache about a dependency invalidation  the method invalidate object  needs to be invoked on the dataviewfactory s cache instance  as a result  any cached item depending on this object is removed from the cache  
   custom  description   this action invokes a custom watchdog action  see the javadoc of customaction for details   you have to add two nested tags   custom and action   into the watchdog xml file to call the action   example    custom name  my first action  timeout         action class  com customer mywatchdogaction  myprop  ok      mysub class  com customer mysub  foo  bar       mysub class  com customer mysub  foo  baz       action    custom   in this example  class com customer mywatchdogaction would need to implement customaction  would need a no args constructor  a setter for myprop and a method addmysub accepting a mysub object  the class com customer mysub would need a no args constructor and a setter for foo  this allows for elaborate configuration  please read the chapter  the beanparser  of the workflow developer manual for details    make sure that your custom action will not accumulate resources  database  jms connections etc    otherwise the watchdog would itself need to be watched  in all nontrivial cases  starting an external script is strongly preferred    the nested tags of the action tag depend on the setters defined in your custom action class  here com customer mywatchdogaction   attributes the custom tag supports the general attributes for actions  all sub tags of custom need the class attribute  all other attributes of the action tag and its sub tags depend on the custom action  error codes the error codes returned from the execute   method of the custom action class   
  if you move the cursor over text in a richtext field  the following formatting information is shown in the status bar of the document window   paragraph formatting  alignment paragraph format  text formatting  internal link external link color background color font font size language  if a text contains a lot of formatting  the information might exceed the capacity of the status bar  in order to see all formatting information you can press the  ctrl  key while moving the cursor over the text  the formatting information is shown as a tooltip  
  for the oracle database you need the oracle jdbc thin driver oracle jdbc driver oracledriver  copy the driver file to the  coremediahome  lib directory  there also exists the oracle oci driver which could be used  however  this driver can cause some problems   if the database crashes  the oci driver hangs blocks and the coremedia server must be restarted      connections can hang during rollback   problems with the streaming of blobs can occur  sun recommends the thin driver for performance reasons   furthermore  the driver needs an additional oracle client installation on the cm server host  therefore the oci driver is not recommended   important  always use the latest version of the jdbc driver for your database version and the jdk being used  new driver versions can be obtained from the oracle website http   technet oracle com   in order to optimize queries  oracle needs to gather statistics  for supported oracle  i databases  you need to execute the dbms stats gather schema stats command of your oracle database for each coremedia database user   it may be useful to configure a cronjob that optimizes the database on a regular basis  the interval depends on the updates of content   since version   i  the oracle dbms gathers this information automatically  but manual creation of the statistics would do no harm    in sql properties  the following settings must be made for an oracle database   sql store driver oracle jdbc driver oracledriver sql store url jdbc oracle thin   db host                                db port   db instance  sql store dbproperties corem oracle sql store user  db user  sql store password  db user password   the name of the database user may be given in lowercase in the sql properties  but it must be stored as all uppercase in the database   the oracle database instance must be configured with a sufficient number of db cursors  the number is set in the oracle initialization script init instancename  ora in the entry open cursors  for further details see the documentation of the database manufacturer    the number of cursors for a coremedia server is calculated with the following formula    number of cursors     maximum number of database connections            number of document types        where  maximum number of database connections  is defined with the property  sql pool maxconnections  maximum number of database connections   the standard value is   connections  for a server with    document types and   parallel database connections therefore      cursors are needed  the total number necessary for the oracle instance is calculated from the sum of the cursors required by all applications     sample sql  create db user and drop db user 
  do not run an http cache with a cae feeder or a proactive engine on the same database schema  
  do not run a proactive engine and a cae feeder or an http cache on the same database schema  
  after that  add the database s jdbc driver to the application s classpath by copying the jar into the directory lib   finally  adapt the following properties in the configuration file   jdbc driver oracle jdbc driver oracledriver jdbc url jdbc oracle thin  localhost      oracle jdbc user username jdbc password password jdbc dbname oracle  value cache  if the value cache is used  the following entries need to be changed   valuecache enabled true valuecache store directory c  data valuecache  specify a location in the file system where the values are supposed to be stored  make sure that the user which runs the proactive engine has sufficient access rights to read and write this directory   if you want the proactiveengine to run on an empty cache you might set  proactiveengine clear true  which causes all cached values and dependencies to be deleted when starting up the proactiveengine  make sure to remove this entry as soon as the proactiveengine has started up if you don t want the proactiveengine to be cleared on the next restart   management and logging  the property management jmxremote url  specifies a jsr     compliant url under which a jmx connector server is made available for management  finally  the property logging configuration  specifies the location of the above mentioned log j properties  file   monitoring a proactiveengine application  a proactiveengine application  such as the cae feeder or analytics object analyzer  can be monitored by the watchdog  thus serious problems can be detected and recovery operations  e g  restart of the component  can be initiated  any proactiveengine application provides a  heartbeat  attribute via jmx which indicates whether the application is still working or not  this value is the time in milliseconds since a vital internal operation has been executed  a low value  near    indicates that everything is fine while a high value might indicate a serious problem   the following example snippets demonstrates how to restart a proactiveengine in case that it does not proceed  e g  due to database problems  for    seconds    component name  proactiveengine  startaction  check      jmx name  check        serviceurl  service jmx jmxmp   localhost              objectname  proactiveengine type core        attributename  heartbeat        defaultcode  ok          report an error if no activity could be detected for   s       converter class  com coremedia watchdog numberrangeconverter                min         code  error       jmx     script name  restart  command  bin cm proactiveengine restart            timeout           edge from  check  to  check  code  ok  delay           edge from  check  to  restart  code  error             no jmx connection        edge from  check  to  restart  code  unexpected error        edge from  restart  to  check  code  ok  delay                restart failed  e g  database not available        edge from  restart  to  restart  code  unexpected error           delay          component   running  the proactive engine s startup is done by using coremedia s standard mechanism  under windows  before the first start  you have to register the component as a service  open a command prompt and type    bin cm proactiveengine install  in order to start the proactive engine type    bin cm proactiveengine start 
  do not run a cae feeder with an http cache or a proactive engine on the same database schema  
    add an httpcontentserviceservlet to your web application  file web xml   
  this renderer is used to render all available actions in a toolbar above content objects  the picture below visualizes the output of that renderer  
  the actionexecutioncontroller is a spring mvc conforming controller which executes actions that are passed in as request parameters  it should be used as a counterpart of the toolbarrenderer  and the contextmenurenderer  but could also be used standalone  the request must also contain a target on which the action is executed  for details of the required request parameter please see the javadoc of the class actionexecutioncontroller    modelandview  navigationhandler  and commandpostprocessor  the controller uses the concept of navigationhandler and commandpostprocessor during the execution of the action  after action execution the controller returns a spring mvc modelandview to the spring dispatcher servlet for further processing  usually a navigation to another page  the modelandview is generated using the springmvcnavigationhandler of the action as source for the view and the springmvccommandpostprocessor of the action as source for the model  
  in order to use preview based editing with the es for jsf property editors you need to redirect the view to one of the editing templates  these templates might be custom templates which allow the editing of properties of document types  or a wizard menu described below  the action which redirects to one of the editing view  or to the wizard menu needs special configuration  the description of the configuration is contained in the following section  it is usable for redirecting to the wizard menu as well as for redirecting to other es for jsf property editors   redirecting to the wizard menu  the wizard menu shows further actions which might be executed for the given context  it is viewed after executing an action in the preview based editing toolbar  the action needs to have a specific navigationhandler  and commandpostprocessor in order to trigger a successful redirect to the wizard menu page  the special commandpostprocessor  extracts all necessary contextinfo information and puts it into a model  map   this model is received by the actionexecutioncontroller  together with the view returned by the navigationhandler this forms the spring modelandview  which is returned by the actionexecutioncontroller for further processing of the spring dispatcher  usually this leads the desired redirect to the wizard menu with the required contextinfo request parameter   the configuration looks like this    bean id  portalgotonewcontent request  class   com coremedia editing actions noopcommandaction    singleton  false      property name  name  value  fragment new       property name  commandpostprocessor     ref  contextinfotomodeltransformer        property name  navigationhandler        bean class  com coremedia editing kits springmvc action      springmvcnavigationhandlerimpl           property name  view            bean          class  org springframework web servlet view redirectview               property name  url             value   editing servlet pbe forms newfragment jsp               bean          property        bean      property    bean   the commandpostprocessor is the reference to the contextinfotomodeltransformer and the navigationhandler the springmvcnavigationhandlerimpl  which contains as view a redirectview which redirects to the menu  
   property value default description replicator publicationiorurl   url in format  http     masterliveservercomputername   port  coremedia ior  sets the location where the replicator can find the ior of the master live server  replicator  user domain password  string  configures the user name  domain and password to authenticate against the master live server  replicator chunkingthreshold int   sets the maximum number of events that is fetched from the master live server in one chunk during startup    indicates no limit  lowering the threshold will reduce main memory consumption at the cost of startup times  replicator packager flushsize int      sets the maximum number of events that the packager holds in main memory before flushing to disk  lowering the flush size will reduce main memory consumption at the cost of write performance    replicator  incomingcounter preparer preparelogger packager packagelogger executor executionlogger completedcounter  channelsize   int   sets the channel sizes for the event pipeline before the given stage    indicates unlimited queues  lowering the queue sizes will reduce main memory consumption at the cost of write performance  replicator startuptimeout true false false defines if the replication live server waits on start for the replicator to connect to the master live server  true   replicator enable true false true defines if the replicator should be started on start of the replication live server  true   replicator preventonlineswitch true false false if set  true  the replication live server will replicate the content but will not switched online afterwards  replicator maxacceptedlag int     the replication live server is offline after a consistent replication but it is more than the given number of events behind the current timestamp  then the replication live server will  not go online until it catches up  replicator restartreplicatoronerror true false true restart the replicator if an error occurs on replication live server side  true   otherwise the replicator will be stopped  replicator shutdownserveronerror true false false stop the replication live server if an error occurs on replication live server side replicator logevents true false false all repository events will be logged  true   replicator autorestart true false true restarts the replicator sessions if lost  true   replicator checkstream true false true defines if the replication live server checks the event queue for connection  true   replicator checktimeout int     the time in seconds after which the replication live server checks the event queue for connection   
  with the bulkpublish tool you can publish all resources below a given folder  if necessary  you can automatically check in resources and approve them   
  the options have the following meaning  
   predicate    child elements   documenttype     varies   parent elements   filter    treefilter    documenttypes    processes    workflow   
  predicate classes enable selective display of objects  depending on the context in which the  predicate  element is used  different object types can be selected     filter      if the  predicate  element is used in a  filter  element  the documents shown in the document overview of the coremedia editor can be filtered  due to different conditions  thus  the objects to be filtered are documents of the type hox corem editor proxy documenttypemodel    treefilter      if the  predicate  element is used in a  treefilter  element  the folders shown in the folder view of the coremedia editor can be filtered  the objects to be filtered are folders of the type hox corem editor proxy resourceholder    documenttypes      if the  predicate  element is used in a  documenttypes  element  the document types which can be created  moved  copied or selected in the document choosers of the coremedia editor are filtered  thus  the objects to be filtered are document types hox corem editor proxy documenttypemodel    processes      if the  predicate  element is used in a  processes  element  the workflows offered for initiating in the menu file new workflow    are filtered  the objects to be filtered are workflows of the type com coremedia workflow wfprocess    workflow  if the  predicate  element is used in a  workflow  element  the workflows and tasks shown in the sub views my tasks  offered tasks and my workflows of the workflow window can be filtered  if the  predicate   element is used in a  workflow   element  the objects to be filtered are com coremedia workflow wfprocess and com coremedia workflow wftask   filtering can occur on both the client side and the server side  the predefined filters only run on the server side  while self programmed filters must run on the client side  this is determined by the remote attribute of the  filter  element  the default value  true  indicates server side selection    predicates for filtering document types  
  predicates for filtering workflows and tasks    default predicate  sorted objects  description  genericprocesspredicate    workflows    com coremedia workflow wfprocess  the default predicate filters workflows for which no creation right is granted to the user  own predicates must implement hox util predicate  defaultworklistpredicate   workflows   com coremedia workflow wfprocess  tasks   com coremedia workflow wftask   the default predicate filters tasks and workflows by the three categories  my tasks  offered tasks and my workflows  own predicates must implement java lang cloneable and must extend hox corem editor workflow abstractworklistpredicate and should extend the default filter hox corem editor workflow defaultworklistpredicate for convenience   
  now  you have reached a critical point  the pads copy contains generated content  which depends on the new schema and content  that means that the migration of the productive system will have no impact on the content  but it is important that the dependencies are designed in a way  that the sheer  activation  of dependencies will not lead to the creation of a huge amount of content  you can check this by checking in  checking out and publishing of concerned configuration documents on the copied system  this will simulate the effects on the productive system after reconnection with the copied pads database  everything is ok  when only a few generating operations occur    
  a report definition specifies a high level state model and controls the report s visualization  it specifies the report phrase  names the report chart template and optionally specifies chart customizations  this visualization definition part will be covered later  the state model defines report variables at the application domain level   examples are  site selection    time interval    entry pages and exit pages    browser type detail level   etc  they correspond to report parameters variables of a report can optionally be interdependent  an example would be the time resolution variable of the performance report  which changes according to the time interval selected   the application level state model is mapped to a more technical data model  the data model is understood as being  conceptually  a multidimensional cube of a number of continuous or discrete dimensions with data entries being represented as points in the cube  note that this is a conceptual model  technically the data is usually organized in a relational database model  data model dimensions  like e g  the time or content item dimension  are represented by domains of the underlying database system  for example  time dimension values are represented by timestamps and content items by their technical  integer  id   dimension constraints determine the section of a data dimension that is relevant for a given report instance  the following types of dimension constraints are defined   dimension discretizers map continuous or discrete high resolution values to discrete  not necessarily equidistant dimension values of a chosen  typically low  resolution  an example is the time resolution discretizer   mapping timestamps to days  weeks  months  years  dimension ranges define an upper and lower bound on a dimension  examples are timeranges top      entries or time intervals  april  st      until jun   th        dimension values are single values of a  usually discrete  dimension  examples are a single category from a list of categories  a single site from a list of sites   state model variable values are mapped to dimension constraints at the data model level  a state model variable may result in more than one dimension constraint  thus dimension constraints are also called aspects of state model variables  as they deal with a single dimension of a  possibly  multidimensional variable  an example of a multidimensional state model variable is a time range variable which maps to both a time interval and a corresponding time resolution   report generation  when a user requests a report  a report instance is created from the report definition and initialized with configured initial values  the state model variables are updated according to the user s  changing  parameter selection by the mvc controller  state model variable value updates are mapped to data model dimension constraints and a report query execution is triggered    the report engine runs queries on the report instance  the report engine s query executor drives the query execution and result consolidation process  it instantiates the query definitions  replaces placeholders  maps dimension constraints to sql clauses and runs the queries against the analytics database  the queries  results are passed to the single query result consolidator  which merges  filters  aggregates and sorts the result  optionally defined post processors additionally process the data  the data is stored in the report instance and rendered using the mvc views   
  dashboard view profiles can be created to customize the dashboard appearance for user groups  a dashboard view profile represents the subspace of the report information space that is suitable for the given user group  it defines a number of dashboard views  visualized as tabs   a dashboard view is a composition of reports that are displayed together  each contained report can be customized with respect to its appearance  e g  title  and be restricted in the level of interactivity allowed  e g  by fixing parameter values    
  please note that you can restrict access also via dashboard profile user role association and subsequent view access restriction  typically these are more suitable level for access restriction than the report definition level  
  specify the list of user roles in the property  requiredrolecsv   with role names separated by comma  access is granted to users who assume one or more of the roles specified  analytics dashboard follows the idea of pluggable authentication providers  if installed against a coremedia cms  the role names will be interpreted as cms group names   the following report definition fragment shows an example    bean id  reportdefinition newreport  parent  reportdefinition              property name  requiredrolecsv     value  administratoren publisher role               bean    you have now successfully created a new report definition  congratulations  
   attribute description name name of the explorer configuration class   with this attribute the class used for the appearance of the explorer is chosen  own classes must implement the interface hox corem editor explorer explorerfactory  as a default  the class hox corem editor generic configurableexplorerfactory is used  which allows customization   another class which can be used is hox corem editor generic genericexplorerfactory which shows the behavior known from coremedia cap      the class is not configurable  see the api documentation for more details  extendedcontextmenu setting this attribute to  false   you can remove the menu items check in  check out and revoke check out from the context menu of the explorer  default is  true   combinesortingandfiltering with this attribute set to  false   separated sorting and filtering of the documents shown in the document overview can be enabled  so it is possible  to use own comparators with the predefined predicates  by default  documents may be filtered and sorted in one step on the server  remote filtering and sorting on the server is much faster than local operations which may slow down the server dramatically  so use local filtering and sorting with care  keepselectionfocused only use this attribute when combinesortingandfiltering false  if set to  true  this attribute replaces delete  insert event pairs with  contentchanged events in the explorertableresourcelistchain  this change allows the explorer resourcetable to track entry updates  which it could not when receiving delete and insert events   therefore the focus in the document overview of the explorer window will not be lost  the default is  true   nolocalsortingafterinsertandupdate   only use this attribute when combinesortingandfiltering false  if set to  false  this attribute will instruct the listsorterimpl to insert  sort  new  entries rather than adding them to the end of the entry list which is the existing behaviour  setting this property to false might imply performance degradations on editor and server  so use with care  if keepselectionfocused is set to  true  you do not need to change the setting of nolocalsortingafterinsertandupdate   the default is  true    
   property name property description mandatory name the profile s name  if the name property is not set  the spring bean name will be used per default  no associatedrole a comma separated list of roles that can assume this profile  this property may be left unspecified  in which case the profile is said to be generic  currently roles are mapped to cms user groups  a user is associated with a profile upon first request within a session  if a user matches more than one profile  the first profile matching will be selected  if no profile with a specified  associatedrole  can be matched  the user will be associated with the first generic profile  no   views     ordered map of profile views  at least one view must be defined  each entry maps a view identifier to a view definition   entry key   view identifier  the view s identifier for the given profile   please note that a view s display name  the text shown in the dashboard tab  is determined by this view identifier and not by the view s name  allowing profiles to name shared views differently   a view name key is computed from    profile name      view      view identifier      name    the key is localized using the dashboard properties  if no key mapping can be found  the view identifier is used as fallback name   entry value   the view definition  see below  yes defaultviewidentifier upon a user s first access to the dashboard  the profile s default view is selected  the  defaultviewidentifier  must be one of the view identifiers used in list property  views   yes  
  defining a dashboard view  we recommend that you copy an existing view definition and adapt its properties   
   property name property description mandatory name   the view s name  if the name property is not set  the spring bean name will be used per default   note that the view s display name is not determined by this property  instead  it is computed from the view identifier as defined in the profile  see profile properties above   no requiredrolecsv a comma separated list of roles  access to this view is granted only to users that assume one or more specified roles  if this property is left unspecified  no access control is performed  we highly recommend not leaving this property unset  see section below   yes for security reasons reportviews ordered list of dashboardreportviews  a report view is a report customized for a specific dashboard view  each report view is defined by a dashboardreportview bean  yes  
  a dashboardreportview customizes an existing report definition for a given dashboard view  the report definition can be customized via these properties   
   property name property description mandatory reportdefinition reference to the report definition to be customized  yes titlekey purpose  override the report definitions  title  provide a localizable  customized title for this report in the given dashboard view  the title key will be localized via default and custom dashboard properties  no sentencekey   purpose  override the report definitions  sentence  provide a localizable  customized report sentence for this report in the given dashboard view  the sentence key will be localized via default and custom dashboard properties   variable placeholders can be used within the localized sentence  they are denoted as  variablename   variable placeholders must match report definition variables by name  no explanationkey purpose  override the report definitions  explanation  provide a localizable  customized explanation text for this report in dependent detail views  the explanation key will be localized via default and custom dashboard properties  no reporttemplatename purpose  override the report definitions  report template for this report view  see the report template property in report definition  no reportcustomizer purpose  override the report definitions  report customizer class for this report view  it is used to pass report instance variables  username  generation time  report title  etc   to the jasper report template engine  see the report customizer property in report definition for more information  no chartcustomizers purpose  replace the report definitions  default chart customizers for this report view  they customize the rendering of the chart graph  customizers must be passed in as spring beans  not as class names  for more information  see the report definition s chart customizers view property  no chartcustomizer deprecated  use the property  chartcustomizers   no initialvariablevalues a map of variable initial values  each entry maps the variable name to the variable s initial value  each value is represented by its symbolic name  the variable name must be defined in the report definition that this report view is based on  the initial value identifier must be a valid symbolic name of a value of the given variable type  see variable types for their values  symbolic names  no nonmodifiablevariablescsv   a comma separated list of report variables that are immutable by the user  i e  the user cannot change the initial value  leaving this property empty implies that all report variables are interactively changeable by the user   the special identifier     can be used to denote that all variables defined in the report definition should be fixed  no filtervariablevalues   purpose  variable values can be filtered for a given report view  only a subset of all available values can then be selected by the user  filter expressions allow single values to be filtered out or all values except a list of values to be filtered  see examples below     a  in order to filter out single values  use the filter expression  filter  value    use the value s symbolic name  example  filtering site  mysite      property name  filtervariablevalues      map       entry key  site          list            value filter mysite  value          list        entry      map    property     b  in order to filter all but a few values  first filter all values  filter    and then unfilter the selected ones  unfilter  value    example  filtering all sites but  mysite      property name  filtervariablevalues      map       entry key  site          list            value filter    value            value unfilter mysite  value          list        entry      map    property  no    
  long actions are very similar to actions  but they are executed in three separate phases  only the first and the last phase are permitted to access the containing process and its variables  the second phase runs completely outside of any database transaction  therefore the second phase does not consume system resources and there is no need to finish it quickly  long actions are particularly well suited for accessing remote servers that may not respond immediately   the first phase consists of the method  object extractparameters task task    which must read all task and process variables that are needed for processing  afterwards  all relevant data must be packaged into an object of arbitrary type  which is returned from the method  if multiple values have to be returned  either an object array or a custom class can be used for aggregating these values  because a long action always runs in the context of an automated task  the method is passed a correctly typed task object immediately  often you will have to retrieve the containing process before reading any variables  afterwards the method  object execute object params    is executed  it is passed the object that was returned from extractparameters  it may perform arbitrary computations for an extended period of time before it returns its result as an object  the method may not  however  access any objects of the workflow repository  finally  actionresult storeresult task task  object result    is called with the result from execute  it may write task and process variables as needed  the returned action result is processed as by an ordinary action   the class longactionbase implements the longaction interface and provides some convenience code  instead of execute and storeresult you simply implement the method  object doexecute object params  throws exception   if that method throws an exception  that exception forms the basis of a failed action result  if a value is returned  that value is wrapped in a successful action result  note that you must implement the extractparameters method even if you base you action on the longactionbase class   like an ordinary action  a long action must be reentrant and it must be robust against being rerun in the case of a problem  
  for the sql server database you must use the original jdbc driver supplied by microsoft  copy the driver file into the  coremediahome  lib directory and configure the following settings in the file sql properties   sql store driver    com microsoft sqlserver jdbc sqlserverdriver sql store url jdbc sqlserver       db host   db port  databasename  db name  sql store user  db user  sql store password  db user password  sql store dbproperties corem mssql  only sql server authentication is supported for the database user  
  the contextmenurenderer renders preview based editing tags as css context menus  it renders the menu eager instead of the lazy rendering of the standard preview based editing renderer   eager   means that all context menus are rendered inside the markup during rendering the whole page  the following picture visualizes a rendered context menu  

  coremedia analytics does not support oracle    
  if you want to install fast instream into a multi node installation  you can not use the graphical installer of coremedia cms but you have to perform a manual installation  this installation comprises the following steps  installing fast instream using the fast installer gui copy coremedia specific files to the installation directory edit fast instream configuration files start fast services and finalize the installation in the admin interface  installing fast instream using the fast installer gui extract the cm searchengine fast   minorversion  oem  os  zip file into your filesystem  start the installation with   oeminstaller bin setup exe for a windows system    oeminstaller bin setup  os  bin for a unix system  accept the welcome and license screen and provide the location for the license file  which you have received from coremedia     check the multiple node environment option  please refer to the instream installation guide  chapter    installing fast instream in a multiple node environment  for detailed instructions  in the following table you will find essential configuration choices in order to connect the coremedia system to fast instream later  
   topic to notice crawler service the coremedia oem fast licenses do not allow crawler services  do not assign that service to any host  search service   the search service for coremedia must be named  webcluster   please configure the search service with the following custom index profile       oeminstaller config index profiles index profile coremedia xml   query result processing service depending on your license you are allowed to use fast spell checking features  if you have a standard license please deselect all supported languages and select a default language  it does not matter which you choose  if you have an advanced license  please choose all languages which are supported in your license   
  start with the installation of fast instream  do not start fast services after installation    copy coremedia configuration files  you have to copy the coremedia configuration files shown in the next table to every server of your multi node environment   installdir  refers to the installation directory of your fast instream installations  
   source file target    oeminstaller config etc    installdir  etc      oeminstaller config lib python processors    installdir  lib python    processors    
  customization of fast configuration files  you have to customize the following two files   qt config xml    do the following steps on every node of your multi node environment  open the file  installdir  etc config data qrserver webcluster etc qrserver qtf config xml for editing  search for  parameter name  trueterm  value  true    insert the following line above the line from step two    parameter name  datetimeresolution  value  second       if you have installed instream with a license without spell checking features  hence have not chosen any languages during installation  you have to remove all occurrences of the following tokens    instance ref name  didyoumean     instance ref name  didyoumeanfql     instance ref name  antiphrase       save and close the file     nodeconf xml  do the following steps on every node on which you have the anchor service installed  open the file  installdir  etc nodeconf xml remove the line  proc anchorserver storage  proc  save and close the file  start fast services and finalize installation  now you are ready to start fast instream for the first time  start fast instream on every node of your environment with one of the following methods  please refer to the instream installer guide for prerequisites running nctrl   on a windows system  start the fast instream service on a unix system start the nctrl script   after instream services have started  open a browser and enter http    adminhost   adminport   replace  adminhost  and  adminport  with the settings of your admin installation  default would be localhost           open the system management page  if you find a configured crawler on one of the hosts and you do not have a license with enabled crawler service  remove the crawler  open the collection overview page  choose create collection  by default the collection is named  coremedia   if you choose another name  you have to change it in contentserver properties in your content server installation accordingly   the collection should have the following properties  
   property value name coremedia description default collection selected cluster webcluster selected pipeline coremedia  webcluster  selected data sources none  
  now  the installation and configuration is completed  
  customization 
   property value default description filesystem listener class name  registers a custom implementation of com coremedia cap webdav filesystem filesystemlistener which is notified when a document property is written with webdav  see the api documentation for details   
  the typical architecture of an editing service web application inside the portal consists of the following parts    a portal with an installed portlet a web application container with a portal application containing the editing services functionality  usually a content  and a workflowserver completes the picture   the picture below visualizes the architecture  
  the above mentioned components interacting together  how they interact and where they are deployed is described in this section    two kinds of editing service use cases are distinguished   a pure editing services web application  and  a pbe enabled web application   both alternatives uses editing services  the deployment of the pure editing services  web application consists of an editing services  web application template which is modified for portal purposes  the user access directly the editing services web application by accessing the web application with the portlet  the submitted editing forms are directly processed by the editing services framework    for editing services with pbe a bit more complex deployment needs to be considered  in this case the user accesses the web page inside the portlet and has the opportunity to edit content directly in the  preview   the deployment and interaction is therefore a bit more complex as in the first use case    the picture below shows a typical installation and interaction of a pbe enabled editing services  web application  the portlet is running in a portal and the portal application runs as a web application inside a web application container  a typical user request passes several stages which are marked by numbers in the picture   
  this section describes the concepts which are used for editing services web applications in portal environments  some concepts are only described very brief  because they are described in other chapters in more detail  a reference will be given in that cases   
  in this context a toolbar is a html element which is rendered into the markup  it contains icons which triggers the execution of actions when they are clicked by an user  the toolbar is rendered by the toolbarrenderer  the following picture shows the default view of the rendered toolbars in an web page  

  the contextmenurenderer is derived from toolbarrenderer and therefore uses the rendering algorithm defined by that class    rendering of the actions  the actions are rendered with icons and text within a context menu  an execution triggered by an user  would submit a form to the actionexecutioncontroller which executes the selected action on the server  
  the toolbarrenderer acts as a default implementation which might be overridden  methods which are candidates for overriding are those who are prefixed with  render   please have a look at the java doc for the class toolbarrenderer  package  com coremedia easyedit  for details   rendering of the actions  as mentioned before  the actions are usually rendered as icons in the toolbar  under the hood  the action is rendered as a form which points to an actionexecutioncontroller which is responsible for executing the chosen action  the renderer encodes the action name and the target  usually a contextinfo object  as hidden input fields into the form  when the user triggers an action execution by clicking on an icon in the toolbar  the form is submitted and handled by the actionexecutioncontroller  
  to combine the portal way of managing views with editing content you can use  editingservices in a wizard like manner  wizards are sole templates views  viewed as html pages one after another  which can link to edit actions   in order to realize these wizards  the editingservices needs to know the uri where it should redirect after finishing the editing  this is done by editingservices by using the referrer header of the request  this header is used in conjunction with a special navigationhandler which redirects to the page where the editing process was started  see the configuration section below    a wizard menu is a template which shows a set of actions in menu like manner  the picture below visualizes this concept    
  the picture above shows the request flow if the user clicked a button inside the pbe context menu  again the content portlet receives the request and forwards it to the backend  i e  the portal application  in this case the counterpart of the contextmenurenderer  the actionexecutioncontroller  is receiving the request  also this controller is described in more detail in the next sections  the actionexecutioncontroller is responsible for reacting on the selection of the user  this is done by executing actions  which  are also described in the next sections  the execution of the actions is part of the editing services framework  the result of the actionexecutioncontroller is defined by the actions and is usually a redirect to another page  that page is then again rendered in the portal  
   right affected operations read read content write write content delete move content to or from the recycle bin  destroy content  mark or unmark content for deletion or withdrawal  approve approve places and versions publish publish content supervise assign rights rules to content  
  instances of the class com coremedia cap content authorization right represent the rights defined here  right objects are readily provided as constants  but also be created from shorthand characters  the rights set to be withdrawn and set to be deleted are aliases for the delete right   please have a look at the administration and operation manual for a more detailed discussion of rights and for a specification of how rights are derived from rules  that manual refers to the so called folder right  which is represented in the unified api as a combination of the write right and the delete right in rules that apply to the folder document type   checking rights  the rights checks are performed by the methods mayread content   mayapprove content   and the like  while most checks depend only on the given content object  the maycreate       method must also be informed about the document type to be created   some of the methods also take the content s current state into account when computing the rights  for example  maycheckin content  will only return true when the content in question is actually checked out and it takes into account that the user who checked out the content has special rights when it comes to checking it in   there are convenience methods for checking an entire collection of content objects with one call  such methods only grant a right if it would be granted on each individual content  there are generic mayperform       methods  which are passed a right object that denotes the actual operation to check   normally  the rights are checked for the user of the current session  but it is possible to specify a set of groups and compute the rights assuming the user is a member of exactly these groups   setting rights rules  rights checks are based on rules  the accesscontrol service offers methods for retrieving all rules or a subset thereof as a collection of rule objects  rule objects are a compact representation of all parameters that make up a rule  a content  a type  a group  and a rights mask  they do not provide modifying operations themselves  instead  the accesscontrol service provides methods for creating  modifying  and deleting rules   using the accesscontrol service  it is also possible to check whether a rule already exists  furthermore  you can retrieve all rules that apply to a certain content or group  respectively  
  you use java     with sun os  components do not respond on request  the cpu load of the components is high  the thread dump shows threads which use nio classes   
  possible cause   problems with the corba orb   possible solution   add the following line to the pre config jpif file in  installdir  bin  of the affected components  so that all components started from this directory  e g  server tools  have the workaround in use    dcom sun corba transport orbusenioselecttowait false 
   element attribute description server type   the type of the server for which the license is valid  possible values are   production  the content server publication  the master live server live  the slave live server property name   the aim of the property  possible values are   licensed to  the customer to which the system is licensed  workflow  defines if the programmable workflow is licensed   enabled    analytics  defines it the analytics engine is licensed   enabled    id  the unique id of the license   value the value of the property  the possible values depend on the name attribute   valid from the starting date of the validity of the license   until the end date of the validity of the license   grace the starting point of the grace period   release the coremedia release for which the license is valid   host the host name for which the license is valid   ip the ip address for which the license is valid  license service the name of a service which might connect to the server   concurrent users the maximum number of simultaneously allowed sessions of this service   named users the maximum number of users which are allowed to be allocated to the service   multiplicity the maximum number of sessions a user is allowed to open   
  if you want to use the coremedia webeditor with internet explorer   you have to use the following security settings for optimal operation  select tools internet options from the internet explorer menu bar and select the security tab  select low or medium low security level for the required zone  click  custom level     disable the option allow websites to open windows without address or status bar below miscellaneous  enable the option allow programmatic clipboard access below scripting  enable the option allow websites to prompt for information using scripted windows below scripting  click  ok  to close the windows    now  you can start working with the webeditor  
  the following sections discusses the interaction and the typical deployment of the different components of the architecture  
  the predefined top referrers report displays the top external pages that directed traffic towards a given local site  both search engines and other websites are tracked in this report  specific installations of coremedia analytics may choose to rewrite url before they are shown in this reports  for example by reducing the exact page to the internet domain only  
  interactive report drill down  the top external referrers report model provides the following three report parameters   the site parameter determines the  sub  site  the list of sites is automatically generated during report data aggregation  the number of entries parameter determines the maximum number of entries to display  the time interval parameter allows a user to select the time interval  see the performance report for time interval description and screenshots   
  the referrer report tables are used for long term tracking of external referrers that direct traffic at the local site  normally values that are written to these report tables will never be changed again  
  the dimension tables shown in the previous diagram were already discussed in conjunction with the fact tables  in the following  only the actual permanent report tables are discussed  which are marked using the  permanent  stereotype   you can see that all report tables contain an xx placeholder in their name  there is one of these tables for each time interval type as described in section   in the actual table name the xx is replaced by the interval type code   referrals xx  these tables store in the column eventcount the number of references from a referring external page to a certain site in a given interval  referrer  site and interval are identified by the columns referrer  site and eventintervalstart   totalreferrals xx  these tables store in the column eventcount the number of page views with an identifiable external referrer to a certain site in a given interval  site and interval are identified by the columns site and eventintervalstart   pagereferrals xx  these tables store in the column eventcount the number of references from a referring external page to a certain local page in a given interval  referrer  page and interval are identified by the columns referrer  pageid and eventintervalstart   totalpagereferrals xx  these tables store in the column eventcount the number of page views with an identifiable external referrer to a certain local page in a given interval  page and interval are identified by the columns pageid and eventintervalstart  
    click  browse  to choose the required license file  the file  licensefile  will be copied into the directory  coremediahome  properties corem and will be renamed to license zip during installation   if you have entered no file or the file can not be found  you can continue with the installation anyway  however  the server can only be started if a license file is in this folder and with the name assigned to the parameter cap server license in the file      coremediahome   properties corem capserver properties   
     enter the values for the editor configuration in the appropriate fields and click  next    the next dialog windows configure the publisher  if you have chosen the multi site server installation you will be asked for the number of publication targets   
  the number of publication targets defines the number of live servers you want to use      enter the number of publication targets you want to use   for each publication target  the following window opens up  here you have to configure the target   
  configure the publication targets in the publisher properties  the parameters have the following meaning   publisher target  n  name  this property defines the unique and permanent name of the publication target  once set  you cannot change it anymore  it is used for lookups during localization  publisher target  n  display name  this property defines the name which is shown to the user  when no other localization information is available  the display name should be unique but may change during operation  publisher target  n  ior url  this property defines the location of the  n  th live server you want to publish to  publisher target  n  folders  this property defines the top level folder  name or id  you want to publish to the  n  th publication target  you can enter more than one folder  separated by commas  once a folder is assigned to a publication target  it must not be reassigned to another target  otherwise  inconsistencies between content management server and live server will occur      enter the appropriate data into the fields   if you have chosen to install a single site server then the two previous windows will be skipped and only the following window opens up for publisher configuration   
  the url of the live server is entered in the file publisher properties with the parameter publisher target ior url  the publication process of the publication server obtains the ior address of the master live server from this url      in the field publisher target ior url  enter the url of the master live server  in general it is necessary to replace the entry  localhost  with the correct computer name  continue the configuration by clicking  next    now  you will be asked  if you want to configure the ldap active directory  
      click  yes  if you want to configure ldap now  the following window opens      if you click  no   the installation of the content server is almost finished   
     enter the host name  port number and domain of the ldap ad server you want to use  press the  yes  button to proceed with the configuration of ldap ad   the next window pops up for more ldap ad configuration  
     enter the user and the password for the connection to the ldap server  click  next  to continue   
     the installation is complete  the next window asks you to finish it   
     click  finish  to finish the installation of the coremedia content server   
       choose if you wan to enable the full text search and the coremedia search engine feeder   now you will be asked for the licence file     click  browse  to select the license file  during installation the file  licensefile  will be copied into the directory  coremediahome  properties corem and renamed to license zip      if no file is entered or the file is not found  the installation will continue  however the server will only run afterwards if a license file is present in the folder and with the name assigned to the parameter cap server license in     coremediahome  properties corem capserver properties   
  adjust configurations for database connection in sql properties  the parameters have the following meaning   sql store driver  this parameter references the jdbc driver of the selected database  the driver is database specific  sql store url  this parameter gives the url where the live server can reach the database  sql store user and sql store password  these parameters hold the information about the database user  sql store dbproperties  this parameter references a database specific configuration file in the directory   properties corem  configuration files for all supported databases are supplied and contain special information for the particular database  they must not be changed  the default file names are  db  properties for a db  database  mssql properties for a microsoft sql server and oracle properties for an oracle database      enter the necessary data  if the database is installed on a different computer from the server you have to replace  localhost  with the computer name in sql store url  if you are not using an oracle database  the other entries also have to be adjusted  continue with the configuration by clicking  next    now you will be asked to configure capclient properties   
       enter the url of the master live server in replicator publicationiorurl  in general  you have to change the given entry  click  next      
     click  finish  to finish the installation of the coremedia live server   
    select  yes  or  no       if you choose yes      tomcat will be installed and the ads will be installed in   webapps of the tomcat installation   no     only the ads context will be installed  you have to integrate these components in the servlet engine of your choice manually    
    select  yes  or  no       if you choose yes      tomcat will be installed and the proactive delivery server will be installed in the  webapps directory of the tomcat installation   no     only the proactive delivery server context will be installed  you have to integrate it into the servlet engine of your choice manually    
      click  yes  if you want to install tomcat   
  now you will be asked for the destination directory etc  as described in the  general installation information  chapter  afterwards  you will be prompted to configure the wes  at first you might configure the server xml file   
    enter the ports of the tomcat installation into the appropriate fields and click  next    now you will be asked for the configuration of capclient properties and workflowclient properties   
    select  yes  or  no    if you choose yes  tomcat will be installed and the portal template and development tools will be installed into the  webapps directory of the tomcat installation  no  only the portal template and developer tools context will be installed  you have to integrate it into the servlet engine of your choice manually    
  the coremedia content server has several modes of operation  or run levels   these run levels determine which programs can connect to the server and which operations can be executed on the server  each mode has the abilities of the previous mode  maintenance administration online   the following modes are available   offline  the state when the server starts  shuts down or does not run at all  maintenance  the server is accessible for maintenance or debugging purposes  only the standard server tools can be used  administration  the server can be managed by jmx  the publisher user may log in  in the case of a replication live server  replication starts  online  all services are active  see below   all users and clients can log in   the following services are active in the various server run levels   maintenance      corba communication     license manager    login for  admin  and  debug  services    internal httpd to deliver the server ior    access to resources administration      replicator  on replication live servers     login for publisher online      feeder for coremedia search engine     login for all other clients and programs  like editor  importer and file system view  there are two possibilities to reach a particular run level   start in a particular run level     start the server in a particular run level with the command     cm capserver start  r  maintenance   administration   online     allowed run levels are maintenance  administration and online  the default level is online   switch to a particular run level     to switch a run level in a running server  execute the command     cm runlevel  u admin  r  runlevel   g  grace period     after the  grace period   in seconds   the server changes to the run level given by  runlevel      during the grace period  you can cancel the run level switch with the following command     cm runlevel  u admin  a    clients logged on the server are informed at regular intervals when they will be logged out due to a  down  switch     the coremedia editor warns users with a dialog box when the server shuts down     shut down the server with the command cm runlevel  r offline  g  grace period   and not with cm capserver stop   
   property description publisher target  n  user the user which is used by the publisher to log in to the master live server  publisher target  n  domain the domain of the user which is used by the publisher to log in to the master live server  publisher target  n  password the password of the user which is used by the publisher to log on the master live server  make sure  that you change the password of the existing user publisher on the master live server or that you newly create  this user on the master live server  publisher target  n  ior url the url where the publisher can obtain the ior of the master live server  publisher target  n  name the permanent and unique name of the publication target  this name is used for target identification in the apis and in jmx  changing this name may lead to unexpected failures in clients that are not properly stopped  changed  and restarted  publisher target  n  display name the display name is shown to users when no localized information about a publication target is available  display names  too  should be unique  but they may well change to better illustrate the current uses of a publication target  publisher target  n  folders   the property folders typically references exactly one top level folder  either by name or by its numerical id  if more than one site is generated from a single live server  multiple top level folders may be given  separated by commas  for example  the following configuration line would be correct    publisher target   folders internet download       it specifies three folders that are mapped to a single target  one of which is the folder with id       listing folders numerically can be helpful when a folder must be renamed  but should not leave its publication target  once you have assigned a folder to a publication target  it must not be reassigned to another target  doing so would result in inconsistencies between content mangement server and master live server   
   property value default description publisher local user string publisher the user name for logging in locally to the content management server  publisher local domain string  the domain for logging in locally to the content management server  publisher local password string publisher the password for logging in locally to the content management server  publisher target ior url http    liveservermastercomputername   port  coremedia ior n a the url where the publisher can obtain the ior of the master live server  required  single site mode only   publisher target user string publisher the user name for logging in to the master live server  single site mode only   publisher target domain string  the domain for logging in to the master live server  single site mode only   publisher target password string publisher the password for logging in to the master live server  single site mode only   publisher target  n   ior url user domain password   see above   see above  login data for the publisher  these values correspond to the four properties above  but different numeric values of n are used to distinguish publication targets  multi site mode only   publisher target  n  name intranet publication target  n  the permanent and unique name of the publication target  once set  it should never be changed  as this name is used for target identification in the apis and in jmx  multi site mode only   publisher target  n  display name intranet value of publisher target  n  name the display name is shown to users when no localized information about a publication target is available  display names  too  should be unique  but they may well change to better illustrate the current uses of a publication target  multi site mode only   publisher target  n  folders comma separated list of names and or ids of base folders  e g   intranet  download        the base folders that are assigned to a publication target  this property typically references exactly one top level folder  either by name or by its numerical id  if more than one site is generated from a single live server  multiple top level folders may be given  separated by commas  when indicating a folder by name  that name is blocked for rename operations on the top level folder  once you have assigned a folder to a publication target  it must not be reassigned to another target  doing so would result in inconsistencies between content management server and master live server  multi site mode only   publisher enablebypasspreviews true   false true whether publication previews bypass   true   or not   false   the publication queue for faster response times  publisher autoextend latestapprovedversion true false false   this property affects the automatic extension of publication sets  the default behaviour   false   is as follows   if the referenced document is not published yet  publish its earliest approved version  if the referenced document is already published  do nothing  if set to  true   not the earliest but the latest    newest  approved version is published  publisher autoextend updatelinkeddocuments true false false this property affects the automatic extension of publication sets  by default   false   only direct linked and approved documents are added to the publication set  if set to  true  all linked documents are recursively added to the publication set  the recursion stops when a version is already published and may lead to surprisingly large publication sets  setting updatelinkeddocuments implicitly also sets latestapprovedversion  publisher destroyintermediateversions true   false true whether intermediate document versions between two publications will be destroyed   true   or not   false   on the content management server  example  version   of document a was published  in the meantime  the versions         and   have been created  when you now publish version    the versions         are destroyed and only version   and   remain on the content server  publisher destroyolderversionsonliveservers true   false true whether older published versions should be destroyed   true   on the master live server  that is  only two published versions  the current and the one before  of each document remain on the master live server  only change if you have a valid reason  publisher priority gui editor           the priority of publications requested through the coremedia editor  default      publisher priority scripting           the priority of publications requested through either the unified api or the scripting api  default      publisher priority generator           the priority of publications requested through the ads  default      publisher priority jpython           the priority of publications requested through jpython code  obsolete  default      publisher priority importer           the priority of publications requested through an importer  default      publisher priority unknown           the priority of publications of unknown origin     
   directory description coremedia  context home directory coremedia admin jsp pages for administration  only after manually moving the directory from web inf up  coremedia develop jsp pages for development  only after manually moving the directory from web inf up  coremedia templates templates coremedia web inf context environment coremedia web inf lib required libraries coremedia web inf lib xml dtd used by the system coremedia web inf properties corem properties of the active delivery server coremedia web inf properties management the files for jmx management  jakarta tomcat logs localhost log  date  the default active delivery server log coremedia web inf config bsh active delivery server configuration coremedia web inf web xml web application deployment descriptor coremedia generator cache directory of the active delivery server coremedia generator tmp build unfinished pages coremedia xsl stylesheets  optional   
   class description jtextfieldstringeditor   simple text field  this is the default editor   the jtextfieldstringeditor can be configured with the following attributes   fontname  name of the font  this property is used for setting the font of the text field in the coremedia editor  it should be noted that the fonts depend on the particular configuration of the java environment  if the font entered does not exist  all available fonts are shown in the log  fontsize  size of the font  this parameter adjusts the font size of text field in the coremedia editor  the size can be set between    and     if there is no exactly matching character set for this font size  the font is scaled accordingly  this can cause an awkward appearance of the font  spellcheckingenabled  false  this parameter disables spellchecking for the text field in the coremedia editor  spellchecking is enabled by default  comboboxstringeditor   selection list  if this class is used  the attribute fixedchoice can be added to the  property  element   false  will allow you to type own entries in the combo box   true  is default and will allow only the predefined items  you can limit the number of characters allowed to enter by using the attribute columns   example    property name  copiesto  editorclass  comboboxstringeditor  columns        if you are using this attribute you have to take care for two things     do not enter a  historyitem  or  functionitem  with a length longer than defined in columns      be sure that no strings longer than defined in columns have been stored in the repository before  best practice would be to configure a validator to guarantee correct server side storage     you can disable spell checking using the attribute spellcheckingenabled  false   spellchecking is enabled by default   the selection options can be added with three different multiple child elements      historyitem value  abc     the values defined in this element are shown as a combo box      functionitem  the attribute class defines the class which should be used  the attribute label  optional  defines the name of the function item  own classes must extend the abstract class hox gui editor combobox functionitem      labeleditem value      label  one minute       the values defined in this element are shown as a combo box  in the combo box you will see the localized version of the value of the label attribute  localized via classes hox corem editor toolkit property property properties   the value used is the one defined in value   example    property name  name  editorclass  comboboxstringeditor       functionitem class  myfunctionitems mystringclass  label  select me       property  jcheckboxstringeditor a check box  if the box is chosen   true  will be saved  otherwise  false   jpasswordfieldstringeditor text field which allows to enter a password  thus the input characters will be displayed hidden  jtextpanestringeditor   text field with more than one line  i e  if the length of your string exceeds the width of your string text field a new line will be started  internally  this will not be stored as a line break  you can insert line breaks hitting the  return  key  the length of the text is limited to the length defined in the document type xml file   the jtextpanestringeditor can be configured with the following attributes   fontname  name of the font  this property is used for setting the font of the text field in the coremedia editor  it should be noted that the fonts depend on the particular configuration of the java environment  if the font entered does not exist  all available fonts are shown in the log  fontsize  size of the font  this parameter adjusts the font size of text field in the coremedia editor  the size can be set between    and     if there is no exactly matching character set for this font size  the font is scaled accordingly  this can cause an awkward appearance of the font  spellcheckingenabled  false  this parameter disables spellchecking for the text field in the coremedia editor  spellchecking is enabled by default  querystringpropertyeditor   stores a query string following the unified api query syntax  this syntax allows to use  and    or  and  not  operators and is more powerful than the query syntax in the standard search window  this property editor adds two buttons to the coremedia editor for creating and executing the query  the property editor uses the query editor web extension to edit the query string in a separate browser window  if executed the query result is displayed in a result window similar to the result table in the standard search window  the property editor can be configured with every string property that is large enough to hold the query strings  be aware  that a string property in a document type is always limited in size  but a user can create queries of any size    the querystringpropertyeditor has no attributes to configure  beanquerystringpropertyeditor   stores a query string from the bean query editor that is used for content rules  this property editor adds two buttons to the coremedia editor for creating and executing the query  the property editor uses the query editor web extension to edit the query string in a separate browser window   be aware  that a string property in a document type is always limited in size  but a user can create queries of any size    the beanquerystringpropertyeditor has no attributes to configure   
  the elements and corresponding attributes allowed in the xml configuration files are defined in the coremedia editor dtd file  in fact a  pseudo  dtd  the dtd is called  pseudo  because it contains positions at which it can be extended  depending on the classes used  these points are shown by the placeholder  varies  you find the dtd in the  coremedia installation directory  lib xml of your coremedia content server installation   
  the  preview  element is deprecated  use  webcontext  instead  
  the  browser  element is deprecated  use  webbrowsers  instead  
   webbrowsers   parent elements   editor   child elements   webbrowser      editor            webbrowsers                 webbrowsers       editor     you can use the  webbrowsers  element to configure web browser definitions for web extensions such as the preview or differencing with the  webbrowser  child element  the  webbrowsers  element has no attributes  
   webbrowser   parent elements   webbrowsers      webbrowsers         standard windows ie installation        webbrowser id  internet explorer  os  win     command  c   program files  internet explorer  iexplore exe  s            ie installation in german locale on windows        webbrowser id  internet explorer  os  win  language  de     command  c   programme  internet explorer  iexplore exe  s      webbrowsers    this element configures web browser installations for a given locale and operating system  web extensions  see  webextension   may open several web browsers  preview  or the first matching web browser  query editor and differencing   therefore the order of  webbrowser  elements is important   the example above configures two windows web browsers  one with language attribute set to  de   if a web extension running on german locale wants to select a browser  it should open the german browser  a precedence list defines which browser is selected  os language country no attribute  in the example above  for both browsers the os attribute has been set but the german browser is selected because it has a language attribute that matches the language of the german locale  if you delete the os attribute in the german browser configuration  the other browser will be opened       
   attribute description id the name of the browser  e g  internet explorer  use the same id for the same browser application  like firefox for all firefox configurations   os the name of the operating system or a prefix thereof  it must equal or be a prefix of the java system property os name  this attribute is optional  if not set  the command must be executable on all operating systems your coremedia editor runs on  language the language of the locale  the value must conform to a valid language in a java java util locale instance  for the english language the valid value is  en  for the german language the valid value is  de   this attribute is optional  country the country of the locale  the value must conform to a valid country in a java java util locale instance  for the u s a  the valid value is  us  for germany the valid value is  de   this attribute is optional  command   the command to start a browser with a given url on the configured operating system  for the internet explorer on an english windows installation the command looks as follows   c   program files  internet explorer   iexplore exe  s  the suffix  s is the place holder for the url to load in to the browser   optional   specifies whether this browser is optional  this feature is used by the preview web extension when doing a preview with all configured browsers  e g  by clicking the preview button in the toolbar or by selecting file preview all   the coremedia editor only shows errors for non optional browsers or if no browser could be started at all    allowed values are true and false  default is false  
  a web extension is an addition to the coremedia editor and the coremedia webeditor  a web extension is part of a standard web application in a servlet container  it displays one or more web pages and might return a result back to the invoking editor by starting a web request the editor can handle  in case of the coremedia editor the web extension can open a url to the editor s remote control with the result of the web extension call as an url parameter   coremedia cms contains three web extensions   preview   shows a preview of the selected document with different web browsers and different render urls extended query   a web gui for building a query that contains  and    or  and  not  operators and which is more powerful than the already existing query builder in the query window  bean query   a web gui for building queries for content rules  differencing   shows two versions of a document  with highlighted differences    webcontext   child elements   webextensions   parent element   editor      editor            webcontext host  webexthost  port             context  editor extensions       loginport                         webcontext          editor     the  webcontext  element configures a web application in a servlet container  therefore this element defines connection parameters  it is a container for  webextension  elements  
   attribute description class java class with no arg constructor  defaults to the value hox corem editor web singlesignonwebcontext  other classes must be sub classes of the class hox corem editor web webcontext  host the name of the hosting computer where the web application runs  port the port of the web application where the web extension runs  context the name of the web application where the web extension runs  for the query editor and differencing  the name is editor extensions  protocol the protocol part of the url  defaults to  http   loginport the port for the ssl connection which is used for single sign on  this port is optional  if the web extension does not require authentication  currently preview does not require authentication but difference and query does  loginpath the path for the ssl connection which is used for single sign on  defaults to  servlet login  not needed if the web extension does not require authentication   
   webextension     child elements   pattern   parent elements   webcontext      webcontext host  localhost  port        context  editor extensions    loginport              webextension name  query         webextension name  difference      webcontext     the  webextension  element configures a part of a web application which is used to add functionality to the coremedia editors  
  the  difference  element is deprecated  use  webcontext  for the configuration of differencing  
   attribute description class java class with no arg constructor  if not set  the class depends on the attribute name  if the name attribute is set to  query  the class hox corem editor web query is used  if name is  beanquery  the class hox corem editor web beanquery is used  if name is  difference  the class hox corem editor web difference is used and if name is  preview  the class hox corem editor web preview is used  other names will produce an error  if class is not set   name   the name of the web extension  existing names are   preview   the preview of documents or folders difference   the differencing engine query   the extended query editor beanquery   the bean query editor path the path to the web application without context and url query part  open   use this attribute only with the preview web extension  it determines which browser s  are opened  when you call the preview from the toolbar  if open is set to  all   then all defined browsers are opened  if you omit the attribute or set it to  last   default   then the last selected browser is opened  if you have selected no browser before  the first configured browser is opened  using the preview menu item from the file menu  you can always choose the browser to use from all configured browsers    webextension name  preview  open  all    
   pattern   child elements    parent elements   webextension      webextension name  preview        pattern id  default preview  browser  internet explorer         pattern id  document de  browser  internet explorer         pattern   p    h  n de  i html         pattern id  document en  browser  internet explorer         pattern   p    h  n en  i html      webextension     the  pattern  element is optional and configures two things     one or more browsers one or more url patterns  if no  pattern  element is configured  the web extension uses one or more default browsers with the default pattern string  difference and extended query use the first configured web browser that matches the user s locale  preview uses all browsers that match the user s locale when all browsers should open   
   attribute description id the unique name of the pattern  defaults to the browser attribute  browser the id of the browser to invoke  the value must match an id attribute in element  webbrowser   pattern   a url pattern string  defaults to  p    h  n  f  every web extension may use different patterns with different place holders  the place holders have the following meaning   common to all three web extensions   p  protocol h  host name n  port number f  rest of the url u  path including context name but without url query  preview   i  document id v  document version f expands to  id  i  if version     otherwise to  id  i   version v   i  expands to the url encoded string id of the document  difference   i   first document id v   first document version iv   formatted string of first document id and version i   second document id v   second document version iv   formatted string of second document id and version f expands to  co   iv    co   iv    extended query   o  remote control port q  query string l  locale   f expands to  locale  l   port  o   query  q     
  this chapter describes how to configure  enable and use the database message service  the database message service is a light weight alternative for using a jms service  in contrast to a jms solution it has much less features  thus it should be used in situations where only a simple messaging mechanism is needed   the  database message service receives messages  key value pairs  from a proactive delivery server  pads  by a databasemessageuploader and stores these messages in a database  the database message service offers a http based service for receiving the messages  this service is provided by a servlet that runs in the context of the pads web application  clients can send requests to the servlet to subscribe to the service  afterwards the client can contact the servlet to receive all messages that have been generated since the last login of the client  the detail description of the interface for accessing the servlet can be found in the delivery developer manual  the database message service also provides a receiver as a client of the servlet  
   property optional description driverclassname no the driver class used to connect to the database   oracle jdbc driver oracledriver for oracle  url no   the url used to connect to the database    e g  jdbc oracle thin  localhost      oracle   username no the user used to connect to the database of the database message service  password no the password used to connect to the database   
  note that there is no authentication necessary to subscribe to the message service  in order to have some sort of authentication you can make use of firewalls or the authentication mechanisms of the web application server in which the service is running   
  several coremedia cms components provide jmx access for management and monitoring  they feature a jsr     based jmx connector server  which you can use to connect with any compliant jmx console  such as jconsole  jconsole is bundled with sun s jdk      have a look at http   java sun com j se       docs guide jmx index html for an introduction to jmx  currently  the following components are enabled   coremedia content server with publisher and search feeder coremedia workflow server coremedia active delivery server coremedia content application engine  have a look at the corresponding component chapters in order to learn how to enable jmx monitoring  how to connect with jconsole and to find a reference of the managed properties   
   protocol entry jmxmp   service jmx jmxmp   localhost  port   replace  port  with a free port  hessian   service jmx hessian    contentserverhost   contentserverport  coremedia jmx hessian  or for a secure ssl connection  service jmx hessian ssl    contentserverhost   contentserversslport  coremedia jmx hessian ssl  replace  contentserverhost  and  contentserverport  or  contentserversslport  with the settings of the properties cap server http host and cap server http port or cap server https port in the contentserver properties file    
  you have to enter the code in one line   please adjust the following two entries according to your truststore configuration    djavax net ssl truststore  example coremedia     conf  truststore   djavax net ssl truststorepassword changeit  the truststore file is a keystore file for the internal communication of the active delivery server   if you want to output more information about the https transmission in the log file   servletcontainerhome   var logs httpd out  you can add the following line to the file   java vm args   java vm args    djavax net debug ssl handshake data trustmanager   entry in  adscontext  web inf config bsh  please enter the following lines in the file  adscontext  web inf config bsh below the line in which the  logfacility  is set   the port number must correspond to the port number defined in server xml  
  adjust the entries port  port number with which the browser communicates with the active delivery server   keystorefile and keystorepass to your own settings  the key required for https communication is stored in the keystore file  the path to the keystore given there must match the path entered here   entry in  servletcontainerhome  bin httpd jpif  insert the following lines at the end of the file     
  example  
  this chapter describes how to configure  initialize and start the dbmessagereceiver  the dbmessagereceiver is a service that receives messages from a database message service  it is a separate application that runs on the host where the generated messages are needed  it can also be used as an object in your own application  more details can be found in the delivery developer manual   it regularly checks for new messages with the database message service and receivees all new messages which will be buffered before sending them to an uploader  in order to supply the dbmessagereceiver with content  you need to configure a dbmessageuploader in the proactive delivery server and enable a database message service  including the dbmessageserviceservlet    
  you can configure the dbmessageservicereceiver using two files located in the properties corem directory    dbmessagereceiver properties     this file contains the log configuration and the name of the xml file used for dbmessageservicereceiverconfiguration   dbmessageservice xml     this file is used for the actual dbmessageservicereceiver configuration    configuration of logging   logging configuration is done in the dbmessagereceiver properties file similar to the jmsreceiver  see section   the dbmessageservicereceiveruses apache log j for logging  please see http   jakarta apache org log j docs documentation html for configuration options  by default  the dbmessageservicereceiverlogs to the file var logs dbmessagereceiver log    configuration of the xml configuration file   use the property dbmessagereceiver config of the dbmessagereceiver properties file to configure the used spring bean definition file  as a default properties corem dbmessageservice xml is used    defining the database message service to receive from  the configuration for the dbmessageservicereceiver is done in the dbmessageservice xml file using the dbmessageservicereceiver element which uses the following attributes  
   attributes  description  providerurl the url to access the database message service  servlet    subscriptionname the name by which the dbmessageservicereceiver subscribes to a database message service  pollinginterval the interval in milliseconds between to attempts to receive messages   
  start the dbmessageservicereceiver from the command line    bin cm dbmsgreceiver start  options    or start the dbmessageservicereceiver as a foreground process    bin cm dbmsgreceiver run  options    the following options are supported     p  property bundle       use a different configuration bundle for the dbmessageservicereceiver  default is  corem dbmessagereceiver  which corresponds to  properties corem dbmessagereceiver properties     d      do not buffer events  without this option the uploader gets events not until a commit message marking a consistent state was received    r      subscribe a receiver with the database message service    i  file         initialize the attached uploader with all values contained in the given file before receiving starts      
  in this section  you will find tables with all properties and actions manageable via jmx  the entries below the jmimplementation key display information on the jmx implementation which will not be described here  
  starting jconsole  jconsole needs the jmxremote optional jar file and some files for the hessian protocol for operation  these files are installed with the coremedia content server in the lib directory  start jconsole as follows  replace  pathtojava    pathtojar  and  pathtokeystore  with the paths to your java installation  to the lib directory of your content server installation and to the keystore for the ssl connection respectively  you might define environment variables for these paths for your convenience   for jmxmp only    pathtojava  bin jconsole  j classpath   j pathtojava  lib jconsole jar   pathtojar  jmxremote optional jar  for hessian    pathtojava  bin jconsole  j classpath   j pathtojava  lib jconsole jar   pathtojar  mx j jar   pathtojar  mx j remote jar   pathtojar  mx j tools jar   pathtojar  hessian jar  pathtojar  jmxremote optional jar  for hessian with ssl    pathtojava  bin jconsole   j djavax net ssl truststore  pathtokeystore    j classpath   j pathtojava  lib jconsole jar   pathtojar  mx j jar   pathtojar  mx j remote jar   pathtojar  mx j tools jar   pathtojar  hessian jar  pathtojar  jmxremote optional jar      select connection new connection  a new windows opens up  select the advanced tab  enter the url of the connection server in the field jmx url  if you use hessian you have to enter the user name of an coremedia administrator in the field user name  if the user is not in the empty domain you have to add an     and the domain name to the user name  e g  admin coremedia   if you want to allow non administrators  you have to change the value of the property workflow server management admins only in the file workflowserver properties to  false   if you use hessian enter the user s password into the field password  click connect  a new console window opens   now  you can start working  
   protocol entry jmxmp   service jmx jmxmp   localhost  port   replace  port  with a free port  hessian   service jmx hessian    workflowserverhost   workflowserverport  workflow jmx hessian  or for a secure ssl connection  service jmx hessian ssl    workflowserverhost   workflowserversslport  workflow jmx hessian ssl  replace  workflowserverhost  and  workflowserverport  or  workflowserversslport  with the settings of the properties workflow server http host and workflow server http port or workflow server https port in the workflowserver properties file   
  the coremedia active delivery server provides jmx access for management and monitoring via jmxmp   enabling jmx support  in order to enable jmx support you have to remove the comment tags from the following lines in the web xml file in the  tomcathome  webapps coremedia web inf directory    init param     param name agentservicefactory  param name       param value com coremedia management generator jmx      jmxgeneratoragentservicefactory  param value    init param   init param     param name agentfile  param name     param value  web inf properties management jmx     capgenerator jmx agent xml  param value    init param   init param     param name mbeanfactory  param name     param value com coremedia management generator jmx    jmxgeneratormbeanfactory  param value    init param   you can configure the default port and domain of the jmx server in the capgenerator jmx agent xml file in  tomcathome  webapps coremedia web inf properties management jmx    agent url  service jmx jmxmp   localhost        domain  com coremedia generator    starting jconsole  jconsole needs the jmxremote optional jar file for operation  these files are installed with the coremedia active delivery server in the  tomcathome  webapps coremedia web inf lib directory  start jconsole as follows  where  jdk installdir  is the installation directory of your java   sdk    jdk installdir  bin jconsole  j classpath   j jdk installdir  lib jconsole jar   pathtojar  jmxremote optional jar   select connection new connection  a new windows opens up  select the advanced tab  enter the url of the connection server in the field jmx url  click  connect   a new console window opens   now  you can start working   
  if you want to install a dbmessageservicereceiver proceed as follows  select the coremedia proactive delivery server option and click  next    the next window pops up   

  now you can select the dbmessageservicereceiver  see chapter  for details on this component      select the component and press  next       now you will be asked for the destination directory etc  as described in the  general installation information  chapter  after the files have been copied  you will be prompted to configure the dbmessageservicereceiver     click on  no  because further configuration has to be done manually in the corresponding property files in the directory   properties corem    
     the installation is complete     click  finish  to finish the installation of the dbmessagereceiver   
  by default  the jmx connection to the coremedia components is not secured  be sure to use a firewall to protect the connection port or enable authentication in the jmx server  
  the database message service receives message objects from a proactive delivery server via the dbmessageuploader  the received messages are stored in a database and are available for users that are subscribed to the service  a servlet  the dbmessageserviceservlet  acts as the public interface of the database message service   there are different ways of receiving messages from the servlet   the use of the dbmessageservicereceiver as a standalone application  see the administration and operation manual   usage of a dbmessageservicereceiver instance within a custom application   in any case the servlet returns instances of the class dbmessage  the class dbmessage contains a unique id  a key value pair and a type  the unique id of a message is set by the database message service  the key value pair is the actual payload of the message  the message type represents a pads event type and thus can be on of the following   update delete commit  in order to receive messages from the servlet  a client has to subscribe to the database message service with a unique userid  afterwards the client can receive any new message that arrives  it should do so by asking first if there are any new messages for the subscribed user on the server  it can then receive the messages and process them  after all the messages have been processed the client needs to acknowledge the highest message id it received  this is very important as this value determines which messages need to be send to the client by the server the next time it requests new messages  
  the dbmessageserviceservlet is an interface to the services of the database message service  it takes http requests and answers with a http response  it contains requested data or just a http status code indicating whether a request was successful or not  customized clients can use this servlet as an access point to the database message service    the url for accessing the servlet is formed as follows    serverurl   pathtowebapp  command  command   parameter  parametervalue    the dbmessageserviceservlet offers the following commands  
   command parameters description subscribe userid   subscribe the given userid to the database message service   if a user by this id is already subscribed  nothing changes  unsubscribe userid subscribe the given userid to the database message service  issubscriber userid check if the the given userid is already subscribed  returns a true or false string  getnumberofnewmessages userid   returns the number of new messages for the given user in a string in the response body  if the userid is not subscribed a http status code      bad request  will be returned  retrievemessages userid returns a zip stream of dbmessage objects  if there are no new messages or the user is not subscribed an empty zip stream will be returned  acknowledge   userid  msgid   with this command a user can acknowledge the that a message has been received successful      
  because commands and results are transferred using the http protocol each command will result in a http status code  possible status codes are  
   http status code explanation      ok  request was successful  result data has also been transmitted       no content  request was successful  no result data has been sent       bad request  the command sent to the servlet is known but at least one of the parameters is erroneous       internal server error  the command sent to the servlet is unknown  it could be misspelled or not implemented       not implemented  an internal error occurred in one of the services of the database message service   
  the dbmessageservicereceiver can not only be used as a standalone application as described in the administration manual but can also be used within customized applications  in this case the application contains a member implementing the interface receiver  details on the interface can be found in the javadoc of this component  this section gives a short overview of the usage of the dbmessagereceiver   an instance of a receiver should be created by a call to the receiverfactory  in order to create a dbmessagereceiver an uploader object  a client id  a url of the dbmessageserviceservlet and a boolean indicating if a buffer should be used must be provided  be aware that the uploader initialization and closing must be done by the client    once the client has a member instance of the dbmessageservicereceiver it can subscribe unsubscribe to the database message service  the receiving process can be started by calling the startreceive method  use the stopreceive method to stop the receiving process    in contrast to the jmsreceiver which completely stops when an uploader exception occurs  the dbmessageservicereceiver only stops receiving but does not exit    there are two possible sources of errors that lead to the stopping the receiving process   the uploader throws an exception to be aware of the these cases the client can register as a listener with the method registererrorhandler  an exception occurred while trying to communicate with the dbmessageserviceservlet  register as a listener with the method registerlistener to get notice about these kind of problems   a registered listener also gets notified about the number of messages that have just been received            
  the  difference  element is deprecated  use  webcontext  for the configuration of differencing  see the editor developer manual for details   
  the information contained in the statistics section are not described  because this information can only be interpreted by trained coremedia consultants who are familiar with the inner workings of the coremedia components  
  content server properties   attribute type description appdesc read only description of the coremedia system  contains version information and the component name  futurerunlevel read only the future run level which will be reached after the switchrunlevel actions has succeeded   hostinfo read only the computer which hosts the content server  httphost read only the host name of the internal http server of the content server  httpport read only the port of the internal http server of the content server  instdir read only installation directory of the content server  javaclasspath read only java class path  javainstdir read only java installation directory  jvminfo read only java jvm information  jvmprocessinfo read only java process information  the number of threads  free memory  used memory  total memory  osinfo read only information about the operating system of the host  resourcecachecapacity read write the maximum size of the resource cache  in resources   changes value of the property cap server resourcecache size in contentserver properties  resourcecacheentries read only number of resources entered into the resource cache in the last resourcecacheinterval  resourcecacheevicts read only number of cache evicts in resourcecacheinterval  resourcecachehits read only number of cache hits in resourcecacheinterval  resourcecacheinterval read write interval in seconds after which the computation of the cache statistics starts again  resourcecachesize read only the current cache size  in resources  runlevel read only the current run level of the content server  strictworkflow read write use strict workflow  editor of document is another person as the approver of the document  switchcountdown read only the remaining time of the switchrunlevel grace period       indicates no active grace period  uptime read only uptime of the server in  ms     content server operations   operation parameter description switchtorunlevel   p   runlevel to switch to  p    delay before switching in seconds   change the run level of the content server  possible run levels are   offline maintenance administration online abortrunlevelswitch  stop switching to another runlevel     publisher properties   attribute type description avpublprevtime read only average publication preview time  msec  per publication preview  avpublsize read only average publication size avpubltime read only average publication time  msec  per publication  avwaittime read only average waiting time  msec  in the queue  destroyintversions read write destroy intermediate document versions  values are  true  and  false  destroyolderversionsonliveservers read write keep only the newest version on the live server  values are  true  and  false   enablebypasspreviews read write whether publication previews bypass   true   or not   false   the publication queue for faster response times  failedpublcount read only number of failed publications  failedpublprevcount read only number of failed publication previews  lastpubldate read only date of the last publication in unix format  milliseconds since              lastpubldate read only date of the last publication in human readable format  lastpublresult read only result of the last publication  success or failed   lastpublsize read only size of the last publication  in resources   lastpubltime read only required time for last publication in  msec   lastpubltype read only type of last publication  preview or publication  lastpubluser read only user who started the last publication  lastpublwaittime read only waiting time for last publication  localdomain read only domain for content management server access  localpassword read only user password for content management server access  localuser read write user name for content management server access  publcount read only number of successful publications  publinterval read write interval  in seconds  after which the computation of the statistics starts again  publprevcount read only number of successful publication previews publicationtargetnames read only names of the publication targets if multi site publishing is used  queuesize read only queue size of the publisher  in documents    multi site publication targets   attribute type description displayname read write the display name of the publication target   folders read write the base folders which are assigned to the target  names and ids can be used  numbers are always taken as ids  iorurl read write the url of the master live server where the publisher gets the ior for connecting   name read only the unique and permanent name of the publication target  once set  it should never be changed  password read write the password used by the publisher to connect to the master live server     publisher operations   operation parameter description setpriority   p    client  p    priority    set the priority for the defined client  this operation sets the properties publisher priority  client  of the publisher properties file  the priority is an integer value from   to     and the client is an integer value from the following list       the editor gui     the scripting api     the active delivery server     jpython scripts     the importer     utilities with unified api     unknown clients getpriority p    client get the priority for the defined client     feeder properties   attribute type description documentdelay read only the maximum time in seconds between adding a document to a batch and sending that batch to the coremedia search engine  errordocumentdelay read only the maximum time in seconds between adding an error document to a batch and sending that batch to the coremedia search engine  error documents serve as placeholders for documents that could not be processed  indexaveragebatchcreationtime read only average batch creation time in the statistics interval  indexaveragebatchindexingtime read only average batch indexing time in the statistics interval  indexaveragebatchsendingtime read only average batch sending time in the statistics interval  indexbatches read only number of indexed batches in the statistics interval  indexbytes read only number of indexed bytes in the statistics interval  indexcallbacktimeout read only maximum time between sending a batch to the coremedia search engine and receiving a callback for that batch  the search engine feeder shuts down with an error if this time is exceeded  indexcollection read only the name of the collection   indexconfigservercorbaurl read only the corba url of the fast configuration server   indexconfigserverhttpurl read only the http url of the fast configuration server  indexdocuments read only number of indexed documents in the statistics interval  indexdocumentspersecond read only number of documents indexed per second in the statistics interval  indexmaxbatchbytes read only the maximum batch size in bytes  indexmaxbatchsize read only the maximum number of documents in a batch  indexmaxbatches read only the maximum number of open batches  indexmaxstatisticsinterval read only maximum interval in seconds for the computation of statistics  indexnameserverhost read only host of the fast name server  indexnameserverport read only port of the fast name server  indexopenbatches read only number of open batches  indexpinginterval read only the search engine feeder sends a batch at least every indexpinginterval seconds to keep its session to the coremedia search engine open  indexstatisticsinterval read write time interval in seconds for which the statistics are calculated   lastfailure read only date of last failure  restartaftererror read only set to true if the search engine feeder restarts automatically after errors from the search engine  restartaftererrordelay read only the time in seconds to wait  before trying to restart the search engine feeder if  retrydocumentdelay read only the maximum time in seconds between adding a retried document to a batch and sending that batch to the coremedia search engine   state read only state of the feeder  running or stopped   timestampdelay read only the maximum time in seconds between adding a timestamp to a batch and sending that batch to the coremedia search engine  uptime read only uptime of the search feeder in milliseconds   feeder operations   operation parameter description start  start the search feeder stop  stop the search feeder  
  workflow server properties   attribute type description appdesc read only description of the coremedia system  hostinfo read only installation host of the workflow server instdir read only installation directory of the workflow server javaclasspath read only classpath used by the current java installation javainstdir read only installation directory of the used java  jvminfo read only information about the used jvm  jvmprocessinfo read only java process information  the number of threads  free memory  used memory  total memory  logactions read write enable   true   logging of actions  logclientactions read write enable   true   logging of client actions  logcontentmanager read write enable   true   logging of the contentmanager  logerrorlog read write enable   true   logging of errorlog  logexpressions read write enable   true   logging of expressions  logpersistenceadapter read write enable   true   logging of the persistenceadapter  logpolicies read write enable   true   logging of policies  logprocesssweeper read write enable   true   logging of the processsweeper  logsignals read write enable   true   logging of signals  logtimers read write enable   true   logging of timers  logtransactions read write enable   true   logging of transactions  longactionsmax read write the maximum number of long actions  osinfo read only information about the operating system of the workflow server host  sessionsreapertimeout read write the interval in seconds between checks for inactive sessions  see sessiontimeout   sessiontimeout read write the time in seconds before an inactive session is closed  txidletimeout read write the time in seconds before an idle database connection is closed  txmax read write the maximum number of database connections     workflow server operations   operation attribute description clearcaches  clear the caches of the workflow server   
  the setup of a replication live server must be completed without additional restarts of the server  if the initial replication fails for any reason  you must empty the database schema and repeat the entire setup from step     if the replication does not complete repeatedly  the slave database has to be build from a backup of the master database as described later in the manual  
  all necessary files for preview based editing in the active delivery server are included in the coremedia webapp provided after installation  configuration for active delivery server webapps is done in the web inf config bsh  adapt the following lines in your config bsh       preview based editing configuration pbeconfig   defbean  pbeconfig    com coremedia pbe configuration class   pbeconfig setpreviewbasededit true   pbeconfig setwebeditoruri  http   localhost      editor     pbeconfig setremotecontroluri    http   localhost       coremedia control    pbeconfig setcontextpath   coremedia    
  active delivery server statistic data   attribute type description avdocumentcachefaults read onlya average number of document cache faults per second  avdocumentcachehits read only average number of document cache hits per second  avdocumentcachemisses read only average number of document cache misses per second  avdocumentcacheremoves read only average number of documents removed from cache per second  avdocumentcachesize read only average number of documents in the cache  avfoldercachefaults read only average number of folder cache faults per second  avfoldercachehits read only average number of folder cache hits per second  avfoldercachemisses read only average number of folder cache misses per second  avfoldercacheremoves read only average number of folders removed from cache per second  avfoldercachesize read only average nverage number of folders in the cache  avpagecachefaults read only average number of page cache faults per second  avpagecachehits read only average number of page cache hits per second  avpagecachemisses read only average number of page cache misses per second  avpagecacheremoves read only average number of pages removed from cache per second  avpagecachesize read only average number of pages in the cache  avpageobjectcachefaults read only average number of page object cache faults per second  avpageobjectcachehits read only average number of page object cache hits per second  avpageobjectcachemisses read only average number of page object cache misses per second  avpageobjectcacheremoves read only average number of page object removed from cache per second  avpageobjectcachesize read only average page object cache size   active delivery server configuration data   attribute type description appdesc read only description of the coremedia system  cacheabledefault read only if set  true   templates are cacheable by default  contextpath read only context path of the ads  deniedcontenttypes read only list of denied content mime types  see the javadoc of hox corem servlets generator adddeniedcontenttypes for details  documentcachecapacity read write the maximum number of cached documents from the content server  see setdocumentcachesize  in config bsh  documentcachesize read only the current number of cached documents  eventqueuelength read only length of the event queue  foldercachecapacity read write the maximum number of cached folders from the content server  see setfoldercachesize  in config bsh  foldercachesize read only the current number of cached folders  forbidurialiases read only if set to true  a request to a gif will send http     instead of a html  even if the uri parser igores the extension  this kind of requests circumvents static apache file caching  generating additional load on the ads  generaterelativeuripaths read only generation of uri paths relative to docbase   true    only valid when generaterelativeuris true  generaterelativeuris read only generation of uris relative to docbase   true    generatorhostname read only this setting denotes the hostname under which the ads can open http connections to itself  see setgeneratorhostname in config bsh  generatorport read only this setting denotes the port under which the ads can open connections to itself  see setgeneratorport in config bsh  generatorprotocol read only protocol used by the ads hostinfo read only the computer which hosts the ads  instdir read only installation directory of the ads  javaclasspath read only java class path  javainstdir read only java installation directory  jspspecversion read only version of the jsp specification used  jvminfo read only java jvm information  jvmprocessinfo read only java process information  the number of threads  free memory  used memory  total memory  osinfo read only information about the operating system of the host  pagecachecapacity read write maximum number of pages referenced from the page cache  see setpagecachesize in config bsh  pagecachedirectory read only the physical location  directory  of the page cache  pagecachesize read only the current number of cached pages  pageobjectcachecapacity read write maximum number of cached result objects in the page cache which were created by the context getobject functionality  see setpageobjectcachesize in config bsh  pageobjectcachesize read only the current number of cached result objects  resourceuriformat read only the object which determines the string format of the page uris  see setresourceuriformat in config bsh  resourceuriprefix read only the prefix for all generated uris  see setresourceuriprefix in config bsh  servername read only name of the optional web server in front of the ads  see setservername in config bsh  serverport read only name of the optional web server in front of the ads  see setserverport  in config bsh  serverprotocol read only name of the server protocol   servletcontext read only context path of the ads  servletpath read only servlet path  servletspecversion read only version of the servlet specification used  status read only state of the ads  running or stopped   templatefinder read only name of the template finder used for template dispatching  uptime read only uptime of the ads in milliseconds  user read only name of the coremedia user used for login  webcontainername read only name of the web container in which the ads is deployed   
  accessibility means to design websites  that can be used by people with disabilities  such as deafness or blindness  this chapter contains no basic introduction into the legal and technical requirements for accessibility  but shows how you can met the main requirements as described  for instance  by the   barrierefreie informationstechnik verordnung   see http   bundesrecht juris de bitv index html  or the  checklist of checkpoints for web content accessibility guidelines       see http   www w  org  using coremedia cms   requirements  the requirements for accessible websites can be divided into three main blocks   usage of valid markup language offering equivalent information for binary content like images and audio files offering special information in rich text  which can be used by screenreaders for example  usage of valid markup language  the w c checklist states  for example  the following points        use the clearest and simplest language appropriate for a site s content      title each frame to facilitate frame identification and navigation  coremedia cms uses jsp templates to create web pages  so  you are free to create valid and accessible sites  content from coremedia cms can be transformed into any required output format   offering equivalent information  the w c checklist states  for example  the following points       provide a text equivalent for every non text element        ensure that all information conveyed with color is also available without color     in order to reach blind people for example  you have to offer a description for each image used on your website  this description can be read out by a screen reader  due to its configurable and object oriented document type model it is easy to store this descriptive information along with the original image  you may  for instance  create a document  image  which contains blob properties for the original image  a version for color blind people and a textual representation  you can easily reach all these versions of the image from your jsps   offering special information in rich text  the w c checklist states for example the following points       clearly identify changes in the natural language of a document s text and any text equivalents     mark up quotations   these requirements are different from the previous ones  it requires additional information   such as the language or the source of a quotation   in the rich text  for some of the necessary information  the coremedia editor and webeditor offer out of the box support via entry forms and menus  for other information  you have to add your own styles to the editor   the following table lists the out of the box options relevant for accessible websites  coremedia cms stores the content of rich text fields in an xml format which is defined by the coremedia richtext     dtd  use an unparser to convert coremedia rich text xml elements into valid html  you will find a description of all attribute editors of an element in the user manual  
    rich text element attributes description in line text  span xml lang  fr  dir  rtl   you can use the direction and language fields of the style sheet attribute editor  inline text tab  to enter the text for the dir and xml lang attributes of the surrounding span element  block text   xml lang  dir   you can use the direction and language fields of the style sheet attribute editor  paragraph tab to enter the text for the dir  and xml lang attributes of the block element   example    p xml lang  en  dir  rtl  my text  p    links   xml lang  xlink href  xlink show  xlink role  xlink title  xlink actuate   you can use the title field of the link attribute editor format external link or format internal link to add text to the xlink title attribute   example    a xml lang  en us  xlink href  http   www heise de    xlink show  new  xlink role  new role    xlink title  my title  xlink actuate  onrequest    link    a  images   xlink type  xlink actuate  xlink show  xlink href  alt   you can enter text for the alt attribute of the img element using the text field of the image attribute editor  mark the image and select format insert image   example    img xlink type  simple   xlink actuate  onload    xlink show  embed  alt  new image    xlink href  coremedia    cap resources       image     tables   summary  xml lang you can use the summary and language fields of the table attribute editor to add text to the summary attribute of the table element and to the xml lang attribute of the table  tr and td elements  blockquotes  blockquote cite  faust  xml lang  en   this element surrounds a block element with a blockquote element  you can use the style sheet attribute editor  blockquote tab  to enter the text for the cite attribute and the language and direction    
  for attributes or elements of the rich text which are not supported by out of the box functionality you have to create your own solution  the coremedia editor supports this approach with style sheet attributes  it allows you  to embed inline text within a  span  element which has a configurable class attribute and to add a class attribute to block elements  such as  p   see the editor developer manual for details   example  you might define a class  acronym  which can be applied to inline elements and use a simple text convention to combine the acronym with its definition  this text would look like    span class  acronym  cae  content application engine  span   use an unparser to convert this rich text xml into the following html    acronym title  content application engine  cae  acronym   
  coremediacms offers different possibilities to search for content   search and replace in the current field of a document  searching with the query and the advanced query searching with the global search and replace workflow  searching with the full text search   these four search facilities have all their advantages and disadvantages  depending on the search task  the next table  compares the search facilities which will be described in the following subchapters  
  the advanced query editor is a web application  that you can invoke from the coremedia editor and webeditor  you can use it  to create queries which offer more search options as the standard query  an editor  for example  can search for documents which are not modified by him  in contrast to the standard query editor  an administrator or developer has to enable the advanced query  this means  that the advanced query might not be enabled in your editor  an advanced query is stored in the string property    of a regular coremedia document  you will also open the advanced query window and execute the query from this document  
  the window contains four parts         here  you choose the search options        here  the conjunction of the search options is shown  you can change the conjunction  replace an and with or for example or negate a search term with not        here  you can choose how to sort the results  you can combine multiple sort options         here  your search expression is shown in the format which is passed to the content server    in order to create your search expression  proceed as follows  choose behind resource type the document type  for which you want to create the query  add search options by selecting options from the add condition field   when you have clicked  an option  it will be shown in the advanced query editor and you can configure this search option  click the cross    in front of the search option to remove it  the number in front of the search option  e g      is used in the connect search conditions field to mark the search terms     change  if necessary  the conjunction of the search terms in the connect search conditions field     replace and conjunctions with or and negate terms with not   in addition you can combine terms with parentheses  an example      and    and    and     becomes     or    and not    and        if required  add sort options by selecting options from the add sort key field   when you have selected an option  it will be shown in the advanced query window  the results will be sorted in the order of the search options  move or delete an sort option by checking the checkbox and use one of the tools known from the link lists     click ok to transfer the search string to the document and to be able to start the query   the browser window closes and the editor shows the document with the search string  
  unlike the standard query  there are no predefined document types for the advanced query  the developers of your application are free to include it into the string property of every document  from which you can start the query  
  in order to open the advanced query window  proceed as follows  choose the document  that contains a property with the advanced query and move the cursor into this field     click  in the toolbar of the property     the advanced query editor opens up in a web browser  
  in contrast to the standard query you start an advanced query from a document   in order to start an advanced query  proceed as follows  choose the document  that stores the advanced query  if you just have created an advanced query with the advanced query editor  you will automatically jump to this document  click  in the toolbar of the property   the query starts and a result window opens up  
  do not change the search string directly in the document  but only with the advanced query editor  otherwise  you might create malformed queries  that cannot be executed  
  like the coremedia editor  the webeditor has an integrated bookmark administration but unlike the coremedia editor  no bookmarks menu exists  in addition  you can create bookmarks for your browser from the bookmarks in the bookmarks view  therefore  you can directly open the webeditor from the browser and jump to the selected document or folder   to create a bookmark  proceed as follows  mark the bookmark in the bookmarks view of the webeditor  open the context menu with a right click  select add to favourites from the context menu and enter the appropriate data into the opening window  now you have created a bookmark to the document  if you select the bookmark  the document window will open  if you are not logged on to the webeditor the log on screen will open firstly   
  the unlockcontentserver tool recovers a database schema after a server aborted without cleaning up the database  in this case it can happen that a persistent lock remains in the database  this lock must be cleared explicitly  because the server would otherwise suspect that a second server is running on the same database   this utility has the following syntax   cm unlockcontentserver  you have to run the tool in the server installation where it can access the sql properties configuration file  
  by default  the jmx connection to the coremedia components is not secured  be sure to use a firewall to protect the connection port when using jmxmp  or use the hessian protocol with authentication  which may be encrypted using ssl  
  starting jconsole  jconsole needs the jmxremote optional jar file and some files for the hessian protocol for operation  these files are installed with the coremedia content server in the lib directory  start jconsole as follows  replace  pathtojava    pathtojar  and  pathtokeystore  with the paths to your java installation  to the lib directory of your content server installation and to the keystore for the ssl connection respectively  you might define environment variables for these paths for your convenience   for jmxmp only    pathtojava  bin jconsole  j classpath   j pathtojava  lib jconsole jar   pathtojar  jmxremote optional jar  for hessian    pathtojava  bin jconsole  j classpath   j pathtojava  lib jconsole jar   pathtojar  mx j jar   pathtojar  mx j remote jar   pathtojar  mx j tools jar   pathtojar  hessian jar  pathtojar  jmxremote optional jar  for hessian with ssl    pathtojava  bin jconsole   j djavax net ssl truststore  pathtokeystore    j classpath   j pathtojava  lib jconsole jar   pathtojar  mx j jar   pathtojar  mx j remote jar   pathtojar  mx j tools jar   pathtojar  hessian jar  pathtojar  jmxremote optional jar      select connection new connection  a new windows opens up  select the advanced tab  enter the url of the connection server in the field jmx url  if you use hessian you have to enter the user name of an coremedia administrator in the field user name  if the user is not in the empty domain you have to add an     and the domain name to the user name  e g  admin coremedia   if you want to allow non administrators  you have to change the value of the property cap server management admins only in the file contentserver properties to  false   if you use hessian enter the user s password into the field password  click connect  a new console window opens   now  you can start working  
  this section describes concepts and structure of the coremedia content rules framework  content rules enable editors to define  overview  web pages  which contents are not composed manually but based on rules  a typical rule would be       mobile phones with either mp  player or    mp  video camera capabilities priced between     and     euros  ordered by price and by number of screen colors   content rules can thus be used to replace the manual assembly of product lists  article hot lists  etc  instead  rules automatically assemble pages from content matching their criteria       
  content rules are defined on the content management side  coremedia provides an editor extension  the bean query editor  bqe   which supports editors in the definition of rules  additionally  the execution of rules may be previewed    the bean query editor  bqe  allows creating and manipulating rule definitions  structurally  the bqe s user interface is divided into two parts  the upper part defines the query skeleton  while the lower part holds result sorting and result set limit options  the status line displays the query string that corresponds to the query structure    the following screenshot shows the bean query editor  bqe   its interface corresponds structurally with the advanced query editor  aqe  that can be used to specify queries against the content repository     
  the query skeleton comprises a bean type expression and one or more property value comparison expressions    the bean type expression allows narrowing the result set to beans of either one exact bean type or beans of a bean type hierarchy  subtypes included    property value comparison expressions can be based on bean properties or repository implied properties  the latter are not bean properties  but provided by the respective bean repository  typically  id and name are repository implied properties  the configuration section will explain how to define repository implied properties   per default  all query  sub  expressions  identified in the bean query editor by names      through   n   are conjunctive terms  connected by  and  operator   change the skeleton field to introduce  or  and  not  operators  optionally with parentheses   please note that before the bean query editor can be used  the bean type model  including bean types  bean properties and storage implied properties must be setup and configured  see the configuration section for this         
  it is advised to store rules  more precisely  their query string representation  in a custom content type s string property  the advantages are   content rules can be versioned  content rules are propagated to the delivery caes using normal publication workflows  seamless bean query editor integration  the bean query editor can be registered as a custom property editor  see the configuration section   editing the string property will launch the bean query editor   we therefore recommend that you create a custom content type for content rules  with properties for the rule query string and optionally meta data  rule description  rule validity time frame  etc    no type is provided out of the box   
  rules are executed in the context of cae based web applications on the content delivery side  their execution is determined by the containing cae application  typically it is triggered by a request to render a rule based webpage    it is the cae application s responsibility to select a rule and execute it  upon execution  a rule s query expression is evaluated using a query service  yielding an ordered set of cae content beans  which is then processed and rendered using known cae mechanisms   rule execution environment  rules run against a content bean repository  which holds a persistent representation of content beans and provides a query interface for retrieval  a bean repository can be understood as the rules   working memory    the default content rules execution environment is as follows   bean repository  a fast search engine collection is used as bean repository  bean repository feed  the cae feeder is used to asynchronously pump content object state information into the bean repository  bean query execution  the coremedia fast query service is used to evaluate rule queries against the repository   a fast search engine collection is not per se a content bean repository  hence the mapping of bean types and properties to their representation in the collection must be addressed  the content rules framework defines a mapping configuration of bean types and properties to storage  it will be explained in the configuration section   
  the content rules configuration consists of four major steps  bean type model definition mapping the bean type model to the specific bean repository content repository  content type definition  bean query editor integration  these steps will be described in detail in the next subsections    the integration of content rules into cae applications will be described in the last subsection  
  given below is an example bean type definition  
  please note that the spring configuration bean attribute  id   here  id  beantype mobilephone   has no meaning whatsoever for the content bean type definition  it is solely used for identifying and referencing the bean type definition as a spring config bean   now setup the bean type repository and register the bean types  see example below   the bean type repository is simply a spring configuration bean which must have its id attribute set to  beanrepository  and inherit from the spring configuration bean class  abstractbeantyperepository   currently it is not possible to define more than one bean type repository   example   
   bean id  beantyperepository  parent  abstractbeantyperepository      property name  beantypes        list         ref bean  beantype product           ref bean  beantype mobilephone          list      property    bean  
   bean id  storageimpliedbeanproperties    parent  abstractstorageimpliedbeanproperties      property name  properties        list         bean parent  stringproperty            property name  name  value  id            bean         bean parent  dateproperty            property name  name  value  creationtime            bean        list      property    bean  
     applying property features  the bean repository may define advanced search and retrieval operations for a given set of bean properties  the storage mapping property features are a means to propagate the availability of such advanced operations to the bean query editor   example  per default  string properties stored in a fast collection may only be queried via  contains  operator and cannot be used as result set sort criteria  the fast search engine s index profile may now specify that the string property  name  additionally supports the fast  boundarymatch  predicate  which translates to an  equals  operator  and that the  name  property may be used as a query result set sort criterion   the content rules framework out of the box defines a fast default feature set and two fast property feature types   
  the fast basic feature set  the  fast basic feature set  defines the default features and operators available to all properties stored in a fast collection  this feature set is enabled per default  it defines the following operators  
   property type operators result set ordering criterion stringproperty  contains   substring  per default cannot be used as a result set ordering criterion integerproperty                     per default cannot be used as a result set ordering criterion booleanproperty  is true    is false  per default cannot be used as a result set ordering criterion dateproperty                     per default cannot be used as a result set ordering criterion  
  the fast boundary match feature  the  fast boundary match  feature can be applied to storage implied and bean string properties  it adds the  equals  operator to the given string property  the feature is made available as a spring configuration bean named  fastboundarymatch   
  the fast full sort feature  the  fast full sort  feature can be applied to a set of implied and bean specific string and integer properties  it enables the property to be used as a result set ordering criterion  the feature is made available as a spring configuration bean  fastfullsort    how to apply features to properties  the fast basic feature set need not be configured manually  it is automatically applied to all bean and implied properties   the other features can be applied to properties either by specifying the property name or the property type   a  select properties by name  to apply a feature to a property set matched by name  use a spring configuration bean inheriting from  featureapplicationbypropertyname   it defines the following attributes  
   attribute description typename the bean type name  use     to match all bean types propertynames a list of properties  separated by comma  both bean properties and implied properties may be used  use     to match all bean and storage implied properties  features the list of features to apply to the given properties  
  add a depends on  fastbasicfeatureset  clause to your spring configuration bean to make sure the fast basic feature set is applied first   note  as storage implied properties technically belong to all bean types  enabling a feature for an implied property enables the feature in all bean entities    example a  enabling the fast boundary match feature on bean property  description  and implied property  id     bean id  equalsoperator   parent  featureapplicationbypropertyname   depends on  fastbasicfeatureset      property name  typename  value          property name  propertynames  value  id description       property name  features        list         ref bean  fastboundarymatch          list      property    bean   b  select properties by type  to apply a feature to a property set matched by property type  use a spring configuration bean inheriting from  featureapplicationbypropertytype   it defines the following attributes   
     attribute description typename the bean type name  use     to match all bean types propertytypebyprototype the type that properties must match  as stringproperty  integerproperty  dateproperty and booleanproperty are prototype spring configuration beans  they might be given as reference  features the list of features to apply to the selected properties  example b  enabling the fast full sort feature on all string properties   
   bean id  fastfullsortfeatureset   parent  featureapplicationbypropertyname   depends on  fastbasicfeatureset        property name  typename  value            property name  propertytypebyprototype        ref  stringproperty                 property name  features          list           ref bean  fastfullsort            list        property      bean  
  note  as storage implied properties technically belong to all bean types  enabling a feature for an implied property enables the feature in all bean entities   
  add a content type to the cms content repository which represents a collection of content dynamically assembled  e g   dynamiccontentcollection   add a string property  e g   query  to the type  which stores the rule query expression   we recommend that you name your content type after the rule execution result    the dynamic content collection  and not after the rule itself  the reason is that the type represents a content collection  while a content rule is only a technical means to fetch the content  this naming scheme has the advantage that on the delivery side  a contentbean type  dynamiccontentcollection  gives a clue on its structure  
  install the editor extension bean query editor to enable editors modify rule query expressions  then customize the coremedia editor to use the bean query editor as a custom property editor for the rule query expression    please refer to the editor developer manual on how to integrate the bean query editor into the coremedia editor and how to use custom property editors   
  use the  analytics trackingimage  tag for tracking page views and context views through the loading of images   without further configuration  this tag tracks the view of most recently opened page context  object context or name context  by separating this tag from the context tags  the designer has more leeway in placing the tracking images    a typical usage looks as follows    analytics pagecontext object    self   view                   analytics trackingimage rgb  ffffff             analytics pagecontext    this would render a single pixel image with the given rgb value indicating a white image  instead of specifying the rgb value  you can also put your own image into the directory web inf tracker resources of your web application and specify the name of the image in the src attribute of the tag  some images are already predefined  the next example renders a transparent image    analytics trackingimage src  empty gif     note that such images are fetched from the local disk upon every request  which may be considerably more expensive than generating a single pixel image from main memory   you can use any attribute that is also allowed for the html  img  element  the only exception is the class attribute  which must be given as the styleclass attribute    analytics trackingimage rgb  ffffff  styleclass  mystyle     when the  analytics trackingimage  tag appears inside a name context or object context  it results in the logging of a context view instead of a page view  care should be taken to place the tag outside of any nested tag  but inside the page context tag  if the page view is supposed to be tracked   when a tracking image tag is present  the context tag will not log a view immediately itself  the view will be tracked when the tracking image is fetched  however  the view is tracked if and only if the context tag would have logged the view  specifically  for a page context that attribute logview must not be explicitly set to false and for an object context or a name context the attribute logview must be explicitly set to true   if the tracking image tag contains any of the attributes object  view  locale  or context  a special event with the given parameters is logged regardless of the setting of logview of the encapsulating context and the logging of the encapsulating context tag is not disabled   unless this is suppressed through configuration in the file trackingbase properties  the rendered output for tracking page views contains javascript code to determine the referring page  this allows additional reports to be generated  but the generated output is more complex  the basic structure of the output is shown next    script type  text javascript        document write   img src       escape document referrer                    script  noscript  img src           noscript   by providing a  noscript  replacement  it is ensured that even browsers with disabled javascript render the same image  passing as much information as possible to the tracking controller  
   align string  the align pass through attribute alt string  the alt pass through attribute border string  the border pass through attribute context list the current context the context to be tracked  if not the context specified by the surrounding tags  if null of the empty list  indicating a page view  if a non empty list  indicating a context view dir string  the dir pass through attribute height string  the height pass through attribute hspace string  the hspace pass through attribute id string  the  pass through attribute ismap string  the  pass through attribute lang string  the  pass through attribute locale string  the locale to be tracked  if not the locale specified by the surrounding page context longdesc string  the longdesc pass through attribute name string  the name pass through attribute object object the current page s object the object to be tracked  if not the object specified by the surrounding page context onclick string  the onclick pass through attribute ondblclick string  the ondblclick pass through attribute onkeydown string  the onkeydown pass through attribute onkeypress string  the onkeypress pass through attribute onkeyup string  the onkeyup pass through attribute onmousedown string  the onmousedown pass through attribute onmousemove string  the onmousemove pass through attribute onmouseout string  the onmouseout pass through attribute onmouseover string  the onmouseover pass through attribute onmouseup string  the onmouseup pass through attribute rgb   characters hexadecimal rgb string  the color of the tracking image  if a non transparent single color image should be rendered src string  the name of the tracking image  if a custom image should be rendered style string  the  pass through attribute styleclass string  the class pass through attribute title string  the title pass through attribute title string  the title pass through attribute view string the current page s view the view to be tracked  if not the view specified by the surrounding page context vspace string  the vspace pass through attribute width string  the width pass through attribute  
  the coremedia cms is being used for developing content applications in various scenarios  including web sites  where editorial content is presented to a large number of web users   recently  coremedia cms is increasingly applied as a platform for intranets and within portal servers  distributed and casual users cause an increasing need for content editing over the web   in contrast to web site projects where content is managed only by a small group of dedicated editors  not by the web user   in an intranet or portal project each web user edits content and participates in content workflows   therefore  a large number of users has to be able to edit coremedia resources and to participate in workflows using a web front end   this manual describes how to develop web applications with the coremedia web application extensions of the active delivery server  wage  the g comes from the old name of the ads  generator   a set of building blocks for coremedia web applications with resource editing and workflow functionality   the manual consists of the following parts     an overview of the wage architecture and the building blocks used to create own web applications in chapter     some examples on how wage can be utilized in chapter     a reference style listing of the wage tag library in chapter    
  content management covers creation of content in the repository and analysis of used content  there are basically two ways to populate the content repository   manual editing importing external content  out of the box coremedia cms supports manual creation of content by a variety of clients which are open for customization  in addition  customized clients could be created from the scratch using different frameworks  described in section   the coremedia editor  a standalone java application  configuration and customization of this editor is covered in the editor developer manual  the webediting server  a servlet which serves the coremedia webeditor for content editing  the webeditor offers nearly the same functionality as the coremedia editor but needs less installation  the webdav support  which allows to access the coremedia cms by webdav enabled applications  see the administration manual for details   the importer which is used to adopt existing external content  e g  from legacy systems or content providers  it must be customized concerning the location and the format of the source content  see the importer developer manual for details   for analysis of the content repository and the acceptance of your websites in the internet  or intranet  there is coremedia analytics  it offers a set of predefined detailed reports  the analytics dashboard  and easy to use reports directly integrated with the preview of your web site  the in site analytics   you might extend both report types by your own analytics report  see the analytics developer manual for details  
  a clientresource  com coremedia cap wage clientresource  is a resource  hox corem servlets resource  that can be modified locally on the client  all changes are visible for the client immediately  but for other clients only after the current set of changes  which is held by a changecollector  see below  has been submitted   as in the active delivery server api  there are two types of clientresources  a clientdocument  com coremedia cap wage clientdocument  is a specialized document  hox corem servlets document  that additionally provides setter methods and contains all changes made locally to any of the implied or schema properties of the document   a clientfolder  com coremedia cap wage clientfolder  extends hox corem servlets folder and represents the client s view of a coremedia generator folder   local changes to impled properties represent actions to be performed when the changes are commited  for example  setting the name  property of a resource will rename it  or setting the folderid  will move it   clientresources can also represent new resources  which don t exist on the server yet  such resources are called client only resources and are created on the server when the current set of changes is submitted successfully  clientresources can be created by calling one of the createresource   methods of a clientfolder   nevertheless  clientresources can contain links to other resources  both to resources already existing on the server  and to client only clientresources   clientdocuments implement the dynabean interface  org apache commons beanutils dynabean   so that the jakarta beanutils allow to access coremedia documents as if they were dynamic javabeans  see the discussion at the beginning of this section    the connections between these interfaces are shown in the following uml diagram  
  the difference between the generic get   set   and the getproperty   setproperty   methods is that the generic get   and set   methods are using the propertychangecollector  see xxx   there  new property values are stored preliminary as simple objects  usually strings  when set   is used  the property change will only be visible in the changecollector if the committochangecollector   method of the propertychangecollector has been called and was successful   successful  means that the simple objects could be converted to the appropriate data type of the property  see conversion   to conclude  get   set   are usually used when values are output to or submitted by the user  while getproperty   setproperty   should be used in server side actions  when typed values are to be read or manipulated  
  as said in chapter introduction  wage takes care of converting property values from the internal data type to a simplified external representation and vice versa  this external representation is usually a string  but also allows boolean values and javabeans  the javabeans should again only contain string or boolean properties or other javabeans satisfying this constraint   while the methods implementing the dynabean interface  get   set    return and set a property in the external representation  the methods implementing the document interface  getproperty   setproperty   and the typed variants getxxxproperty    and the methods getinternal   setinternal   in the variableassignment interface return and set properties in the internal representation   in document property mapping  the default mapping from internal to external representations for property values of documents is shown  
  if you are writing an own form bean with a getter method for a blob property of a coremedia resource  you should always return the clientblob object acquired by the get   method instead of using the getblobproperty   method  otherwise you will get an npe when using a  html file property  propertyname formfile    tag for uploading new blobs  see example image for an example of creating a form using a  html file  tag  
  to be able to modify coremedia resources without having to write all changes to the content server immediately  wage stores all changes to a clientresource or a variableassignment in the user s session   the object keeping track of local changes is a changecollector  com coremedia cap wage changecollector   every client session has got it s own changecollector  or may even have more than one  only after the changecollector commit   method is called  the collected changes are actually performed on the content server   as there can be multiple changecollectors at a time  one for each client  and also a single client can use multiple changecollectors   it is possible that different clients try to make incompatible changes to resources  for example one client links a document  while another client deletes it    as the changecollectors do not know of each other  these incompatibilities in changes can only be discovered when trying to commit the local changes of a changecollector to the server   therefore a call to changecollector commit   returns a list of commitfailure  com coremedia cap wage commitfailure  objects  which denote any exceptions raised during commit  together with the bean  content resource or workflow variable assignment  and the property  if applicable  for which the exception was raised  you can also retrieve this list any time until the next commit   by calling changecollector getcommitfailures     after calling commit    the changecollector still contains all changes which couldn t be committed successfully  so only if the changecollector is empty after a submit  all changes have been committed successfully  otherwise  you should implement error handling behavior that modifies the changes until the changes can be committed  here  it is allowed and sometimes necessary to use the  internal  changecollector api  see warning below   you may want to use the very helpful method cmrequestprocessor getcommitfailuresasactionerrors   that converts wage commitfailures into struts actionerrors  see example   action    you can also control if the changecollector should try to automatically check out and or check in documents by calling its setautocheckout   and setautocheckin   methods respectively  the default is neither to check out documents automatically  since this prohibits caching   nor to check them in  you probably want to keep a document checked out for editing for some time and avoid too many versions   you can override this default using the methods setdefaultautocheckinmode   and setdefaultautocheckoutmode   of the wageconfig bean  see wage config   preferably in the config bsh of you web application  
  you can control which changecollector should be used by calling the static method wagecontext setcurrentchangecollector       if no current changecollector is set  the one with the default name  as determined by wageconfig getdefaultchangecollectorname    is retrieved  this default name again defaults to wagesession new change collector  which will create a new changecollector automatically  see api documentation for more details   if you want to use a specific changecollector  such as  default   as default  you can configure the default changecollector name in the wageconfig bean  see wage config   
  another indirection is the propertychangecollector  com coremedia cap wage propertychangecollector   whenever you try to set a property of a coremedia resource with the  dynabean  set   method  this change is first stored in the propertychangecollector  only when committochangecollector   is called on the propertychangecollector  it tries to convert the stored object into the type of the coremedia resource property or workflow variable  using the propertyconverterfactory described in property conversion  if this is not possible  a propertyparseexception is thrown by the propertyconverter  which is multipropertyparseexception by the committochangecollector   method  and the pending change will remain in the propertychangecollector   in this way it is possible to also keep values that cannot be converted into the target data type  for example imagine a web form which lets you enter a date value  as the value submitted is always of type string  it is possible that the submitted value cannot be parsed correctly into a date object  in this case you do not want the user to enter the complete date again  but redisplay the string he entered together with an error message   often you won t work directly with these objects  as wage hides much of its complexity from the developer  see strutsandwage   nevertheless it is important to get an idea how client side changes are managed   the next chapters explain how the struts web application framework simplifies the development of multi tier web applications  and how wage extends this framework for the rapid development of coremedia web applications  
  one important building block of wage is its coremedia bean api that builds upon the active delivery server api and the workflow client api  this api can be seen as a web application tailored scripting api   in the following sections  different aspects of this api are considered  the basic bean model is explained in resources as beans  the bean property conversion that makes this api tailored for web applications is introduced in propery conversion  in change collector  it is explained how changes to beans are automatically collected and can then be committed to the content server and  workflow server  
  struts suggests and supports a three tier architecture for web applications  the  model    approach  a variation of the classic  model view controller   mvc  design paradigm   one part of the mvc design pattern is a central controller which is responsible for the control flow of an application  it delegates requests  e g  http requests  to an appropriate handler  each handler is bound to a model and acts as an adapter between the request and the model  the model encapsulates the application s business logic or state  after handling a request  the control is usually forwarded back through the controller to an appropriate view   in the model   approach servlets are responsible for the control flow of a web application  whereas jsps are used for writing out html  in struts  there is only one servlet that dispatches control to so called actions  so that request processing and business logic are seperated   the model can be divided into two subsystems  the internal state of an application and the actions that can be taken to change that state  many applications represent the internal state as a set of javabeans  the business objects  where the bean properties represent the details of the system s state  actions  or business operations  then are represented by methods that can be called on the beans maintaining the state information  struts also supports other approaches for accessing the model part of a mvc architecture  but we ll use this one based on javabeans   jsp templates are used only as view  i e  they contain no business logic  like computing some derived property  nor have they knowledge of business processes  like where to continue after a form is submitted   development of such jsp templates is supported by struts with several tag libraries  the tag libraries abstract from concrete html elements and provide i  n support through java resource bundles  furthermore  tags for javabeans and for loops and conditionals are provided    struts also lets you define javabeans representing views on business objects based on business processes  these beans  actionform beans  represent forms that collect data from the web front end   the controller portion of the application is focused on receiving requests from the client  typically a user running a web browser   deciding what business logic function is to be performed  and then delegating responsibility for producing the next phase of the user interface to an appropriate view component  in this way controller components take care of the sequence of forms presented to the web user  in struts  the primary component of the controller is a servlet of class actionservlet  this servlet is configured by defining a set of actionmappings  an actionmapping maps a request uri to an action class  subclassed from org apache struts action action  actions encapsulate the business logic  interpret the outcome  and ultimately dispatch control to the appropriate view component to create the response   when developing a wage or struts based web application  you will have to write your own components based on the following struts classes  or wage subclasses thereof  see xxx    actionform  the struts framework generally assumes that you have defined an actionform bean for the input forms in your application  there may be one bean for each form  but a bean can also serve several forms  or even an entire application  if an actionform is declared in your struts configuration file  the struts controller servlet will automatically perform the following services for you  before invoking the appropriate action method   create a new form bean and add it to the configured scope  request or session  session form beans are reused within the user s session and not re created on every request   for every request parameter whose name corresponds to the name of a property in the bean  the corresponding setter method will be called  this operates in a manner similar to the standard jsp action  jsp setproperty  when you use the asterisk wildcard to select all properties  struts calls this phase bean population  the updated actionform bean is then passed to the execute method of an action class  org apache struts action   so that the values can be made available to your system state and business logic beans   please note that a  form   in the sense discussed here  does not necessarily correspond to a single jsp page in the user interface  it is common in many applications to have a  form   from the user s perspective  that extends over multiple pages  think  for example  of the wizard style user interface that is commonly used when installing new applications  struts encourages you to define a single actionform bean that contains properties for all of the fields  no matter which page the field is actually displayed on  likewise  the various pages of the same form should all be submitted to the same action class  if you follow these suggestions  the page designers can rearrange the fields among the various pages  often without requiring changes to the processing logic   a form bean needs not to be  flat   if the value of a property is again a javabean  you can access its properties using struts  nested property expressions  these are similar to jstl expression language  nested properties are denoted by their property name and seperated by a dot        you can access three types of properties of any javabean or dynabean   simple properties that usually have a type of string  indexed properties that are arrays or lists  denoted by an index in square brackets         and mapped properties that take a single string parameter or return a map  denoted by round brackets    key       an example of a nested property that uses an index and a simple property is  relatedcontent    headline    action  the goal of an action class is to process a request  via its execute method  and return an actionforward object that identifies where control should be forwarded  e g  a jsp or another action  where forwaring to actions is controversial  to provide the appropriate response  in the mvc model   design pattern  a typical action class will often implement logic like the following in its execute method   validate the current state of the user s session  for example  checking that the user has successfully logged on   if the action class finds that no logon exists  the request can be forwarded to the presentation page that displays the username and password prompts for logging on  this could occur because a user tried to enter an application  in the middle   say  from a bookmark   or because the session has timed out  and the servlet container created a new one  if validation is not complete  validate the form bean properties as needed  if a problem is found  store the appropriate error message keys as a request attribute  and forward control back to the input form so that the errors can be corrected  perform the processing required to deal with this request  such as saving a row into a database   this can be done by logic code embedded within the action class itself  but should generally be performed by calling an appropriate method of a business logic bean  update the server side objects that will be used to create the next page of the user interface  typically request scope or session scope beans  depending on how long you need to keep these items available   return an appropriate actionforward object that identifies the presentation page to be used to generate this response  based on the newly updated beans  typically  you will acquire a reference to such an object by calling findforward on either the actionmapping object you received  if you are using a logical name local to this mapping   or on the controller servlet itself  if you are using a logical name global to the application    actionforward  an actionforward tells an action where to proceed after processing a request  for example there could be an actionforward  success  which leads to a welcome page  and an actionforward  failure   which leads back to the login page of a web site  each actionforward has a symbolic name that the actionmapping evaluates to a path   actionservlet   request processor  the struts actionservlet is the central target for all requests  according to an action mapping  defined in the struts configuration file struts config xml   an action form and action are instantiated  the action form and the http request are handed over to the action as parameters of the execute   method  the result of the action determines the jsp that actually renders the form  when the form is submitted  the same action form object is used and automatically  filled  by the struts actionservlet  then the action is executed again  for example to tell the action form to save its data  another jsp is returned to continue the user interaction   converters  often it is necessary to convert objects from one type to another  for example when reading in a request parameter as string  that reads true or false and has to be converted into a boolean object  struts uses the org apache commons beanutils converters package  which already has converters for the common types  it is also possible to write own converters  which have to implement the org apache commons beanutils converter interface  struts  converters are rather limited  only one converter can be defined for each combination of source and target class  conversion errors may be thrown  but cannot be processed adequately in the request life cycle  only actionform validators and actions may return actionerrors   this is why wage provides its own property converter framework  see property conversion    struts also supports the development of jsps by providing some tag libraries  for example   struts html  tags to create struts input forms as well as tags generally useful in the creation of html based user interfaces  struts bean  tags used to access beans and their properties  and to create new beans  struts logic  tags to support loops   iterations and conditionals   for examples on how to use some of the most common struts tags  see xxx  for a complete reference of the struts tag libraries  please refer to the struts user guide   the following diagram illustrates the interrelationship between the different struts components  
  actionform  coremedia wage comes with several extensions to the struts actionform class   the generic resourceactionform  com coremedia cap wage forms resourceactionform  encapsulates a coremedia resource for use as struts form bean  often you will be able to use this class for your projects without changes  it enables you to easily fill html forms with values of coremedia resource properties  and to update coremedia resources with the values of submitted forms  if you want to write your own actionform class  you have to extend the abstract wageactionform  com coremedia cap wage action wageactionform   if you extend this class you have to be sure to call the getcurrentresource   method  which will install the current resource and changecollector according to request parameters defined in the cmrequestprocessor  see xxx and xxx for examples  the createresourceform  com coremedia cap wage forms createresourceform  can be used to create new coremedia resources  together with the actions startcreateresourceaction  startcreatefolderaction  and createresourceaction  all in com coremedia cap wage actions   the wfinstanceactionform  com coremedia cap wage forms wfinstanceactionform  encapsulates a coremedia workflow instance object  and lets you access it s properties  i e  workflow variables  through a com coremedia cap wage variableassignment object by providing generic getter and setter methods   wage also provides you with form beans that work on lists of resources workflow instances   the resourcelistactionform  com coremedia cap wage forms resourcelistactionform  can be used to perform commands  like approve  check in  move to another folder  etc   on a set of coremedia resources  this form bean can for example be used for letting the user select multiple resources from a list and then to perform a command on these selected resources  so the user doesn t have to perform the command on every single resource  the resourcelistactionform can also be used to start a new workflow with the selected resources as change set  similiar to the resourcelistactionform  the wage wfinstancelistactionform  com coremedia cap wage forms wfinstancelistactionform  can be used to edit variables and perform workflow commands  like  accept task  or  abort process   on a set of coremedia workflow instances  
  action  there are also several predefined struts actions  all contained in the package com coremedia cap wage actions   the actions startcreateresourceaction  startcreatefolderaction  and createresourceaction can be used together with a createresourceform for creating new coremedia documents or folders  the start    actions prepare the appropriate createresourceform and should forward to a view that renders a corresponding view that invokes the createresourceaction  the resourcelistaction  to be used together with a resourcelistactionform  is responsible for actually performing the command submitted in the form on the coremedia resources selected in the form  the wfinstancelistaction performs a command on a set of workflow instances  the loginaction can be used for logging in a user  see xxx for an example on how to use this action  the queryaction can be used to create a new coremedia query document   if the execute method of a struts action has been processed  it returns an struts actionforward  usually by looking up a certain name in the struts actionmapping  as defined by the stuts config xml file   the resourcelistaction for example returns an actionforward with the name  workflowstarted  if the submitted command was to start a workflow  and the start was successful  for more information on which actionforwards are used by which action  please consult the api documentation for these action classes  
  actionforward  wage provides you with two actionforwards   the resourceactionforward  com coremedia cap wage action resourceactionforward  forwards a request to a coremedia resource  for example after an action has been completed  it combines static resourceuri information from struts config xml  i e  the templateid set with the  path  attribute of the forward definition  with the resourceuri information from the current context  so if you are editing a coremedia resource in a  renderform jsp  template  which submits to a struts action  you could define an actionforward of type resourceactionforward for this action  with the  path  attribute set to  render   this will forward you to the  render  view for the resource you have been editing after the action has been completed  the resourceactionforward uses the coremedia viewdispatcher to find the appropriate template  similarly  the wfinstanceactionforward  com coremedia cap wage action wfinstanceactionforward  can be used to forward to a specific view  configured in struts config xml  of the current coremedia workflow instance  in this case  the workflowtemplatefinder will be used to find the corresponding template  see wf template finder   
  requestprocessor  the cmrequestprocessor  com coremedia cap wage action cmrequestprocessor  extends the struts request processor by establishing a wagecontext before struts processes the request  the cmrequestprocessor has to be set as processor class in struts config xml by setting the attribute processorclass of the controller element to the qualified name of the class   also configuration of the cmrequestprocessor is done via struts config xml  for this to work  the special configuration class com coremedia cap wage config cmcontrollerconfig has to be set for the classname attribute of the controller element  the generatorid  which is the name of the application scope generator bean  and the defaultcharacterencoding can be set here  all other configuration options that were present in eary releases of     have been moved to the wageconfig application scope bean  see wage config    the following excerpt from struts config xml shows the the configuration of the cmrequestprocessor with default values set for the available configuration options  
  wage taglib  to further facilitate and accelerate the development of web applications with coremedia wage  some of the functionality of wage is also available via a jsp tag library  for a full reference of available wage tags  please refer to xxx and xxx  
  converters  wage also provides you with converters for the common coremedia data types  the package com coremedia cap wage util e g  contains the resourceconverter which will convert a string or integer to a coremedia resource  the wfinstanceconverter converts a string  process and task id  to a coremedia wfinstance object  for a complete list of available converters  please refer to the api documentation  however  all conversions that may produce conversion errors caused by user input should use the wage property converter framework described in property converters   i  n  wage also lets you use a coremedia typedbundle  hox configuration typedbundle  as a struts messageresources object by providing an appropriate adaptor  this enables you to use the struts  bean message  tag to write out localized messages from a coremedia typedbundle  struts messageresources have to be configured in struts config xml  for coremedia resources you have to use the appropriate configuration and factory classes  
  the coremedia generator includes a templatefinder to allocate an appropriate template to render a coremedia resource  the viewdispatcher is an object oriented implementation of the templatefinder interface  see developer manual    wage extends the generator by allowing access to coremedia workflow objects like process or task instances  consequently  we need another templatefinder to render workflow objects  called the workflowtemplatefinder  package com coremedia cap wage    template finder are always useful when you want to render a polymorphic list of objects  in the case of workflow  this is usually a worklist that may contain different kinds of workflow instances from different workflow definitions  you may want to define a view that renders a short description of the workflow instance  which variables are accessed and how these are presented by the rendering template depends mainly on the type of the workflow instance  since the type determines which variables are defined and how these are accessible   essentially  a workflowtemplatefinder determines the path  relative uri  of a jsp template to render the current wfinstance  the one set in the current wagecontext  from the following parameters   the templateid is a symbolic constant that usually equals the name of the template  without the  jsp extension   the optional nestedpropertyname is the name of a variable of the wfinstance  which can be prefixed by a struts nested property expression  the prefix  everything before the last dot      is usually neglected  the helper method getvariablename nestedpropertyname  is there to perform exactly this  cut off  operation  the nestedpropertyname should be handed through into the resulting uri under the parameter name workflowtemplatefinder variable name parameter  the variable type should be determined and handed through under the parameter name workflowtemplatefinder variable type parameter  the optional index is an index to an aggregation variable and is usually handed through to the template  the index should be handed through into the resulting uri under the parameter name workflowtemplatefinder aggregate index parameter  the optional params is an even sized array of name value pairs and and usually handed through to the template   corresponding to resource templates and property templates  see developer manual   the workflowtemplatefinder returns workflow instance templates and workflow variable templates  depending on whether a nestedpropertyname is given or not  use the method without nestedpropertyname parameter or set the parameter to null   a workflowtemplatefinder can also return the path of a variable template just given a variable type  by class  and a templateid  without referring to a concrete process or variable  this is quite useful when you want to reuse the edit templates that exists for various data types  since variable types are even richer than document property types  even within wage  the queryexpression bean makes use of variable edit templates to edit the values of query subexpressions   the templaterooturi of a workflowtemplatefinder is the root folder under which it locates the templates  it can be get set through the corresponding methods   to use the configured workflowtemplatefinder  retrieve it from the application scope wageconfig bean  see config   if you want to include a view of another than the current workflow instance  you have to set it as the current workflow instance in the wagecontext first  now  let the workflowtemplatefinder compute the path to the desired templateid that can then to be included  an excerpt from a jsp using the workflowtemplatefinder is shown in xxx  
  like the viewdispatcher is the default implementation is the generator s templatefinder interface  there is an object oriented implementation of the workflowtemplatefinder interface called workflowviewdispatcher  while the viewdispatcher is public api and provided as source code  the workflowviewdispatcher is not yet part of the public api  i e  can only be used as is   the  classes  used by this object oriented template finder are of course not resource types  but are constructed from the workflow definitions  for each workflow definition  there is a type for its initial and running state  both inherit from an abstract process type of that definition  which again inherits from an overall abstract process type   each user task defines a type that inherits from the abstract task type of the process definition  which again inherits from an overall abstract task type   variable templates are looked up using the type of the context  task or process instance  in which they are accessed  however  if no template is found  the look up is continued into types corresponding to the variable s data type  there is a  most general  variable type from which all other types inherit  all this corresponds to the viewdispatcher s property views  note that aggegations and atomic types are distinguished and there is another abstract type from which all aggregation types inherit   this may sound very complicated  but results in a fairly simple lookup sequence implemented by the workflowviewdispatcher   the result of workflowviewdispatcher getpath templateid  nestedpropertyname  index  params  is determined like follows   all paths in the lists below are given relative to the templaterooturi as set  default   wftemplates  change in config bsh  see xxx   as soon as under a path in the lookup sequence  a template is found  the template path is prefixed by the templaterooturi  if the nestedpropertyname was set  it is complemented by the parameters variable name parameter  variable type parameter  and aggregate index parameter  see above   finally  the path is complemented by the explicit parameters from params and returned  if no template is found  null is returned   let processname be the name of the current wfinstance s process   let variablename be the nestedpropertyname without the prefix  getvariablename nestedpropertyname     let clientname be   initial   or   process   if the current wfinstance is a process instance  depending on the state of that process instance  or the name of the corresponding task  if the current wfinstance is a task instance   if nestedpropertyname is empty  processes processname clientname templateid jsp if the current wfinstance is a task instance  processes processname  task  templateid jsp processes processname  default  templateid jsp processes  process  clientname templateid jsp if the current wfinstance is a task instance  processes  process   task  templateid jsp processes  process   default  templateid jsp  if nestedpropertyname is non empty   let variabletypename be the name of the variable s type  this is the name in the first column of table workflow types  for aggregation variables  use the name of the component type  prefixed by aggregates   e g  aggregates resource  processes processname clientname variablename templateid jsp if the current wfinstance is a task instance  processes processname  task  variablename templateid jsp processes processname  default  variablename templateid jsp processes  process  clientname variablename templateid jsp if the current wfinstance is a task instance  processes  process   task  variablename templateid jsp processes  process   default  variablename templateid jsp vartypes variabletypename templateid jsp if variabletypename is document or folder  vartypes resource templateid jsp if variabletypename is aggregates document or aggregates folder  vartypes aggregates resource templateid jsp if the variable s type is an aggregation  vartypes aggregates templateid jsp vartypes templateid jsp  
   property name type   default value description defaultautocheckinmode boolean false the autocheckinmode of all new changecollectors  defaultautocheckoutmode boolean false the autocheckoutmode of all new changecollectors  defaultchangecollectorname string wagesession  new change collector the name of the changecollector to be used when no collector request parameter is set  previewurifactory previewurifactory   new gotopreviewurifactory   the factory that is used to get a preview url for a given resource  the default factory returns a generator  goto  url in the same servlet container in the web application context   coremedia   propertyconverterfactory propertyconverterfactory new genericpropertyconverterfactory   the factory that is used to get a property converter for a given type and property  see xxx  propertyconverterfactoryclass class genericpropertyconverterfactory class an alternative to setting the property converter factory  instead of an instance  the class name is configured  the class has to implement the propertyconverterfactory interface and has to have a no arg constructor  variableassignmentfactory variableassignmentfactory internal object the factory for variable assignments  there is usually no need to change this setting  but you can retrieve the factory to construct a variableassignment from a wfinstanceid  workflowclientactionlistenerclass class wagewfclientactionlistener class a class implementing the workflow interface wfclientactionlistener  you may want to subclass the default wage class when you implement new client side workflow actions  workflowtemplatefinder workflowtemplatefinder internal object the template finder for workflow templates  similar to the generator s templatefinder  a concrete template is determined from the current object and property  here the current wfinstance from the wagecontext  there is usually no need to change this setting  see xxx  workflowtemplatepath string   wftemplates  derived property  equals workflowtemplatefinder templaterooturi  workflowstartup string  workflowstartup    xxxpublication     new publicationworkflowstartup     globalsearchandreplace     new searchandreplaceworkflowstartup   a property mapping workflow names  as given in the xml workflow definition  to workflowstartup objects  which define the behaviour of new process instances  the coremedia standard workflows for publication and global search and replace are already mapped in the default configuration  all other workflows will not be started immediately and will igrnore the current resource selection  
  simple coremedia document properties like strings can be edited directly with appropriate html input elements or property editors provided by the struts web application framework   however  more complex coremedia document properties like xml or linklist properties also require powerful property editors  the user has to be able to use the full functionality of each property type  and should directly see the changes he made  like for example when editing richtext   coremedia wage provides you with appropriate property editors for all available property types  you can use them directly in your web application  or further customize them for your specific needs   there is an  edit  view available for all property types  which will instantiate the appropriate  javascript  property editor when included  you then have to provide a mechanism for calling commands on that editor  like strong   for the xhtmleditor  which will mark the currently selected text in the editor as bold  or addresource id  for a linklist editor  which will add a coremedia resource to a linklist  providing the user with a way to select these commands can for example be done by defining and including an appropriate wage toolbar  with the  wage toolbar  tag   see xxx for an example   the following property editors are important building blocks of coremedia wage   blobeditor  supports uploading a file as coremedia blob property  or removing a stored blob  dateeditor  edit coremedia date properties with this editor  linklisteditor  used to edit coremedia linklist properties  linklists can be reordered  entries can be deleted and new entries can be added with this property editor  see xxx for an example  xhtmleditor  allows the user to edit richtext directly in a web browser  including text formatting  italic  bold  etc    inserting images into the text  editing lists and tables  and linking to other coremedia documents or external resources  see xxx for an example   for a detailed reference on these  and other  components  please refer to the wage javascript api documentation  
  this chapter gives an overview of some other javascript components available within coremedia wage  for a complete reference  please refer to the wage javascript api documentation   package  cap   this package contains javascript components representing the corresponding coremedia objects   document folder property resource resourceuri user  package  cap editing    xhtmleditor   the property editor to edit a subset of xhtml that can be converted to the coremedia richtext     format  it is based on the contenteditable feature of microsoft internet explorer and jscript  so that it works in ie     upwards without installation and without enabling activex components   package  dom    the domelementattributes component encapsulates properties of a dom element node and provides methods for querying and changing these properties   package  ui    the clipboard component can be used to allow copying of coremedia resources between different browser windows   package  wage    the attributeeditor is a mediator between simple html form elements and domelementattributes  it is used to let the user edit the attributes of elements in the xhtmleditor  the selectabletable component add selection capabilities to html tables  the tableeditor is a selectabletable offering methods for adding  removing and re sorting table rows  it is used by wage s default link list property and aggregate variable editors  the menubar is the container for menus  it is used by the corresponding tag from the wage taglib  see xxx   a menu is a specialized selectabletable that automatically unselects the corresponding menubar entry  it is used by the corresponding tag from the wage taglib  see xxx   the resourcechooser can be used to choose coremedia resources in a seperate dialog window  the resourcetable is a specialized selectabletable for coremedia resources  it is used by the corresponding tags resourcelist and resourcerow  xxx  from the wage taglib   
  this chapter describes the wage components supporting the development of the view for your web applications  like editors for editing the properties of a coremedia document in a web browser  or the wage tag library   as many of these components are based on complex javascript libraries  wage provides you with the following javascript packages   cap  contains javascript representations for coremedia objects like document or folder  the xhtmleditor for editing rich text is part of the sub package cap editing  dom  package for querying and manipulating dom trees  ui  contains for example the clipboard  which allows to copy coremedia resources between different browser windows  wage  contains the wage javascript components like property editors and the focusmanager  requires the dom package to be loaded   wage provides you with a convenience method for loading all the classes contained in a package by using the  wage includescripts  tag  some packages rely on javascript code that is dynamically created from javabeans existing on the web server  jsps that dynamically render javascript code can also be included via the  wage includescripts  tag using the attribute templates  the templates are always included before the packages  if a template uses a package  include it in a following  seperate  wage includescripts  tag  a typical example is shown in include scripts example  
  the wage tag library encapsulates some of the features wage offers and therefore facilitates the development of wage jsp templates  amongst others  the following wage tags are available    wage toolbar  and  wage cmdbutton   for rendering a toolbar with command buttons for calling a command on a javascript component   wage menubar    wage menu   and  wage menuitem   for rendering application like drop down menus   wage documentstate   renders an icon for the current state of a coremedia resource  like checked in or checked out  for a complete reference of the available wage tags and their attributes  please refer to xxx   one of the more sophisticated tags of the wage tag library and how you can extend and adapt it to project specific needs is explained here  the  wage cmdbutton  tag renders a html image tag with an onclick handler that will try to execute the command set with the command attribute on the currently focused property editor  note that the  wage menuitem  tag functions quite similar   if you are using a predefined command  for example from com coremedia cap gui resources richtextcommandnames   an appropriate image and tooltip etc  is rendered automatically  otherwise you may also set the image s source with the src attribute  the  wage cmdbutton  can only be used within a  wage toolbar    you have to assure that only commands are available that the currently focused editor can understand  otherwise you will possibly get a javascript error  one way to do this is to use a focuslistener  see xxx  to hide and display command buttons according to the currently focused editor   it is also possible to define own commands  e g for combining two simple commands like bold and italic for the richtext editor  you first have to define some properties like tooltip and icon for your new command in a   properties file  
  coremedia wage simplifies web application development with content editing and workflow functionality by covering these aspects   basic concepts of wage you ll have to know when developing wage based web applications are explained by use cases and an architecture overview in chapter      how to access  modify  and create coremedia resources and workflow objects through wage is described in chapter      how multi tier coremedia web applications can be developed with wage together with the struts web application framework is described in chapter      the wage view components like generic coremedia property editors which can be used for rapid development of web applications with content editing functionality are explained in chapter      the wage tag library which provides a convenient way to use some of the features wage offers inside jsp templates  are listed in chapter      
  a form bean with the name loginform is defined  using the dynaactionform class  which allows us to define an actionform with own properties without having to write an own actionform class  in this case  the form has the three properties username  domain  and password of type string   we define a global forward for the login page  so that it can be reused in any action forward   then the action is configured  the path attribute has to match with the action attribute used in the loginform jsp  html form  tag  there  the extension  do can be omitted   the type attribute specifies the class name of our action  which must be an action subclass  the name attribute defines the form bean to be used  so here we use the loginform defined above  the input attribute points to the global login forward defined above  for this to work  the struts controller must be configured to interpret the input attribute as a forward name  not a concrete path  see the complete configuration example in xxx on how to do that  we also have to define a forward with the name  success   as used in the loginaction class   which points to a path we want to be forwarded to if the login was successful   instead of writing an own loginaction  you can also reuse the predefined wage loginaction  com coremedia cap wage actions loginaction   see xxx for an example on how to use this action   as you will need something like this loginaction for all examples to work  the login part won t be explained anymore for the following examples  
  this action simply gets the current changecollector from the wagecontext and tries to commit it by calling changecollector commit     if the changecollector isn t empty after the commit  the commit failures are converted to struts actionerrors  using the cmrequestprocessor helper method getcommitfailuresasactionerrors    the actionerrors are saved so that they can be retrieved by a  html errors  tag in the next view   at the end of the action s execute   method  an actionforward has to be returned  our action looks up the forward with the name  success  struts config xml if it was successful  or the forward with the name  failure  if an error occured  actually  the former is a coremedia resourceactionforward  while the latter is an actionforward statically defined in struts config xml  but the action class need not care about that  see xxx on how these actionforwards are configured  
  to transfer data between the model and the view layers  struts requires an actionform bean to be defined for our input form   there are different possibilities of defining an actionform for a coremedia resource  one is to write an actionform for a specific coremedia document type  another is to use the generic wage resourceactionform or resourcelistactionform  both in the package com coremedia cap wage forms   which can be used for documents of arbitrary type   if you want to use the generic wage resourceactionform  you have to configure it in struts config xml instead of the dishactionform configured in xxx   a specific actionform for our dish document type could look like this  
  when writing an own actionform for accessing coremedia resources  it is important to extend the wageactionform  our dishactionform tries to get the current coremedia resource whenever a getter or setter is called by calling getcurrentresource    a method provided by the wageactionform  this will evaluate the resource and collector request parameters and set the appropriate resource and changecollector  it is therefore essential that this method is called before an action working on coremedia resources or a resourceactionforward is used  as these require the current resource and changecollector to be set  this is only possible if at least the resource parameter is set  the default changecollector will be used then   this is why we included the  hidden  resource form field in our renderform jsp template   as the resource parameter also could be a multipart form parameter  needed when file upload is being used  e g  for blob properties   you may not access getcurrentresource   in the constructor of an actionform  instead  call this method every time you want to access the current resource  as shown in the dishactionform example   the setresource   method in dishactionform looks a bit funny  it does nothing at all  the reason why this method has to be there is that when struts finds a request parameter resource  it looks for a property of the same name in the form bean  since we implement getresource    such a property is found  struts then tries to write to the property  using the corresponding setter  if there is no such setter  an exception is thrown  thus  the setter has to be there  but must not do anything at all  since the actual work of setting this resource as the current resource has already been done by the cmrequestprocessor  unfortunately  the straight forward solution to set the current resource when setresource   is called on the form bean is not possible  since the order in which form bean properties are populated by struts is not defined  when setting other properties  we already need to know the current resource  so we have to set this special property in advance   besides this basic functionality which will be nearly the same for every actionform  we only implemented a getter and a setter method for the name property of a dish document  the getter method is called for filling the form with the current resource property value  the setter method is called when the form is submitted with the  probably changed  value of the name property   when the setter is called  the change is only stored locally in the changecollector for a specific client  see xxx   only when the action commits the changecollector  the changes are stored permanently on the server  in our case  the changecollector is always committed after submitting the form  but this doesn t have to be the case necessarily  see for example xxx    of course it wouldn t have been necessary to write this dishactionform class at all  as we could have used the generic wage resourceactionform as well  without writing a single line of code  this is just an example for writing an own actionform which makes the interface to the business object more explicit and may e g  provide read write access to some calculated properties  e g  first name   last name    another reason for implementing your own actionform classes could be for example if you want to access  read from and write to  other business objects  besides coremedia resources  in a single form  or to access multiple coremedia resources in a single form  see xxx   
  for our example to work  the action and the form bean have also to be defined in struts config xml  the configuration has to be complemented by the common parts given in xxx  the complete struts config xml can be found in the downloaded examples  
  first an actionform bean of type dishactionform  in package com coremedia examples wage update  is defined under dishresourceform  instead of our dishactionform class you could also have used the generic wage resourceactionform   the first action login has already been introduced in ex prereq   the second showoverview just forwards to the overview by using a resourceactionforward with the view renderdishes  the pattern behind this action is to always send requests to the controller  which then forwards to the view  this is a clean mvc  model view controller  solution that has the advantage that the controller can still decide to dispatch somewhere else  in the example of showoverview action  the forwardifloggedinaction only forwards to the desired view if the user is logged in  to the login forward otherwise   the third and second actions showdetail and editdish follow the same pattern  just forwarding to the templates render and renderform  respectively   then our commitaction is configured  the path attribute of the action tag has to match with the action attribute of the  html form  tag in the view jsp  and the type is the name of our action class  the name attribute defines the actionform to be used with that action   there are also two actionforwards used by our action      success  of type com coremedia cap wage action resourceactionforward forwards to the current resource using the templateid render     retry  forwards to the templateid renderform  which results in returning to the same page  this forward is used as the input forward of the action  set in the input attribute of the action   to keep the current resource  we again use a com coremedia cap wage action resourceactionforward   failure  is a global forward that just forwards to   commitfailure jsp   a generic template that is supposed to display the error   finally  the struts controller has to be configured  when using wage  the classname and processorclass attributes must always be set as in the example  also  as mentioned above  the controller section has to specify that the input attribute of all actions is to be interpreted as the symbolic name of a forward  not as a literal path name  otherwise  it would not be possible to use resourceactionforwards  all other configurations just set the default values and thus could be omitted  but are provided in the example so that you can easily change the configuration  
  our editing process consists of three editing steps  and the preview step  where the user can decide if he wants to commit the changes made or to reset the resource properties  the design of the wizardaction allows the actual number of wizard steps and the corresponding views to be specified in the struts config xml without writing java code  see xxx   
  wage toolbar  for the editing commands we use a simple wage toolbar  it allows to mark text as bold and or italic  and to choose a color for the selected text  it also defines a new command  wizard command  which marks text as bold and italic in one step   rendering of the toolbar is done in the  rendertoolbar jsp  template  which we place in the templates resource folder of our webapp  so we can include it via  context include pagecontext  context getresource   geturi  rendertoolbar      regardless of what the current resource is  in this way it is also possible to define specialized toolbars for specific document types by placing a rendertoolbar jsp in the appropriate template folder   the actual rendering of the toolbar and its buttons is done using the wage tag library  see xxx for a reference of the used tags and their attributes  
  the dialog view contains a frame with a source url to the action starting the wizard  passing in the current resource  a dish  as a parameter  if no collector paramter is specified  wage uses the default changecollector name as configured in the wageconfig bean  see wageconfig   the default is wagesession new change collector  which will automatically create and use a new changecollector that is then handed on from edit step to edit step  
  the first editing step renders the name property of a dish document for editing  it passes on the collector and the resource parameters as hidden form fields  it also renders two buttons submitting the form to the action step   one with the resourcecommand set to  abort   one with resourcecommand set to  continue   therefore the action step  will either abort the wizard  global forward  or forward to the next editing step step   see xxx   
  step   and step   of our editing wizard work like step    only that step   lets you edit the description property  will be explained in detail in xxx   and step   renders the ingredients property for editing  the action step  is configured to forward to the  preview view of the current dish   as the preview should look similar to the normal render view  preview jsp simply includes the same view renderproperties and additionally renders buttons for aborting or committing the changes made to the current resource or to go back to the previous wizard step  
  in this example we will be using the predefined wage loginaction  com coremedia cap wage actions loginaction  instead of our own loginaction from xxx   we first define a  dynaactionform  loginform  the same as we had for our loginaction   and a global forward  login   the  login  action then uses the wage loginaction  our loginform  and as  input  forward the  globally  defined  login  forward   in order to use resourceactionforwards  you have to set the inputforward property of the request processor to  true   so that the input property of each action is interpreted as the name of an actionforward   the  editdish  action also uses an  input  forward  which will be used if errors occur during the validation of the associated actionform  therefore if for example an image with the wrong mime type is being uploaded  the action forwards to the  input  forward  showing the editing form again  with an error message displayed by the  html errors   tag   the  nocache  property of the request processor is inherited from the struts controllerconfig  by setting it to  true   we ensure that the browser sends an http request back to struts for each action taken by the user  this is important because our pages are dynamic and  partly  cached in the authoring server  so the browser must not cache them  too  
  example   demonstrates how multiple coremedia resources can be edited in a single html form by implementing an own actionform  in this way it is possible to make a  possibly complex  content model totally transparent for the user  as the user doesn t have to know which resource  or resources  he is editing at the moment   this example shows also how a new coremedia resource can be created and linked to another resource automatically  without any interaction from the user   we ll also examine how the blob property of a coremedia document can be edited by using the html form file upload mechanism   the configuration section of this chapter also shows how to use the wage loginaction  instead of our own loginaction from xxx   as the action for this example doesn t have to do anything special  only commit the changes made   please refer to the other examples on how to write an appropriate action class  
  toolbar  the toolbar uses the linklist editing commands from com coremedia cap gui resources linklistcommandnames for rendering command buttons  you should also use a wage focuslistener to enable disable the command buttons according to the currently focused editor  as shown in xxx  
  now when including the  addpicturestolinklist  view for a folder  all picture documents in this folder are displayed as thumbnails  and you can click on the thumbnails to add the picture to the linklist  for this to work the linklist has to have the focus  otherwise nothing will happen if you click on a picture   as the addresource   method of the linklist property editor also submits the form  we don t submit action  commit as hidden input field as in xxx  or else the changes would be committed whenever a picture document is added to the linklist  instead we only submit action  commit when the submit button is pressed  so we can commit the changes and leave the editing form when this parameter is submitted  when the parameter is missing  an appropriate actionforward should forward us again to the  renderform  view  displaying the  changed  linklist and allowing further editing  
  notice that we are using the new xml property with grammar  coremedia richtext       i e  a richtext property  instead of an sgmlproperty here  we are also using property names starting with lower case letters  contrary to the original menu site document type model   this makes accessing these properties more consistent  see xxx for an explanation   if you should get an error message like  no getter method for property  propertyname  of bean org apache struts taglib html bean   a wrong spelled property name  e g  starting with an upper case letter instead of lower case or vice versa  in a wage or struts tag could possibly be the cause  
  the prerequisites that have to be fulfilled in order to be able to run the examples are described in xxx  steps necessary to develop a simple wage based web application are featured in xxx  how to develop a wizard style editing application  resources are edited in multiple steps   how to use more than one changecollector  and how to integrate basic richtext editing functionality into your web application is explained in xxx  how multiple coremedia resources can be edited within a single form  how a new document can be created and linked automatically  how file upload can be used to edit the blob property of a coremedia document and how the  wage checkbox  tag can be used  you ll read in xxx  linklist editing is explained in xxx  a basic example working with workflows is shown in xxx  
   wage checkbox   renders an input field of type checkbox  which allows you to display and edit boolean values  as there are no boolean coremedia resource properties  often string or int properties are used to store boolean values  this tag can also be used to display the value from a coremedia resource property as boolean  or to change it  by providing i e  string or int values  according to the coremedia property type  which are to be used as true and false values  for an example  see xxx  attributes   property  required   property for which the getter or setter method should be called  the type is determined automatically truevalue  optional   value which should be set as resource property if checkbox is checked  default is true falsevalue  optional   value which should be set as resource property if checkbox is unchecked  default is false  as this tag extends the struts checkbox tag  you can also use any other attribute allowed by the struts tag  i e  accesskey or ondblclick   
   wage cmdbutton   renders a html image tag with an onclick handler that will try to execute the command set with the command attribute on the currently focused property editor  can be used only within a  wage toolbar    you can either use predefined commands  for example from com coremedia cap gui resources richtextcommandnames   for which an appropriate image and tooltip etc  is rendered automatically  otherwise you may also define your own commands via standard resource bundles  see xxx for an example   this tag is an extension of the struts img tag  so you can also use any other attribute allowed for the struts tag  attributes   command  required   the command that should be called on the currently focused editor   
   wage documentstate   renders an icon for the state  e g  checked out  of a coremedia document and a label for the version of the document  the icon and label will be rendered for the current document  unless the  bean  name and property attributes are set  see xxx for an example  attributes   name  optional   name of a bean available in the pagecontext property  optional   bean property  which has to be a resource  
   wage propertytype   renders an icon and label for the type of a coremedia resource property  the icon and label will be rendered for the current resource  unless the  bean  name and property attributes are set  if the type is unknown  a question mark icon will be rendered  can also be used for implied properties  i e  creator   which will render an user icon   see xxx for an example  attributes   name  optional   name of a bean available in the pagecontext property  optional   bean property  which has to be a resource  
   wage resourcetype   renders an icon and label for the type of a coremedia resource  the icon and label will be rendered for the current resource  unless the  bean  name and property attributes are set  if the type is unknown  a question mark icon will be rendered  see xxx for an example  attributes   name  optional   name of a bean available in the pagecontext property  optional   bean property  which has to be a resource  
   wage toolbar   a wage toolbar can contain one or more wage command buttons  possibly grouped by wage separators  see xxx for an example on how to use a wage toolbar  attributes   focusmanager  required   id of the focusmanager that will be used to find the focused editor for calling commands defined with a  wage cmdbutton  tag  styleclass  optional   style class to use for the toolbar large  optional   true or false  use small or large icons highlightstyleclass  optional   style class to use for highlighting  
  this book introduces and explains the unified api  which is the recommended api for most applications that use coremedia cms   the following chapters are organized as follows     an overview of the api and its uses is given in chapter    afterwards  chapter introduces you to the unified api by the way of a simple example    concepts of the unified api that are independent of the accessed repository are explained in chapter    afterwards  the individual repositories are dealt with  starting with the content repository in chapter    the workflow repository is the topic of chapter    in chapter the user repository is documented  
  content management covers creation of content in the repository and analysis of used content  there are basically two ways to populate the content repository   manual editing importing external content  out of the box coremedia cms supports manual creation of content by a variety of clients which are open for customization  in addition  customized clients could be created from the scratch using different frameworks  described in section   the coremedia editor  a standalone java application  configuration and customization of this editor is covered in the editor developer manual  the webediting server  a servlet which serves the coremedia webeditor for content editing  the webeditor offers nearly the same functionality as the coremedia editor but needs less installation  the webdav support  which allows to access the coremedia cms by webdav enabled applications  see the administration manual for details   the importer which is used to adopt existing external content  e g  from legacy systems or content providers  it must be customized concerning the location and the format of the source content  see the importer developer manual for details   for analysis of the content repository and the acceptance of your websites in the internet  or intranet  there is coremedia analytics  it offers a set of predefined detailed reports  the analytics dashboard  and easy to use reports directly integrated with the preview of your web site  the in site analytics   you might extend both report types by your own analytics report  see the analytics developer manual for details  
  let us look at the example line by line   string url    http   localhost       coremedia ior    the content server to use is indicated by its url  if you are connecting to a content server on a different host  you may want to change localhost to the name of the host and       to the port configured in the file contentserver properties   capconnection con   cap connect url   admin    admin     besides the url  only user name and password are required to log on to the server  here we use the admin account  assuming that a test environment has been set up and left basically unchanged  a connection object is returned from the connect call   contentrepository repository   connection getcontentrepository     the connection object is a mediator that provides access to all parts of the coremedia cms  there are separate repositories for content access  user management  workflows and so on  here we only deal with the content repository   content root   repository getroot     the root folder of the content repository is retrieved and stored locally as a content object  both folders and documents are summarized under the common concept of content  while there are some differences between folders and documents  they share many common traits  which allows to use a common abstraction in the unified api   contenttype foldertype   repository getfoldercontenttype     every content is equipped with a content type  types of documents may be freely defined  but for folders there is a single well known content type   foldertype create root   hello world     the content type is instructed to create a new instance of itself  you have to provide two arguments  the folder in which the new content is created and the new content s name   try           finally     con close       ultimately  you want to close the connection in order to free licenses that were allocated on the server and to release local resources that were obtained when opening the connection  if you had forgotten to close the connection  the program would not terminate  waiting for background threads started for the duration of the connection    it is generally a good idea to close the connection in a try finally block  so that it is closed in all cases  for example  run the example again and you should receive an error due to a duplicated content name  nevertheless  the program exits cleanly   you will notice debug output on the console  later on  in section logging will be described in more details  if the log output bothers you  redirect the standard error output stream to a file or the null device  
  having obtained the connection object as described in section  you can access three repositories  content repository  workflow repository and user repository  a repository encapsulates functionality that pertains to one category of domain objects  all repositories implement the common superinterface caprepository   a repository offers methods for the following tasks     lookup existing objects    modify existing objects    create new objects    inspect objects    inspect types    provide access to services    add and remove listeners that are informed about all events in the repository    get information about the connected server and about the local machine    obtain a reference to the associated connection   in the previous list  objects are identifiable persistent objects  the content repository is concerned with documents and folders  the workflow repository is concerned with processes and task  the user repository is concerned with users and groups  depending on the stateful objects that have to be processed  you choose the appropriate repository   the term services referred to objects that exist once per connection and that can be obtained through the repositories  in some sense  services are small repositories whose functionality is very limited  they might perform any of the tasks listed above by accessing objects and types or handling listeners  but their methods concern only one specific aspect of the repository  e g   only content publication or only the computation of rights to workflow objects   in fact  the methods provided by such services might have just as well been provided by their repository  but at the expense of clarity  by grouping methods in service objects  you can get a quick overview of the system  while getting closely accustomed to the relevant services  only   a typical method that is reachable directly on the repository level is contentrepository getroot    which returns an object representing the root folder  it is not appropriate for an individual object and it is not easily grouped with other methods to form a service  a typical method on the service level is publicationservice approveplace content   it matches nicely with other publisher related methods and there is no need why it would absolutely have to be placed in the object level class content  after all  many applications do not care about publication at all  so that we prefer make it a little less visible  
  in figure you can see an uml class diagram of the connection and all repositories and services that are reachable through the session   see chapter  chapter  and chapter for detailed discussions of the individual repositories  the services are also described in the chapter that is devoted to their repository  
  all objects are given a type  the type is immutable and constitutes a model of the possible property values for the object   capobjects are also providing access to properties of that object  you can obtain either a map with all properties or individual property values using the getters of a capobject  when getting a map  an immutable snapshot of the object s properties is returned  when getting one property value multiple times  however  concurrent writes will be visible immediately   properties can be of different types as will be described in section  there are typed getter methods for returning the current values of properties  if a typed getter is applied to a property with a different type  the unified api specifies an automatic conversion in many cases  please see the javadoc of capobject for details  if there is no possible conversion algorithm  an exception is thrown   when setting a property  make sure that you use a value that is appropriate for the property type used  because no automatic conversion takes place   the values returned by a getter are always immutable  in the case of string or integer objects this is obvious  but it is even true for collection values properties that return an instance of java util list  when you want to modify a collection valued property  you have to create a new collection and set that entire collection as the new value  modifying the returned value is not possible   having set the property of a capobject  that change is not immediately made persistent on the server side  changes are collected until either an operation occurs that cannot be delayed or the method capsession flush   is called on the current session  see section for details about the session handling  
  the unified api allows you to attach listeners to the repositories and certain services  the base interface of all listeners is caplistener  the base class of all events is capevent   in figure you see the type hierarchy of the class caplistener  normally  you will want to implement one of the repository listeners  but there are occasions when you need the events of a service listener or a connection listener   
  in the class diagram from figure  you can see the above mentioned classes and their associations  the contenttype interface will be discussed later in section   a document may have an arbitrary number of versions  which are linked in a predecessor successor chain  you can get the most recent regular version of a document by means of getlatestversion    for a checked out document  this is the last version that was created by a check in  its properties may differ from the document s current properties   besides these regular versions  checked out documents have got a working version that represents their current state  the working version differs significantly from other versions  most notably  its properties may change over time as the checked out content is changed  normally  you should not need to access the working version  as the associated content itself provides a richer and conceptually cleaner interface  for migrating legacy code  however  it might be natural to use the working version  so that a uniform interface is available   folders do not have any versions and they do not define any properties  instead  they provide access to their children  which may be either documents or folders  you can retrieve all children or a child with a specific name by using the appropriate methods defined in content   there are quite a few methods that allow you to inspect the state of a content  you can query whether a document is archived  whether it is checked out  who created it  and the like  this information is available as regular properties of the capobject  you have to call the individual getter methods for obtaining this information   a content supports many updating operations  in particular  it inherits the methods for setting properties from capobject  before changing the properties  a document must be checked out  after changing the properties  it may be checked in or  more rarely  be reverted to the original state  keep in mind that  as noted in section  property changes are buffered and sent to the server only when the current session is flushed explicitly   additionally  there a several other methods that deal with moving  renaming  copying  and archiving content  currently  these operations are executed immediately  they are not buffered   a content object may enter various states during its lifetime  the full state space is quite large with over    different states  however  there are a number of orthogonal views that can be more compactly presented and that define the possible transitions completely     
  only documents may be checked in and out as described in figure  folders are always checked in   the next figures apply to the publication process  which is handled by the publicationservice as described in section  please refer to that section for details about the mentioned methods   
  the place approval states of a content are quite simple  but they are shown in figure to indicate that a place disapproval can happen implicitly during a number of operations   
  as shown in figure  a content becomes archived  when a deletion is published or when the content is archived explicitly  it can be moved out of the archive  reaching the unarchived state  which it keeps until being archived again or published   one last state chart refers to the state of version objects  
  a version of a document is created when the document is created or checked out  in figure you can see the lifecycle of a version  typically  the content is checked in  so that the version is promoted to a regular version and is no longer a working version  the version is then approved and published  so that it appears on the live system   when the diagram references the destroy operation  this applies either to an explicit destroy   call of the version or the content  to an action of the document collector or version collector  or to a cleanup during publication when the publisher is configured to destroy intermediate unpublished versions   
  a rather complex state chart is shown in figure  it depicts the various states with respect to publication  being published  a content gains access to a number of attributes that are only available in this state  its state space is fragmented into four sub spaces    it might be moved  it might be renamed  it might be marked for being withdrawn  it might be marked for being deleted  
  content objects are often edited and published in formalized business processes  to this end  the workflowrepository as described in section provides a means to define your own processes  which may refer to documents and folder using their variables  accessing content through workflow objects is well supported by the instances of the task and process interfaces  but sometimes it is interesting to know the processes in which a certain document or folder is processed   to this end  the workflowcontentservice provides the method getprocesses content  for obtaining a collection of processes that reference a given content  it is up to you to determine the exact variable and possibly task that is currently dealing with the content  if desired  usually obtaining a reference to the process is enough to perform the remaining operations efficiently  
  the workflow repository  like the content repository and the user repository  provides access to objects stored persistently on a coremedia server  in this case  the coremedia workflow server  the objects to be accessed are modeled as subclasses of capobject  and their structure is modeled by workflow specific subclasses of captype   like all persistent objects in the coremedia cms  workflow objects carry an id that uniquely identifies the object within the system  across users and sessions  this id can be used to retrieve an object encountered before  the workflow repository offers a number of getter methods taking an id argument  which differs only in the expected type of the retrieved object   there are also methods to retrieve all objects of a certain kind  which  depending on the repository s size  can be quite expensive      many client applications will navigate the repository beginning from a process or task that is relevant for the current user  these tasks and processes can be determined using the work list service described in    worklist  if you want to navigate from a given content object to the processes that affect it  use the workflowcontentservice as described in    wfcontentservice  
  the objects stored in the workflow repository can be discriminated into processes and tasks  each process is composed of a number of tasks  which will be executed  in a defined order   as can be seen in      the unified api represents these objects using the classes process and task   all names of association ends in     correspond to getter methods in the unified api   for example  the aggregation between process and task can be navigated in both directions  the process containing a task can be determined using task getcontainingprocess    and the set of tasks contained in a process can be determined using process gettasks     the set of tasks of a process conforms to the process  definition  for each task definition contained in the process  definition  the process contains a task  which is created at the time the process is created   the successor relation between tasks conforms to the structure of the task definitions  as expressed by the successordefinition relation   the task structure is also fixed at process creation time   the first task to be executed when a process is started is determined by the process definition s starttaskdefinition    both processes and tasks pass through various states during their lifetime   these states are modeled using the enumeration types processstate and taskstate  respectively  and are described in further detail in       in addition to the states predefined by coremedia  information about the progress of a process or task can be stored in workflow variables  workflow variables can also be used to pass information from and to automated tasks  and may be seen or edited by users in task specific forms    workflow variables are represented just like content properties and user attributes  as described in    capobject  each capobject carries a property value for each property declared by its type  both processdefinition and taskdefinition inherit from captype the ability to declare properties  in the context of workflow objects  the type association between object and type is called definition  and differs only in its more explicit typing   when a workflowobject is asked for its type  the result can only be a workflowobjectdefinition  even more specifically  a process is always defined by a processdefinition  and a task is always defined by a taskdefinition    the types of properties generally available are described in    props  the workflow server allows more kinds of properties than the content server  especially  lists can be declared of all element types  not just content links   and additional atomic property types are available  user  group  boolean  contenttype  and timer  also  properties can be declared to be read only   when a timer property is declared  this has two effects  firstly  it creates a property that can hold a timelimit  and secondly  it creates a timer  which  when enabled  notifies the application when the time limit is reached   see section    timers for details   being a captype  each process definition has a name   the repository remembers the most recently uploaded process definition for each name  and automatically disables earlier definitions carrying the same name   a disabled process definition cannot be used to start new processes  but continues to be available for running processes   a process definition can be disabled explicitly even if it is not superseded by a newer version   the repository can be queried for a process definition by name  and again to support expression languages  a map containing all enabled process definitions by name can be obtained   a new process is created either by calling the method processdefinition create on an enabled process definition  or automatically by a server side fork task  see the workflow manual for details on task types    a process that is started as a sub process of another process can be asked for its parent process     the parent relation between processes must not be confused with the containment relation between processes and tasks  a process  tasks are created at the same time the process is created  but a sub process is only created when the corresponding fork task is executed  which  among other considerations  allows for recursion   
  since processes and tasks are dynamic  interacting entities  their lifecycle needs to be explained in some detail   process states  the state chart of a process is shown in      after being created  a process is started  and may be suspended and resumed a number of times  ultimately  the final task is completed and the process closes   when a process is created  it does not immediately start running   instead  the process remains  not started  until its start method is invoked  this way  the process  variables can be initialized at leisure  note that as long as the process is not started  its initial view is active  see       for example  this allows some variables to be writable only during initialization  and allows different validation rules to apply during setup and during the process  runtime   when the start method is invoked  the process becomes  running  and starts with its first task  all relevant automated action and user interaction happens during the execution of tasks  the process itself mostly serves to structure and coordinate their execution   while a process is running  it may be suspended at any time by invoking its suspend method  this stops all progress  be it in automated or user tasks  the process can be continued by invoking the resume method   a process can terminate either normally  by reaching and completing its final task  or it may be aborted by an invocation of its abort method  either way  after a short cleanup delay  the process and all its sub processes are destroyed  and all state and variable values are irretrievably lost  if some part of the process  state is still of interest  a process should first be suspended and inspected before aborting it  
  automated tasks  now you will learn the lifecycle of tasks    for simplicity  we begin with an automated task  in the normal case  the task s state progresses linearly from left to right as shown in the state diagram in      the task is started by its process  or by the completion of its predecessor  it waits for its  optional  guard condition to become true  then the automated actions are executed  when the automated actions are finished  the task becomes  completing   as soon as control is successfully transferred to the successor task  the task enters the  completed  state   the task structure of a process definition may contain loops  so a task that has been executed once may later be reached and start again  a task s lifecycle terminates when its containing process terminates   since the guard condition as well as the automated actions can contain customized code  error conditions must be modeled explicitly  when the evaluation of a condition or the execution of an action fails  or if a timer expires  the task is escalated  and will not automatically make any further progress  the previous state before escalation is recorded  denoted as history state  h   in the state diagram  and can be inquired using task getescalatedstate    if the failure was caused by external circumstances  it may make sense to retry the task after resolving the problem  when the retry method is invoked  the task goes back to the state before escalation and tries to execute the condition or actions once more   as described above  a process may be suspended  this operation cascades to all tasks contained in the process  which will all be suspended  each task s state before suspension is recorded  denoted by the lower history state in       and can be inquired using task getsuspendedstate     the task can only continue when the complete process is resumed  which will move each task back to the state before it was suspended   when a process is aborted  each of its tasks will be marked as aborted  making most methods unusable  and will be destroyed soon after   
  user tasks  while the execution of an automated task only consists of server side actions  a user task s execution is split into several steps  as soon as the guard condition is true  a user task is activated  and waits for a user to accept the task  when a user accepts  on the server  the task s preconditions are checked  and the task s entry actions are executed  when the entry actions are finished  the task becomes running  and responsibility for further actions passes to the user  when the user has completed his or her part  the server checks the task s post conditions and runs the task s exit actions       is a combined state chart for automated and user tasks  look out for  isusertask    conditions which annotate the differences between the task types   there are several transitions where customized server side code is executed  in each of these cases  when something goes wrong  the task becomes escalated   another potential cause for escalation is a timer expiring  for example because the user does not complete a task in the expected period  the mechanism for retry  suspend resume and abort is the same as described for automated tasks above  
  when a task is activated  i e  its guard check has been passed  it may be offered to several users  by default  all users that have the right to accept the task  see    rights   and have not rejected the task yet  appear in the set of offered users  a task may also be assigned directly to a user or to a group  or a certain performer may have been forced by a previous task   the strategy for offering tasks to users can be overridden by providing a customized performers policy  see the workflow manual for details   or by changing the handling of the accept right in a custom rights policy  see    rightspolicy    the set of users a task is offered to may be inquired using the method task getofferedto    all tasks that are offered to the current user can be determined using the work list service  see    worklist   changes to a task s set of offered users are signaled by taskofferedevent and taskrevokedevent instances  see    events    there are no events for changes to the work list  instead  when working inside the cae caching infrastructure  your code simply calls the work list getters  and can rely on the correct dependencies being registered behind the scenes  in this way  your code will be automatically re executed when any accessed work list changes   see the cae developer manual and    cache for further details   a task s guard condition may become false before the task is accepted by any eligible user   in this case  the task goes back to the waiting state   the user who accepts a task becomes the performer of the task  this entails certain privileges required to perform the task  namely the ability to read and write the task s variables  and the ability to cancel  complete or retry the task   before passing control to the user  first  the task s preconditions are checked   this feature can be used to verify assumptions by the workflow designer   if a condition is not met  the task is escalated  if all checks are passed  the task s entry actions are executed   this may include gui based remote client actions  which will be executed in the name of the user  see    remoteclientaction    the unified api offers the method task acceptandenter    which waits until the task has safely arrived in the running state   any exceptions thrown by failing preconditions or entry actions are passed on to the method s caller  this allows for a synchronous programming model   when acceptandenter returns normally  you can be sure that the task is running   in contrast  accept supports an asynchronous programming model  insofar as it only triggers the server side computation   when accept returns  the server side code may not have finished yet   a task can be passed directly from one performer to another using the method task delegate    the task remains in the running state  no conditions are checked or actions executed   a task may also be cancelled  sending it back to the activated state  the user ceases to be the task s performer  again  post conditions are not checked  and exit actions are not executed   note that these methods may also be invoked by a different user than the performer  assuming the respective rights are granted   for example  when a user is on vacation and has left behind some running task  an administrator or process owner may still lead the process to conclusion by delegating or canceling the task  an additional option for a user task is to skip the task  in order to make progress even when no suitable performer can be found   a call to task complete   indicates to the workflow server that the user has finished his or her work  all configured post conditions are checked   if any post condition fails  the user probably has not fulfilled his  task as planned  the task becomes escalated  and may be retried by the performer  returning it to the running state   note that the current performer is remembered while the task is escalated and or suspended   after all post conditions are successfully checked  the configured exit actions are run  and the task changes to state completing   similar to acceptandenter  the method task completeandexit   synchronously waits until the task including all post conditions and server side actions has completed  and passes any exceptions on to its caller   the remaining lifecycle is as described for automated tasks  above  
  the work list service is probably the most useful part of the workflow api  as it tells a user what work there is to do for him or her   a user interacts with the workflow server in several ways     selecting tasks to accept   working on  and eventually completing accepted tasks   resolving problems  represented by escalated tasks   starting new processes   monitoring the started processes  the work list service is implemented as a separate interface  and can be accessed using workflowrepository getworklistservice    all methods in the interface perform their computation for the current user   see    session for information on how to switch between different user sessions   the first request by a certain user needs some time to initialize and retrieve the required information from the server  subsequent requests are much faster  because the work lists are cached  and updated incrementally   the work lists are kept in memory until the user logs out  so especially when dealing with work lists  be sure to log out each user you have logged in   all methods of the work list service are cache aware   this means that when the work list service is accessed from within the content application engine  the calling method s result will only be recomputed if the contents of the accessed work list actually changed  see the content application engine section in the delivery developer manual for further details   the names of user aware methods follow the pattern  get objects   predicate    which should be read as  return all  objects  that fulfill the condition  predicate  for the current user    the specific work lists available are     tasks offered  contains all tasks that the current use can accept  in order to decide which task to accept  a user might want to inspect the task s variables    tasks accepted  contains all tasks that the user has accepted  and is currently performing  these are the tasks whose variables a user might want to inspect and modify  the user may finish working on this task by delegating  canceling or completing it  or by aborting the whole process   this list includes suspended tasks    tasks escalated  contains all tasks that are escalated  that the user might want to get running again  retry   possibly after fixing the work environment  these include the tasks that the user has performed  or was about to perform   and also all tasks in processes owned by the user    process definitions of which new processes may be created  contains all types of processes that the user may want to instantiate   for example  this  list is suitable for the selection in a  create new workflow  gui action    processes not started  contains all freshly created processes owned by the current user  for these processes  the user will want to fill out the initial view  before starting  or aborting  the process    processes running  contains all running processes owned by the current user   this list also includes suspended processes  a user might want to inspect the process  running view in order to observe the current state of the process global variables   processes in this list may be suspended and resumed  or aborted  by the current user    tasks with warning  contains all tasks that have a warning  and whose process is owned by the current user  this aids the user in tracking the progress of his her processes   there are some methods that may only be called by an administrator  the names of these methods look like  getall objects  predicate    this should be read  return all  objects  that fulfill the condition  predicate  for any user    the administrative methods serve to give an overview of everything that is going on in the system   however  if the system is busy  the resulting lists can be quite large  so care must be taken to access them in a suitable fashion   
  the unified api representation for view definitions is shown in      the diagram shows all subclasses of captype managed in a workflow repository  their instances form a hierarchy  which corresponds to the nesting in the workflow definition xml file  see the workflow developer manual for details   a process definition contains a number of task definitions  views can be defined by both process definitions and task definitions  there is one view definition per task definition  and two per process definition  where the initial view applies before the process starts running  and the running view applies after the process has started   at the bottom of the diagram  you can see the property descriptors  each captype aggregates a number of property descriptors  in the case of workflow and task definitions  these are the workflow variables  so for each process or task  a value is stored for each descriptor of its definition   a view definition also is a captype  its property descriptors are propertyviewdescriptors  in addition to being regular property descriptors  they provide information on how to represent the view during user interactions  and information on where the actual value is stored  a view as an instance of a view definition does not itself store any values  instead  the name of the property view descriptor determines where the actual value is stored  relative to the view s origin  the origin of a view is the process or task the view was obtained from  
  the concrete mechanism for variable resolution should not bother a unified api client  because the complete mapping from view property to workflow variable is managed transparently by the api  a view can be treated just like a capobject that just has slightly unusual property names  for completeness  the mapping from view property to target object and target property works as follows   a qualified property view descriptor name  of the form  task   property   is resolved to the property with the given name of the task with the given name in the same process as the view s origin   an unqualified property view descriptor name  of the form  property   refers to the named property of the view s origin  if the origin is a task and does not contain such a property  the property view descriptor refers instead to the named property of the task s containing process   two additional flags are specified per property view descriptor  firstly  a property is declared as read only or writable  this overrides the value of the writable flag in the target property declaration  for example  a workflow variable declared as read only in the process may be writable from the process  initial view   secondly  for a property containing content links  the contentwritable flag determines how the referenced content should be presented to the user  if the flag is false  the content should be displayed in a read only fashion  for example  assume one task in a process that has the goal of selecting a set of documents for later tasks to work on  this task will only need to add and remove links  not change the documents themselves  therefore  this task view should contain a property mapping that is writable  but not content writable   workflow views also affect the interpretation of read and write rights  see    rights for further details  
  the accesscontrol service of the workflowrepository allows to determine whether a user has the right to execute some operation on some workflow object  there is one right for each operation defined in the task and process interfaces  plus a read and a write right  plus the right to create instances of a process definition   a right can be queried using the generic method accesscontrol mayperform  which expects as arguments the object to which the operation would apply  and the operation  represented as a right object  the user for whom the right should be checked can optionally be passed as a third parameter  and defaults to the connection s current user     note that in contrast to the contentrepository s accesscontrol  in the workflow access control  there is no method signature expecting a set of groups  whereas content rights can only be granted at group granularity  workflow rights can be granted per user  therefore  group memberships are not sufficient to compute workflow rights   for each right  there is a method mayoperation  where operation is the name of the right  which serves as a shortcut for mayperform with the respective right as argument   so for example  the following two statements are equivalent   ac   wr getaccesscontrol    allowed   ac mayperform task  right task accept  user   allowed   ac mayaccept task  user    the javadoc of each operation specifies the required rights  note that even when a user has the right to execute an operation  he may still be unable to do so  for example  some operations are only applicable in certain object states  such  physical  requirements are expressed as preconditions  whereas  legal  requirements are expressed as rights   there are two rights whose names do not directly correspond to operations  namely right read and right write  these rights govern access to the properties of a workflowobject  the workflowobject in question can be a process  a task  or a workflowview   when the read right is given  all declared properties can be read  e g  using workflowobject get string    when the write right is given  all properties that are not read only can be assigned to  e g  using workflowobject set string object    as explained in    view  the properties of a view may actually be stored in various tasks or in the process   however  for rights computation  the rights defined on the view s origin are considered  not the rights on the workflow object that stores the variable  in this way  a view can be used to grant access to a controlled subset of the process variables  this is especially interesting because a task s current performer is granted read and write rights on the task  which applies to all properties in the task s view   the actual rights computation is performed by a rights policy  which is described in section    rightspolicy  
  similar to the content repository  the workflow repository allows to add listeners that get informed of every state transition  property change  task offer or warning  expired timer  and process definition update   a workflow repository listener can be added by invoking the method workflowrepository addworkflowrepositorylistener  to assist in implementing custom listeners  the unified api offers the class workflowrepositorylistenerbase  which can be used to handle selected types of events  by overriding the respective methods   or to handle all workflow events uniformly  by overriding the method  handleworkflowrepositoryevent   when a listener is invoked  the same session is active that was active when the listener was registered  see    listeners  and    sessions for details   events are delivered serially to all registered listeners   that is  the next event will only be delivered after the current event was processed by all registered listeners  if you need to do any time consuming computations  you should transfer the relevant events to a separate queue   at the time the listener is invoked  the effect of the event is guaranteed to have reached the unified api objects belonging to the same connection   so for example  in the method handling a taskenteredevent  you can assume that isrunning returns true for the affected user task if the user has not completed the task yet  note that the event may be significantly delayed  so the state may well have been changed in the meantime   in contrast to the content repository  a workflow repository listener may lose events when the server connection is lost  all listeners will resume their work  but an application generally has to assume that the workflow server state has changed completely while the connection was lost   so in addition to workflow repository events  you may also want to observe connection events  see    connection    when mixing reaction to events with accesses to the current repository state  it is often easier to use the cache and invalidation based programming model offered by the content application engine  see the delivery developer manual   the caching framework also handles connection failures  when the connection is reestablished  all cached values that depend on the workflow repository are automatically invalidated  or a recomputation is triggered    the events related to process and task states can be gleaned from the state charts shown in    states   in the task state chart  an event name accepted on the transition label corresponds to an instance of taskacceptedevent dispatched to the workflow repository listener   similarly  a started label in the process state diagram corresponds to a processstartedevent   when a task is newly offered to some users  or when the offer to some users has been revoked  a taskofferedevent or taskrevokedevent is signaled  respectively  see the subsection on user tasks in    states for more information  or see the workflow manual   a processcreatedevent is signaled when a new process is created  the event indicates the performer   the user who invoked the processdefinition create method   as well as the new process  owner   the remaining kinds of events are related to process definitions   a processdefinitioncreatedevent is sent when a process definition is uploaded  e g  using workflowrepository createprocessdefinition  as described in    objectsandtypes  when a process definition is uploaded  it supersedes any previous process definition with the same name  in addition to the identity of the created process definition  the event therefore carries information about the process definition s name  and the identity of the superseded process definition  the superseded process definition is implicitly disabled  a process definition can also be disabled or enabled explicitly by calling processdefinition enable or  disable  which causes a processdefinitionenabled event to be sent  
  a rights policy governs  for a certain workflow object  which users have permission to exercise which rights  the rights policy is configured for each process and for each task in the workflow definition   the rights policy can be retrieved and accessed directly from the accesscontrol service  though this is rarely necessary   and is also used for various internal purposes   all methods in the accesscontrol service eventually delegate to the rights policy  all client side access checks  for lightweight sessions  are based on the rights policy  for the connection session  rights are checked on the server  the work list computation is based on the rights policy  on the client as well as on the server   in order to avoid costly network roundtrips  each connection to the workflow repository obtains a local copy of the rights policy configuration  and performs all rights computations using client side code   the default rights policy is described in the workflow developer manual  in the following  we will describe how to deploy a custom rights policy   a custom rights policy is often used to influence the  can do  work list  also known as  tasks offered   as described in    worklist  the task accept right forms the basis for the computation of the tasksoffered work list  which can therefore be customized by changing the rights policy   marshalling  responsibility for computing work lists is split between server and client  it is therefore essential that both the server side and client side code behave exactly the same  the server side implementation has to implement either the wfrightspolicy interface as described in the workflow developer manual  or the rightspolicy interface of the unified api  the client side implementation in the unified api has to implement rightspolicy   the server side rights policy is created and configured when the workflow definition is uploaded and parsed  and is stored in the database in serialized form  since java serialization is unsuitable as a cross platform network protocol  the rights policy needs to supply a marshaller implementation  which encodes the rights policy configuration into a portable format such as xml  together with an id  the policy id  identifying the format  this encoded form is transmitted to the client when the client loads the process or task definition   on the unified api client side  the policy id is used to select a rightspolicymarshaller which parses the transmitted configuration  and creates the client side counterpart as an instance of a class implementing rightspolicy   the code for the client side rights policy and its marshaller must be deployed in a jar file in the client s class path  the first implementation of rightspolicymarshaller with a matching policy id is used  names of implementing classes must be listed in a file called meta inf services com coremedia cap workflow plugin rightspolicymarshaller inside the jar file  internally  the implementing classes are found using the sun misc service providers utility  which is also used by the java runtime to select xml parsers   for example  the cap client jar contains a file with the above name  consisting of the following line   com coremedia cotopaxi workflow authorization  aclrightspolicymarshaller  this instructs the unified api implementation to consult the class aclrightspolicymarshaller in the given package when unmarshalling rights policies  the method rightspolicymarshaler getpolicyid of this class returns the string  coremedia    cap workflow rights policy acl   which is exactly the policy id marshalled by the server side default rights policy     when a rights policy with this policy id is received on the client  the acl rights policy marshaller is invoked and reads the acl configuration sent from the server   the marshaller creates and returns an instance of aclrightspolicy interpreting this configuration  as the name suggests  aclrightspolicy is the implementation of the rightspolicy interface for this rights policy   configuration  if you want to design a unified api rights policy that can be used on the server side  your policy must be configurable from the xml definition  the rights policy is configured in the element  rights  that may be included in the definition of any task of process  traditionally  configuration is done by including  grant  and  revoke  subelements in the  rights  element  if you want to support this configuration style  you should implement the interface configurablerightpolicy instead of rightspolicy   that interface provides a number of grant and revoke methods that are called by the server while it parses the definition file  it also contains the method setrights set   which informs the policy about those rights that is is supposed to handle  note that this set is different for tasks and processes   rights computation  the interface rightspolicy contains four mayperform methods that must return true or false as a certain operation is allowed or forbidden  the getusers methods allow the policy to determine those users who are allowed to perform a certain operation  similarly  the getgroups methods return collections of groups  this is particularly useful when showing a selection of potential users or groups during user interaction   the rights for a certain task may depend on more than just a set of groups and their membership relations  as is true for the default implementation  for example  the right for an approval task may depend on the documents that are about to be approved  note that when accessing content in a rights policy  the  can do  work list will only be re evaluated after changes to content that is directly referenced by the process  therefore it is not recommended to access other content from the rights policy  
  in this section we will see how workflow server plug ins are written using the unified api  there are seven possible types of plug ins  actions  long actions  expressions  rights policies  performer policies  client action handlers  and managers  while these plug ins can still be written using the classic workflow api introduced with coremedia cap      it is generally simpler to use the unified api   of these plug ins  the client action handlers live purely in unified api clients  rights policies are needed both in the clients and on the workflow server  and the remaining three interfaces are instantiated on the server  only   when implementing plug ins  the comments from the workflow developer manual generally carry over directly to the unified api  in particular  restrictions on the permitted operations for the various plug in types are also applicable when using the unified api   in the following  we will discuss actions in    action  long actions in    long action  expressions in    expression  performers policies in    performerspolicy  rights policies in    rightspolicy  client action handlers in    remoteclient and managers in    manager  
  the workflowrepository in com coremedia cap workflow handles processes and tasks  it provides two aspects worklistservice and accesscontrol   you may want to start with the interface task and inspect its methods and its state diagram  the access to variables of a task is exactly the same as the access to properties of a content  see capobject   keep in mind  however  that there are additional data types available in the workflow context   afterwards  consult the interface process  memorize that although there are some similarities in its state diagram  equal state names mean different things for processes and tasks  see    states for further details   conclude the first look at the workflow repository with the worklistservice aspect and examine the various collections of workflow objects it provides  some background information is provided in    worklist      more 
  there are currently two apis for accessing workflow objects  the classic workflow api  or wfapi for short  as introduced with coremedia cap     and the unified api   the unified api covers all workflow related functionality required for developing client side applications  in comparison to the wfapi  it is integrated much better with the content repository  and provides a simpler model for accessing workflow variable values  also  it is integrated with the caching framework used by the cae   in coremedia cms       the wfapi must still be used in the following cases   existing sct   x clients  wage applications  the coremedia editor  for client actions handlers and client side rights policies of such applications   wfapi and unified api may be used interchangeably for developing custom server side plug ins of the following types   actions  expressions  rights policies  performers policies   the unified api should be used in the following areas   aplications using the cae  other newly developed client applications  for client actions handlers and client side rights policies of such applications   when migrating a wfapi client to the unified api  note that what is a process in the unified api is called a  process instance  in the wfapi  while a process definition in the unified api is called  process  in the wfapi  and similarly for tasks   the state hierarchy has been reshuffled slightly  compare the state charts in the workflow developer manual and in this manual   also note that some events have been renamed  as shown in    eventnames  there are no per object listeners in the unified api  only the workflowrepositorylistener  the wfapi s directory service functionality is covered completely by the unified api s user repository  
  the workflowrepository stores tasks and processes  and the definitions that describe their structure  tasks and processes in the repository are executed by the server side workflow engine  up to the point where user interaction is required   users can select the tasks they wish to work on  modify the respective workflow variables and related content  and finally pass back control to the workflow server   to support user interaction  the unified api allows to   create and start new processes  observe the current state of the computation  states and variables of tasks and processes   observe the progress of the computation  events   provide rights policies and performers policies for determining authorized users  determine where user interaction is required  work list management   and feed back a user s inputs  values  and commands like accept  complete  to the workflow engine   to perform automated actions  the unified api allows to  define actions and expressions for execution in the workflow server   for administrative purposes  the unified api allows to  monitor the running and the escalated processes and tasks  interrupt processes by suspending or aborting  upload and download process definitions  and inspect the structure of a process definition  in the following  these aspects will be described in some more detail  in     typesandobjects you will find a description of the basic types and objects stored in the workflow repository  and their relationships  their lifecycle states are described in the next section     states  all objects relevant to a user in their current state  such as offered tasks  can be tracked using the work list service described in    worklist  access to task specific subsets of a workflow s variables is implemented using views  described in    views  read    rights to learn how to determine the permissions granted to a user  the upload and download of process definitions is covered in    processdefs  all changes taking place in a workflow repository can be observed as events  as described in    events   we continue by describing the plug in interfaces  also called service provider interfaces   which may be implemented by you  the customer   finally  a few examples are given in    examples  and we give pointers for further reading in    furtherreading  
  in figure you can see an overview of all classes involved in the representation of users and groups   a group is called administrative  if its direct and indirect members are supposed to gain special privileges while working in the coremedia cms  a user is called administrative  if at least one of its direct or indirect groups is administrative   for the purposes of assigning rights to users  groups may be designated as content groups or live groups or both  only rules of content groups affect the computation of rights on the content management server  only read rights rules that are defined for live groups are published to the live servers   for users  the home folders can be retrieved as a content object  as already explained  setting the home folder is only possible for built in users  
  this manual provides information on the principles of the coremedia workflow  on how to write own workflows and on how to develop extensions for the workflow   in chapter   you will find a short introduction into the gui and components of the workflow  in chapter   you will find a short survey of the pre defined workflows delivered with coremedia and the publication semantics  in chapter   you will learn how to develop your own workflow definitions  it explains the syntax of relevant xml files  in chapter   you will learn how to implement own extensions of the workflow  in chapter you will find a reference of the xml elements existing for workflow definitions and some code examples and workflow definition examples   
  content management covers creation of content in the repository and analysis of used content  there are basically two ways to populate the content repository   manual editing importing external content  out of the box coremedia cms supports manual creation of content by a variety of clients which are open for customization  in addition  customized clients could be created from the scratch using different frameworks  described in section   the coremedia editor  a standalone java application  configuration and customization of this editor is covered in the editor developer manual  the webediting server  a servlet which serves the coremedia webeditor for content editing  the webeditor offers nearly the same functionality as the coremedia editor but needs less installation  the webdav support  which allows to access the coremedia cms by webdav enabled applications  see the administration manual for details   the importer which is used to adopt existing external content  e g  from legacy systems or content providers  it must be customized concerning the location and the format of the source content  see the importer developer manual for details   for analysis of the content repository and the acceptance of your websites in the internet  or intranet  there is coremedia analytics  it offers a set of predefined detailed reports  the analytics dashboard  and easy to use reports directly integrated with the preview of your web site  the in site analytics   you might extend both report types by your own analytics report  see the analytics developer manual for details  
  each workflow definition describes one process  a process can take several states as shown in image      a  
  variables in the task scope define the local state of a task instance  however  task variables do not have restricted visibility  a variable in a task may be referred to from other tasks by prefixing the variable name with the task name and a dot  a variable defined in the process can be referred to by simply using its name without a prefix  for the definition of variables  see section section         a guard defines an expression that delays activation of a user or automated task until the expression evaluates to true  the expression is re evaluated each time the state of process  or task instances changes or the content  name  or place of referred resources in the content management server changes  note that changes to other  external entities do not automatically trigger re evaluation of a guard  the class abstracthandler may be subclassed to trigger the evaluation of guards due to external events   a precondition defines requirements which have to be fulfilled before the task itself is executed  a postcondition defines requirements which will be evaluated after the exit action has been executed  if more than one precondition or postcondition is provided  then the conditions are evaluated in the order specified  the result of such an evaluation operation is equivalent to define an and expression with an ordered set of conditions   note that violating a condition is considered an error  if you want to delay execution until a condition is true  use a guard  if you want to check a condition and allow correction of wrong data entry within a user task  use a validator  see below   
  the most common kind of task is the user task  which is executed by participants of the workflow   when defining a user task  first consider the rule that selects which users to offer the task  usually  the appropriate users are selected from their groups  for each group  a list of rights on the task is given  where accept is the most important one for user tasks  for special requirements  you can implement your own business logic in a wfperformerspolicy   for a user task a client view has to be given  a client defines a view on the variables of the workflow that may be read and or modified  for resource variables  you can additionally determine whether the referred content may be editable   to make workflow more convenient for the participants  user task s actions have access to various functions of the coremedia editor  while an automated task can change resources  e g  check out a document   a user task can even open a document view or start a publication with graphical feedback  for a list of possible actions  see section     and section       validators  see section          have a special feature in the context of a client view  if a validator fails and provides a description  it is displayed as an error message in a client view  like task descriptions  validator error messages may be localized  see section           
  automated tasks usually consist of an action sequence  an optional guard and pre  or postconditions  they are executed by the workflow server   a guard is used to activate the automated task depending on some condition  for details about when conditions are reevaluated  see section           actions within an automated task usually modify workflow variables  manipulate resources  perform calculations and or access external systems  however  they may not access the client gui  since they are not executed on the client side  as the workflow server uses a direct connection to the content management server for automated tasks  if you want gui interaction  you have to use a user task   several actions which are to be executed sequentially should be given as an action sequence within a single automated task  not as a sequence of automated tasks  this is easier to understand and will be executed faster  the general rule of identifying different tasks by potentially different users can also be applied here  if you consider automated tasks as being accepted and performed by a  robot    an automated task completes as soon as all it actions have been executed and its optional postcondition is evaluated  if an action raises an exception or the postcondition evaluates to false  the automated task is aborted  the reason that led to the error should be fixed before the task is retried  as a last resort  the whole workflow can be aborted  
  tasks are the main building blocks of workflows  there are usertasks and automatedtasks  as well as auxiliary control flow tasks like if  choice  fork  join  switch  forksubprocess and joinsubprocess   all mentioned different types of tasks can be defined using the coremedia workflow xml format   like a process definition is a template for concrete process instances  a task definition is a template for specific task instances  while being executed by the workflow engine  a task instance can take several states as shown in the state diagram in image      a   
  workflow variables are declared within a workflow definition  they contain references to resources or other values  there are single valued variables  atomic variables  and list valued variables  aggregation variables   of a given type  workflow variables are the main connection between the workflow server and the content management server  by assigning resources to workflow variables  these resources may easily be accessed in later tasks of the same workflow instance  workflow variables provide the context in which a task has to be carried out  if a workflow variable is defined in a task  it can be accessed by another task using the dot syntax name of task name of variable   each variable is typed  a variable can only be bound to a value of the corresponding type or subtype  there is a fixed amount of types for workflow variables   basic value types  boolean  blob  integer  string  date  timer coremedia resource related types  content folder  document   contenttype coremedia user manager related types  group  user  if a variable should be shown or edited in the client gui  it must be mentioned in a client view  see section           please note  that for aggregation variables there exists only an editor for resource variables  so by default  you can only edit resource aggregation variables in the variable view  of course  its possible to create and configure a custom aggregation editor for the client gui   
  guards are boolean expressions that must evaluate to  true  before the task is activated  the expression may be based on the current values of workflow variables  on resources in the content management server or on external resources  a possible use of guards is to determine the resources that are required for the task  the task then is deactivated until all resources are freely available  thus  the workflow suspends execution until the guard is fulfilled   in example        a you see a guard that checks whether the property ischeckedout  of the resource contained in the variable  document   variable  document   is set to false  the stored value is negated by not   i e   the task continues when the document is checked in  
  basically a subworkflow is an ordinary workflow started by the task  forksubprocess  within another workflow  the subworkflow may be passed parameters via the subelements of the  parameters  element    a subworkflow is always started as a separate process  while the main process continues  there are two different ways in which a subworkflow may be started   synchronously via  forksubprocess detached  false      if the main workflow is suspended  resumed or aborted  the subworkflow is suspended  resumed or aborted  too  but it may finish without affecting the subworkflow     the main workflow may wait for the subprocess to complete or to be aborted via the  joinsubprocess  task  note  that it is not possible to loop  see section section       a  forksubprocess  and join all subprocesses afterwards  use recursion in this case so that each subworkflow starts exactly one subworkflow  asynchronously via  forksubprocess detached  true   or simply  forksubprocess       if the main workflow stops  the subworkflow is not affected  since they are not connected  there is no possiblity for the main workflow to wait for the subworkflow to finish     
  timers can be used to define time spans or moments in the execution of a workflow  e g  the time available for a user task to be accepted  the coremedia workflow supports timers which can be initialized with relative  the timeout value is added to current time giving the expiration time  or absolute values    by default  two timers are attached to usertask definitions and one to the process definition which can be set via the following attributes     defaulttimeout  this is a relative timer which is activated when a process instance is started or a task instance is activated    defaultoffertimeout  this is a relative timer which is activated at the first offer of the task after the activation  this means if the task is first accepted by a user  then canceled by the user and again offered to the other users the timer will not be restarted   in contrast if the task is used in a loop  the timer will be restarted each time the loop reaches this task   if these timers expire  they will add a warning message to their process or task instance  you might use one of the predefined timerhandlers   using the  timerhandler  tag  to react differently if timers expire  see section         the handler must be defined in the same location  i e  the process or task definition  where it s associated timer variable is defined   in addition  you may define custom timers  at first you have to define a variable of type timer  using the attribute relative you can define whether the timer is a relative   true   or absolute one   false    defining an absolute value in the workflow definition might not make much sense  it is more usefull in the client gui    the timer can be started and stopped using the actions enabletimer and disabletimer  see section         using the expressions isexpired or isenabled  you can check whether your timer has been expired or is enabled and running   note that    timer values have no identity  they are bound to their variables    aggregations of timers are not supported    the following example shows an automated task which defines and enables a timer variable  the succeeding user task waits until the timer expires  
  a useful notation for defining workflows are activity diagrams as specified by the unified modeling language  uml   coremedia workflow definitions are based on activity diagrams  they have to be converted to a coremedia sci specific xml format for the workflow engine   after presenting a small example  the notation of activity diagrams is presented and the translation into the  coremedia workflow xml is shown   image    a describes the following simple workflow with an activity diagram   a resource is created by one user  an editor  and approved and published by another user  the chief editor   more precisely  the users fill the roles editor and chief editor  respectively  the workflow  edit and publish resource  consists of the following tasks    a user of the role editor creates and edits a document   a user of the chief editor role now has to read the resulting document and judge whether to approve or disapprove it  if the document is approved  the chief editor is requested to publish it  if the resource is not approved  the resource has to be changed again by the first user   
  in the following you will find a description of the uml elements used for the definition of workflows and their mapping to the xml format used by coremedia workflow  the details of the xml elements are given in the section      the workflow xml reference  
  here the definition of a workflow is shown by means of the simple publication workflow    the routine is  an editor creates and edits a change set in the compose task  after completing the compose task  the resources will be approved and published automatically  only if the forceuser action succeeds   in example    a you find the complete xml definition of this workflow  
  in the general definitions the workflow itself is described      line        the process is named  simplepublication   the localized name is displayed in the gui when selecting a workflow  the first task that is executed after the workflow start is the task  assigncomposer     line          the rights  see        concerning the workflow are assigned to users and groups  the user admin can create  start  suspend  resume and abort a workflow instance  the members of the group composer role are allowed to create  start  suspend  resume and abort the workflow process instance    line          different variables are defined by name and type for storing the state of the workflow  the changeset and comment variables store the resources which are processed and the comments of the users  the four aggregation variables which are prefixed with publication are used to store the publication result     lines          if a new workflow has been created a dialog box opens up  this can be suppressed  where workflow variables can be initialized the variables to show or set are defined in this initial client view  the variables subject  comment  changeset and comments will be shown in the initial window  so that the creator of the workflow can change the content of the variable    line          if the workflow has been started  the variables defined in this client view will be shown in the variable view of the workflow window  the variables need not to be read only as in the example  the variables subject  comment  changeset and comments will be shown in the variable view  if the workflow is selected in the workflow list   but it is not possible to change the variables  because they are defined as read only via the  reads      elements   automated task  assigncomposer  
  aborttasktimerhandler  this timer handler aborts the task instance in which it is defined on expiration  see image      a    
  addwarningtimerhandler  this timer handler adds a timer expiration warning to a process or task instance  see image      b   
  column classes define how content is rendered and sorted in table columns of the client gui  the classes are shown in table  the workflow column classes are defined in the editor xml file   alternatively  a renderer can be set for each column class  the renderer carries out the display itself  for this purpose  an attribute  renderer  renderer class  has to be embedded in the columndefinition element  the renderer must be a subclass of the class hox corem editor toolkit columnrenderer layoutcolumnrenderer  see the api documentation for details  
  this chapter is about the definition and description of workflows  definition means that a desired workflow  or business process  is described by means of uml activity diagrams  then  description means the translation of a uml workflow description into a workflow xml file and probably some java classes    section     gives a short survey of how to analyze and define a workflow by means of activity diagrams  and the syntactical elements of the xml workflow description language   section     describes how you can upload your workflow definition to the workflow server  section     gives an example on how to define a workflow  in section      all elements of the xml workflow description language are described as a reference   
  see section     for more hints on this topic  
  actions can only be used in automated tasks  user tasks or in the predefined runactiontimerhandler  they are performed at different times   entry actions are performed when a user accepts a task  exit actions are performed when a user completes a task    actions in an automated task run when the guard evaluates to true    actions in a timer handler are run if the associated timer expires   actions should run for shortest period of time that is feasible since they run inside a server transaction and block precious server resources  to avoid problems  stick to the following rules   don t write client actions that require user interaction  if you interact with another system and need to wait for a result  for eample sending a mail and waiting for a notice of its receiption  always use a second task with a guard  see section          following the initial task with your action  the example in section       describes an expression which checks whether a mail has been received or not   note the following features which are helpful when you program your own actions   actions are javabeans  parameters for the global configuration of the action bean can be defined via the xml workflow definition  see section         actions can set a success variable which may be used to control the error handling within the workflow  actions can assign a result to a workflow variable  see section       for details    
  interface to implement  server side actions must implement the interface com coremedia workflow wfaction    convenience classes  for convenience you can subclass com coremedia workflow common actions abstractaction which already includes implementations of all needed getter and setter methods and which uses a condition as guard  isexecutable     you need to implement the execute   method for your own functionality  this method will be called by the coremedia workflow server  in section       you will find a complete example of a server side action   
  interface to implement  basically  the server side stub of a client side action must implement the interface com coremedia workflow wfaction  for convenience and to hide the details how events are created and dispatched  you must subclass com coremedia workflow common actions abstractclientaction  this class already includes implementations of all needed getter and setter methods  uses a condition as guard and contains all of the event logic  abstractclientaction also implements a default timeout for a client action  the default timeout time is    seconds and can be configured using the attribute timeout in the workflow definition  in example      a you see a sample action which extends abstractclientaction   server side  the server side implementation of a client action is a stub which   assembles the argument list and passes it to the client via an event  the abstractclientaction class includes the command and gui parameters in the argument list  the command is the one used as the parameter in the call of the super   constructor in section        receives the clients result and creates an wfactionresult from it   custom clients  that are not event driven  have to be aware that while performing a task accept or task complete operation on behalf of connected clients there may be callbacks of the client action for the pending call  the callbacks have to be executed before the server call can return  
  line    use the abstractclientaction instead of the wfaction interface   line        the constructor of your server stub  the constructor of the super class is called with the command as a parameter which should be executed on client side  this command is automatically included in the event send to the client   line         this processes the arguments which will be included in the event  in line    the parameter docmenttype is added to the hashmultimap  this map already contains wfclientactionlistener gui and wfclientactionlistener command as default entries   line          this process the result that has been received from the client   client side  the client side must have a wfclientactionlistener installed  see example      b  which handles the incoming action events      the callback id obtained by wfclientactionevent getcallbackid must be returned in the actions result so that the coremedia workflow server can associate request and callback    wfclientactionevent getparameters returns the call parameters as encoded by the server side stub  for the previous example  the parameters would contain the strings documenttype and article    the event s other methods are reserved for internal use    all predefined client actions use a property value encoding for the action parameters  everything is encoded as a java lang string   note  that the coremedia editor has a generic client listener  that tries to find and execute an appropriate hox corem editor commands command  have a look at the editor developer manual for details  
  line    the client listener must implement wfclientactionlistener   line     this method must be implemented  it gets the event as a parameter  here you can implement your functionality evaluating the information from the event   line         this is only a simple example  the parameters of the event are read in an array and are printed out   line     an important line  the client listener must return a clientactionresult containing at least the callback id  it is also possible to return more information to the server  see the coremedia workflow api documentation for more details on clientactionresult    command for the coremedia editor  in example      b you see an example command which is executed on the client when an appropriate event is received by the event listener of the coremedia editor  for this  the action defined in example      a has to be executed  
  it is good practice not to hardcode the variable names into the action bean  but to use configurable attributes to access the workflow variables  thus it is easier to reuse the action in other workflow definitions  here is how you do this   configure your action bean from the workflow definition by adding an attribute to the  action  element like in example      a  define a setter method in your action for the configuration like in example      b  directly access workflow variables using the wfinstance getatomicvariable   or wfinstance getaggregationvariable   method   
  this chapter describes how to create an action which sends a mail to a receiver  the receiver and the document to send can be passed to the action using the coremedia editor  you will learn how to pass variables to the action  how to return variables and how to access the coremedia content management server and the coremedia workflow server   for clarity some methods or variable definitions are removed from the following excerpts you will find the complete code of the action in section       
  the framework  in this chapter you will find the  framework  of your action  e g  the packages to import or the class to inherit from  see example      a for the package declaration  imports and class declaration of the action code  
  line         make sure  you have defined the variables you want to use in the action   line          you can use this method to get the value of all atomic string variables  if called  you have to pass the workflow instance and the name of the variable as parameters  the important part is line     you use the method getatomicvariable of the interface wfinstance to get the atomic variable  in comparison to an aggregation variable  defined via variablename  in line    you extract the content of the variable using the method getvalue  if everything went fine  you return the value of the variable in line      line         you can use this method to get the id of a resource  the only difference to the method above is the extraction of the resource id in the lines          if the value of the workflow variable is of type resourcevalue you can get the resource id using the getcontentid   method   lines          this is the method to be called from the workflow server  in our context of accessing variables the lines         are the interesting ones  here you get the values of the workflow variables  in line    you have to return a wfactionresult object instantiated with the boolean result of the mail sending  you find the definition of the send method in the complete example in section        line          here you declare the setter methods of your action bean for the configuration  the name of the methods must match the names of the attributes of the action in the workflow definition  the setter and getter methods of the success variable are defined in the abstractaction class from which the example action inherits   access the repository  in the following  we will show  how the action can access the session to the content management server from the coremediaworfklow server to get the content of a document  see example      d for the appropriate lines of the action  
  interface to implement  for a generic expression you have to implement the interface com coremedia workflow wfexpression  such an expression must return a java lang comparable value  if you want to use the result of your expression for further evaluation  you should return a wfvalue because this is what all built in expressions operate on   convenience classes  for convenience you can subclass from com coremedia workflow common expressions abstractexpression and implement the evaluate   method  which is called by the coremedia workflow server  see example      b for a simple example of an expression    define expressions  the following xml fragment shows  how to define your expressions in the workflow definition   
  this chapter describes how to create a boolean expression and insert it in the workflow definition  have a look at example      b for the example of a simple boolean expression which always returns  true     define the expression in the workflow definition  you can use your expression in the workflow definition via the  expression  tag  see example      a for an expression inserted in an  if  tag  
  if the expression evalutates to true then the successor is the task named true  otherwise it is the task named false   programming the expression  see example      a for the important lines of the code  configuring the expression with variable names from the workflow is not shown in this example but it is similar to the method in the action example  the same is true for accessing the repository  
  interface to implement  own performer policies must implement the interface com coremedia workflow wfperformerspolicy  the important method is calculateassignment wftaskinstance taskinstance  wfuser   permittedusers  which is called by the coremedia workflow server  it returns a wfuserassignment object  see the workflow api documentation for details    default implementation  if you only want to adapt the default performer policy to your needs it would be easier to subclass the default performer policy defaultperformerspolicy and to override the appropriate methods   defining the policy in the workflow definition  in example    a you see how to define your own performer policy in the workflow definition  
  customize the performer policy   see example    b for a customization of the default performer policy which performs a very simple task  it calls the default performer policy and cuts off the last user from the result  
  line    the properties concerning the workflow with the name  threesteppublication   as it is defined as the workflow s name in the workflow definition file  are configured   line       the class that is used when a new process is started  here a specialized class is used  that suppresses the dialog box for initializing the workflow variables normally popping up  in addition  the selected resources are added to the change set   line    herein  you can define with which editor the variables defined in the  initialclient  and  client  sections of the workflow definition will be shown  if no property editor is defined  the default editor for the variable type will be used   line        in this part  an editor class for viewing the aggregation variable  changeset  which contains the selected resources is defined  a specialized class for the publication workflows is used  which shows place and content changes concerning the selected resources    line         here  the variable view for the compose and approve task is defined   line         and line          for both tasks  two editor classes are defined  which show the content of the  changeset  and  publicationresultcodes  aggregation variables  for the  changeset  variable the same class as for the workflow variable view is used   line     here  the variable view for the publish task is defined   line          as described before  an editor class for the aggregation variable  changeset  is defined   line          in this section  the representation of the task and workflow information shown in the workflow list is defined   line          three columns should be shown in the workflow list  for each column  a class must be defined which shows the appropriate information  in the first column  the type of the task is shown  in the second column  the state of the task is shown  in the third column additional information concerning the workflow is shown  the class used for it taskdatacolumn is more generic than the other two classes  thus  it has to be configure by another class defined in the componentfactory element to create the renderers for the column   line          in this part  the specialized class for showing details about the publication workflows is defined  the attribute processname defines the workflow for which the information should be shown  see section     for details on the class  
     attribute   description   name   name of the column which is shown in the header of the column  it may be localized as described in the editor developer manual    class   this attribute is used for selecting a class for displaying the column  this determines the field type which can be displayed  furthermore  the class sorts the contents of the column  you find predefined classes in section          width   this attribute is used for defining the minimum width of the column in pixels  if the window width is smaller than the total sum of all column widths  a scroll bar appears  scaling for a larger window is controlled with the attributes weight and resizable  the default value is     pixels    weight   this attribute gives the relative weight of a column in scaling  rational numbers are entered  the default value for all columns is          resizable   this attribute is used for defining whether a column is resized at all  the default setting is  true   i e  the column is enlarged  resizing can be switched off with  false    
  this element is used to define  which property editor should render and edit a workflow variable  if no element is defined for a variable  the default editor for the variable type is used  see section       for a listing of the editor classes   an editor for variables must implement the subinterface of the propertyeditor interface  depending on his concrete type   
      attributes    description    editorclass    editor class to be used for showing the variable  see section       for a listing of the editor classes     name    name of the variable to be shown  as defined in the workflow definition  
      attributes    description    editorclass    editor class to be used for showing the variable  see section       for a listing of the editor classes     name    name of the aggregation variable to be shown  as defined in the workflow definition  
  interface to implement  startup classes need to implement the workflowstartup interface  which you will find in the editor api    default implementation  the most simple way to program own startup classes would be the extension of the predefined startup classes genericworkflowstartup or automaticselectorworkflowstartup  these two classes implement almost the same behavior  but automaticselectorworkflowstartup will automatically select the first task instance in the workflow view  if this task instance is automatically accepted  see the editor api for details     defining the workflow startup class  the workflow startup class has to be integrated with the coremedia editor  or your own client implementations  see section      in the editor xml definition  see example       a    
  example workflow startup class   the following example shows a customized startup class  the example will check all atomic workflow variables if they are capable to store documents  if it finds such a variable it will store the first selected document in this variable  please be aware that the exception handling in this example is rather poor  the example startup class needs a selected document and needs an atomic variable which is able to store documents  see example       b for the required packages  
  line        the getinitialassignment   method is called by the workflow server  the parameter processinstance passes an instance of the workflow to the method  which allows you to access workflow variables  the parameter enumeration contains the selected resources  which are passed to the method to put them into the workflow variables   line    the variables of the workflow process definition are stored in the wfvariableassignment array   line        in order to work with the selected documents  you need to create a resourcevalue from the resourceholderenumeration  for this you can use the static method getvalues   of the resourceholdervalueconverter class   line    now you can use the helper method filtervalues   which extracts the documents from the selected resources   line         you iterate over all workflow variables stored in wfvariableassignment   line     extracts the first wfvariableassignment from the workflow variables   line          now you can get the first wfvariable from the workflow instance    line     as your workflow definition defines a variable named  myvariable of the type document    line     now you can assign the resourcevalue to the wfvariableassignment   line     return the wfvariableassignment to the editor  which in turn hands it over to the worklfow server   in example       d you see two more possibilities to customize the workflow startup class  the method isskippingvariabledialog shows how to skip the initial dialog for the assignment of variables  if you want to allow the user to change the variables  return false  the method performinitialactions allows you to perform actions at start time of the process  the default implementation genericworkflowstartup is empty  
  the order of the elements in the workflow definition is not relevant except for the action and the condition elements  the reason for this is obvious  as you have to control the order of the actions and a condition that is comparing values depends on an ordering  too  mostly nmtoken is used instead of cdata as the content model for the attributes  this restrictive policy avoids escaping of names  
  booleanexpression  definition  equal   notequal   greater   greaterequal   less   lessequal   and   or   implies   not   forall   exists   let   get   read   length   isempty   notempty   isfolder   isdocument   isdocumentversion   isexpired   isenabled  the booleanexpression parameter entity is used to define a subset of all available expressions which evaluate to a boolean value    
  expression  definition  expression   equal   notequal   greater   greaterequal   less   lessequal   and   or   implies   not   forall   exists   let   get   read   length   isempty   notempty   isfolder   isdocument   isdocumentversion   isexpired   addlatestversion   value  blob   boolean   content   contenttype   date   document   folder   group   integer   string   timer   user  the expression parameter entity is used to define all available expressions  you can use the predefined expressions listed above or implement your own expressions  using the expression element   
  flowcontroltask   definition  choice   fork   if   join   joinsubprocess   forksubprocess   switch   flowcontroltasks define the flow of control in a workflow process     this is just an abstract definition  only concrete flowcontrol tasks may be used in a valid workflow definition     note  a flowcontroltask may not be final   
  task  definition  automatedtask   usertask   flowcontroltask  choice   fork   if   join   joinsubprocess   forksubprocess   switch   tasks define the steps a workflow process must complete  a task is identified by its name  like a process is a template for concrete process instances  a task is a template for concrete task instances  tasks refer to each others by the name s  of their successor s   each task must either have at least one successor or be final    the description of the task is a human readable explanation about what the task does  it may be localized by the editor or used as a key for localization in the coremedia editor   tasks which finish a workflow process are declared final  there has to be at least one task in a process definition which is final  only usertasks and automatedtasks can be final    variables in the task scope define the local state of task instances  this does not restrict the visibility of the variables   a variable in a task may always be referred to from other tasks by prefixing the variable name with the task name and a dot    there are nine task types   an automatedtask is executed automatically  a usertask has to be carried out by a user    the other task types are used to control the flow of execution of tasks  
  value  definition  blob   boolean   content   contenttype   date   document   folder   group   integer   string   timer   user  a value represents one or many values of a variable  a value element is used to initialize a variable or to be evaluated in expressions  see code   
  action    grammar    condition   property    an action is external code which may be called to customize the processing of the workflow engine  see chapter for implementing own actions     you can either give the full qualified name of your own action class which must be an implementation of com coremedia workflow wfaction or an unqualified classname which will be searched for in the package com coremedia workflow common actions    an predefined  action or one subclassed from abstractaction abstractclientaction may contain a condition element which serves as a  guard  for the action code  see the example below   only if the condition is satisfied  the code is executed  otherwise nothing happens    the following actions are supplied with the workflow engine by default  approveresource  checkindocument  checkoutdocument  copyresource  createdocument  createfolder  deleteresource  disapproveresource  enabletimer  excludeperformer  disabletimer  moveresource  opendocument  preferperformer  publishresources  renameresource  savedocument  uncheckoutdocument  undeleteresource    the predefined actions use some of the action attributes defined in chapter          note  the property child element is valid for the createdocument action only   
  addlatestversion  grammar     expression       an addlatestversion expression adds the latest version to a document value or to each member of an aggregate containing only documents  if a document already contains version information  the value is handed through  otherwise  the content management server is queried for the latest version of the document and the document version is added   no attributes  
  aggregationvariable  grammar    value      in contrast to a variable  whose value is one value  an aggregationvariable may have a list of values as its value  see variable for details  
     attribute   type   default   description   name   nmtoken    required   the name of the variable   type   nmtoken    required   the type of the variable  see value   readonly    boolean     false    whether it is forbidden to modify the variable   static    boolean     false    whether the variable is initialized only once 
  and  grammar     expression       an and expression evaluates to the conjunction of its sub expressions  all of which must return boolean values  the sub expressions are evaluated in a  short circuit  fashion  i e   they are evaluated top down until the first sub expression evaluates to  false  or all sub expressions have evaluated to  true   this helps to avoid exceptions during the computation  e g  when checking the type of a document before accessing a property of the document of that expected type  
  assign  grammar   expression   assign transfers a value which is defined by the expression into a variable in the initial client view of the subprocess  for an xml example see forksubprocess  
  automatedtask  grammar     variable   aggregationvariable    action   guard   precondition   postcondition    an automatedtask is executed automatically by the workflow engine  it performs some automated action on the content management server content or on other third party systems or internal actions  the actions of an automated task are used to customize the processing of the workflow engine  if more than one action is provided  the actions are executed in the order in which they are specified    a precondition defines requirements which have to be fulfilled before the actions of the automated task are executed  a postcondition defines requirements which have to be fulfilled after the action has been executed  if more than one precondition or postcondition are provided  then the conditions are evaluated in the order they are defined  the result of such an evaluation operation is equivalent to specifying an  and  expression with an ordered set of expressions    a guard defines an expression  which activates and executes the task as soon as the expression evaluates to true  the expression is evaluated on state changes of process  or task instances in the workflow server and content or name changes of referred resources in the content management server  note that changes to other  external entities do not trigger re evaluation of a guard    a successor must be given if and only if the task is not final    note  an automatedtask does not allow to specify rights  performers  and client  this is restricted to usertask elements which interact with the users of the coremedia workflow server   
     attribute   type   default   description   name   nmtoken    required   the name of the task   description   cdata    implied   the textual description of the task   final    boolean     false    whether the task is the final task to execute   successor   nmtoken    implied   the next task to execute after the automated task has been completed   varies    
  assignment  grammar     reads   writes    validator    an assignment element determines that a variable is  important  to a task or process instance and need to be shown  it can or has to be modified by a user or an external process  thus it defines a view on the variables    with reads and writes the variables are specified   the modifications of the variables may be validated by validators    processes have two variants of assignment specifications  the initialassignment which is valid as long as the process instance is not started and the assignment for all other instance states  this way it is possible to set initial arguments for a process instance which cannot be changed after the instance is started    no attributes  
     attribute   type   default   description   value    boolean     required   the boolean value   true  or  false   
  case  grammar    booleanexpression     a case extends a condition by defining a successor to be activated if the condition s expression evalutes to true  a  case  condition may be based on the state of workflow variables  the content of documents from the content management server or the external state of third party products  for an example see switch  
  choice  grammar     variable   aggregationvariable    successor      a choice task branches the flow of tasks into two or more successors which must be usertasks  so it is an implicit choice  one of these successor tasks can be accepted and executed by a user  as this happens the other successor tasks are withdrawn from any offer list and reset as if they haven t been started at all   
  condition  grammar   expression    a condition defines an expression that must evaluate to a boolean value  it may be based on the state of workflow variables  the content of documents from the content management server or the external state of third party products  a condition is defined based on an expression which may be formed from nested sub expressions   
  else  grammar  empty   else defines the successor of the if task if the condition evaluates to false  see if for details and an xml example    
  entryaction  grammar    condition   property      entryaction and exitaction elements are identical to action elements  see action and action attributes for details   
  equal  grammar     expression     expression      an equal expression contains exactly two subexpressions  which are both evaluated during the evaluation of the equal expression  the expression evaluates to  true  if and only if the computed values of the sub expressions are equal    although an equal expression may compare values of any type  this element makes sense only for values like integer  string  date  resource and timer values as defined in the workflow  note that document references are considered equals only if they refer to the same document  i e   the document contents are not considered  
  exists  grammar   expression    exists is the counterpart to forall and behaves similarly  it evaluates to true if any of the instances of the subexpression evaluate to  true   evaluation is also short circuit  i e  it stops as soon as a subexpression instance evaluates to  true    
  exitaction  grammar    condition   property      exitaction and entryaction elements are identical to action elements  see action for details   
  expression   grammar     expression       you can implement your own expressions  see chapter   custom expressions must implement the interface com coremedia workflow wfexpression or com coremedia workflow wfbooleanexpression  
  forall   grammar   expression     a forall expression checks its boolean subexpression for all members of the value of the  aggregate  aggregationvariable and evaluates to  true  if all instances of the subexpression evaluate to  true   the subexpression can  and should  contain a get expression with the variable name that evaluates to the n th value in the aggregate  the logical  and  is short circuit in the sense that evaluation is done in the order of the aggregate s elements and stops as soon as the subexpression evaluates to  false   the optional index variable evaluates to an integervalue representing the index of the current element in the aggregate and can be used e g  to access the member at the same index in another aggregate  
  fork  grammar     variable   aggregationvariable    successor      a fork task forks the flow of tasks into two or more successors to perform execution in parallel  all forked tasks must be joined together by a join task   
    forksubprocess  grammar     variable   aggregationvariable    parameters    the forksubprocess task starts a separate workflow process  which is referenced by its name  from the current process    if detached is set to true the forked subprocess has no relationship to its parent process  if set to false  which is the default  a suspend  abort or resume on the parent process suspends  aborts or resumes the forked subprocess  too    the forked subprocess may be parametrized via parameter child elements  
       attribute    type    default    description    name    nmtoken     required    the name of the task    description    cdata     implied    the textual description of the task    subprocess    nmtoken     required    the name of the sub process to start    subprocessvariable    nmtoken     implied    the name of the sub process to start  defined via a string variable  the name of the string variable is set with subprocessvariable  subprocess or subprocessvariable must be defined  if both are set  subprocess has precedence     ownervariable    nmtoken     implied    the owner of the sub process is by default the owner of the parent process  using ownervariable a user variable can be defined  if this variable contains a valid user id at runtime  this user becomes the owner of the sub process     successor    nmtoken     required    the name of the next task to execute after the subprocess has been started    detached     boolean      false     if set to  false   the subprocess may be joined and it is affected by suspend  abort and resume operations on the original process  
  get  grammar  empty   get evaluates to the value of a variable   the variable can be a workflow variable  normal or aggregate  or an expression local variable  see let  forall  exists    if the variable is an aggregationvariable  an index can be given either as an integer constant or an integer variable in the index attribute   for aggregation variables the get expression evaluates to the value at this index in the aggregation  if an index is given  or to the entire aggregate otherwise  
  greater  grammar     expression     expression      a greater expression contains exactly two subexpressions  which are both evaluated during the evaluation of the greater expression  the expression evaluates to  true  if and only if the computed value of the first sub expression is greater than the value of the second sub expression   although a greater expression may compare values of any type  this element makes sense only for integer  string  date and timer values as defined in the workflow  
  greaterequal  grammar     expression     expression      a greaterequal expression contains exactly two subexpressions  which are both evaluated during the evaluation of the greaterequal expression  the expression evaluates to  true  if and only if the computed value of the first sub expression is greater than or equal to the value of the second sub expression   although a greaterequal expression may compare values of any type  this element makes sense only for integer  string  date and timer values  
  guard   grammar   expression     a guard contains a boolean expression  that defines a condition which must become true before a task is activated  see usertask  automatedtask and condition for details   
  if  grammar     variable   aggregationvariable    condition  then  else     an if task determines the successor task based on the result of a condition  a condition may be based on the state of workflow variables  the content of documents from a content management server or the external state of third party products    if the condition evaluates to true  the successor of the then element is chosen  else the one of the else element  see else  
  implies   grammar     expression     expression        an implies expression determines whether the first sub expression logically implies all remaining sub expressions  thus   implies e  e  e      implies   is equivalent to  or  not e   not   and e  e       and   or   for the common case of two sub expressions  an implies expression evaluates to  true  if and only if the first expresion evaluates to  false   without caring for the result of the second sub expressions  or both expressions evaluate to  true    
  initialassignment    grammar     reads   writes    validator    an initialassignment element defines that a variable is  important  to a process instance during the initial creation of the workflow before the workflow is started  this way it is possible to set initial arguments for a process instance which cannot be changed after the instance is started    with reads and writes the variables are specified   the variables can or have to be modified by a user or an external process  thus the initialassignment element defines a view on the variables  the modifications of the variables may be validated by validators  
  isdocument  grammar  empty   isdocument queries whether a resource value contained in the variable  which is given as in get  is a document with or without an explicit version   
  isdocumentversion  grammar  empty   isdocumentversion queries whether a resource value contained in the variable  which is given as in get  is a document with an explicit version   this is helpful because document variables may refer simply to a document or to a specific version of that document  so that processing may have to vary depending on the kind of value stored  
  isempty  grammar  empty   isempty evaluates to true if the value of the specified variable or resource property is  null   for an aggregation variable  length of zero is considered as empty  too  see length for details  for an xml example see postcondition  
  join  grammar     variable   aggregationvariable    predecessor      a join task waits for two or more tasks to complete  joined tasks must have been forked by a fork task to perform execution in parallel  a join task waits for all of them to be completed    the predecessor elements contained in this element list all tasks that use this join element as the successor  for an example see fork  
    joinsubprocess  grammar   variable   aggregationvariable     a joinsubprocess task waits for a non detached subprocess to complete  for an xml example see forksubprocess  
    length  grammar  empty   length evaluates to the length of the value of the specified variable or resource property and depends on the type  for an aggregation variable it returns the number of elements  for a string variable or string property it returns the length of the string  see also get and read   
  less  grammar     expression     expression      a less expression contains exactly two subexpressions  which are both evaluated during the evaluation of the less expression  the expression evaluates to  true  if and only if the computed value of the first sub expression is less than the value of the second sub expression   although a less expression may compare values of any type  this element makes sense only for integer  string  date  and timer values as defined in the workflow  
  lessequal  grammar     expression     expression      a lessequal expression contains exactly two subexpressions  which are both evaluated during the evaluation of the lessequal expression  the expression evaluates to  true  if and only if the computed value of the first sub expression is less than or equal to the value of the second sub expression   although a lessequal expression may compare values of any type  this element makes sense only for integer  string  date and timer values as defined in the workflow  see less for an xml example  
  let  grammar     expression    expression      let binds an expression local variable to a value determined by the first sub expression  it evaluates to the value of the second sub expression  which can use the expression local variable  let is useful to reuse complex sub expressions and store their result in an expression local variable  some functions as length and read can only be applied to variable values  using let they can be applied to any expression  mostly custom expressions   which must return values which must make sense   
  not  grammar   expression    a not expression evaluates its boolean subexpression and returns the logical negation of the result  
  notempty  grammar  empty   notempty is the negation of isempty  see isempty for details   
     notequal   grammar     expression     expression       a notequal expression is the negation of an equal expression  
  or  grammar     expression       an or expression evaluates to the disjunction of its sub expressions  all of which must return boolean values  the sub expressions are evaluated in a  short circuit  fashion  i e   they are evaluated from left to right until the first sub expression evaluates to  true  or all sub expressions have evaluated to  false    
  parameters  grammar   assign    parameters  is used to enclose the elements that define how to parametrize a subprocess  for an xml example see forksubprocess  
     attribute   type   default   description   policyclass   nmtoken    implied   the class that determines the performers   varies     additonal parameters according to the implementation of the policy class  
  postcondition  grammar   expression    a postcondition assert a condition that must hold after an  optional  exit action  user task  or action  automated task  has run  see condition for details   
  precondition  grammar   expression    a precondition asserts a condition that must hold when the task has been accepted but before an entry action  user task  or action  automated task  has run  it is described by an expression  see condition for details   
  predecessor  grammar  empty   a predecessor elements defines a predecessor of a join task by its name  see fork for an xml example  
  process   grammar   rights    variable   aggregationvariable    initialclient   client    task       a process is a definition of a workflow process which is identified by its name  it consists of tasks  which reference each other by name  the starttask attribute defines the name of the start task  a process is the template for a process instance  to run a process  it has to be instantiated  at that time an actual process instance is created  which carries the process state and completes the workflow steps that are defined by tasks and carried out by task instances     the description of the process is a human readable explanation about what the process does or a key used for localization     the subprocessonly attribute defines whether an instance of the process can be created as a top level instance or only as a subprocess instance  the default is false     the rights element configures user and group permissions for the process instance operations     variables in the process scope define the global state of the workflow process  with initialclient  and client  you define which variables are to be read or written by a user or an external process  the initialclient element is used for initializing the process before it is started while the client element is used afterwards when the process is running   
     attribute   type   default   description   name   nmtoken    required   the name of the process   description   cdata    implied   a textual description of what the process does or a localization key    starttask   nmtoken    required   the name of the initial task   subprocessonly    boolean     false    specify this attribute for processes that cannot run stand alone    defaulttimeout   nmtoken    implied   the maximum number of seconds that an instance of this process is supposed to take 
  read  grammar  empty   read evaluates to the contents of the given property of a resource   property  can be the name of any implied or schema property of a resource  a blob property will be returned as an xml representation in a string value  a linklist property will be returned as an aggregation variable of documents and a sgml property will be returned as a string  all other property types will be returned as the appropriate workflow variable value  see exists for an xml example  
  reads  grammar  empty   reads and writes specify the variables that are  important  to a task or process instance  for variables that are specified with reads  it is not possible to modify them  they are just shown in the editor  accordingly  writes allows to modify variables on a workflow client    the variable attribute specifies the name of the variable  the description is a human readable explanation about how to interpret or modify the variable  it may be localized by the editor    resource variables may be declared as contenteditable  which means that you can change the content of the resource stored in the variable  if you have the appropriate rights on the resource  but you can not change the resource to which the variable references even if the variable itself is read only   
     attribute   type   default   description   variable   nmtoken    required   the name of the read variable   description   cdata    implied   the textual description of the meaning of the variable   contenteditable    boolean     true    whether  a document referred to by a variable may be edited in the embedded document view 
  revoke  grammar  empty   revoke revokes the operations for users or groups like grant grants them  only valid for the default acl rights policy   see grant for details  revoke precedes grants  
  rights   grammar    grant   revoke      the rights elements defines user and group permissions for the workflow operations     you can either give the full qualified name of your own rights class which must be an implementation of com coremedia workflow wfrightspolicy  an unqualified classname which will be searched for in the package com coremedia workflow common policies or have it default to a built in generic implementation com coremedia workflow common policies aclrightspolicy     the default policy aclrightspolicy defines an access control list like implementation      right can be granted to individual users or group  grant      rights can be revoked for individual users or groups  revoke      user defined rights precede group rights     negative rights  revokes  precede positive rights     the admin user has all rights  this is the user with id       specific rights are explicitly granted to the owner of the process and the performer of a task    the process owner may      read and write variables exported by the processes client view        start the process instance        skip  assign and delegate any user task        retry the last transaction on an aborted task instance  not dependent on the policy        the task performer may      read and write variables exported by the tasks client view        cancel or complete the accepted task instance        retry the last transaction if the task instance is aborted     
     attribute   type   default   description   policyclass   nmtoken    implied   the class that determines the policy   varies   additonal parameters according to the implementation of the policy class  
  successor  grammar  empty   a successor element defines a successor task of a fork or choice task by its name  see fork for an example  
  then  grammar  empty   then defines the successor of the if task if the condition evaluates to true  see if for details and an example   
     attribute   type   default   description   value   nmtoken    implied   for relative timers  this attribute specifies the number of seconds until the timer runs out    relative    boolean     true    this attribute determines whether the timer should be a relative timer  an absolute timer will not be useful in the workflow definition  
  timerhandler  grammar  empty  the timerhandler element is used to assign a timer handler to a timer  the handler must be defined in the same location  i e  the process or task definition  where it s associated timer variable is defined  see chapter       for a list of predefined timer handlers  
     usertask   grammar    rights  performers    variable   aggregationvariable    client   entryaction   exitaction   guard   precondition   postcondition      a usertask has to be carried out by a participant  the performers policy is external code which is called to determine which users to offer this task for acceptance     the defaultoffertimeout defines the default time in seconds that task instances are offered to users to be accepted  the defaulttimeout defines the default time in seconds until task instances have to be completed after being accepted  if no timeout time is set  then no timeout is defined at all  a defaultpriority sets the default priority of task instances  priorities may be used to distinguish the urgency of task instances  a successor must be given if and only if the task is not final     the run time of an auto completed task is determined by the time that the executed actions and the pre  and postconditions take  it will not be completed by the user but just runs through all included actions  since entryactions and exitactions are executed  the effect is that a user can determine when this execution is supposed to take place and that it takes place on behalf of the user  consider auto completed tasks as semi automatic tasks    the rights element configures user and group permissions for the task instance operations     client determines which variables are relevant for this task and may be changed     a user task may perform some automated action  entryaction  after the task is accepted and after the task has been completed by the user  exitaction   if more than one entryaction or exitaction is provided  then the actions are executed in the order they are specified     preconditions define requirements which have to be fulfilled before the entry actions of the user task are executed  postconditions define requirements which have to be fulfilled after all the exit actions have been executed preconditions and postconditions  are evaluated in the order they are specified  the result of such an evaluation operation is equivalent to specifying an  and  expression with an ordered set of conditions     a guard defines an expression  which activates the task  if the expression evaluates to true  the expressions of the  condition are re checked on state changes of process  or task instances and resources in the live server  
      attribute   type   default   description   name   nmtoken    required   the name of the task   description   cdata    implied   the textual description of the task   defaultpriority   nmtoken    implied   the priority of the task   defaulttimeout   nmtoken    implied   the default timeout in seconds   defaultoffertimeout   nmtoken    implied   the default offer timeout in seconds   successor   nmtoken    implied   the next task to execute after the user task has been completed   final    boolean     false    whether the task is the final task to execute   autocompleted    boolean     false    whether the task is autocompleted   varies   additonal parameters according to the implementation of the user task class  
  validator   grammar   expression     a validator verifies variable bindings to keep certain rules  which are defined in the validator element    by default  the variable bindings are verified only on initial process assignment or task completion  if validatedonsave is set to  true   the verification takes place on every save    to specify a valid state  you provide an expression to the validator  
     attribute   type   default   description   name   nmtoken    implied   the name of the validator   description   cdata    implied   the textual description of the condition that is verified   validatedonsave    boolean     false    whether the verification should take place on every save   varies   additonal parameters according to the implementation of the validator class  
  variable  grammar   value     variables carry state for the workflow process  it may be modified from within the workflow engine or by changing client view variables   a variable is referenced by its name  it has a type which is determined by the value class given with the type attribute  see value for details  the value of a variable is defined by one of the elements boolean  string etc    if a variable is declared as readonly and the process instance has been started  it is not possible to modify it  if a variable is declared as static  it maintains its state  otherwise it is re initialized to the defined default every time a task instance is started  
      attribute   type   default   description   name   nmtoken    required   the name of the variable   type   nmtoken    required   the type of the variable  see value   readonly    boolean     false    whether it is forbidden to modify the variable   static    boolean     false    whether the variable is initialized only once 
  workflow   grammar    process      you can configure exactly one process per workflow definition  which means one workflow per file  if you wish to define more workflow processes  create their definition in separate files  this might be extended in the future   
     attribute   type   default   description   variable   nmtoken    required   the name of the written variable   description   cdata    implied   the textual description of the meaning of the variable   contenteditable    boolean     true    whether  a document referred to by a variable may be edited in the embedded document view  not enforced by the workflow server  
  in this chapter you find the complete workflow definition of the simple publication workflow as described in section      
  indexing  if you initialize the content server a lot of indices are created in the database  they will speed up the operation of the server  e g  loading of resources  nevertheless  since coremedia no indices are generated for the user defined document properties by default  there are two reasons for   indices for properties would only speed up queries  indices for properties would slow down creation and changing of content   if you need to have a very fast query via the editor or the query api  but not the coremedia search engine  you might create indices for the dateproperty  intproperty and stringproperty   it s possible to create these indices automatically   to create the indices automatically you have to set the attribute index of the doctype  dateproperty  intproperty or stringproperty element to  true   if you set index  true  for the doctype element  indices would be created for all dateproperty  intproperty and stringproperty fields contained in this document type   
  by default  the jmx connection to the coremedia components is not secured  be sure to use a firewall to protect the connection port when using jmxmp  or use the hessian protocol with authentication  which may be encrypted using ssl  
  note  that you can define multiple configuration files for a specific group  which will be evaluated in a specific order  see the editor developer manual for a description of the xml element  configgroups  for details  
   attribute description name the name of an existing group in the coremedia user management for which the configuration will be used  domain the domain of the group   
   configuration   child elements   parent elements   configgroup    configgroups      configgroup name  editor          configuration name  common          configuration name  special        configgroup    configgroups   this element defines the name with which the placeholder in group configuration will be replaced and the order in which multiple configuration files are applied  in the example above the placeholder will first be replaced with  common  and then with  special   if the user is member of the  editor  group  this especially means that in case of conflicting settings the settings from the special file will override the settings in the common file  
   attribute description name name which will replace the placeholder in the group configuration property of editor properties  in general  this is not the name of an existing group  but it can be   
  reports can be exported to pdf  excel and to xml  in order to export reports  first open a report in detail view and set the report parameters according to your needs  next  click the respective export icon   export to pdf    export to xls  or  export to xml   on top right to generate te respective report document  now you may save the generated report to the file system  open it in a viewer or send them via email   currently  only a single report can be exported per document  
  the screenshot shows the export icons for pdf      excel     and xml     along with the icon that generates the permalink         
  pdf export  when exporting the report to pdf  a pdf in a  format is generated with a header holding the report title  a subtitle holding the report sentence  the report chart as an image and a footer which prints the time the report was generated as well as the user s login name  see screenshot below   
  excel export  when exporting the report to excel   xls   an excel spreadsheet document is generated with a header holding the report title and report sentence  the report data as tabular data and a footer which prints the time the report was generated as well as the user s login name  see screenshot below   
  xml export  when exporting the report to xml  an xml document is generated with an  entries  element enclosing a  metainformation  element holding report title  report sentence and generation time as attributes as well as one  entry  element per data entry  holding   the x  category  value in attribute  x value    the displayable name of the x value in attribute  x valuedisplayname  the y value in attribute  y value  plus additional attributes that are report specific   please note that time attributes are rendered in the following format   utc time in millseconds         time in local date and time format         
  the high level http cache architecture is shown in the following figure  
  in order to better understand the http cache  it is worth to have a closer look at its inner components  all of the discussed components  except the persistent cache and the meta cache  are customizable  which means that its current behavior may be replaced by custom business logic  
  the http cache is not only able to deliver the full http response of a request from the cache  but it is also able combine static parts from the cache with dynamically generated parts from the content application engine  personalization is a good use case for this ability    the web page might contain a frame which is the same for all users containing logos  navigation  content and a personalized part which contains the last viewed pages and favorites for example  the http cache is able to cache the former content and to include the latter content dynamically on every request  
  another use case is the re use of fragments  on a news site  for example  a user might define criteria for news which are shown as a personalized selection on his start page  therefore  his page contains a static frame  which is the same for all users and static news which are dynamically added to the static frame  the content and layout of the news is the same for all users  the selection on the start page is not  
  principle of assembly  you can consider every jsp template as a fragment of a complete page  if you want to combine fragments to a complete page  use our tag library to include the fragments into other fragments  static fragments are independently stored in the cache while sub fragments which should be included are only stored as placeholders  these placeholders are replaced by the actual sub fragments at delivery time  the act of combining the fragments into the page is called assembly  
  uploaded workflow definitions are stored in the database as serialized objects  if you use the coremedia workflow server  unlimited edition   you can customize workflows by programming own extensions  e g  actions  expressions  handlers  so every time  you have made incompatible changes in classes  which are used in already uploaded workflows  you need to convert these workflows  in case of an update of the coremedia workflow server  the workflows have to be converted  too  otherwise  object deserialization errors can occur  see suns jdk documentation for details    the workflowconverter utility has the following syntax   cm workflowconverter    v    c  processid      x  processid     r processid jar   the parameters have the following meaning  
  to convert the workflows  use the cm workflowconverter utilitiy as follows  stop the coremedia workflow server with cm workflowserver stop  copy the changed classes  if any  into the appropriate directories  start the workflowconverter utility  note that the conversion only takes place  if the  c or  x flag is given  finally start the workflow server again with cm workflowserver start   
  the previous image showed the combination of two static fragments  the next figure shows how a web page is assembled out of static and dynamic fragments  the static fragments are taken from the http cache or an optional web cache while the dynamic fragments are taken from the cae  
  assembly modes  the http cache supports different assembly modes  that can be classified as    embedded assembly external server side assembly external client side assembly  external server side assembly  applying this mode  an external server system  such as an apache web server for example   that is located in front of the http cache assembles the pages  the server side include functionality  ssi  of the apache web server for example  is used for this task  the http cache delivers the placeholders in ssi syntax  see http   httpd apache org docs     howto ssi html   you can also integrate other systems  such as edge side includes or akamai using a simple template based mechanism   if the assembly system has additional web caching functionality  it can be used to reduce the load of the http cache   advantages  the apache web server can be used as an additional delivery server  disadvantages    fully functional session handling can only be achieved with cookie support   url rewriting for sessions in static fragments is not possible  therefore sessions are not reachable in sub fragments  if you use load balancing with mod jk  this will raise a problem  because the session id is used to ensure  that a request is always served from the same node   request headers  defined by the  httpcache header      and  httpcache copy headers      are not supported  they are not visible in sub fragments  request parameters can not be copied with  httpcache copy params      external client side assembly  applying this mode  the client s browser assembles the page  to this end  the placeholders are replaced by javascript code  that loads the fragments and includes it into the page  this technique is related to ajax and is called  asynchronous html and http  or ahah for short  see http   microformats org wiki rest ahah   it uses the cache of the browser to reduce http traffic   advantages  can be combined with an apache web server for delivery  supporting all storage modes  see the administration manual for details    you can use the browser cache to cache fragments   disadvantages  the web browser requires enabled javascript    the browser s cache stores dynamic fragments   the browser cache is not automatically invalidated  therefore  the template developer has to take care  how long a fragment should be cached by the browser  you can use the response header expires     cache control  no store attributes in order to control the caching    session url rewriting is not supported for cached fragments   if you want to link from static fragments to dynamic fragments you have to be sure that session cookies are enabled  otherwise you cannot use external client side assembly   embedded assembly  applying this mode  the http cache does all the work  it is an out of the box solution   advantages    full support of http sessions  supports coding of the session id in urls  session url rewriting  in cached fragments  you can access the session from all dynamic fragments  no additional assembly server  e g  apache web server  is required   disadvantages  the mode can not be combined with an apache web server as an external delivery server   
  overview of the assembly modes features feature mode embedded apache ssi ahah session cookies yes yes yes session url rewriting in cached fragments yes no  no support of request parameters yes yes yes support of copying request parameters yes no no support of request headers yes no yes support of copying request headers yes no no supports includes of external fragments no yes yes compatible with apache webserver for delivery no yes yes uses browser cache no no yes  
  invalidations and dependencies  static fragments and its dependencies are stored independently in the cache and are not aggregated into its parent fragment  therefore fragments are only stored once in the cache  it also means  that an invalidation of a fragment does not necessarily invalidates a page which includes this fragment  
  coremedia sci allows to access the ms word spellchecker  if installed  and also to create and maintain user defined dictionaries  the following microsoft word versions can be used   word      word       the use of the spellchecker feature parallels the use of the ms word spellchecker  erroneous or unknown words are underlined in red and can be corrected via context menu  the language settings of the coremedia editor determine the language of the spellchecker dictionary   the use of the spellchecker must be activated by the administrator of the coremedia system   cross language installations  if os and microsoft office have been installed in different language versions this might cause errors when using the spell checker with the cm editor   example  your computer runs on a german windows  your office application is an english one   as are your coremedia editor and the language of your coremedia project    solution  it is not sufficient just to change the language settings within your office application    you have to go to programs   microsoft office tools   microsoft office language settings  set the default language to english and remove german from the list of enabled languages    this  does not change the installed office components themselves   explanation  the default language had been set to german   no matter if dictionary or grammar available   automatically due to the user profile of the german operating system  this problem can be abstracted for any cross language installation  so proceed in analogy for other languages  it is a genuine microsoft problem        
  the configuration of the database is done using the sql properties file and the database dependent  dbname  properties files  the content server connects with the database using jdbc  the jdbc driver jar files must be installed in the lib directory of the coremedia cms installation  
  in general  the content server creates default database tables in default table spaces but it s also possible to define custom table spaces for specific content categories    configuring a table space for blob data  the binary content of blobs stored in the coremedia cms has different access characteristics than other content properties  it usually read from beginning to end in a streaming manner  and blobs are generally too large to be cached in database main memory  therefore  you may want to store blob data in a different table space than other tables automatically created by coremedia cms   the required settings depend on the type of database in use and are described in this chapter for all supported databases  the settings described are only basic configuration steps  when tuning is required  a database administrator has to be involved   generally  the content server creates the table holding blob data when you start it first  you can augment the ddl create statement used by the content server s sql scripts with own extensions  use the property db blob tableoptions in the database specific property file  e g  properties corem db  properties    by default  this property is commented out  causing the database to select a default table space  the commented line shows the syntax of the relevant sql fragment for the respective database  
  the property db blob tableoptions only takes effect on the first startup of the content server  
  db   the supplied sql fragment shown below is appended at the end of the create table statement  its syntax defines a table space for the blobs metadata  here myblobmetadatatablespace   and a table space for the actual blob data  here myblobtablespace   since the metadata is small  you can usually use the database s default table space for the metadata   db blob tableoptions in myblobmetadatatablespace  long in myblobtablespace  oracle  the supplied sql fragment is appended in the lob store as clause  the example syntax below refers to a table space myblobtablespace for holding the actual blob data   db blob tableoptions tablespace myblobtablespace  ms sql  the supplied sql fragment is appended at the end of the create table statement  the example syntax below refers to a table space myblobtablespace for holding the actual blob data   db blob tableoptions textimage on myblobtablespace  configuring tablespaces and index tablespace for document tables  document type specific tables vary considerably in their size and access frequency  therefore  it might make sense to distribute them across different table spaces  also  databases allow to store indexes in a different table space than the original data   the sql ddl statements for document type specific tables are created automatically by the content server  to control these statements  set the attributes tablespace and indextablespace in your doctypes xml file   selecting a table space per document type  to select the table space for a document type specific table  set the attribute tablespace on the respective document type s definition  the example uses a table space bigtablespace for the tables of document type article    doctype name  article  tablespace  bigtablespace           doctype   selecting an index table space per document type  to select the table space for a document type s primary key index and auxiliary indexes created by the content server  set the attribute indextablespace on the respective document type s definition  this also configures the default table space for all indexes created on document properties of the respective document type  the example uses a table space quicktablespace for the index tables of the document type article    doctype name  article  indextablespace  quicktablespace           doctype   selecting an index table space per property  to select a table space for an index on an indexed document type property  set the attribute indextablespace on the respective property s definition  this is only possible for string  integer  and date properties  but not for xml  blob and linklist properties  the example uses the table space quicktablespace for the index tables of the property articlecode of the document type article    doctype name  article      stringproperty name  articlecode  length      index  true       indextablespace  quicktablespace            doctype  
  the  index table space per property  feature is not supported by db  databases  
   attributeloginpredicate options description negative same as for nameloginpredicate depth   the attributeloginpredicate is not restricted to the user s attributes but may also consider the attributes of the groups  he is member of  the integer value specifies the depth of group nesting  defaults to          means the nesting is unrestricted  the attributes are the strings returned by the method call hox corem usermanager user getattributekeys    for the ldap server  these are the values configured with the properties com coremedia ldap user customattrs for a user and com coremedia ldap group customattrs for a group in the jndi ad properties file  the values are logically or ed  if one of the values matches the regular expression  the predicate returns true   e g  with depth   only the ldap attributes of the user are used  with depth   the ldap attributes of the user and the ldap attributes of his direct groups are matched against the regular expression   service  regex same as for nameloginpredicate regex same as for nameloginpredicate  
  an out of the box solution for active directory servers that only needs configuration  the class com coremedia ldap ad activedirectoryuserprovider subclasses com coremedia ldap ldapuserprovider  the example properties file properties corem jndi ad properties must contain the mandatory properties listed above for the ldapuserprovider  all ad groups are considered to be content server groups  
  if you want to connect the content management server via ssl to the active directory server proceed as follows  install an enterprise certificate authority on the windows server  see http   support microsoft com kb        de for details    this will automatically install a certificate for the active directory server  now you need to export the certificate     switch to the certificate authority tool using start control panel administrative tools certificate authority  double click the certificate  select der coding from detail and export the file using copy to file   now  you need to import the certificate for the content server     import the certificate for the content server using the java keytool tool the default password is  changeit    keytool  import  file adcert der  alias adcert  keystore  java home jre lib security cacerts    change the following properties in the  coremediahome  properties corem jndi ad properties file   java naming security protocol ssl com coremedia ldap host adserver com coremedia ldap port        change the following property in the  coremediahome   properties corem jaas conf file   protocol  ssl  port        now you are done and the content server will connect to the active directory server via ssl  
  developing templates which use fragments is very similar to the development of plain cae templates  you have a tag library which you use to include fragments in your template  instead of  cm include self  bean  view  view   you have to use  httpcache include target  bean  view  view     the tag library exists in jsp     and jsp     variants  which are equal in usage and function  include it into your template using   jsp          taglib prefix  httpcache   uri  http   www coremedia com      httpcache               jsp          taglib prefix  httpcache   uri  http   www coremedia com      httpcache               following tags exist  
   tag description    httpcache include self  bean object   view  view string       or  httpcache include path  context relative path    embeds a fragment into the current output  you can define the fragment with a bean view pair or directly as a path   httpcache param name  name string  value  value string   used inside a   httpcache include  tag  passes the specified request parameter to the fragment to embed   httpcache copy params  name  name string    used inside a   httpcache include  tag  passes the named parameters as copies of the root request to the fragment to embed  if you define no name attribute  all parameters of the root request are copied   httpcache header name  name string  value  value string   used inside a   httpcache include  tag  passes a request header to the fragment to embed   httpcache copy headers  name  name string    used inside a   httpcache include  tag  passes the named request headers as copies of the root request to the fragment to embed  if you define no name attribute  all headers of the root request are copied   
  the coremedia starter kit is an additional component for coremedia cms  since it can be installed as an add on  it is covered in full length in an separate manual   this manual is intended for all users of the coremedia starter kit  that is for editors  administrators and developers   
  the coremedia starter kit manual covers all topics you will need for the usage  administration and development of the starter kit    section gives an overview of the starter kit   section describes the installation and configuration of the starter kit  section describes the operation and configuration of the starter kit  section describes the usage of the explorer view of the starter kit  section describes the design principles of the coremedia starter kit solutions and shows you how to extend the starter kit  section is a reference chapter that shows the document types  bean types  controllers  linkschemes and templates used with the coremedia starter kit  
  the starter kit comes with predefined document types and specific extensions to the webeditor  this chapter describes  how you can use the webeditor for your editorial work  in order to benefit from these chapter  you should read section before  to be familiar with concepts such as  channel   
  this chapter describes the installation  configuration and operation of the coremedia starter kit  
  this chapter describes the prerequisites you need for the installation of the coremedia starter kit and the installation itself  
  the coremedia starter kit is based on coremedia cms and therefore supports the same platforms as described in the coremedia administration and operation manual  a starter kit installation requires some prerequisites before you start the installation  at least you need   a supported operation system  a supported java environment  a supported database with a supported jdbc driver   general prerequisites  general preconditions for starting coremedia cms components   for operation of coremedia cms on unix systems  the ksh shell must be installed in  bin   it is used for starting the coremedia components on execution of the cm command  see section   if the cm webeditor is used an approved browser must be installed  in general  it must be ensured that all computers in use are mutually visible over dns  the image converter service of the server needs the program convert from imagemagick  on a linux and solaris system  you have to use the convert of your distribution  if there is no convert installed  you can download the respective program at imagemagick  you have to enter the path to the installed convert in the property convertcommand in the file   properties corem imageconverter properties  if you are using windows  convert will be installed by the installer program   database  the coremedia starter kit requires a database for operation  the supported databases are described in the  system requirements  chapter of the coremedia administration and operation manual  you need five database users for a complete installation of the starter kit   one user for the content management server database  one user for the cae feeder database of the content management environment  one user for the analytics database  one user for the master live server database  one user for the cae feeder database of the content delivery environment   the database must be enabled for the unicode character set and the database users must be able to create and delete tables and indexes in their schema   please also carefully follow the database specific instructions in the coremedia administration and operation manual  e g  schema and user setup    search  the starter kit does not install a coremedia search engine  if you want to use full text search in the coremedia editor  webeditor or on the website you have to install one  find the installation described in the coremedia administration and operation manual  the starter kit uses the default ports of the search engine  port        and does not use any special index fields  it requires three empty fast collections   one for the content management server one for the content application engine of the content management environment one for the content application engine of the content delivery environment  for the installation you need the cap  vers no   jar file and the license files delivered with coremedia cms   
  the coremedia starter kit is intended as a starting point for your own web application  it enables you to set up a website with navigation and multi language support very fast  nevertheless  you may want to extend the starter kit in order to perfectly match your needs  this chapter describes how you can use and extend the existing solution for your own customizations     the cap  rel no   source zip file of your coremedia sci distribution contains parts of the starter kit source code   it will help you to understand how the starter kit works and may be considered as best practice for your own applications   
  sample script  creating database and user     bin bash database cm dbadmin db inst  db  attach to db inst  db  create database  database using codeset utf    territory us  db  update database configuration for  database  using applheapsz        db  update database configuration for  database  using stmtheap        db  update database configuration for  database  using app ctl heap sz       db  update database configuration for  database  using logfilsiz         db  update database configuration for  database  using maxlocks      db  update database configuration for  database  using locklist        db set db  rr to rs yes  db  connect to  database user db inst  using solaris db  create bufferpool bp  database all dbpartitionnums  size       numblockpages   pagesize       db  create tablespace ts  database pagesize       managed by  system using      home tablespaces ts  database      extentsize    prefetchsize    bufferpool bp  database  db  create system temporary tablespace tts  database  pagesize       managed by system using       home tablespaces tts  database      extentsize    prefetchsize    bufferpool  bp  database db  drop tablespace userspace   db  grant connect dbadm bindadd create not fenced routine  implicit schema load create external routine quiesce connect  on database to user  user   db  disconnect current db  detach  
  this manual provides information on the development of content applications   in section you will learn how to use the content application engine for your own applications  in section you will learn how to integrate content from the coremedia cms into portals and how to edit this content right in the portal  in section you will learn how to create custom web guis using the editing services for jsf   
  template discovery  in order to do an object oriented template dispatch  a template needs to be associated with its corresponding bean class  by default this is performed through a directory layout and naming scheme  in general  a template for a class com company article and view name view must be placed in  web inf templates com company article view jsp  that is   the package name translates into the directory name  and the class name plus view name plus jsp extension form the file name  the content application engine also supports the notion of a default view  this view is mapped to a jsp without a view name  i e   web inf templates com customer article jsp in our example  we recommend that your classes always are in a package   the naming convention supports easy retrieval of the template files in an ide  in intellij idea you can easily open an article template by invoking find file  ctrl shift n   typing article  and selecting the right template from the popup list  similar functionality is available in other ides as well   note that the example template above is for a generated interface article  due to the oo dispatch performed by the view dispatcher it is applied to instances of articleimpl  it is also possible to write the template directly for articleimpl  but the recommended style is to apply templates to the bean s public interface   it is best practice to provide a fallback view in case that the required view is not available  provide a template object unknown view jsp which renders an appropriate error message  configure the fallback view in the spring cae views xml file with a customizer as follows    bean id  viewdispatcher  class  com coremedia objectserver view repositoryviewdispatcher      property name  fallbackview  value  unknown view           data access  a template will mostly access objects stored in the request scope  typically using jsp expression language or custom tags  in a coremedia content application engine template  the request scope attribute self has a special meaning  it denotes the target object on which the template was invoked  it is the equivalent of the this object reference in java methods  a simple template to display the name property of the target object looks as follows       page contenttype  text html charset utf    session  false         taglib prefix  c  uri  http   java sun com jsp jstl core      c out value    self name      template inclusion  other jsps can be included via  jsp include   in this case  the view dispatcher is not involved in the template determination process  in order to involve the view dispatcher  you need to use the  include  tag from the content application engine s tag library  it needs an attribute  self  that determines the target object of the template  the following code will find the appropriate template named teaser for anobject and include its output into the current page  inside that template  self is temporarily bound to anobject    cm include self    anobject   view  teaser     assuming that anobject is of type article  the template article teaser jsp will be included  the view attribute is optional  the default template  in this example  article jsp  will be chosen in case it is omitted  when no template for the view name teaser is found  the search ends with a failure   the default template is not used as a fallback   a template that wants to include the teaser views of all objects in its articles property would look as follows  within each teaser template  self will be bound to the respective article object    c foreach var  article  items    self articles       cm include self    article   view  teaser       c foreach   when looking for the appropriate template  the content application engine performs the same steps as in an object oriented language  if no template is defined for a certain class  it is inherited from its super class  the cae will look for the template upwards in the inheritance hierarchy  it also considers interfaces  so you can register templates for interfaces  too    rendering markup  markup properties are also rendered by including them    cm include self    amarkup      the content application engine defines a default view for objects of type com coremedia xml markup that converts coremedia richtext to xhtml  see section for details    scoped request attributes  the coremedia content application engine supports an auxiliary tag that allows temporarily setting a request scope attribute and having it reset to its old value after the included fragment returns    cm include self    article   view  teaser      cm param name  images  value  false      cm include   within the teaser template  the request attribute images will be set to false and will revert to its original value afterwards   the param tag can only be used within an include or link tag   linking  linking similarly works with objects  you link to an object and a view through a tag    cm link target    article   view  teaser     this tag consults the link formatter object and writes the formatted url to the page  since you probably want the output in the href attribute of an  a  tag  this forces you to put the link tag into the attribute so that the template is no longer well formed xml  of course  the output is      a href   cm link target    article   view  teaser     more  a   using jsp      a well formed xml template can be written  if you first store the link to a variable  like with the jstl c url tag    cm link var  teaserlink  target    article   view  teaser      a href    teaserlink   more  a   the link tag uses the link formatter object  defined in the framework jar in cae linkformat xml  and requires a link scheme that is able to handle the class of the object  all generated content beans implement the contentbean interface for which a link scheme exists  see linkformat xml and web inf spring cae linkschemes xml   so there is no need to implement another one  it is necessary for beans that originate from other sources  
  under some circumstances  you will need to write down a string representation of the identity of a bean  for example  the content bean for content      this is typically necessary in intermediary xml documents or when you want to refer to a bean in a html hidden input field   for this purpose  the coremedia content application engine contains a generic id facility that allows to convert selected bean types to a string and back  the id api basically consists of two methods  getid and  parseid in the class com coremedia objectserver ids idprovider  note that this is not an object serialization  this facility is only useful to capture an id of a stateless object that represents an external business entity  as outlined in contentbeanpatterns  the default implementation comes with id support for content beans and blob properties  other bean types can be supported by writing a new implementation of com coremedia objectserver ids idscheme and plugging it into the id resolver in web inf spring cae idschemes xml using a customizer   using ids for encoding objects in form fields  in order to encode an object id into a form field in a template  as well as to decode it back on a form submission  the content application engine comes with a custom tag  cm id  as well as an implementation of the java beans propertyeditor interface that you can use in spring to parse form fields back into bean references  a convenience method in controllerutils instructs spring to do so   the following example shows how to encode the id of a bean feature into an html form which submits to an action enable    form action   c url value   servlet enable     method  post      input name  feature  value   cm id self    feature              type  hidden       img src   c url value   icons enable png            onclick  this parentnode submit          form   the form submission is handled by a command object and a corresponding spring commandcontroller implementation   public class enablecommand     feature feature    public void setfeature feature feature        this feature   feature        public void perform         enable feature          the form controller instructs spring to parse the form command field  feature  into a feature object using the idprovider   public class enablecontroller extends abstractcommandcontroller     idprovider idprovider     public void setidprovider idprovider idprovider        this idprovider   idprovider         protected object getcommand httpservletrequest request       throws exception       return new enablecommand           protected void initbinder        httpservletrequest request        servletrequestdatabinder binder  throws exception       super initbinder request  binder           bind the  feature  property using the idprovider     controllerutils registerasbean        feature class   feature   binder        idprovider               protected modelandview handle httpservletrequest request                                  httpservletresponse response                                  object command                                  bindexception errors  throws                                  exception       enablecommand enablecommand    enablecommand command      enablecommand perform        return controllerutils redirectto          enablecommand getfeature            note that the controller must be mapped to the uri  enabled in the uri mapping in your project specific  mycomponent  controllers xml  and requires to have the idprovider injected in order to parse the bean ids   
  configure the content bean classes in the file cae contentbeans example xml  which is located in the directory  installroot  config caefeeder spring  the file uses the same format as the contentbeans xml configuration file of a cae based web application  section  spring configuration  describes how to configure content bean classes   make sure  that the configured classes are available in the classpath of the cae feeder  for example by copying a jar file with the class files to the directory  installroot  lib  
  this section describes concepts and structure of the coremedia cae feeder and contains information about how to make content beans of the content application engine  cae  searchable with the coremedia search engine  for installation and administration tasks of the cae feeder  see the coremedia cms administration and operation manual  section  cae feeder   for details about the coremedia search engine start with the  coremedia search engine  chapter of the administration and operation manual   the coremedia content server contains the search engine feeder  which sends coremedia documents to be indexed to the search engine  this makes it possible to search for documents in the coremedia editor  webeditor and custom content applications  content applications on the other hand  often require search functionality not only for single documents but for content beans  the cae feeder makes content beans searchable by sending their data to the search engine  which adds it to the index  the release provides an extensible cae feeder template as a starting point  the cae feeder template is a standalone application  which can share the content bean code with an existing cae based web application  the cae feeder template employs the coremedia proactive engine to proactively send data to the search engine after new content beans were added  changed or removed  the proactive engine is described in section  proactive engine   alternatively  you can use the cae feeder without proactive engine to develop custom applications using its public api   section  concepts and architecture  describes the concepts and architecture of the cae feeder  section  index content beans  describes the extensible cae feeder template and how to use it to make content beans searchable  section  cae feeder for api use  describes how to set up a cae feeder to develop custom applications using its public api   this manual contains an example how to use the cae feeder to implement search functionality for a simple web application in section  search   
  content rules operate on cae content beans  not on repository document types  and hence can make use of the enhanced domain modeling capabilities that the cae application model provides  content beans are a suitable representation of business objects  entities   whose data originate from sources other than the cms repository  for example  a content bean type  product  may comprise properties from the content repository  description  feature set  product category   joined with information from erp systems  e g  availability in stock  price  and the coremedia analytics  rank in products   etc  in this scenario  content rules may be used to populate web pages with content based on criteria like the feature set  category  price  availability in stock and relative demand   a few restrictions currently apply to the content rules framework   while in principal rules work on any content bean type and any property defined by cae content beans  currently a few restrictions apply regarding the supported property types and the way properties are represented  these restrictions will be detailed later  rules currently do not take end users  information  profile information or session attributes  into account  no integration of coremedia analytics information into cae applications is provided out of the box   the cae example given in     describes step by step how to apply content rules in cae applications to dynamically populate web pages  
  the example contains a complete data set  hence you do not have to provide any data  after the installation of the document type model and the import of the related data you can think about the delivery  in order to use the cae you need a proper document to business object mapping  the so called content beans  and templates for rendering  the objects can be created with the beangenerator  a small utility of the cae framework  please refer to section beangenerator for detailed information   each content bean can be rendered by a template and passed optional view names allow the selection of certain templates  thus  you have the opportunity to render the same object by different templates  due to the object oriented behaviour of the dispatcher  inherited content beans can be rendered by templates for super classes  the  new menu site   will frequently use this feature to render different document types in a resembling  frame     before you deal with the details you need a rough sketch of how the website shall appear  the  new menu site   needs a navigation containing the several categories and the rubric  recommendation of the chef    a title image at top of each page shows the name of the restaurant and the particular content     either a selected dish  a category or the recommendation     is rendered in the center  following figure depicts this schema   
  the owner of  chez andre   needs some additional functionality for his website  a special workflow shall control the process of publication which can be conveniently started in the browser  one problem is  that the cae runs under a special system user who cannot start workflows  furthermore  each author is responsible for his her own work  and anonymous activities under one   super   user is often not wanted  hence  a login mechanism is required in order to authenticate and authorize users  it depends on your requirements  how fine grained you want to control the access  this demo will use the user management of coremedia cms because an actual session is needed  other scenarios  e g  a personalized website  perhaps can be better realized with a different security mechanism  the demo  security   will demonstrate an alternative approach   due to the complexity of the login and workflow procedure this demo is split up into two parts  this section describes the first part  which addresses the login  and the next section will continue with the uapi calls starting the workflow   in most cases your application desires an authentication for certain areas only  thus  a little control service is needed which denies the access to protected areas for not authorized requests  this demo uses a small controller called secretcontroller representing a secret area  only authorized persons shall receive its secret message  hence it is declared in a separate urlhandlermapping in your spring controllers xml  in order to protect this mapping  a so called  interceptor   is required  an interceptor is called before and after the controller and can manipulate its environment  therefore it is an ideal remedy for a login mechanism  you can find following snippet in your configuration file controllers xml   
  this example is based on the new menu site example and adds search functionality for dishes  please read section before  in this example  an input field is added to search for dishes which contain a given term in their title  description or ingredients  for example  a user can enter the word  rice  in the search field if he is interested in dishes with rice  a second input field can be used to specify the maximum price of the dishes   the coremedia cae feeder and the coremedia search engine make it possible to search for content beans like the dish beans of the new menu site  the cae feeder sends data of content beans to the search engine as soon as the underlying contents are created or modified  the search engine indexes the received data and provides interfaces for searching  see the coremedia administration and operation manual for information about the coremedia search engine and chapter for more about the cae feeder   as always  the example is contained in the file cap examples jar  you can find it in the directory examples cae search after unpacking the jar file  requirements and necessary steps to start the example are briefly described in the file readme  this section describes the example in detail  this includes configuration of the coremedia search engine and coremedia cae feeder for the example as well as the implementation of the search functionality in the new menu site web application   you can use the provided ant build file to perform some of the tasks to get the example running  the following steps have to be performed manually before   set up a coremedia content server and import the content of the new menu site as described in section  install a coremedia search engine as described in the coremedia administration and operation manual  install jakarta tomcat and a cae web application template  configure the connection to the content server for the web application template   move the web application template to a directory where it is not automatically deployed by tomcat  install a cae feeder template  configure the connection to the content server  search engine and database for the cae feeder template and copy the database driver to its lib directory   configure the path of jakarta tomcat and the parent directory of the cae web application template using the properties tomcat home and cae template dir in the file global properties  which is located in the directory  examples cae etc  configure the path of the cae feeder template  the url to the fast query and result server and the name of the fast collection in the properties caefeeder template path  search qrserver and search collection in file local properties  which is located in the directory examples cae search  add the jakarta tomcat user admin with password tomcat and role manager to the file tomcat users xml  which is located in the directory jakarta tomcat conf  start jakarta tomcat   to start the example  execute ant first  it builds and deploys the menu site web application  and installs and configures the cae feeder in the directory examples cae search output caefeeder  afterwards start the cae feeder by executing cm caefeeder run in the directory bin  the menu site is available at http   localhost      search servlet   note that it takes some minutes before the dishes have been indexed and can be found on the website   configuration of the coremedia search engine  users of the new menu site want to search for dishes which contain a search term in their name  description or ingredients  they want to search for dishes with a price below or equal a specified maximum  and they want to combine these conditions  therefore you need at least two fields in the index of the coremedia search engine for the values of dish bean properties  a text field for the concatenation of name  description and ingredients a numeric field for the price  instead of a single text field you can also use three separate fields for name  description and ingredients and perform the search against all fields  for simplicity this example uses the field textbody of the default index profile and stores the whole text of the dish in it  the field textbody is handled specially by the cae feeder  it contains the concatenation of multiple bean property values  the field for the price is a numeric field to support range queries such as a query for all dishes with a price less than a given one   the default index profile of the coremedia search engine already contains the price field for this example  the index profile defines   among other things   a list of supported index fields  for more information about the index profile see the fast configuration guide  the coremedia search engine comes with a default index profile  which contains the field inside the xml element  field list     field name  price  type  int    fullsort  yes      if you need other fields in the index profile or want to remove unused fields  you can change the index profile before installing the coremedia search engine or afterwards by deploying a new changed index profile in a running coremedia search engine  to change it before installation  edit the file index profile coremedia xml in the directory oeminstaller config index profiles  for fast instream      or fastinstaller coremedia config index profiles  for fast esp      after extracting the coremedia search engine archive file  to change it after installation  follow the instructions from section  updating the index profile  in the fast configuration guide  the default index profile conains comments which indicate if a field is required for operation   feeder applications such as the cae feeder and the search engine feeder of the coremedia content server require separate fast collections  searches specify a collection to get results for the specific application only  use the fast administration page to create a new and empty collection for this example  the name of the collection must match the one configured for the cae feeder  the administration pages of fast with default base port         are available at http    hostname        admin  see section  coremedia search engine operation  in the coremedia administration and operation manual for the steps to create a collection   configuration of the coremedia cae feeder  the coremedia cae feeder requires a connection to the coremedia content server  the coremedia search engine and a database to store its state persistently  these connections can be configured during installation of the cae feeder template and are described in the coremedia administration and operation manual  additional configuration is required to specify which and how content beans are sent to the coremedia search engine  these additional configuration tasks are described in this section  the included ant build file creates a cae feeder with the described configuration from the cae feeder template automatically when ant first is invoked  the cae feeder directory is examples cae search output caefeeder   first  specify the set of indexed content beans as described in section  for this example  content beans for documents of type dish below the folder menusite will be sent to the search engine for indexing  the content type and base folder are configured with the properties feeder contentselector contenttypes and feeder contentselector basepath in the file caefeeder properties in the directory config caefeeder spring  below the cae feeder installation directory   feeder contentselector contenttypes dish feeder contentselector basepath  menusite  next  configure the content bean class for dish documents as described in section  the dish content bean class must be added to the classpath of the cae feeder and registered in the file cae contentbeans example xml in the directory config caefeeder spring  after building the application with ant  you will find the pre configured file menusite contentbeans xml in this directory    beans     bean name  contentbeanfactory dish  scope  prototype     class  com coremedia examples cae beans dishimpl      beans   both the classes and the cae contentbeans example xml can be reused from the cae web application  the web application defines additional content beans  which are ignored by the cae feeder because feeding was restricted to content beans for type dish  note that the dish content bean class is exactly the same as in the original new menu site example  no code changes are required to make it searchable   the last step is to configure which properties of the dish content bean are stored in which fields of the index  the cae feeder creates a so called feedable which consists of elements with data from the content bean and is then sent to the coremedia search engine  which stores the data in fields of the index  see section for details  in this example  the properties name  description and ingredients are stored as concatenation in the field textbody  this can be achieved with the following configuration in the file caefeeder properties in directory config caefeeder spring   feeder beanmapping com coremedia examples cae beans dish    name description ingredients  this configures the cae feeder to create a feedable with the elements name  description and ingredients for a content bean of class com coremedia examples cae beans dish  the element values of the feedable are retrieved from the properties of the content bean  if the index profile defines fields with equal names  the fields will be set to the respective values  in fact  there is a string field name in the default index profile  which will be set to the name of the dish  the description and ingredients are not stored in separate fields because there are no such fields in the index profile  but their values are stored together with the name in the special index field textbody  it does not matter if there is a field with the name of the property to store it in the field textbody   if you add the property price to the above list  then it will be stored in both the field price and the field textbody  in this example the price should only be stored in the price field and not in the textbody field to avoid that users find dishes by their price when entering a number in the search field  this can be achieved by using a more verbose configuration syntax in the file caefeeder mappings xml in the directory config caefeeder spring  add the following beanfeedablemapping bean definition to the list of bean mappings in the property beanmappings of the bean beanmappingfeedablepopulator    bean class     com coremedia cap feeder bean beanmappingfeedablepopulator            property name  beanmappings        list                   add more beans here              start example configuration          bean class         com coremedia cap feeder bean beanfeedablemapping          property name  beanclass                   value  com coremedia examples cae beans dish           property name  beanpropertymappings            list            bean class  com coremedia cap feeder bean             beanpropertyfeedableelementmapping               property name  beanproperty  value  price                property name  textbody  value  false               bean            list          property        bean           end example configuration           list      property    bean   this configures the bean property price of dish beans but excludes its value from the textbody field by setting textbody to false  the configuration in caefeeder mappings xml is merged with the configuration in caefeeder properties and the cae feeder will feed the search engine with name  description  ingredients and price   implementing search in the web application  this example implements search using the fast api  therefore the jar files dsapi jar and xmlrpc jar must be copied to web inf lib  these files can be retrieved from the directoy lib of the cae feeder installation or from the fast api archive file dsapi java instream       zip  the file also contains the javadoc documentation of the fast api  the usage is described in the fast query integration guide  the query language is described in the fast query language and parameters guide   the template document jsp  which renders header and navigation  was extended with a html form with input fields for query string and maximum price  the input fields appear on the left of the page below the navigation  if the user performs a search  the request parameters query and maxprice will be included in the request uri  the spring handlerinterceptor dishsearchinterceptor retrieves these request parameters and will add a dishsearchbean with query and maximum price to the model if the request parameters are set  the dishsearchinterceptor is registered in web inf spring menusite controllers xml    if a dishsearchbean appears in the model  the search results will be displayed in the content area  therefore the template document jsp checks if the model contains a dishsearchbean and includes it if present  if there is no dishsearchbean  the render view of the document will be included as always  the template dishsearchbean jsp renders the search result by including the teaser view for each of the found dishes  the template gets these dishes by calling getdishes   of the dishsearchbean   the dishsearchbean uses a dishfinder to perform the actual search  the dishfinder uses the fast api for searching and is configured as property of the dishsearchinterceptor in web inf spring menusite controllers xml  the configuration includes the url to the fast query   result server and collection  the configured idscheme is required to create dish content beans from the ids returned by fast         customize append bean  controllerinterceptors          list           bean class  com coremedia examples cae search                       dishsearchinterceptor            property name  dishfinder              bean class  com coremedia examples cae search                         dishfinder                property name  collection                        value  menusite                 property name  qrserverurl                        value  http   localhost                       property name  idscheme                        ref  contentbeanidscheme                bean            property          bean          list    customize append   the dishfinder creates a fast query language  fql  query from the user query and maximum price  it is important to add the condition feederstate success to every query  it restricts the result to successfully indexed fast documents  the index field feederstate is a special field which can contain other values such as error and internal for documents which could not be indexed successfully or are used internally by the cae feeder  the query is furthermore restricted to the configured collection and to the type dish  the type condition is optional in this example because the cae feeder was configured to index dish content beans only  for example  the fql query for the user query rice and maximum price of    is   and    and      filter and        meta collection menusite        feederstate success        documenttype dish             string  rice  model  simpleall          price range min    to  le      the fast api executes the query and returns the ids of the matching dishes  the dishfinder uses the method parseid of the configured contentbeanidscheme to create a dish content bean for each of the returned ids  these content beans are then returned and rendered  
  configuration in system landscape  you can configure the portal application url in the file contentservice xml  inside the portal archive as described in section  or in the sap system landscape  you can create a system with the portal application url from a deployed portal archive  before deploying the portal archive you must configure the system alias in the file contentservice xml  inside the portal archive  remove the properties endpoint and authentication  from the content service definition and add the following bean below the element beans and configure a system alias in property systemalias      bean id  contentservicecustomizer       class  com coremedia portal sapep service systemcontentservicecustomizer       property name  customizedbeanname      value  contentservice          property name  systemalias     value   system alias          bean    after deploying the portal archive as described in the next subsection  you can create a system in the system landscape editor with the following steps  change to system administration   system configuration   system landscape select a folder in the portal content directory where you want to create the system  right click on the folder and select new from par   system select the portal archive com coremedia cms portal  as source for the system and click next  select the portal component coremediaportalapplication  and click next  enter required system properties like name and id and click next and finish  open the new system for edit and configure the url of the portal application in the property webservice url  in the system definition  configure user and password in the properties webservice user and webservice password  if the portal application is secured with basic authentication  change to display   system aliases  create a system alias that matches the one configured in the file contentservice xml  refresh the portal application com coremedia cms portal  e g  by using the prt admin console  in order to make these changes take effect   if you need multiple systems  you can edit the created system to be a system template by changing the property is a template in the system editor to true  afterwards you can create more systems based on the system template with new   system   accessing the portlet content  typically  accessing a portlet is done implicitly by navigating through the portal application  in some cases  it might be useful to access a portlet directly by simply using a  stable  url  this is supported by the enterprise portal when using urls like http   host port irj portal navigationtarget roles   portal content folder role workset page iview  where the navigationtarget parameter s value is the pcd location of the iview    if you additionally want to access a special page inside the content portlet  you simply have to add a parameter contenturi to this url like http   host port irj portal navigationtarget roles   portal content folder role workset page iview contenturi  uri to the backend page  
  first of all the user requests the pbe enabled preview web page inside the portlet  the request will be processed by the content portlet and forwarded to the portal application  the cae renders the result and during rendering of the page a special component  the contextmenurenderer renders the pbe  information into the markup  the contextmenurenderer is described in section   in the case of the contextmenurenderer the pbe information consists of an pop up menu which contains a set of entries which allows the modification of the content or requesting of further web pages including editing services forms  the markup is returned to the content portlet which renders the preview page with the embedded context menus inside the portal  point      
  an action is an executable entity which is triggered by an user interaction  the action is working upon an injected target  an example for an action is a  move up  action used inside pbe  in that case the action is triggered by the user clicking the  move up  entry in a pbe context menu  the action takes care of modifying the order of the link list in which the content object is linked  details can be found in chapter   the action might have a commandpostprocessor and a navigationhandler   commandpostprocessor  a commandpostprocessor is executed after execution of the action  the use case is to modify the action or the target of the action in order to retrieve the commands return value  it is not only the return value  but also preparative actions which are done for following components    navigationhandler  an action might have an navigationhandler  this navigationhandler takes care of navigation after executing the action  for example a navigationhandler may redirect the user to a result page which shows the result of the executed action       
  preview based editing is a mechanism to edit documents in the preview of a prepared web page  details about preview based editing could be found in the delivery developer  and in the content applications developer manual  in the portal context the standard preview based editing implementation is slightly modified  in order to realize preview based editing the following modifications of the standard preview based editing were addressed  a special component renders toolbars or css based context menus while rendering the markup  a special spring mvc controller  the actionexecutioncontroller  takes care of executing the user triggered actions  which where rendered into the page from the component mentioned before  the xxx in the architecture section visualizes the deployment  the executed actions may contain special spring mvc conforming commandpostproccessors and navigationhandlers  they are used by the above mentioned spring mvc controller in order to create the output which is returned to the spring dispachter servlet   the following subsections describes the concepts in more detail  at first the actionexecutioncontroller which receives the user triggered actions is discussed  afterwards the counterparts  the css based renderer  and the toolbar renderer which renders the actions into the markup   
  in a portal environment single sign on  sso  is a crucial requirement  therefore the portal integration supports sso for editing services by using springs interceptor mechanism  how does sso work in the portal context  the users name is encoded into the request by the portlet integration  an interceptor  which is described in the next section  creates a session for this user at the contentserver  this session is used by editing services to change or create content     
  it is important to add an editingcontextinterceptor to your urlhandlermapping when developing a pbe application for the portal context  for details have look at section  
  you also need to have the entryreferer pageflow bean which is configured as follows  in the list of viewids you need to add the path to the jsp which triggers the storing of the referer header in the pageflow for detail see chapter  
  this section provides the following information about common pitfalls during the integration of editing services   interceptors needs to be registered at the controller which forwards request to another servlet  for example the servlet which handles editing services property editors  one interceptor is the baseuri  and the other the webeditingcontext interceptor    in the portal context there might be the need to return to an well defined page after editing  this mechanism is described in chapter x     
  this chapter contains details on how to configure the components described in the previous chapter   for configuring of actions please refer to es chapter  
    editing services contains a mechanism which allows client side browser detection  in some templates of es this browser detection mechanism is used to load different stylesheets for different browsers  the portal integration filters this logic and so only the default stylesheets are loaded  this can be circumvent by configuring es to detect the browser type on server side  add the following bean in one of your configuration files in the directory web inf custom in order to enable server side browser detection    bean name  browserdetection application  class  java lang string      constructor arg index     type  java lang string        value serverside  value      constructor arg    bean     single sign on should be enable for the portal context  follow the steps described in section  single sign on    the editing services controller needs to be modified  for details see  baseuriinterceptor     
  this section heavily uses concepts of editingservices  therefore it is recommend to read the section  es chapter first  
  figure   shows an architecture diagram of editing services  you can see that editing services uses beans and apis of the cae  for example dataviews  idschemes  and linkformatter   the unified api  essentially content services and objects  and of the underlying j ee application server  editing services runs as a web application within an application server  dedicated to serve a web ui  note that the coremedia cms content server is yet another backend server  not shown in the figure   the clients  be it a browser or a java application  the ulc runtime deployed by java webstart   talk to the editing server via http  the jsf specific part of es is contained in a so called editing kit  i e  an adapter for a concrete web ui framework  in this case for jsf  the ulc editing kit is dotted since it is currently only a proof of concept prototype  
  the spring framework is an open source application development framework with broad functionality and features organized in several modules  see http   springframework org documentation   the main feature of the core module is known as dependency injection  aka inversion of control  implemented by bean factories to configure beans of any nature  examples of bean factories are beanfactory and applicationcontext  where the latter builds on top of the first   like the cae  see section spring in cae   editing services uses spring for configuration and custom extensions  in other words for  plugging things together   all editing services beans are designed to be dependency injected by a spring beanfactory  typically via an xml representation  thus  editing services uses an de facto standard for configuration that is independent of a concrete view technology  since any java view technology can use beans  for more elaborated usages of bean factories  there are existing integration solutions with spring and java view technologies  e g  spring jsf  for easy development with jsf and spring  es provides many utilities and extensions for spring and the existing spring jsf integration  see section extendjsf   
  there is an editing services for jsf example application contained within the coremedia cms examples archive located in the cae es menusite directory  the example enriches the well known menu site example as described in menu site with preview based editing and custom editing views  the code snippets presented throughout the following sections are put together in order to prove the simplicity of developing a custom content editing application using editingservicesforjsf   you will find installation hints in the cae es menusite readme file that is contained in the cap examples jar of your coremediacms distribution  
  examples of services in es  are  a table service that  given some content folder and a set of columns  returns a list of table rows that each contain certain properties of the contained content items  or a localization service that  given a predefined content action bean like  check out document   return its ready to be rendered localized appearance   examples of models are  a listmodel that maintains a snapshot of a list of java beans  or a localizedlabel that is a model for a label with icon and tool tip   example of utilities are  classes for extended integration of jsf and spring  or a bean that can be used in jsf el to compute the size of any collection or array   examples of components are  a table component that takes a table model  renders it  sorts it according to the selected column  and offers paging buttons to browse through the table entries  or a button component that takes an action  presents it in the ui  and invokes the action when clicked by the user   all such entities are called building blocks in editing services for jsf  the approach is to provide such content ui building blocks rather than a monolithic configurable generic solution  the advantages are   the configuration level is more fine grained  each service  model  and component is configurable  not the view as a whole  each building block  not the whole application  can be generic  building blocks are easier to reuse  even in other contexts  when using standard component frameworks like jsf  rapid application development  rad  tools  also called gui builders  can be used to create content applications interactively and graphically   custom extensions of editing services are possible  allowing to define custom services  models  and components that build on top of the existing ones  the extension and customization mechanism is based on standard java beans  so the spring framework  see below  can be used for the overall setup  for the connection to the coremedia repository  there are content specific services  models and utilities  this means that custom extensions can also integrate other data sources  and still use core features of editing services like localization and actions  in other words  the core editing services framework is much more an abstraction of other ui frameworks than a coremedia content specific implementation  still  when using editing services for coremedia content applications  you do not need to care about this aspect  because the concrete implementations needed for this type of solutions are all there   the coremedia content specific part of editing services uses the unified api introduced in coremedia cms       thus  any business logic developed using the unified api  can be reused in an editing services based ui  for further discussion of editing services and uapi  see below   the concrete components provided by editing services  are javaserver faces  jsf  components    this chapter describes the services  models  components  and utilities offered by editing services for jsf in coremedia cms  its goal is to give an overview and show how the different parts of editing services work together  please refer to the javadoc  java api   beandoc  spring configuration   and tlddoc  documentation of jsf component taglibs  of editing services when you need further details  
  in order to develop your custom content applications using editingservices you are supposed to have good knowledge of jsf and spring as an application developer  views are assembled using jsf jsps  navigation cases are defined in plain jsf configuration files  xml  and business beans are set up using a spring application context  the following steps will lead to your custom content application  install the es web application template  configure your cms and unified api environment in web inf spring objectserver properties  create your jsf document views in web inf jsp editforms   by default a view for the document type mydocumenttype has to be named mydocumenttype jsp and will be automatically included in the built in document view  views document jsp   in addition  editing services for jsf lets you generate your jsp templates from your document type definition files  see section   implement your own views  actions and navigation cases if necessary  in general this can be done by editing some spring configuration files located in web inf custom or its subdirectories  adding your own spring configuration files and adding your own jsf navigation case definitions to the global jsf configuration   note that after step    the web application should be able to start  the built in content explorer  views explorer jsp  works out of the box  including search and publication  since all jsf views are accessed through a servlet mapped at  servlet  you have to access the explorer view via the url http   localhost      editing servlet views explorer jsp  note that the default configuration automatically redirects to this url when using the shorthand http   localhost      editing  in any case  the user has to log in before he can access the content explorer   when selecting a document  the explorer view navigates to a default document view of that document  the document view offers actions for the content life cycle  check out  check in  approve  publish        but does not provide property editing functionality  the desired property editing functionality is added in step    the most important task is to assemble property editors for all editable properties    section property editors helps you to with it  custom content editing use cases are added in step    see section extensions    the safest way of managing your source code in order to migrate to a newer version of the es web application template is to modify as few files of the web application template as possible  never modify any files under web inf framework  and to add your own bean definition files to one of the spring application contexts  
  the standard jsf commandbutton and commandlink components can be used to render active html elements such as a  a href  or a  button  tag  the server side action to be executed may be defined by the action or actionlistener attribute  the  es button  tag combines the jsf commandbutton and commandlink tags with the  es label  tag  the value attribute can be used for both for localization  text  tooltip and icon  and to set up the action being executed  if the value s value evaluates to an instance of type com coremedia editing action  the button component automatically installs an jsf action listener for executing the action  for details on actions see section  
  editing services for jsf use the standard jsf navigation mechanism  jsf navigation is performed by a javax faces application navigationhandler implementation that evaluates navigation cases defined in any of the jsf configuration files  the following code block shows the example of a navigation rule set that relates two views   views firstview jsp and  views secondview jsp      xml version           doctype faces config public      sun microsystems  inc   dtd javaserver faces config      en    http   java sun com dtd web facesconfig     dtd    faces config     navigation rule       from view id  views firstview jsp  from view id       navigation case         from outcome gotosecondview  from outcome         to view id  views secondview jsp  to view id        navigation case      navigation rule    faces config   the standard jsf way to trigger this navigation case is to define a  h commandlink  or  h commandbutton  with its action attribute set to a method binding that returns  gotosecondview   editing services for jsf provide their own com coremedia editing action navigationhandler interface and some jsf specific implementations that trigger the jsf navigation handler  the code block below shows the definition of an action that triggers the navigation case defined above    bean id  myaction  class  org example myaction   parent  commandaction  singleton  false      property name  name  value  new folder       property name  navigationhandler        bean class       com coremedia editing kits jsf action simplenavigationhandler          property name  outcome  value  gotosecondview          bean      property     property name  target  ref  mytargetbean      bean   note that the navigation handler will not be invoked if the action s execute  method throws an exception  the action can be triggered using the  es button  tag by setting its value attribute to   myaction   see section button for further information on command buttons   
  usually  jsf executes all business logic on the application server  each  h commandlink  triggers a round trip and generates an event in the server side java code  however  some complex client side components require client side actions that are executed directly in the browser  and thus are implemented in javascript    es provides support for client side actions with the component  es clientbutton   that works with action beans that inherit from the abstract bean clientsidecomponentaction  there are many client side actions predefined in the default spring configuration  namely in file framework spring editing jsf dispatcher servlet editing jsf actions xml  the following editing services components support client side actions   es inputrichtext    diff pane   and  diff container    as the application programmer  you usually do not have to care about technical details of client side actions  from jsf  these actions can be used as any other actions  only that  es clientbutton  is used instead of  es button   since client side actions usually need a target client side component  a client button has an additional attribute  for  that specifies the id of that target component  like so    es clientbutton value    tagasboldaction   for  texteditor     es inputrichtext id  texteditor          value    document properties text      the client button component determines its appearance using the same logic just as usual buttons   see propertyediting and diffexample for more practical examples of using client side actions  
  there are three primitive document property types  which are treated similar by es jsf  string  integer  and date properties  this section develops meta templates for the corresponding property editors  starting with a simple approach and adding more features  and thus  a bit more complexity  later   defining a simple string property editor  the simplest types of properties  string properties  also have the simplest property editor template    es label   value    document type descriptorsbyname             property name       h inputtext   value    document properties   property name      maxlength    property length      disabled      document checkedoutbycurrentsession       the first component renders the label  together with an icon and a tool tip  the second component is the actual editor component  for a simple property editor  a plain text input field suffices   the  es label  component renders a localized label for the cap property descriptor retrieved by   document type descriptorsbyname   property name    the corresponding localization keys that have to be defined in your own resource bundle   bundlename   locale  properties files  are   contenttype   doctype name    property name  text contenttype   doctype name    property name  tooltip  the icon is derived from the property type  in this case string   the  h inputtext  component renders an html input element with type  text   the maxlength is set to the maximum number of characters defined in the document property definition  the value attribute references the actual document property  where  document  is defined in spring as an editable proxy of the current coremedia document  content   the input field must be disabled in case the document is not checked out by the current user  this restriction can be omitted  since es jsf allows auto checkout of checked in properties  but this usage is not recommended  only a successful check out of the document by the current user guarantees that his changes can be saved later on and will not overwrite other user s changes  auto checkout  in combination with auto checkin  creates a new version even for minor changes  and it may fail in case the document is checked out by another user or the current user does not have sufficient rights to check out the document   as an example for a concrete string property editor  take the definition of property ingredients of document type dish in properties corem menu doctype xml    doctype name  dish  parent  document            stringproperty name  ingredients  length                 doctype   the instantiation of the simple meta string property editor template given above looks like this    es label     value    document type descriptorsbyname ingredients      h inputtext     id  ingredientseditor      value    document properties ingredients       maxlength           disabled      document checkedoutbycurrentsession       the following resource bundle fragment would be used e g  for german localization of the property label   contenttype dish ingredients text zutaten contenttype dish ingredients tooltip alle zutaten  f r diese gericht  the template then produces a html fragment like the following    span class  propertytype string icon cmicon        title  alle zutaten f r diese gericht  zutaten                     span   input id  documentform dish ingredientseditor         type  text         name  documentform dish ingredientseditor         class  cminputfield         value  mutton  foie gras  caramelized apples                potatoes         maxlength           although no style classes are given in the jsf view  some class attributes appear in the html output  the reason for this behavior is that es jsf allows global configuration of style classes per component through spring  see beandoc of file framework jsf editing jsf xml   for some components  style classes from the coremedia software style  files css coremedia style  css  are predefined to ease implementation of the coremedia look   feel  however  it is not possible to predefine all style classes  since some components are used in different contexts with different styles  the following section shows you how to fully implement the coremedia software style for property editors   adding advanced property editors features  the string property editor template can be refined by the following features   adding validation or error messages that appear after incorrect user input  using the coremedia software style label look   feel  including changing look   feel when the property is read only   the resulting meta template for string property editors looks like this    es panelgroup     element  div      styleclass  cmpropertyeditor cmtextwidth                   document checkedoutbycurrentsession                          cmdisabled disabled        es panelgroup element  div       styleclass  cmpropertytoolbar        es label       styleclass  cmpropertylabel        value    document type descriptorsbyname                 property name          es panelgroup     h inputtext      id    property name editor       value    document properties   property name         maxlength    property length        disabled      document checkedoutbycurrentsession         h message for    property name editor      es panelgroup   the template uses css style classes from the coremedia software style  files css coremedia style  css   of course  you can use your custom css design  either by using other style class identifiers or by replacing   adapting the style sheets   the whole property editor is grouped by a div element that has a computed styleclass which takes care of the special look   feel   cmpropertyeditor adds padding and modifies the behavior of other style classes inside a property editor  e g  cmtoolbar is right aligned   cmtextwidth sets a predefined width    em  for the whole property editor that is appropriate for text editing  cmdisabled disabled is set when the property is read only  because the corresponding document is not checked out by the current user  cmdisabled disables the text of the property label and changes the border color of the text field  while disabled is needed to grey out the property label s icon   the label is wrapped by another div element that establishes the look   feel for property labels which may have a property toolbar  see below    the  h inputtext  component has an arbitrary id  which must be unique with its jsf  naming container   i e  the form component  the meta template suggests to use the property name suffixed by  editor   if you want to do multi document editing  you may have to adapt the id in order to make it unique  the id is needed to reference the field from the  h message  component  it renders any validation or error messages  which a rare for string properties  but could result from a custom validator   defining property editors for date and integer properties  the standard template for simple property editors that cover integers and dates looks very similar  as follows    es panelgroup     element  div      styleclass  cmpropertyeditor cmdatewidth                   document checkedoutbycurrentsession                          cmdisabled disabled        es panelgroup element  div  styleclass  cmpropertytoolbar        es label       styleclass  cmpropertylabel        value    document type descriptorsbyname                 property name          es panelgroup     h inputtext       id    property name editor        value    document properties   property name          converter    converterfor document type                     descriptorsbyname   property name           disabled     document checkedoutbycurrentsession        h message for    property name editor      es panelgroup   jsf supports automatic conversion from input string to typed value for typed properties  because when editing coremedia document properties  you specify a map entry as the value binding  jsf cannot determine the correct property type   you have to declare a converter explicitly  the template sets the  converter  attribute to an el expression using the es helper bean converterfor  this bean is configured via spring and returns an appropriate jsf converter for the type of the given coremedia document property  while for strings it is of course not necessary  it does make sense for integers and dates  while the default handling of integers should be as expected  you may want to customize conversion of date properties   customizing conversion of date properties  note that in a coremedia document  dates are actually represented as java util calendar objects  in order to maintain a time zone   thus  for a coremedia dateproperty  the converterfor bean returns a calendarconverter  from package com coremedia editing kits jsf converters   you can customize the converter used for dateproperties either  by changing the global spring definition of converterfor application  described below   by assigning property specific converters using spring  see section   or by specifying the desired converter directly in the jsp  using the  es convertcalendar  custom tag  see section    when configuring with spring  you should not change any configuration file under in the configuration jars  instead edit a spring  configuration file  e g  spring editing jsf views xml  and use a customizer on the bean converterfor  property  calendarconverter   here is an example of setting the default calendar converter to allow to edit date and time  the default is to edit date only       customize replace bean  converterfor      property  calendarconverter        bean class  com coremedia editing kits jsf converters                   calendarconverter          property name  datetimeconverter            bean class  javax faces convert datetimeconverter              property name  type  value  both               property name  datestyle  value  short               property name  timestyle  value  short              bean          property        bean      customize replace   using combo boxes  if you want to offer a combo box instead of the plain text input field  you can do so by using the standard jsf component  h selectonemenu   just as the plain text input field  a jsf combo box has a value binding to the property to be edited  additionally  the select items  html  options  have to be specified  in jsf  you use the custom tags  f selectitem  and  f selectitems  to do so  while  f selectitem  is used for single select items specified directly in the jsp   f selectitems  uses a backing bean to retrieve the desired select items  in both cases  each select item consists of a jsf selectitem  which is essentially a pair of label and value   a simple example of using a combo box for the string property calories is shown in the following listing    es panelgroup     element  div      styleclass  cmpropertyeditor cmtextwidth                   document checkedoutbycurrentsession                          cmdisabled disabled        es panelgroup element  div  styleclass  cmpropertytoolbar        es label         styleclass  cmpropertylabel          value    document type descriptorsbyname calories         es panelgroup     h selectonemenu       id  calorieseditor        value    document properties calories         disabled     document checkedoutbycurrentsession         f selectitem itemlabel       kcal  itemvalue               f selectitem itemlabel          kcal        itemvalue                  f selectitem itemlabel       kcal  itemvalue              h selectonemenu     h message for  calorieseditor      es panelgroup   when using es  the preferred way to use combo boxes is a model driven  jsf independent approach  using combo boxes documents how to apply this approach to arbitrary select item models and can easily be adapted for simple types like strings  integers  or dates  
  this section presents a meta template for a link list property editor  another meta template is needed for the corresponding backing bean definition   a link list property editor is similar to the rich text property editor introduced in the previous section  it contains of a property label  a property toolbar  and the actual property editor  the property toolbar is again model driven  only that the backing bean linklisttoolbar is used   the actual property editor is a  h datatable   which uses two custom backing beans  one backing bean  referred to as   linklisttable  in the following meta template  is the table component for the desired link list property and keeps track of the current selection  which is needed by the action from the linklisttoolbar  the other backing bean    listlistcontroller   is a jsf specific controller that adds helper methods to allow easy access to the selection from jsf  for further information about table backing beans  see section tables  
  the first backing bean for the table is an editing services component of type com coremedia editing beantable   the contained table model is based on the specified linklist property  and the beantable has a column model using the standard columns for content objects  defaultcontentcolumnmodel  defined in the abstract bean abstractcontenttable  for details about these beans  see bean documentation    the second backing bean defines a jsf specific controller for this beantable  simply by using the class com coremedia editing kits jsf beantablecontroller and referring to the first backing bean  the linklist s beantable   the bean definitions can be placed in an arbitrary spring xml file in  web inf spring editing jsf dispatcher servlet  the recommended name for the file containing all custom view backing beans is editing jsf views xml  the meta template that has to be instantiated for every link list property is shown in link  property and doctype  are meta variables defined as before    
  if you want to edit properties of a linked document directly in the same view  have a look at the template web inf jsp editforms page jsp from the menu site example  and read about how backing beans for content objects are automatically created in section editablebeans  
  in a typical content entry application  there are forms to edit the properties of one of more coremedia documents  you can use the template generator of editing services for jsf to generate templates from your document type definition file s   you can invoke the template generator from the web inf directory of the editing services application as follows  java  jar lib templategenerator jar  o  output directory    d  doctype url     d  doctype url     replace  output directory  with the target directory for the templates and  doctype url n  with the location of your document type definition file s   invoke the template generator without arguments to see all available options   the template generator creates one jsp template per document type defined in the document type definition file s   for each property of a document type except linklist  a sub view for this property is included  for linklist no sub view can be created  because of the binding attribute they possess  they are described directly in the generated jsp   the content of the sub view is the jsp template in editforms propertyeditors chosen according to the property type and its attributes     
  this section offers a use case oriented approach to help you implementing typical custom content editing application requirements  editing services for jsf offers predefined building blocks to help you with both functionality and presentation  these building blocks are introduced as needed  for a complete reference  see section reference and the bean documentation  component tag lib documentation  and api documentation of es   this section uses examples that can be built using predefined building blocks  spring configuration  and jsf view definitions  jsf jsps  only  there are advanced concepts of es like extending the framework that require java programming  these advanced concepts are out of scope for this manual  if you need to extend the framework  consult the documentation mentioned above  consider booking a coremedia training  or call in coremedia professional services  
  as mentioned in the introduction of jsf enhancements  the way jsf supports model driven select items lacks separation of model and view  while the select item s value is a model  its label is a view  instead of bundling model and view into one object  the view should be produced from the model by a renderer  another disadvantage of mixing value and label into one object is that your backing beans have to use jsf specific api  namely the selectitem class  even if they just compute a model   es allows to separate concerns of model and view for select items  given a collection or array of beans  the model   the predefined helper bean  selectitems  can compute an array of jsf selectitems  to render the labels   selectitems  uses a localizedlabelfactory and retrieves the  text  property of the localizedlabel resulting from the given select item bean    the reason why localizedlabels are used instead of simple strings is as follows  in contrast to plain html  other view technologies  and even some advanced dhtml components  can display select items in a combo box with icon and tool tip   selectitems  has the following properties that both use the  faked map  pattern   label  for the given java util collection or array  even with simple component type    return a selectitem array with one selectitem for each localizedlabel resulting from applying the default localizationservice configured in spring to each bean from the collection  byfactory  for the given localizedlabelfactory and java util collection or array  return a selectitem array with one selectitem for each localizedlabel resulting from applying the given localizedlabelfactory to each bean from the collection  using the current locale    to solve another every day problem  you can let es  sort model driven select items alphabetically  note that sorting is done after  localization  so that the correct order for the user is produced  the service is realized through the helper bean  sortedselectitem   which implements the same api as  selectitems   
  the authentication mechanism used by editing services for jsf follows the principle described in caeloginexample  a cap session is mapped to a http session by the editingsessioninterceptor class that is configured to intercept calls to the jsf facesservlet  the second interceptor involved in the login process is the logininterceptor that checks whether or not a valid cap session has been mapped to the current user s http session  the logininterceptor has the following capabilities   redirect unauthenticated http get requests to a login uri redirect unauthenticated http post request to a re login uri store the original request uri forward authenticated requests to a default uri if no original request uri is set  login and re login uris have to be resources performing some kind of user authentication  editing services for jsf provides a login jsp that invokes the loginaction and the logincontroller that simply creates a cap light weight session  after having logged in using the loginaction  a jsf navigation can be performed in order to navigate from the login uri into the editing services for jsf application  this can be done using the forwardorredirectcontroller  
  as mentioned in the motivation  jsf comes with a managed bean creation facility that defines managed beans through an xml syntax  this is very similar to what a spring bean factory does  but spring is a more general  widely accepted ioc framework  and it is already used throughout the cae  to not let you learn two different syntactic variants for the same thing  namely defining beans in xml  es allows to use spring bean factories instead of the jsf managed bean facility   jsf variableresolver  jsf allows to plug in a so called variableresolver that is responsible for looking up managed beans  as part of its readily available jsf integration  spring comes with a delegatingvariableresolver that delegates lookup of jsf managed beans to the spring webapplicationcontext if no managed bean is found by the original variableresolver   spring s delegatingvariableresolver has two major draw backs   it always uses the root webapplicationcontext  although spring supports a current webapplicationcontext which may be different for different requests  as spring     only supports singleton and prototype beans  spring defined managed beans can only be in scope application or none  there is no support for the standard scopes session and request  and of course not for editing services  custom scope pageflow  see section pageflow    consequently  editing services provides a custom implementation of a jsf variableresolver that supports these additional features  namely com coremedia editing kits jsf util spring springvariableresolver  see api documentation    scoped beans in spring      the next problem is how to define scoped beans in spring  spring     introduces explicit scopes  but during development of es  it was not yet available in a final version  thus  editing services uses spring     and offers its own scoped beans solution   in order to enable scoped beans  you have to include a specific beanpostprocessor into your applicationcontext  the editing services web application template already does this for you     bean class  com coremedia editing spring scopedbeanspostprocessor     note that when using parent and child bean factories  like the editing services web application template does  you have to define this beanpostprocessor in every bean factory   the bean scope of a spring bean is then defined by a name pattern  the scope name  request  pageflow  session  or application  is appended to the bean name as a suffix  separated by an underscore        an example of a session scope spring bean is   bean id  mysessionscopebean session  class  com acme mybeanclass        singleton  false           bean   note that all beans that are not application scope have to be declared as prototypes  singleton  false   in order for spring to create separate instances  es includes the beanpostprocesser com coremedia editing spring scopedbeansvalidatingbeanfactorypostprocessor which validates this requirement during application startup   when the bean mysessionscopebean session is retrieved from the applicationcontext the first time  it is created and populated as usual  it is then stored in session scope under the name mysessionscopebean  without the suffix    each subsequent call in the same session looks up the name mysessionscopebean in session scope and returns the existing bean   this means that when using a scoped spring bean from jsf el or jstl el  you have to use the name without suffix  while when using it inside spring  you have to use the full name  also note that jstl el does not know of managed beans  so a managed bean must be application scope or must already have been created  through jsf el  or through code accessing the spring applicationcontext directly  e g  in some controller  before it can be retrieved by jstl el   since migration to spring     solves the scoped beans problem in a clean way  this feature of es is subject to change in future versions  for later migration  you will have to refactor the spring bean definitions only  but not the access from jsf el or jstl el  in the next version of editing services  the preferred form of the example scoped bean given above will look like this    bean id  mysessionscopebean  class  com acme mybeanclass        scope  session           bean   the bean can then be referenced from spring and jsf el under the same name  
  the concept of a page flow scope was first introduced by oracle s adf faces  an extension of jsf containing many framework enhancements and components  adf faces has been donated to the apache foundation and is now called apache trinidad   the page flow scope hands over a bean from one request to the next one  but still allows a single session to create multiple instances of that bean  the concrete problem which is solved by this is that when storing a bean in session scope  it is global for that session  but a user may want to use several browser windows that share the same http session  in the standard jsf solution  opening the same view in multiple windows results in confusing behavior  since the state of these windows is shared and thus overwritten  the page flow scope overcomes this limitation  note that page flow only works as expected when jsf client side state saving is activated in web inf web xml  otherwise  the whole view state is stored in session scope  allowing only one instance of a view per session   es implements the page flow scope as a jsf extension  technically  beans in page flow scope are attached to the attributes of the view root and as such are stored together with the state of the view root component  to keep page flow beans even when the view is changed due to navigation  the page flow scope map is copied to the current view root at the end of each request   when using page flow scope  you do not need to be aware of these technical details  you just need to know that beans put into page flow scope have a life time almost as if they were in session scope  the only difference is that each view instance in the same session  more practically speaking each browser window of the same user  has a separate instance of a page flow scope bean  in contrast  session scope beans are shared by all view instances of one session   user   to access page flow scope  es offers different techniques   the springvariableresolver  see section managed beans  introduces an additional implicit variable pageflowscope that  in analogy to jsf s requestscope  sessionscope  and applicationscope  provides a map from attribute name to bean  the page flow scope is available as an application scope bean pageflowscope application of type map  this global map  magically  represents the page flow attributes of the current request  technically  using a threadlocal   since pageflowscope is also an implicit variable  see above   this bean will never be used by jsf el  but is intended for injecting the page flow scope into a client bean  see below  and for accessing page flow scope from jstl el  using it without the suffix  i e  pageflowscope   the page flow scope is supported as a new scope in spring by suffixing a spring bean name with  pageflow  as described in section managed beans  the page flow scope can be accessed programmatically by injecting the bean pageflowscope application into any client bean  this is the preferred way   or by accessing scope getscope scope pageflow scope name  getattributes    class scope can be found in package com coremedia editing    
  editing services for jsf defines a set of custom jsf renders  components and utility classes as well as a custom taglib  although the custom taglib is prefixed es  shorthand for editing services  some tags do not depend on editing services for jsf infrastructure  a summary of these generic components provided by the editing services for jsf taglib can be found in the reference section  the reasons for developing generic jsf components are described below   the jsf html panelgroup renderer renders a html span element around its children  this implies that it cannot be used as the html body s first child if valid html output is desired  so the  es panelgroup  tag allows to specify which html element has to be rendered in order to allow valid html output and to be more flexible with regards to html structure and css   the jsf html datatable tag is designed to output a html table element based on a list model and column child components  the  es foreach  tag allows to define a single child component   there are built in converters for prime types and java util date but not for java util calendar  use the  es convertcalendar  tag in order to convert values of type calendar   jsf leaks built in file upload support  the  es inputfile  tag produces html  input type  file   output and sets up renderers and converters that care for the uploaded file  note that the default converter used by this component requires a bean of type org springframework web multipart multipartresolver defined in the spring application context and the encoding of the surrounding html  form  tag set to  multipart form data    the  es selectonemenu  tag extends the standard jsf selectonemenu tag with additional optional features like auto submit on selection change  another interesting feature is that it has the capability to attach itself to another component given by the  for  attribute    standard jsf has no feature for defining variables in a jsp  the aliasbean tag defined by the apache tomahawk project allows you to create a temporary name for a real bean visible for its children  this motivated the development of the  es scope  and  es variable  tags that allow shorthand notations for complex el expressions  a es variable is a component that publishes a variable for use in el value bindings by its child components  the visibility of a variable is defined by a scope component  a variable inherits from scope for the following reasons  if a variable has at least one child it represents the scope for the variable to be valid  if a variable has no children it searches the component tree and registers at the first scope found  
  when editing the properties of a business object  bo   you have to be careful when to actually change the bo  if a valid value were immediately stored into the bo on each round trip  it would not be possible to implement wizards  which accumulate input and save only when the user wants to   save    finish    however  it would not be convenient to implement an additional step  namely collecting changed properties  as a specific backing bean for each bo that should be edited   es realizes editable beans through spring s aspect oriented programming  aop proxies   the problem described above is a typical case where you want to apply aop  an aspect of the system concerns many classes and is not easily implemented through inheritance  here  this aspect is that when a property of the bo is set  the new value is stored as a preliminary value  and all such changes to all bos are collected during a user interaction  when the user interaction is finished  the new values are either written into the bos  successful case   or simply dropped  unsuccessful case when the user hits  cancel     spring offers a simple proxy based aop framework  where a proxy can be created for a target object and intercept arbitrary method calls to that target  spring aop proxies use java s dynamic proxies  but are far more high level when it comes to defining which methods should be intercepted and how the behavior of the intercepted method should change   es provides the generic interface com coremedia editing form editablebeanrepository to retrieve an interface compatible  editable aop proxy for a given bean  so that its properties can be edited in a wizard style fashion  there is a predefined bean editablebeanrepository pageflow that is an instance of an editablebeanrepository implementation that can handle content objects  the bean has page flow scope so that each page flow defines its own user interaction  for other types of beans  custom editablebeanrepository implementations have to be provided  see javadoc of com coremedia editing form    to allow on the fly access to the editablebeanrepository pageflow bean from a jsf view  there is a helper bean editablebean request that uses the faked map pattern  see section  to access the geteditablebean   method of the current editablebeanrepository   a small example  assume you have defined a bean for a certain document in spring like    bean id  currentdish pageflow        class  com coremedia editing cap capobjectfactorybean       property name  path  value   site dishes poultry       property name  caprepository  ref  contentrepository      bean   a bean that contains a  current  business object that is used in a form view is usually put in page flow scope  so that it is kept from one request to the next  and the user can still open several browser windows with the same session  but different current objects   as before  you can do read only access of that bean s properties in a jsf jsp like this    h outputtext value    currentdish properties ingredients      now  if you try to write to the properties map of a content the same way  the user would get an exception when submitting an edited value        does not work  throws an unsupportedoperationexception        h inputtext value    currentdish properties ingredients      jsf tries to write the new property value directly into the map returned by content getproperties    which is  as the javadoc states  read only  even if it were modifiable  it would not be a good idea to write into the business object directly  as argued at the beginning of this section   instead  you have to create an editable version of your content bean explicitly when you want the user to modify properties  in the jsf jsp  this can easily be expressed as follows    h inputtext  value    editablebean currentdish  properties ingredients      now  editablebean currentdish  calls editablebeanrepository geteditablebean currentdish   which returns a proxy of the respective content that implements all setters  and the put method of the properties map  to store the new value in the editablebeanrepository s preliminary values storage  the getters are implemented to return a preliminary value if present  otherwise the result of the original getter   if you want to offer many properties of the same bean for editing  the above el expression may seem a bit long  you can easily define a spring bean that does the same thing as an abbreviation      bean id  editabledish  singleton  false          factory bean  editablebeanrepository pageflow          factory method  geteditablebean        constructor arg ref  currentdish pageflow        bean   note that such helper beans are not put into any scope  jsf  scope  none    but are prototypes  i e  are rebuilt each time they are requested  if editabledish was put into some other scope  it might  miss  changes to the currentdish pageflow bean applied during one request  it is not very expensive to re get the editable bean every time it is requested   pitfalls when using editable beans  an editable version of a bean implements the same interface  so at first glance  it seems to be possible to always use editable beans  even for read only access  but this approach is not recommended for the following reasons   creating or using an editable bean only when write access should be possible makes write access explicit and thus may avoid accidental modification of bos  spring s aop proxies are not completely transparent  they do not have an adequate equals   and hashcode   method and thus cannot be used for comparison  note that this also means that proxies may not be used in java collections  aop proxies are quite optimized  but still produce overhead that may degrade performance   submitting and reverting changes  all changes made to an editable bean are preliminary  while this protects the bo from early  unwanted changes  it requires explicit saving of the preliminary changes  there are predefined actions for saving and resetting all preliminary changes collected by the current editablebeanrepository  namely submiteditedbeansaction and reseteditedbeansaction  that call the respective methods of the editablebeanrepository api  
  this chapter describes editingservicesforjsf  a subcomponent of the cae aimed at building web user interfaces for custom content applications  the code examples presented in this chapter are found in the cae es menusite example of your cms distribution  this chapter follows a use case oriented approach  the impatient application developer should at least read getting started  
  the cae web application template is the starting point for your own cae applications  
  the overall goal of the coremedia content application engine  cae  framework is to provide a structure for any kind of web application that accesses the coremedia content repository  the declarative nature of this framework and the independence of the layers ensure fast development and maintainable application design  an extensible web application template is provided as a starting point  you may also encounter the term  objectserver  throughout apis or configuration files  please read coremedia content application engine in that case  the overall application setup and web request processing are handled by the spring framework  so it is useful to have a solid knowledge of spring before developing cae applications   to represent the content objects in the repository  java objects called content beans can be generated that directly reflect the repository structure  it is possible to extend these generated beans with any kind of custom business logic  on top of this data access object layer  a caching layer can be defined by simply declaring the cacheable properties of the content beans  the elements of the caching layer are views on the content beans and are therefore called data views  based on the types of the content beans and or data views  suitable jsp templates are chosen in order to render the back end information  the object oriented nature of the template registration and mapping subsystem harnesses the full power of inheritance and implementation relationships   the modular design makes it possible to extend and modify the cae framework    contentbeans can be used for other purposes than rendering  for example for implementing web services  for business logic deployed in the workflow server or in the cae feeder  or for custom standalone applications  the dataview cache can operate on any bean  not just on contentbeans  the rendering layer can render any bean  not just contentbeans     
  coremedia offers a tool to migrate web applications developed with cms      to the new directory structure of cms        the default pattern bases on the structure described in the  the cae web application  section of the content application developer manual   use the tool with the following syntax   java  jar migrationtool jar               refactor all  p  path to webapp base dir                 n  vendorname                  refactor structure  p  path to webapp base dir                 n  vendor name                  refactor web xml  p  path to webapp base dir                 n  vendor name                              refactor spring  to spring   p  path to webapp base dir                 a  pattern    v     a  pattern                        ant style pattern for file based                                     refactoring   n  vendor name                    the vendor name   p  path to directory of           path to the web application      the web application       v                                 changes the logging level                                     to verbose  debug   
  the generated code may not compile under some circumstances  e g  due to naming conflicts  a content property named  content  will clash with the method  getcontent inherited from contentbean  in this case you should rename the generated getters in the interface and the  base class  
  structure of the generated code  when you inspect the generated classes  you will find that three files per document type are generated      an interface with the same name as the document type   an abstract class ending with  base  and    a concrete class ending with  impl   the interface is what you should use in other classes   base contains the repository access code and   impl  is the actual class that is instantiated  this class is the place for you to modify  when a document type inherits from another type  its   base  class inherits the   impl  class of its parent  this way  it inherits the custom extensions made for the supertype  for documenttypes that do not have a parent  the   base  class inherits from a framework class abstractcontentbean that defines the underlying content bean  factory  equality and hashcode as well as a few convenience methods     
  the   base  class contains property getters for every user defined property in the corresponding document type  we do not generate getters for metadata such as name or creation date  the property types are mapped to java as follows  
  the tables presented in this section are used for reporting the number of unique visitors of a site  normally values that are written to these report tables will never be changed again  
   property value default description sql pool logschedulemessages false true false false if the property is  true   write messages of the connection pool to the log file defined in capserver properties  sql pool logverbose false true false false if the property is  true   more debug messages will be generated  sql pool logqueries false true false false if the property is  true   messages concerning queries  search of document versions  will be generated  sql pool logquerystatements false true false false if the property is  true   sql statements concerning queries will be written to the log  sql pool minconnections  n  int   minimum number  n  of connections to the database  sql pool maxconnections  n  int   maximum number  n  of connections to the database  sql pool maxqueries  n  int   maximum number  n  of connections used for queries  i e  the maximum number of parallel queries  sql pool reaperinterval  n  int     the interval  n  in seconds in which it is checked if connections can be closed   sql pool reapertimeout  n  int     the time  n  in seconds a connection must be idle before it will be closed  sql pool validatorinterval  n  int     the interval  n  in seconds in which existing connections will be checked for function  sql pool validatortimeout  n  int     the time  n  in seconds a connection must be idle before it will be checked for function  sql pool checktimeout  n  int   maximum time  n  in seconds the check is allowed to take  sql pool opentimeout  n  int    maximum time  n  in seconds the opening of connections is allowed to take  sql pool closetimeout  n  int    maximum time  n  in seconds the closing of connections is allowed to take   
  configure the sql connection pool 
    value default description sql store collector initialdelay  n  int     waits  n  seconds before starting the first collection  sql store collector delay  n  int       the delay between two collections in seconds  sql store collector starttime  n  int    the time of the day  in seconds from     h in the default time zone  when the collector should run every day  if set to     it does not run at a fixed time  the initial delay is always enforced as a minimal delay after server startup  sql store collector optimizer interval  n  int       the delay between two optimizations in seconds  sql store collector optimizer mindelay  n  int     the minimum delay between two calculations of the hash value in seconds  sql store collector optimizer maxdelay  n  int      the maximum delay between two calculations of the hash value in seconds   
  configure the blob and sgmltext collector and blob optimizer  the optimizer is a component which merges identical blobs from all documents and versions into one  to identify identical blobs  the optimizer calculates a md  hash value for each blob   the collector is a component which erases sgmltext and blobs from document versions which have been deleted  
    value default description sql store convert  documenttype   propertytype   com customer xmlconverter    converters which are used to convert custom xml formats which have been defined for the obsolete coremedia sgmltext dtd  sql store convert correctrichtext true true false true the editor in versions before sci        created xml text  which was not valid according to the coremedia richtext     dtd  if you have created content with versions before sci        set the property to  true  to correct these errors  we recommend to use always  true    sql store replacesubstitute false true false false there are problems with zos db  databases to store characters that are not in the databases character set  such characters are converted to the character with the code   x   a  upon read  if the property is set to  true   this character will be replaced with the character defined in sql store substitutecharacter  thereby avoiding the replacement character that is illegal in xml texts  sql store substitutecharacter  character  char     the character  with which   x   a  should be replaced   
    value default description sql schema checkcolumns true true false true setting the property sql schema checkcolumns  to  true   causes the content server to compare the document type definition with the existing database schema for missing columns and matching widths of string properties  if there are differences  it depends on the setting of sql schema altertables if the content server refuses to start   false   or if it adds and changes the columns automatically   true    checking the tables consumes a considerable amount of time  so that the server starts up more slowly  if sql schema checkcolumns is set to  false   the content server will not check the columns  if there are differences  you will run into content server exceptions later on  sql schema createtable true true false true the content server always checks if tables for the document types are missing  setting the property to  true   causes the content server to create missing tables for new document types  if the setting is  false  and there are missing tables the content server refuses to start sql schema altertable false true false false setting the property to  true   causes the content server to automatically add database columns for newly defined document type properties and to fix wrong widths of string properties  this will only work if you set sql schema checkcolumns to  true   sql schema createdropindexes false true false false setting the property to  true   causes the content server to automatically create and drop indexes on document type properties  according to the index attribute in the doctypes xml  this flag only affects existing columns  for newly added columns and tables  an index is always created if the index attribute is set   
  changes of the database schema  these properties define how the content servers deal with document type changes  all checks and changes are performed at starting time of the content servers  
    value default description sql store driver oracle jdbc driver oracledriver string  the jdbc driver used to connect to the database  sql store url jdbc oracle thin  hostname   port  cm string  the url of the database to connect to  replace  hostname  and  port  with the appropriate values of the database host  don t replace  hostname  with  localhost   this may cause problems with some jdbc drivers  sql store user username string  the user name at the database  sql store password userpassword string  the password of the user at the database  sql store dbproperties corem oracle string  the path to the database specific property file  sql store logdrivermessages true true false false write all messages of the jdbc driver to the log file defined in capserver properties  sql store driver jdbc    enter the version of the jdbc api supported by the jdbc driver  an empty property uses jdbc      sql store isolation    define the transaction isolation level  an empty value uses the driver default setting   
  the coremedia contentapplicationengine framework is intended for developing content applications with coremedia cms  its focus is set on web applications  yet the core frameworks are usable in other environments such as standalone clients  portal containers or web service implementations   
  the content application engine  cae  is a framework for the development of content applications   but what is a content application  a content application as defined by coremedia is an application that takes content from several sources  transforms this content and delivers it to a target  this is a wide definition and comprises the  classical  task of a website delivered to a client  but also the editing and storing of content of the content management system   the cae is build in a modular manner and offers components for different use cases  the following table lists all components of the cae framework and compares some of their main features     
  if you want to install a component on a windows vista system  use the cap  rel no   js script for installation  this script asks for administrator privileges before starting the installer  these privileges are required for installation into the program files folder  simply drag the installation script file on cap  rel no   js or open a command line prompt as administrative user and enter   java  jar  path  cap  rel no   jar  p  path   installscriptname  script 
   start the installation of a coremedia component as follows   open an explorer window and change to the directory that contains cap  rel no  jar and or cap  rel no   js   if you want to install a component on a windows vista system  use the cap  rel no   js script for installation  this script asks for administrator privileges before starting the installer  these privileges are required for installation into the program files folder  simply  double click the cap  rel no  js file or open an administrator command line prompt and enter java  jar  path  cap  rel no   jar   otherwise  start the installation by one of the following options      if there is a link for direct execution of jar archives in the operating system  windows   the installer can be started by double clicking cap  rel no  jar      or    open an command line prompt and type java  jar cap  rel no   jar      the installer uses the language of the installed windows os  but you can chose the installer language by starting the installation with     java  duser language  languagecode   countrycode   jar cap  rel no   jar e g    java  duser language en us  jar cap  rel no   jar for an english installer    the start window with version and copyright information opens   
   property value default description proxy cache capacity  int     with this parameter you can set the number of cached resources  i e  documents and folders  default value         the default value of      resources is set according to the maximum memory allocation of the java environment of    mbytes  see bin editor jpif   furthermore  this value is based on the assumption that a document contains a normal sized image  jpeg  gif  etc   and these images are displayed in the overview as thumbnails   if the documents contain few images but their number is many thousands  the value for the cache can be e g  doubled  while maintaining the memory size of the jvm   if large multimedia data is involved  the upper limit of the memory allocation for the java environment must be increased  or the cache memory size reduced according to the larger size of the data  proxy gc limit  int   using this parameter  you can enter  in bytes  the size of the remaining free memory of the jvm before cm editor objects start to be deleted  in order to avoid a memory deficiency  default value              an increase of this value to ca        million can lead to the resource cache being almost completely emptied very often  to maintain free memory for the program execution of the cm editor  in this way  memory deficiency can be avoided  but the network load usually increases  since the resource cache must be refilled  leading to possible losses in speed when working with the cm editor  proxy status interval  int   using this parameter  you can determine the interval  in seconds  at which the required memory is analysed and  possibly  reduced  and messages about the resource cache and the memory use of the cm editor are output  a value of   deactivates this function  proxy entityresolver class hox corem editor proxy proxyentityresolver    the editor fetches xml entities like css files for richtext properties from the coremedia server  you can configure a different entity resolver in order to relieve the coremedia content server  the value must be an implementation of org xml sax entityresolver  for convenience  coremedia sci provides the proxyentityresolver which caches entities on the local disk in the  install dir   var tmp editor entities directory  if you run the coremedia editor on a windows vista system  the entities are cached relative to the users data   e g   c  users bob appdata local coremedia cms  rel no    
   component description caching and dependency tracking uses content application engine web application the basis for most of the other components  the cae web application offers a mvc model for content applications  it separates the view from the business logic and has declarative caching  caches dependencies and contents in memory  tracks invalidations and dependencies  the cae web application can be used without any other cae framework component  but in most cases you will use the http cache to take advantage of the full power of the framework  persistent cache an internal cache component that caches the dependencies and values in a persistent manner  the persistent cache is used by the proactive engine  the cae feeder and the http cache  caches dependencies in a database and values in the filesystem   proactive engine the proactive engine automatically computes values and keeps track of invalidations  re computes values after invalidation  the procactive engine uses the persistent cache to store values and dependencies in a persistent way  http cache a cache component that caches complete http responses in a persistent way  it is deployed in front of a cae web application   uses the persistent cache to save dependencies in a database and values in the file system  cae feeder the cae feeder builds on the proactive engine to feed custom business objects into the search engine   uses the proactive engine to create feedables  editing services for jsf editing services for jsf is a framework for the development of editorial clients   uses the content application engine web application and the unified api to access the content server  preview based editing  a simple framework to make a preview website editable     content rules a framework that allows to create pages  which are composed automatically  following specific rules  content rules use the search engine to find appropriate content for a page   uses the search engine for queries   
  the functionality of coremedia components can only be guaranteed with approved platforms and corresponding java versions  to operate coremedia sci  run java   platform with java runtime environment  jre  or java development kit  jdk     
  do not run a coremedia cms system with different java versions  all components have to use the same java version  
  double clicking the info html file on a windows vista system  opens it in the internet explorer with a special url  because of this url  the buttons to remove locks and messages do not work  as a workaround  you can enter the correct url  http    host   port  info html for example  in the ie  
  microsoft office xp  if you have installed microsoft office xp on your computer  problems might occur with coremedia documents which have umlauts in their document name  the document names might not be shown correct and errors migth occur if you try to open such a document   microsoft office       if you use office      with the webdav server  instablities might occur if you have configured only digest authentication  to avoid these problems you need to support basic authentication in the server  if security is a problem you should use ssl   microsoft vista  if you connect on a windows vista system  you might have to enter the username and password three times  this is caused by a bug in windows vista s webdav support  this does not happen if the username contains a     character as it is the case for ldap users   
  highly dynamic and personalized websites  the cae web application is the basis for all content applications  it offers in memory caching for highly dynamic websites  you can simply integrate third party content into the web application  an example would be a website with personalized pages which includes content from an erp system    rule based content selection  for the automated population of pages  you can use the content rules component  it allows to create pages which contain content selected by specific rules    high volume static content  for a website that is page oriented rather than object oriented  the http cache is best suited  the http cache is also a good choice if there are many pages  because the number of cached pages is only limited by disk space  not by main memory  for cached delivery of large computed blobs  such as pdfs  the http cache is also a better choice than the pure cae  because pages are cached on disk  and are cached persistently even in case of a restart  lastly  the http cache is the cae interface to web caching services like akamai  because it supports the relevant http protocol headers    content push  the proactive engine is a framework that calculates values from given objects triggered by the invalidation of this objects and that delivers these values to a receiver  internally  the cae feeder uses the proactive engine to calculate feedables  each time the underlying objects have changed    offline web site generation  if you need to generate a completely static web site  e g  for upload to a very simple webserver  or for delivery on a cd  you have two options  you can either use the http cache together with a crawler  such as wget  rn   or you can use the proactive engine together with a custom content trigger that selects the pages to generate  note that unlike its predecessor  the ads pads  the cae does not include a crawler    content indexing  the cae feeder writes content beans to the search engine  you can use it for example  to make the content of a web site searchable  without indexing html embellishments  internally  the cae feeder is based on the proactive engine    preview based editing  preview based editing is an easy method to edit content right in the preview of the web page  it is based on editing services for jsf and can be extended with own commands  a use case would be editors with no coremedia editor knowledge which should be enabled to easily change the text in the preview    custom content editing uis  editing services for jsf is aimed at the building of interactive guis for content edition and creation  use cases are wizards for content creation  simplified guis for specific tasks and the like  internally  editing services for jsf is used for the editing functionality in the portal integration  for the rule editors in content rules and for the overlays in in site analytics  
  the servers open an ssl port in addition to the clear text port  this allows the same server to be accessed using clear text communication from within a trusted network  and using ssl from outside  when a client is configured to use ssl  not a single byte will be sent to the clear text port  which may be blocked from outside access by a firewall   note that the server s http port will have to be accessible to clients  for example to retrieve the ior   enable ssl encryption  enabling ssl encryption for corba communication requires the following steps  create keystores for content server and workflow server  prepare the content server for ssl communication prepare the workflow server for ssl communication prepare the coremedia editor for ssl communication  restart all three components verify ssl communication  create keystores  create keystores which will later be distributed to the servers and clients  consult your jdk documentation for further details about the keytool command  create self signed server keys for content  and workflow server  keytool  genkey  alias contentserver  v  keyalg rsa       keystore contentserver keystore keytool  genkey  alias workflowserver  v  keyalg rsa       keystore workflowserver keystore    export the server s public keys from their keystores   keytool  export  rfc  keystore contentserver keystore       alias contentserver  file contentserver public key keytool  export  rfc   keystore workflowserver keystore       alias workflowserver  file workflowserver public key      prepare the content server for ssl communication edit bin contentserver jpif and add the following lines   java vm args   java vm args     dcom coremedia corba sslserversocketfactory keystore      install dir   fs etc  fs keys  fs contentserver keystore  java vm args   java vm args     dcom coremedia corba sslserversocketfactory passphrase    mypassword      edit properties corem contentserver properties  and set the following properties   cap server orbserverport       cap server orbserversslport          place the contentserver keystore in etc keys   of your installation home of the cms server  for another location adjust the keystore setting in contentserver jpif  accordingly     prepare the workflow server for ssl communication edit bin workflowserver jpif and add the following lines    java vm args   java vm args   dcom coremedia corba sslserversocketfactory keystore    install dir   fs etc  fs keys  fs workflowserver keystore  java vm args   java vm args     dcom coremedia corba sslserversocketfactory passphrase    mypassword     edit properties corem workflowserver properties  and set the following properties   workflow server orbserverport       workflow server orbserversslport          place the workflowserver keystore in etc keys   of your installation home of the workflow server  for another location adjust the keystore setting in workflowserver jpif  accordingly   the following two steps are optional and are limited to rare cases  in which ssl encrypted communication may also be required between workflow server and content server      in this case  you should add the content server s key to the workflow server s keystore  and configure the workflowserver as an ssl client like the editor  run the following command   keytool  import  alias contentserver  keystore     workflowserver keystore  file contentserver public key     in bin workflowserver jpif  add the following lines   java vm args   java vm args     dcom coremedia corba sslclientsocketfactory cleartextport           java vm args   java vm args     dcom coremedia corba sslclientsocketfactory sslport        java vm args   java vm args     dcom coremedia corba sslclientsocketfactory keystore    install dir   fs etc  fs keys  fs workflowserver keystore    java vm args   java vm args     dcom coremedia corba sslclientsocketfactory passphrase    mypassword    prepare the coremedia editor for ssl communication import the servers  public keys to the editor s keystore   keytool  import  alias contentserver      keystore editor keystore  file contentserver public key keytool  import  alias workflowserver      keystore editor keystore      file workflowserver public key    edit bin editor jpif and add the following lines  the port numbers in the sslport  property must be in the same order as the corresponding ports in the cleartextport  property  both lists can also specify ip addresses  written  hostip   port    java vm args   java vm args     dcom sun corba legacy connection orbsocketfactoryclass    com coremedia corba sslclientsocketfactory    java vm args   java vm args     dcom coremedia corba sslclientsocketfactory    cleartextport              java vm args   java vm args     dcom coremedia corba sslclientsocketfactory sslport                  java vm args   java vm args     dcom coremedia corba sslclientsocketfactory keystore      corem home   fs etc  fs keys  fs editor keystore  java vm args   java vm args     dcom coremedia corba sslclientsocketfactory passphrase    mypassword         if the editor is started via webstart  add the following lines to webstart ext editor jnlp  behind the property tag with name  java security policy  inside the resources tag    property name    com sun corba legacy connection orbsocketfactoryclass     value  com coremedia corba sslclientsocketfactory         property    name  com coremedia corba sslclientsocketfactory    cleartextport   value                  property name    com coremedia corba sslclientsocketfactory sslport     value                  property    name  com coremedia corba sslclientsocketfactory keystore     value  http     host   port coremedia files properties    corem editor keystore     property name    com coremedia corba sslclientsocketfactory passphrase   value  mypassword      the above description assumes sun jdk    sun jdk     needs a different configuration for the orb socket factory  as follows   java vm args   java vm args     dcom sun corba connection orbsocketfactoryclass    com coremedia corba sslclientsocketfactory   or in the case of webstart    property    name  com sun corba connection orbsocketfactoryclass   value  com coremedia corba sslclientsocketfactory       if you want to deploy the editor keystore via http  as suggested above  but mind that this is a security problem  you also need to adjust properties policy server policy to allow the deployment of editor keystore  add the following permission line   grant codebase  http   localhost servlets fileservlet              permission java io filepermission      properties    corem    editor keystore    read                  place the editor keystore in etc keys   of your installation home of the editor  for another location adjust the keystore setting in editor jpif accordingly  for webstart place the keystore in propeties corem   of your installation home of the cms server  for other locations you need to adjust properties policy server policy   prepare unified api clients for ssl communication in order to instruct unified api clients like the command line tools or the content application engine to use ssl  you must also configure the ports  the key store  and the passphrase in the jpif files  just as this is done for the coremedia editor  the orb socket factory must be set in the connection parameters for the unified api  however  if you are setting up the unified api connection programmatically  consider using the connect map  method of the class cap   map parameters   new hashmap        parameters  put  com sun corba legacy connection orbsocketfactoryclass         com coremedia corba sslclientsocketfactory      connection   cap connect parameters       if you are using the cae  you must inject the parameter into the capconnectionfactory  to this end  you can add the following bean customizer definition to a spring bean definition file of your webapp    bean class  com coremedia objectserver util               simplepropertycustomizer         property name  customizedbeanname      value   amp connection       property name  customizedproperty      value  otherparameters       property name  propertyvalue        map         entry    key  com sun corba legacy connection orbsocketfactoryclass     value  com coremedia corba sslclientsocketfactory            map      property    bean      in any case  you may inject the parameter through the ior url passed to the unified api  for command line tools  you can pass the url on the command line   cm systeminfo     url http    sshclient   corbaport  coremedia ior    com sun corba legacy connection orbsocketfactoryclass    com coremedia corba sslclientsocketfactory       u admin  p admin      you can also set the extended url in the file capclient properties   cap client server ior url     http    sshclient   corbaport  coremedia ior     com sun corba legacy connection orbsocketfactoryclass     com coremedia corba sslclientsocketfactory       it is also possible to configure an extended url in the objectserver properties when operating a cae  you can pass an extended url when opening a connection programmatically   restart workflow server  content server  and clients   restart all components using cm  component  restart  verify ssl communication  verify ssl communication by searching the components  logs for error messages  and by using netstat  under solaris  using the port numbers in this example  you could use the command  netstat  e  a  p grep           it should show that before starting the editor  the server is listening on port              which are the ssl ports  and              the clear text ports   after the editor is started and a user has logged in  a connection should be established on port              and not              towards the client s machine  note that other components might continue to connect to the clear text ports  
  this section describes the operational server utilities  before you apply these tools you should read the respective documentation thorouhgly  the operational tools perform highly privileged tasks some of which are not subject to any consistency checks  an improper usage of the tools may severely affect the performance of the coremedia cms or even damage the repository    repository tools  collectors  delete obsolete documents and versions from the repository serverexport  stores the content of the repository as xml files serverimport  upload content stored by serverexport usedlicenses  withdraws a license from a user  database tools  sql  provides direct access to the database dbindex  creates a database index over the folder structure  server tools  killsession  kills a session tracesession  causes a session to be traced runlevel  changes the runlevel of the server unlockcontentserver  remove a lock that stops a content server from starting up  workflow tools  upload  uploads a new workflow definition from an xml file download  stores a workflow definition from the repository in an xml file enable  enables or disables a workflow definition workflowconverter  migrate process definitions to the current coremedia cms version  analytics tool  dataggregator  starts  stops  and monitors the data aggregator process in a workflow server   user tools  changepassword  changes the password  dumpusers  writes an xml file containing a representation of the users defined in the internal user administration  restoreusers  reads an xml file containing a representation of the users defined in the internal user administration   note that some of the operational tools do not access the coremedia cms server but work on database level  those tools don t support the standard options because they don t need a user to open a session   
   command or switch description refactor all do both  refactor structure and refactor web xml  refactor structure   refactors the structure of your cae web application created with a previous coremedia cms version to the current layout  refactoring consists of the following steps  copy and move files according to the new structure archive all files from subdirectory framework into lib  vendor name  config jar  convert all bean id attributes containing a colon to bean name attributes  example   bean id  contentbean mybean       to  bean name  contentbean mybean        convert all bean singleton attributes with value  true   false  to bean scope attributes with value  singleton   prototype  respectively  as required by the new  spring     schema    bean singleton  true       to  bean scope  singleton       replace the old spring   x beans definition element with doctype declaration with the new schema based definition element  convert beancustomizer to new customizer declarations  see chapter  customizing spring beans  in the content application developer manual     refactor spring  to spring  refactors spring   x configuration files to the new spring   x configuration format  this is a file based task which works on files in contrast to the web application based task refactor structure  the refactoring consists of the steps      of the above refactor structure steps  refactor web xml refactor the web xml file of your web application according to the new structure  see  the cae web application  in the content application developer manual for details    p  web inf directory path  path to the web inf directory of your web application   n  vendor name  the vendor name which is used for the path to third party web applications   v switch the logging level to verbose for debugging   a  pattern  an ant style pattern for referencing file path  all referenced xml files will be processed   
  this reports shows the number of internal search requests that are handled by the coremedia search engine  as an administrator  they allow you to judge the load on the search engine  as a site designer  they allow you to judge whether is search facilities are accepted by the site s visitors   like the top internal search terms reports  these reports are available in two flavors  for a specific collection and as a summary of all collections  you may select the time interval and the time resolution for the report and in the specific report you may set the collection to analyze   the reports are presented similar to the performance report  bars indicate the number of search requests performed during given time intervals  
     property   attribute type description optional bean definition attribute  class  com coremedia analytics    definition report    statemodel vartypes    defaultvaluesetvariable the java implementation class no displaynamekeyprefix string the localization key prefix  a value key is created by concatenating the displaynamekeyprefix  a dot delimiter     and the value s symbolic name  each value key should be mapped to a localized value name defined in the custom resource bundle com coremedia analytics custom dashboard no staticvaluesassymbolicnametoidentifiermap map of symbolic name  type  string  to identifier  type  string  a list of static values defined at configuration time  each value is given as a map entry  mapping symbolic name to technical identifier  yes defaultinitvaluesymbolicname string the default value  given by its symbolic name mandatory for static value sets  dynamicvalueprovider com coremedia analytics    definition report    statemodel vartypes    defaultdynamicvalueprovider type    this default value provider reads entries from the analytics database and maps each entry to a newly created value  the value provider itself has a property  sqlstatement   defining an sql statement  the sql statement s result must define two columns  name  and  id   both of type string  the  name  attribute will be used as symbolic name  while the  id  attribute will be used as identifier  yes fallbackinitvalueasassymbolicnametoidentifierentry single entry map of symbolic name  type  string  to identifier  type  string  a list entry map with a fallback value  the fallback init value is created only if no value could be found  neither static nor dynamic   yes     
  examples  example  definition of a variable with a static values    bean id  numberformatvariable  abstract  true       class  com coremedia analytics definition      report statemodel vartypes defaultvaluesetvariable      property name  displaynamekeyprefix     value  numberformatvartype valuename       property name  staticvaluesassymbolicnametoidentifiermap        map         entry key  absolute  value  absolute           entry key  relative  value  relative          map      property     property name  defaultinitvaluesymbolicname  value  absolute      bean   example  definition of variable with dynamic values    bean id  searchcollectionvariable  abstract  true       class  com coremedia analytics definition report statemodel      vartypes defaultvaluesetvariable      property name  displaynamekeyprefix     value  searchcollectionvartype valuename       property name  dynamicvalueprovider        bean class  com coremedia analytics definition report      statemodel vartypes defaultdynamicvalueprovider          property name  sqlstatement  value  select id         searchcollection as name from searchcollectiondimension          bean      property    bean   please note that static and dynamic values can also be merged  in case an identifier is used in both value sets  the dynamic value will override the static value definition  also have a look at the variable type definitions in framework analytics config beantypes xml for examples  
   parameter name in report template description type generation time the localized date and time of the report generation string aus username the current user s login name if available  or the empty string  if the user is not authenticated string instance title the localized report title  string instance sentence the localized report sentence  string  
  chart customization  chart customizers provide means to customize the graphical rendering of report data  the chart   you may configure one or more chart customizers for a given report  they will be applied in the given order   a chart customizer is a standard jasperreport concept for the programmatic beautification of generated charts  e g  the customization of bar chart colors  line stroke  axis labeling  etc  please consult the documentation of chart customizers in the jasperreport documentation   api  java interface net sf jasperreports engine jrchartcustomizer   chart customizers applicable to the dashboard must implement the interface com coremedia analytics jasperintegration jfreechart customizers dashboardchartcustomizer  all predefined chart customizers implement this interface   while jasperreports technically allows only one chart customizer per chart  the analytics dashboard now allows more than one customizer  the customizers must be passed in as spring beans  class names are deprecated but are currently supported for legacy reasons   the following chart customizers are predefined   
  this report displays the number of page impressions on a site in a selected category and its  cumulated  subcategories  the page impressions of the selected category are shown as the first pie section  seen from the top of the pie clockwise  the direct subcategories aggregate their subcategories  page impressions  
  interactive report drill down  the page impressions per category report model provides the following four report parameters   the site parameter determines the  sub  site  the list of sites is automatically generated during report data aggregation    the category parameter determines a content category  the report displays the top viewed of this category and all of its subcategories  please note that this parameter only exists in the  top viewed pages per category  report  you can use this parameter to interactively drill down the repository s category structure  in the category filter selection box corresponding entries are listed  see screenshot    to navigate down the category hierarchy or drill into a subcategory  select a subcategory  the selected subcategory becomes the new current category and the chart visualizes the page impressions within that category   to navigate up the category hierarchy or coarsen your category selection  choose the parent category in the category selection box  the parent category is marked with a minus sign      after updating the report view  the parent category will become the new current category and the former current category will be shown as one of many pie sections  the time interval parameter allows a user to select the time interval  see the performance report for time interval description and screenshots    the number format parameter allows you to choose between absolute numbers and relative numbers    absolute numbers   the total numbers of content items per category are indicated in brackets right to the subcategory name  percents   the relative number of content items of a category compared to all content items contained in the current category  including all subcategories  is indicated as a percentage value right to the category name  
  adding document types is the simplest task  proceed as follows  add the new document types to the document types definition file of the content server  optional create a secondary file containing new document type definitions and add it to cap server documenttypes in contentserver properties  restart the server   the content server automatically detects the new document types and creates the necessary database tables  the content server creates the new tables in the default table space of the coremedia database user  if you have distributed the coremedia tables on different table spaces  you have to assign the new tables manually to the appropriate table space  
  the watchdog is configured with two files   watchdog properties  watchdog xml    the name of the xml file is defined in watchdog properties  watchdog xml is the default value  the default location of the watchdog properties file is corem watchdog properties  you can customize this location using the system property coremedia watchdog propertiesfile in the watchdog jpif of probedog jpif file   java vm args   java vm args  dcoremedia watchdog propertiesfile  corem watchdog properties  
   property value default description login username example  with this parameter  the default setting of the username when login in can be determined  if no value is entered  the login name of the user in the system is used  login password example  with this parameter  the default setting of the password when logging in can be determined  if no value is entered  the user must enter the password  login domain example  with this parameter  the default setting of the domain for login can be determined  if no value is entered  the user must enter the domain  if no domain is entered  the user must be an internal user  login immediate true  false  if this parameter is set to  true   the editor tries to login the user with the  username  and  password  configured above  without the login dialog box appeari editor startup configuration  path relative to  corem home and name or url of the xml startup configuration file   the file defined in this property will be evaluated before login  thus  if a user defined editor class should be used  you must configure this class in the appropriate xml element of the file defined in editor startup configuration  if you want to change the language of the login dialog  the locale must be set in this file  too  editor configuration  path relative to  coremediahome  and name or url of the xml configuration file   the main configuration file of the coremedia editor  which will be loaded after login  as a default  the file properties corem editor xml will be used group configuration  path relative to  coremediahome  and name or url of the xml configuration file with wildcard       with this property  a group dependent editor xml file can be configured  to do so  the wildcard     in the url or path of the configuration file will be replaced by the group name of the user or by names defined in the  configgroups  element of the editor startup xml file  if the user belongs to multiple groups      will be replaced by one of these group names in an arbitrary order   user configuration  path relative to  coremediahome  and name or url of the xml configuration file with wildcard       with this property a user dependent editor xml file can be configured  to do so  the wildcard     in the url or path of the configuration file will be replaced by the name of the user  editor richtext css location  path relative to  coremediahome  and name or url of the css file   with this property the css file for the look and feel of the richttext pane is defined  editor display embedded view true  false  with this property  enable the embedded document view which shows the selected document in the overview window of the coremedia editor  the default setting is  false   usermanager searchresultsize integer value  you can limit the number of users or groups obtained by a query in the user manager window  you should set it small  as the user manager gui is not designed to be used as an ldap browser  the value must be smaller than the user and group cache sizes of your cap server set in the capserver properties file  the default value is      the size may also be limited by your particular ldap server  e g  active directory         editor blob mimetype strict true  false false if set to  true   a blob can only be loaded into a blob property when the mime type of the blob meets the mime type of the property  if set to  false   the user can decide to load a blob with the required mime type even if the actual mime type of the blob is different   
    click  next       the window with license and usage agreement opens   
     in order to continue the installation routine you have to accept the license and usage agreement by clicking  yes    please read the license and usage agreement carefully  if you do not agree  abort the installation by clicking   no        select the coremedia components available for installation in the following overview   
  it is possible to select more than one component at the same time  e g  a coremedia content server and an importer    some components require more detailed specification and configuration during setup  this is described in the next chapters  for the installation of the  net application bridge please refer to the  net application bridge administration manual     select the components for installation and click  next    after selection and confirmation of required options  the next installation window asks for the installation directory   
     if the default destination directory matches your installation directory  simply click  next   if not  click  browse   a window opens where you can choose the directory  if you have chosen a directory  click  next   the directory name and path must not contain spaces       if the chosen target directory does not exist on the hard disk it will be created by the installation program    in the following folder dialog box set the program folder name to appear in the windows start menu  this folder will contain links to the coremedia programs   this dialog box only appears in installation under windows    
    enter the destination program folder in the program folder field  you can use the suggested folder  enter your own folder  or choose one out of existing folders  if this folder does not yet exist it will be created by the program  click  next  to continue the installation   the next dialog displays a summary of the selections you have made so far    
     if you want to change any of your settings you can return with the  back  button  if you want to accept the installation settings you can start the installation itself by clicking  next  here   a display informs you about the progress of the installation   
  this document is intended for all  who are interested in the evolution of the coremedia content management system  
  the coremedia delivery developer manual describes how to develop content delivery solutions which use the different coremedia components   in section   you will find a short overview of the coremedia system  in section   you will learn how to deliver content using the coremedia active delivery server  in section   you will learn how to use the proactive delivery server for development  in section   you will learn how to use web services for your coremedia applications  in section   you will find an example which describes how to create content and how to write templates for the ads   
  content management covers creation of content in the repository and analysis of used content  there are basically two ways to populate the content repository   manual editing importing external content  out of the box coremedia cms supports manual creation of content by a variety of clients which are open for customization  in addition  customized clients could be created from the scratch using different frameworks  described in section   the coremedia editor  a standalone java application  configuration and customization of this editor is covered in the editor developer manual  the webediting server  a servlet which serves the coremedia webeditor for content editing  the webeditor offers nearly the same functionality as the coremedia editor but needs less installation  the webdav support  which allows to access the coremedia cms by webdav enabled applications  see the administration manual for details   the importer which is used to adopt existing external content  e g  from legacy systems or content providers  it must be customized concerning the location and the format of the source content  see the importer developer manual for details   for analysis of the content repository and the acceptance of your websites in the internet  or intranet  there is coremedia analytics  it offers a set of predefined detailed reports  the analytics dashboard  and easy to use reports directly integrated with the preview of your web site  the in site analytics   you might extend both report types by your own analytics report  see the analytics developer manual for details  
  when the coremedia active delivery server  ads  answers an http request the requested uri is analysed first  as described in section      this determines  amongst other things  the resource which should be displayed  afterwards  the ads selects a template  as described in section      this template is executed in the context of the active delivery server  in order to create the actual page contents    as the general entry point to the coremedia generator api  a template uses the application scope bean called  generator  created by the ads  it is imported in a template as follows   
  the resource being displayed can be a document or a folder  display of folders is the subject of section        first  display of documents is dealt with in section        
  further information can be found in the java api documentation  further information on the sgmlunparser class can be found in section         
  dateproperties are often used for sorting  see section         
  output from blob data as http response   the template starts with the usual preamble  line   declares that the page is cacheable  see section      and therefore  according to line   requires no session information  the contenttype is not static  thus in line   application x coremedia dynamic is defined  then  in lines   to    the application scope generator bean and the request scope context bean are declared and in this way made available to the template  line   requests the resource to be displayed  from which it can be seen that this is a document    the ads has been configured so that the template is only executed for property requests  the name of the requested property is determined in line    with the help of the context getdocumentpropertyname method  if no property is entered  the template reports an error  lines    and      otherwise  the named blobproperty is requested  lines       if the property is not a blobproperty  the executed method outputs an exception  if the blobproperty is not set  the template explicitly reports an error  lines    and        the getblobproperty method of the document class is declared as follows   
  the blob getcontenttype method delivers the mime type of the blob  the mime type always matches the declared mime type of the property  e g  a blobproperty declared as  image    could contain a blob of type  image gif   in line    of example        d  the mime type is transferred to the http response  
  this method of the blob class delivers the size of the blob data in bytes  the value is also used for the http response in example        d  line      the actual data is written into the http response with the help of the following method of the blob class  
  if img tags are created on a website  it is recommended to enter the width and height of the image in the tag to accelerate image construction in the browser  in principle  there are three ways to achieve this  a standard imagesize is fixed  a template is written which automatically scales the images to the desired size  a template is written which outputs the image size of the blob   in the simplest case  a standard image size is fixed  the editors take care only to save images with the fixed size in the corresponding blob property  in the templates  then  the size can be explicitly written into the static html text  this is the simplest but also the least flexible solution   a template which automatically scales jpeg images is shown in example        i  
  for reasons of clarity  some error checks have been left out  image transformation occurs here using only the tools of the java   platform  using caching  see section       the runtime remains within limits  but loss of quality can occur through scaling  the template also demonstrates an alternative possibility of accessing blob data  the data can be output by writeon in an outputstream  as in example        d  or the template can read the data from an inputstream  as in example        i  the inputstream is obtained from the getinputstream method of the blob class  
  if the images should appear on the website at the size of the blob entered  the blob contents must be investigated on creation of the html source text and the image size extracted  in principle  this is possible by means of the java   platform  but coremedia offers a bean which has the following advantages over the java standard classes in java awt image  firstly  this bean avoids temporary storage of the complete image contents in the main memory  secondly  under unix  it does not rely on an accessible x server  a template which uses the bean to create a complete img tag is shown in example        k  since the blob contents must be accessed on execution of the template  caching again is recommended   
  as output  the template in example        k only creates the img tag and is therefore suitable for insertion into the output of other templates  using jsp include or context include  example        l shows how this template can be used in other templates   
  for the representation of xml texts  a recommendation of the w  consortium is used  the document object model  dom  see http   www w  org tr rec dom level     the returned element is the document element of the xml text property  this is the  div  element in case of the xml text property  see lib xml coremedia richtext     dtd     the data structures returned by getdomproperty are used by all templates  and therefore must not be modified    coremedia provides classes for editing dom trees in the hox text dom package  in particular  the hox text dom domunparser class is useful for the output of dom properties in a template  the output can be configured in many ways    you can register filters which rename elements or change or leave out attributes during output     you can select the form in which the elements are displayed textually       if a dom tree should be output  it is first translated by the domunparser in a series of sax events  coremedia uses the sax     interface  see http   www saxproject org   a sax event is a call of a java method  e g  startelement  characters or endelement  according to one of the handler interfaces defined in org xml sax  in the domunparser  the sax events are sent through configurable filters  interface hox text sax saxfilter  and finally put out as text  interface hox text sax saxunparser     so as not to have to carry out configuration anew in each template  creation of a prototype in the config bsh file is recommended  this prototype is preconfigured and then copied into each template for local use  example shows the creation of the prototype  while example shows its application   
  the following example shows how links to related documents are created in the html display of a document    the htmlunparser  which executes the escaping for the text of the links created  was described in section          
  the following example shows how to insert the images allocated to an article via a linklistproperty   images   into the html output  further possibilities for output images are explained in section          
  at present  it is not possible to obtain the value of the pre defined property lastfolderid  with the getproperty methods  see also section   
  the result of the call is then transformed into the expected java type with a typecast  the getproperty method accepts the names of both project specific and pre defined properties    the following table shows the names and types of the pre defined properties and briefly describes their meaning  furthermore  the table shows which method of the hox corem servlets document class can be typically used for calling up the value of the property  some of these pre defined properties are valid for both documents and folders  in this case  the corresponding method is defined in the hox corem servlets resource class  pre defined properties are particularly useful for sorting and for queries  since they can be used like the user defined properties with a propertycomparator  see section        or with a call of query field  section         
  using the methods of the hox corem servlets folder class of the generator api  the following is possible for a given folder    call up the child resource with a given name  call up an array of all child documents  filtering according to document type is possible   call up an array of all direct or transitive sub directories  call up an array of all child resources  i e  both folders and documents   again filtering is possible    the order of the resources delivered is undefined  it is therefore desirable to sort the resources before use  as usual in java  the java util arrays sort method is used for sorting  to which a comparative operator is passed  java util comparator   to make the creation of suitable comparative operators easier  coremedia offers the hox corem servlets beans comparatorfactory class  see example      b for a template which uses this bean  
  section of a template which displays sorted articles of a folder   the example uses a variant of getchilddocuments  which only delivers documents with the given document type  in this case  an array of all documents of the type  article  in the given folder is delivered  this array is sorted according to the date of editing  for identical editing date  the priority given to the article decides  if this is equal too  the time of editing is taken into account  the order of the various criteria is governed by the created compoundcomparator  with the help of the negatingcomparator  the correct order within the criteria is ensured  higher values for the pre defined property editiondate  correspond to a later article which should appear further up in the list  for priority  it is exactly the opposite  priority   is the most important  further details for using comparatorfactory can be found in javadoc    the sorted documents can then be output or inserted into the output of the template    with the help of the api  it is also possible  for example  to create a navigation bar which corresponds to the folder hierarchy in the repository  since extensive acessing and sorting is necessary here  the use of caching is recommended  see section     for more information on this topic  
  to find documents in the database you can navigate via folders and linklists from current documents  as described in section         and section       alternatively  it is also possible to place a global query on the database    such a query is described by a search expression characterizing the desired versions and documents  the search expression can relate to both project specific and pre defined properties  the components of the expression are connected with logical operators  and  or  not   furthermore  the order of the search results can be controlled and it is possible to enter whether older versions of documents should be searched or not    the expression consists of a series of calls in reverse polish notation  also known as postfix notation     
  when using user information  note that all documents on the live server are created and changed by the user set up for publication  publisher  on the live server  in brief  user information is not transferred to publication  therefore  templates requesting user information are only suitable for internal editorial use on the content server    you can also query for documents that already lie in the archive  using the property name lastfolderid   the last folder apart from the archive in which the document was located can be searched for  if the document is not in the archive  this is the current folder  otherwise  it is the last folder before archiving  the property helps when you want to restore the contents of an accidentally deleted folder  at present  it is not possible to obtain the value of the lastfolderid  property of a document with document getproperty or another method    see example      a for a demonstration of the construction of a query  in a series of calls  new expression components are added to the newly created query object in reverse polish notation  also known as postfix notation  and then linked   
  the jsp technology used by the ads allows to insert the contents of other pages into the ouput of a page  for this purpose there is the jsp include tag  you can use this tag when similar fragments occur in many templates   by storing the appropriate code and static html text  you only need to apply later changes and improvements at one place    furthermore  when inserting pages created by the coremedia active delivery server  you benefit from the cache of the ads  this aspect is explained in detail in sections       and            often  it is desired to output the contents of other coremedia resources in another enclosing page  e g  in connection with a linklistproperty  section          or the documents of a folder  section         for this purpose  the uri of the document is obtained and passed as an attribute of the jsp tag    the jsp tag jsp include expects the url of the page being inserted to be specified relative to the web application s context path  to compute this form out of the original page uri  you should use the context getincludeuri method  a complete call then looks  for example  as follows  
  the pages offer the following options   invalidate templates    if you have changed a template  you can remove all depending pages from the cache using this page   configure link visibility    using this page  you can enable or disable content links and template links  see chapter for details on the usage of content and template links  browse document model    using this page  you can browse the document model of your coremedia installation  see the administration and operation manual for details  browse property model    using this page  you can browse the property model of your coremedia installation  that is  you see the property types of the document properties  update views    if you have added a new view to the system  see chapter for details on document views  you can update the viewdispatcher to use the new view   
  this section describes how web pages are filled with editorial content by accessing the coremedia repository   the templates are java server pages  jsp   in addition to fixed  pre determined components  mostly html text   templates contain sections with java code which  on execution  create variable content  by using the coremedia generator api  you can therefore access structure and content in the coremedia repository   therefore  template programming is about writing java code to deliver contents stored in core media sci in order to bring it onto the website in proper shape  the required parts of the coremedia generator api are described in the following   as introduction  section       describes how a template obtains access to coremedia objects  the section       describes access to the document properties as well as utility classes for user defined configuration of property values  the section       deals with navigation and display of the directory structure of the coremedia repository  in section        the construction and evaluation of complex requests to the coremedia repository is described  the section describes how to perform full text searches  the section       shows how the contents of a page can be inserted into another page  finally  in section        the configuration and usage of template and content links is described   
  the ads identifies pages with the help of uris  uniform resource identifiers   as defined in rfc       see e g  http   www rfc editor org rfc rfc     txt   uris are a generalization of the urls known from the web and offer a structured  compact text form for unique naming of resources    in the generator api  all uris are represented as uri objects instead of strings  here  the classes from the hox net packet help by allowing structured access to the uri components as described in rfc       in the hox corem servlets packet  these classes are specialized further into resourceuris which store all information relevant for the ads for designating a page    a resourceuri uniquely identifies a page which has been or will be created by the ads  the resourceuri consists of up to five components   a resource id  since a page typically displays a certain resource  the identity of this resource partially identifies the page  of course  the contents of further resources can also appear on the page  the primary resource is only used for simpler handling  if there is no primary resource for a page  the root folder of the coremedia repository with id   is normally used   a template id  this is a string identifying the template for displaying the page  in the simplest case  it is the name of the used jsp template   see section       the template id can also be left out  in this case  the template finder uses a default template   a version number  if the resource id references a document  and not a folder   the version number distinguishes between the pages created for the different versions of the document  the version number determines the version of the document which is presented to the template code on access  if the version number is left out  the most recent version is used   a property name  if the resource id references a document  a property name can be set and evaluated by both the template finder and the template itself  this feature is most often used for blob properties in order to deliver the binary content  possibly transformed by the template   otherwise  the property name is simply left out   any number of key value pairs as parameters  keys and values are strings  a key can occur multiple times so that more than one value can be assigned to it  the order of the parameters is significant  neither key nor value may be null    the possible variants are represented by different classes  the abstract  overlying class resourceuri  resource id  template id  parameters  is divided according to the resource being referenced into folderuri and documenturi  additionally with version number  and the propertyuri class adds the property names to a documenturi    in the active delivery server  resourceuris are used for different purposes  for a template  the uri components are evaluated for page generation  especially the resource designates the subject of the generated page  see section       uris of other pages may be embedded as links into the generated page  see e g  section           instead of linking  uris are also used to identify page fragments for insertion into the current page  see section         finally  ads uses uris to uniquely identify pages which have already been created  see section        
  here  the tostring method of the uri object delivered by resource geturi is implicitly called    the result of the resourceuri tostring method is calculated in several steps  the intermediate results are demonstrated using an example uri   the uri object is passed to the formatresourceuri method of the configured resourceuriformat  the copy of the hox corem servlets beans standardresourceuriformat class installed as standard constructs the uri based on the path of the resource in the repository     sport index html    the value of the resourceuriprefix bean property of the generator bean is placed in front of the uri  the preset value is the precise path of the coremedia active delivery server servlet within the servlet engine  consisting of context path   coremedia  and servlet path   generator   this guarantees that delivered uris refer back to the ads     coremedia generator sport index html    depending on the value of the generaterelativeuris and generaterelativeuripaths bean properties  the result is either absolute   http   www x zeitung de coremedia generator sport index html    relative to the server    coremedia generator sport index html   or relative to the page just created      sport index html    the result of context getdocumentbase is used as the basis for relative uris  and in turn corresponds to the string representation of the absolute resourceuri for the current calculated page  protocol  hostname and port of the absolute uris come from the serverprotocol  servername and serverport bean properties of the generator bean  if the properties are not set there  the values from the current http request are used   the calculated value is returned from resourceuri tostring      this means that you have the following possibilities to influence the result    set a value for generator servername   serverport and possibly  serverprotocol  this makes sense  if the official server address is different from the local hostname or the http port of the servlet engine   change the value of generator resourceuriprefix  this is useful  if the generator servlet is visible under a different path in a web server  i e  remapped using apache s mod rewrite   change the document base by setting context documentbase in the template   select between absolute  server relative or relative uris by setting generator generaterelativeuris and possibly generator generaterelativeuripaths  the default setting  true  false  is most useful because you neither have to worry about the host and port settings nor the document base in combination with cached fragments   install your own generator resourceuriformat    the first three points are particularly interesting when the web pages produced by the ads are not delivered directly to the user but are called up via a pre connected web server  in this case  the links contained in the delivered pages must point back to the pre connected web server  in addition  it is possible to insert the pages produced by the ads at any position on the openly visible web server  for this purpose the configurable prefix is useful    a user defined uri format can also be used for holding session information and other parameters in the path of the delivered uri  this opens an interesting perspective in connection with relative links and the cache    the bean properties serverprotocol  servername and serverport should not be confused with generatorprotocol  generatorname and generatorport  the latter only play a part in connection with caching  see section       due to a weakness in the current servlet specification it is necessary for the ads to place an http request to itself when recalculating a page  the uri required for this is constructed from the bean properties mentioned  with future versions of the servlet api  the bootstrap uri and these bean properties are expected to be superfluous    in relation to caching  other subtleties should be noted when creating relative uris  see section        
  a template serves to prepare one or more documents for display as a web page  a wap message  a pdf document or similar  such display of a document will be designated a view of the document in the following  there can be various views of a document  for example  an article can be displayed as a teaser  in brief  with shortened text   as a search result or as a full page   the properties of a document are defined in document types  see the administration and operation manual   accordingly  documents of the same type can be dealt with uniformly by one template  since document types have a subtype relationship through which properties are inherited  the same template can also display documents of a more specific type  however  in this case  the additional fields of the more specific document type are not taken into account  common treatment of documents of different type which possess a more general mutual type is known as polymorphism in object oriented programming   the viewdispatcher interprets the template id as a designator of the view in which the given resource should be displayed  the template through which a view is implemented results from the template id and from the document type of the resource  the viewdispatcher must therefore dispatch the view to an appropriate template   if the document type of the resource does not define a template for the requested view  the viewdispatcher searches for a template in the supertype  parent  of the document type  this leads to inheritance of views  which perfectly complements the inheritance of properties   the implementation of a view for a document type can only access the properties which are defined for this document type  if a more specific type does not have its own implementation  the properties additionally defined in the subtype cannot be taken into account  as mentioned above  the view must then be specially implemented for the subtype  to be able to use the display of properties inherited from the supertype nevertheless  the viewdispatcher has a so called super command  using the super command  the result of a view of the supertype can be included in the template implementing a view in the subtype   until now  only document types have been discussed  but views are made available via the viewdispatcher for all resources  to allow views of folders as well  which are not documents  but are of course resources   the viewdispatcher knows the  virtual  types folder  document and resource  resource is the most general resource type  folder and document are it s direct subtypes  all user defined documents are implicit subtypes of document  in this way  it is not only possible to define views for folders  but also to provide common views for all resources  documents and folders   so as to exploit polymorphism even between documents and folders   the viewdispatcher therefore searches for views from the current document type upwards through the document type hierarchy  until the resource type is reached  if the desired view is even not implemented here  the special view doesnotunderstand is called  which is delivered as standard with the coremedia system as the view for the document type resource  the standard implementation outputs an error message  informing which view was called for which document type but was not implemented  when such an error message appears on a generated page  the template developer must ensure that such a case no longer occurs  the error can have  at least  two causes   implementation of the view for the given document type or for one of its supertypes was forgotten    the view was wrongly selected by the command  or its name was written incorrectly     a further special case is an empty template id  in the viewdispatcher  it is possible to configure which view should be used as a standard view in this case  see section           the preset is the view main  
  in coremedia sci  the subject referred by a resource uri is either a document or a folder  for documents  there are more fine grained subjects in the form of property uris  see chapter       the viewdispatcher also provides views for document properties  a documentpropertyuri on an xmlproperty of a certain document may deliver a textual representation of the xml contained  while a propertyuri on a blobproperty gives for example the raw data of the blob  which can be referenced in an img tag   in analogy to documents  templates for propertyuris are selected by the viewdispatcher according to the type of the corresponding property  as with the document types  the property types have a type hierarchy with inheritance  starting from a most basic property type called property  as with documents  various views can be defined for properties in addition to the default view  which as far as possible delivers unedited property data  in this way  ever recurring tasks such as the formatting of date fields or xmltext properties can be defined once at a central position  properties also have their own doesnotunderstand view  which is automatically executed when the requested view cannot be found in the inheritance hierarchy   there is an abstract property type for each built in type  there is inheritance between the built in property types  e g  linklist image  is a subtype of linklist document   since sci      each property defined in the document type model results in a concrete property type  if for example the document type image has a blob property data  then image data would be a property type inheriting from the built in property type blob  the data property of a concrete image document would be a property object   inheritance between document types is respected  so that the property class imagewiththumbnail data is a subclass of image data   see image        a for the built in property types available in coremedia with their predefined views  the property type hierarchy can be expanded in three ways  for every user defined document type there is a corresponding linklist type  all available xml grammars  predefined as well as user defined  are interpreted as subclasses of the built in property type xml  and every other user defined property appears as a subclass of its corresponding built in type   you can browse all property classes and types in the document   property type model browser  
  like document views  property views are called via a jsp include or context include      on a propertyuri  if the template id is left out  the configurable default view is used  see section           examples for this use of documentpropertyuris can be found in section          an example for the explicit execution of a particular property view is the following code line from a jsp template      context include pagecontext document getpropertyuri  text   default       here  the  predefined  view default is executed on the property text of the current document  the viewdispatcher determines the type of the property  let us assume xml mygrammar   resulting for example in xml mygrammar default jsp   if the view for this property type is not implemented  the implementation of the supertype xml and therefore the template  templates proptypes xml default jsp is used     
  by default  the viewdispatcher determines the template implementing a resource view solely based on the type of a resource  however  the desired layout might depend on other criteria such as the current value of a property  the position of the resource  value of a uri parameter  etc  these rules normally have to be implemented by code within the template  this leads to considerable mixing of layout  usually html code  and logic  so that the templates can hardly be edited with html tools  in such cases it is desirable to actually use a number of different templates for the different cases  here termed variants    the viewdispatcher enables you to dispatch to different templates not only based on the resource type but on other properties of the resourceuri  especially the targeted resource  you can configure the viewdispatcher with a set of variant rules that determine which variant of a view should be used  in this way  you can shift case decisions from the templates to globally configurable rules    from a resourceuri  i e  a resource with template id and possibly further parameters   a variant rule determines a list of symbolic variant designators  if no variants apply  an empty list can be returned  as many variant rules as desired can be configured  they are executed one after another and their result lists are concatenated    the overall result is a variant list attached to the view  this list is used to look up an appropriate view  if no view is found matching the complete variant list  the list is shortened successively from the right until it is empty  if a view cannot be found even with a shorter variant list  the normal inheritance mechanism is used  i e  the same lookup will take place on the supertype  again starting with the complete variant list  the rationale behind this lookup order is that variants play a subordinate role compared to dispatch according to document type  so that in every case the most specific implementation of the view is used  see example        a for the lookup order for the requested view rendernormal with the variant list  homepage colored   referring to the document types of the example in the next section   
  the concepts of views and inheritance of views can be clarified using the simple example in the document types chapter of the administration and operation manual  in image        a you see the document types image and imagewiththumbnail defined there as a uml diagram in which the properties are displayed as attributes and the views as methods   
  the views rendersmall  rendernormal and renderall are available for both document types  the view renderthumbnail  on the other hand  can only be used on documents with the more specific type imagewiththumbnail  while rendernormal is only available in the subtype through inheritance  rendersmall and renderall are transferred  the more specific implementation is used    the implementations of the views are templates  as illustrated in section      the advantage with templates called up by the viewdispatcher is that it is certain that the current resource is of the required document type  or a more specific one   in this way  it is possible to assume without further checking that all the properties defined for this type can be accessed   in the following  the templates which implement the given views are introduced  
  rendernormal is only defined for the document type image and implemented with the template shown in example        a  the image is displayed at full size by the appropriate html code  imagewiththumbnail inherits exactly this implementation  which does not differ there  the property data can be accessed without danger  since the viewdispatcher ensures that this template is only used for resources of document type image or a more specific type  which all possess this property    the first lines show the usual declarations for coremedia or jsp templates  then the current resource is assigned to the variable image  on creation of the img tag  it can be seen how the properties are accessed  while access to the width and height of the image occurs directly via the generator api  the image data is referenced via a propertyuri  since this contains no template id  the standard view  default  is used  which can be configured in the viewdispatcher  the viewdispatcher calls up the default template for blobs  and the mimetypeviewvariantrule  see xxx  takes into account the current mime type of the blob  in the standard configuration  however  this has no influence  since the default view for blobs has no variants    say that resource      is a document of type imagewiththumbnail  a resourceuri such as    http       coremedia generator id      templateid rendernormal   is interpreted by the system by executing the template finder  the viewdispatcher determines the document type of resource      and searches for an implementation of the view rendernormal  since rendernormal is not defined for imagewiththumbnail  the document hierarchy is searched upwards  the template image rendernormal jsp is found and returned   
  as can be seen in example        b  rendersmall is implemented differently for different document types  while an image document is displayed  small  via browser scaling  bandwidth can be saved with an imagewiththumbnail document by using the thumbnail property for the graphics data  therefore  a template which implements a view for a more specific document type overwrites the previous implementation   finally  it is shown how a template can call another view and how an overwritten view can use its  old  implementation again  
  in the viewdispatcher  a view can be set as the default view  which is always used when no template id is entered explicitly  the view name main is used here  unlike the other views  the default view usually delivers complete html pages rather than html fragments   in example        c  the default view is implemented so that an html page with a table is created  filling of the table rows is delegated to the view renderall  it can be seen here how a template calls another view  instead of the call context include       the command    jsp include page      context getincludeuri document geturi   renderall       flush  true      could be used  however  the various include methods are the more elegant solution   the call of the renderall view of the document shows polymorphism  the viewdispatcher ensures that the correct renderall implementation is called for each document type of the resource  
  the view renderall is implemented differently for various document types  here  however  the implementation in the subtype is intended to supplement the implementation in the supertype  the code example shows how to write the super command described in section          this command adopts the display from the view of the supertype  the implementation in the subtype can supplement this display with further outputs before and after   in the example  further table rows are inserted after the output of the super template  displaying the new properties of the particular type  the properties are in turn referenced via propertyuris  so that the default template of the particular property type is used to display the property   furthermore  the special type  document  which can be used as the  virtual  supertype of all user defined document types  should be emphasized  views implemented for document are available for all documents  just not for folders   this is of particular advantage when the pre defined properties of documents should be accessed  as in the example  see section           analogously  the  virtual  types resource and folder can be used for even more general properties such as document name and id   the extensive reuse of template code can be seen   it needs not to be repeated for the common properties of the document types  furthermore  the division of labor between templates ensures error free code which is easier to maintain  since each template only accesses precisely the properties of it s document type  therefore  if the document type model is changed  it is easy to see which templates have to be adjusted  
  to define a view for a document type  you have to carry out the following steps  create a directory inside the servlet context directory  there the templates for different document types are stored in subdirectories  this directory is called templates by default  it makes sense to begin with a copy of the templates delivered with coremedia sci  create in the template directory a subdirectory with the name of the document type for which you want to implement  a view  for the document type image this would be  templates image  store the template file with the name of the view and the ending  jsp in this directory  for the view rendersmall this would be the filename  templates image rendersmall jsp  for view variants add the name of the view in the variant list in square brackets before the extension  jsp  if the view rendernormal is implemented specifically for the variant list homepage colored for the document type image  the template must be stored under the filename  templates image rendernormal homepage colored  jsp  for property views there must be a subdirectory of the template directory called proptypes  as can be seen from the propertyviews delivered  there is a subdirectory for each property type where the corresponding views are stored as jsp templates  see above   the property type linklist must be supplemented by the document type of the linklist  for this purpose  a subdirectory proptypes linklist  doctype  can be created for each  virtual  resource type in which views for this special linklist type are stored  the property type blob receives two levels of subdirectories corresponding to the major and minor type of each relevant mime type  accordingly  the template proptypes blob image gif default jsp is responsible for blobs with the mime type image gif  and proptypes blob application special jsp for all blobs with mime types application    since sci      mime types are treated as view variants rather than subclasses of the blob property type  see propertyviews   views implementing a variant are usually named as described above  using square brackets  but in order not to have to change the location of mime type dependent templates with respect to older cap versions  placing blob property views into mime type sub directories is still allowed  the new way to specify the views mentioned above would be proptypes blob default image gif  jsp and proptypes blob special application  jsp  be careful if you have already used variants of blob property views before  since the mime type variants and your variants  given by sqare brackets in the view s file name  may interfere   the viewdispatcher already knows the inheritance relationships between the document types and property types from the global document type definition or from the linklist types  the inheritance relationships therefore do not need to be entered again for views   the following properties of the viewdispatcher bean can be configured  normally in config bsh   generator   the ads that the viewdispatcher should use  this property only has to be set once  templaterooturi   the path from the servlet context directory under which the directories for the various document types can be found  predefined   templates  defaultview   the name of the view which should be used when no view is explicitly defined by the template id  predefined  main  defaultpropertyview   the name of the view called for propertyuris without template id  predefined  default  foldertype   the name of the  virtual  folder resource type  this is predefined as folder and should not be changed  if a user defined type has been named folder  which is advised against   this can nevertheless be necessary  topdocumenttype   the name of the  virtual  type which is the supertype of all user defined documents  predefined  document  however  it is  possible  but discouraged from  to configure a user defined document type here if all other document types inherit from it  directly or indirectly   this is useful when there are properties which should appear in all document types    furthermore  there is the method  void addviewvariantrule viewvariantrule variantrule   with which variant rules for views can be configured  see section           the variantrule is transferred as an example of one of the implementations of the hox corem servlets beans viewvariantrule interface  the rule requires various parameters depending on the class  the variant rules described in section         are delivered with coremedia sci in the source code  the configuration possibilities mentioned in the description above are realized by means of parameters in the particular constructors  a precise description of the classes is given in the generator api  javadoc    a configuration of a variant rule appears  for example  as follows   viewdispatcher addviewvariantrule new linklistpropertyviewvariantrule   content    look      this example from coremusic proves that the property look  a linklist property  is output for all documents of type content or a subtype  a variant list is made of the names of the linked documents and attached to every view called for a content document  the selection of the template occurs according to the lookup strategy described in section          
  ads identifies every page through an object of class hox corem servlets resourceuri  a resourceuri consists of the properties described in section           resource id     template id     parameters    and  optionally       version number     property name     when ads generates a page  the template to be called must be determined from this information  this mapping is carried out by the implementation of the hox corem servlets templatefinder interface in the templatefinder bean property of the generator bean  from the given resourceuri  it calculates the path of the jsp template which should be called    the default viewdispatcher configured through config bsh is an instance of hox corem servlets beans viewdispatcher  the viewdispatcher implements a powerful object oriented dispatch from the resource type hierarchy to templates  just like method dispatch in an object oriented language  the viewdispatcher has additional hooks and thus covers most needs  in rare cases  it is also possible to program your own implementation of the interface and to override the corresponding templatefinder bean property in the file config bsh  
  if page fragments occur within various different pages  or if parts of a page remain the same over long periods of time despite editorial work or different user settings  you can improve the performance of the site with the help of the page cache by storing the fragments in their own templates  marked as cacheable  the fragments are then only calculated once and delivered again and again from the cache instead of being generated anew on each request    for this  you must first identify the components worth caching   on a homepage these can be teasers for individual articles  the navigation bar  etc  in the example of the homepage  the teasers would not have to be generated again if only their order changes    as said before  the fragments must be suitable for storage in the cache  i e  their content must be uniquely described by a resourceuri  templates cannot use any jsp mechanisms  such as request attributes  to pass parameters  round the back  to a template marked as cacheable during an include    if a template is created for a suitable fragment  it can be inserted into the surrounding page as described in section        it is not important whether the inserting  outer  template is cacheable or non cacheable    the other way round  you can also call both cacheable and non cacheable templates from a template marked as cacheable  it is important  however  to understand the semantics of including a non cacheable template from a cacheable template  this way the output and dependencies of the called  non cacheable fragment are simply included into the caller  they are still cached but not in a fragment on their own  thus  you cannot implement a personalized fragment by marking it non cacheable and including it from a cacheable page template  to summarize  if a fragment is to be rendered dynamically with access to request and session  the whole list of including templates must be non cacheable as well     with the previous paragraph in mind  why would one want to include a non cacheable template from a cacheable one   the answer is  it reduces the number of fragments in the cache and may thus save on disk operations and memory  as a rule of thumb  if a fragment is included from only one other page or fragment and both fragments are most likely to be invalidated together  i e  if they both access the same set of resources  then there is no value in making the inner template cacheable    with cacheable templates  the meaning of the document base is important  normally  the document base is the uri of the top level page and is used by the browser to resolve links with relative paths  like    index html   a cached fragment that is included from two different locations in the site has no well defined document base  in this setting  it may be impossible to generate meaningful relative links  the context documentbase bean property behaves as follows  only if the template and all of its including templates are non cacheable  the uri as requested by the browser is determined from the http request  otherwise  the uri of the innermost cacheable fragment is returned  it may be useful to explicitly set context documentbase to a different value  if you know how the document base of the outermost page looks like  
  for every document in the linklist property  the template calls the template shown in example        a and in this way collects all short descriptions of documents to which the main document refers  imagine that the document with id    points to the documents with ids    and     and the page  id     templateid all jsp  is generated  the page will contain  amongst others  dependencies on  id     templateid short jsp  and  id     templateid short jsp     what happens if document    is published in a new version  but the property shortversion remains unchanged  the pages  id     templateid short jsp  and  id     templateid all jsp  could both be affected and are therefore provisionally marked as invalid in the cache  invalidated   on the next access to  id     templateid all jsp   the dependency on the page  id     templateid short jsp  is checked  for this purpose   id     templateid short jsp  is regenerated  now the active delivery server  ads  discovers that the page  id     templateid short jsp  has not changed  and that  id     templateid all jsp  does not have to be regenerated but is immediately installed again in the cache unchanged  revalidated   
  the coremedia api allows the construction of declarative queries to the repository  see section         it is not possible to reconstruct the dependencies of a query result  this means that no pages containing query results can be stored in the cache or updated correctly   similar to the method described in section       you can execute the query in a template marked as non cacheable and compose the result page from fragments from the cache  
  depending on the logic executed in the templates  page generation may take a significant amount of time  to enable performant page delivery  the ads allows for caching of whole pages or page fragments if these fulfil certain rules  in contrast to most other page caching systems which are based on timeout or manual invalidation  the ads cache performs automatic invalidation of pages if underlying resources have changed   in order to work properly  only certain types of templates can be cached  because ads uses the resourceuri as the cache key for a page  the corresponding template may derive information from that uri only  that means it may not use any of the following     request attributes passed from a calling template  except for the context bean    request headers  such as user agent  accept language         session attributes  such as current user        if the template does use any of these  the page will be cached and ads will not re evaluate the template  even if it was called from a different session  browser      actually  depending on the sci and container version  these values may not even be visible to the template when executed under cache control  see section    for options regarding caching in settings where you want to access request or session information and still profit from caching  
  if the user is logged in by one of the methods described in chapter  the active delivery server will automatically apply the rules set in the sci server to the resources requested by  templates  i e   it will throw an exception if the template tries to read a resource it is not allowed to read  in order to help the template programmer  folders and link lists are automatically filtered from resources the user wouldn t have access to anyway  that means  methods like folder getchildren may return different results for different users  as a consequence  many templates need not to care at all about rights  they only see that subset of the repository that they are allowed to see   if  for any reason  the current template must have access to resources that the logged in user is not allowed to see  it can switch into a special   privileged  block through an api call        context enterprivilegedmode   which should later be closed via     context leaveprivilegedmode   using a try finally block    during such a privileged block  access to any resource is possible  needless to say that this feature should be used carefully and well encapsulated in single templates  
  offline generation requires that all generated pages fulfil the same requirements as cacheable pages  i e  all templates do not refer to request or session scope information but exclusively to the contents of the coremedia repository  in fact  top level pages  not fragments  are always generated as if their templates were cacheable    how does ads determine the transitive closure  i e  how does it follow links  since ads is agnostic of the output format  it cannot search the generated pages for hyperlinks  therefore links are discovered during page generation  in detail  whenever an uri object created through the resource geturi family of methods is transformed into its string representation  see section       an outgoing link is registered with ads  this mostly occurs implicitly when a jsp expressionlet is evaluated  
  note that     it is possible for some pages to be generated that aren t reachable through a hyperlink  if you call uri tostring without using the result as a hyperlink     links are not followed when you compose them by hand  instead of using uri tostring    in order to configure ads for offline operation  you need to set the pregenerateroot bean property of the active delivery server bean to the uri of the desired root page  the uri must be entered in the format of the set resourceuriformat  see section       it must not contain the prefix   coremedia generator     the following section from config bsh configures the ads so that it generates all pages which can be reached directly or indirectly from  site index html  the property setter can be called multiple times  thus configuring multiple root pages  
  the major purpose of the coremedia active delivery server  ads  is to transform content stored in the coremedia repository into web accessible pages in html or other formats  it does so on demand  that is  pages are generated when a request arrives  the transformation is described in user defined templates  namely jsp pages  that are invoked under control of the ads servlet  templates use the coremedia generator api in order to read from the repository or invoke other templates  in order to speed up page delivery  ads can cache pages or page fragments and make them directly accessible to a web server as static files   
  custom builder classes that compute values can be plugged in easily  you can write a builder which generates java objects with content from the coremedia repository  e g  java util map objects with the data of document fields  read section to learn how to write and configure own builders  
  if you want to use pads for page generation with templates  you don t need to write a custom builder  some notes on page generation are made in section  
  uploaders receive the generated top level values when a consistent state has been reached  the coremedia release contains uploaders that write to the file system and to java message service  jms  queues and topics  custom uploader classes that implement the interface com coremedia generator pads uploader can be plugged in easily  read section to learn how to write and configure uploaders   pads uses a database to store its cache and state persistently  this way  it doesn t need to recompute generated values after restart  it recovers from crashes and error conditions when restarting  
  operational sequence  when pads starts for the first time it creates database tables for its cache and starts the computation of the values for the configured root keys and of other values which are linked during value computation  with each restart it checks if all values for the configured root keys have been generated and starts a new computation if necessary  newly registered uploaders will be notified about existing values if they are configured to receive initialization events  furthermore pads checks if template files for page generation have changed and invalidates dependent pages at restart  pads listens for changes in the coremedia content server and invalidates dependent values  when pads is restarted  it processes all repository changes that have happened in the meantime   pads notifies uploaders about changes when a consistent state has been reached  a consistent state is reached when all configured and linked values have been computed and pads is not processing events from the coremedia content server anymore  if running at a coremedia live server  consistent states are reached only after complete publications  however pads tries to combine multiple publications  i e  not every single publication leads to a consistent state and uploader notification   before a consistent state is reached and uploaders are notified  a garbage collection is started to delete any values that aren t reachable from the configured root values anymore  furthermore  garbage collection detects so called dead links  dead links point from existing and needed values to non existing values  they arise from a changed configuration  e g  a removed link predicate  see section  or from errors during the computation of linked values  in that case  a computation is rescheduled  uploaders aren t notified until all values have been computed successfully    uploaders are notified about all changes since their last notification  different uploaders will be notified concurrently but each uploader receives notifications sequentially  pads waits until all uploaders have been notified before it resumes its work  there is no timeout for uploader notifications  
  the configuration of the fileuploader and jmsuploader are described in the administration and operation manual  this section describes the configuration of custom uploaders    custom uploaders are configured with the element uploader inside the element pads in the configuration file web inf properties corem pads xml  the attribute class contains the fully qualified class name of the custom uploader  pads uses java reflection to instantiate it  this means the uploader needs a public no argument constructor    each uploader must have an unique and durable identifier which is used to identify a new uploader and send all values to it that were generated before the uploader was registered  this identifier can be configured with the attribute id  if you don t want a new uploader to be notified about existing values  set the attribute receiveinit to false    the attributes builder and filter define which values are passed to the uploader  the attribute builder contains a comma separated list of builder schemes for which values are passed to the uploader  if no builder attribute is set  pads passes generated pages to the uploader  see section   the filter attribute contains a regular expression that can be used to restrict the values the uploader receives based on the scheme specific part of their keys  if the uploader receives notifications for generated pages  the resource uri of the pages must match this regular expression    you can use the attributes id  receiveinit  builder and filter only if your uploader extends the class abstractuploader  otherwise you have to implement the appropriate methods of the interface uploader  see api documentation     it is possible to pass custom configuration settings to the uploader with attributes for that a setter method exists  e g  an attribute destination would require a method setdestination string  in the uploader implementation    in the following example a custom uploader of class com coremedia ext pads exampleuploader is configured  which receives notifications for all values with keys of the scheme com coremedia ext pads examplebuilder      
  the development pages offer the same options as the ads development pages for template development  see section for details    furthermore the following pads specific pages are available      invalidate builders       if you have changed a builder or its configuration  you can invalidate all depending values using this page        invalidate external dependency    if an external resource has changed  you can invalidate all depending values using this page     
  this example bases upon the prior example and it is recommended to work it through  you will extend the service from folders to documents and build a visual browser at the client side  additionaly to getsubfolders   the web service will provide a method returning all documents contained in a folder  in this case you can copy the folder method and rename the method name as well as the unified api call  a closer look reveals that this step produces redundant code and can be refactored with the following result   
  the jtree class of swing uses this model to calculate its view  for convenience reasons swing provides adapter classes reducing your programming effort  but in this case they are not suitable  a jtree makes no assumptions about the order of method calls  hence the internal structure must be created in advance  this leads to performance issues with many folders  foldertreenode in contrast contains the method updatechildren   that is called first by all respective methods before they return their result  all folders are read on demand and buffered until the list children is cleared  due to many consecutive method calls made by jtree objects during drawing  it is necessary to cache the beans  please keep in mind that you cannot receive any kind of events  hence you should invalidate your cache after a certain time   the table model for the class jtable is much simpler than the tree model because all entries have to be shown at once  therefore it is not necessary to cache the beans  if you have many documents and your application becomes too slow you have to consider alternative mechanisms  getting the data in a separate thread for example  following code is a shortened version of the file abstracttablemodel java  the code for the sort operation was removed  to present a more legible example   
  in this case  the only remarkable method is getvalueat    the method selects the content bean by the given row and maps the column values to a bean property  the switch command differentiates among the document itself  its name and the creation date  it depends on the jtable and the deployed renderers how these return values are presented   with these two models most of the work is done  the client makes some initializations and aggregates a jtree and a jtable onto one jsplitpane   compile and execute the client with the following commands  compile all source files with    ant compile client   on successful compilation  you can start the client  a window should appear allowing you to navigate through your current folders and documents    ant execute client    
  you can now compile and execute the adapted web service with the following commands  change to the directory ws   typebrowser compile and deploy the webservice with the following command    ant server wait until the web application is running in tomcat  generate the client api with    ant generate client  at client side a tree and a table model are needed to implement a swing client  in this case  no caching or other optimizing mechanisms are required because of the  stable  document model  that is  in most cases the document model does not change very often  hence  the standard tree models are applied reducing the programming effort  the gui has exactly the same layout as the content browser in example   
  the first loop creates the tree nodes for the tree model and the second one connects them  since the table model resembles the table model of  example it makes no sense to repeat it here  please refer to the file  propertytablemodel java if you are interested in more details   compile and execute the client with the following commands  compile all source files with    ant compile client on successful compilation  you can start start the client  a window should appear allowing you to navigate through your current folders and documents    ant execute client    
  if you have worked through the previous examples  you will recognize some of the methods  so we will just look at the last six methods which return property values   each method needs to parameters  the document and the name of the property whose value is to be fetched   we use our well known contentmetadata interface to represent documents  and the name is a simple string   getintegers and getstrings are straight forward  since jaxb supports int and string as well as lists   getlinks returns a list of contentmetadata  a pattern which we know already since getsubfolders in the folders example  getdates returns a list of long values which contain the gettimeinmillis results of the calendar objects provided by the uapi  we could also use the calendar objects themselves  but there may be redundant fields and bean properties which jaxb would discover and put into the xml representation   the long value ist sufficient   finally  getblobs and getmarkups deal with blobs  which we have not seen in the previous examples so far   blobs and markup values may be pretty large  so it is no good idea to annotate them as  xmlattribute or  xmlvalue  and inline them in the message   instead  we annotate the webservice as  mtom   this enables the soap message transmission optimization mechanism which defines a method for optimizing the transmission of xml data of type xs base  binary  jaxb maps datahandler objects to xs base  binary by default  so we use this class to provide our blob data in the blob interface   metro provides a streamingdatahandler which makes the webservice use a streaming api for attachments of inbound soap messages   however  streamingdatahandler is not part of the jax ws standard  and our example uses blobs only in outbound messages anyway   so we use ordinary datahandlers   this example slightly changes the propertydescriptor   in the previous examples the gettype method returned a string which could simply be displayed in the client   this time we need the type for more complex logic and therefore return the original uapi value of the enum type cappropertydescriptortype which is more convenient for programmatic usage   jaxb supports enum types by default  so we don t need any additional annotations   the web service is done now and can be compiled and executed with the well known commands  change to the directory ws   properties compile and deploy the websevice    ant server wait until the webapp is running in tomcat  generate the client api   ant generate client  the client is an extension of the document browser in section  remember that we enabled mtom for the webservice   the client must create a proxy port object which supports mtom  otherwise it would not be effective   therefore it provides an mtomfeature to the getport method of the service   
  web services offer functionality via the web  a client sends a request to an entry point at a given url using the simple object access protocol  soap  over http   on server side the request is translated to a method call and the result of the execution is sent back to the client  the benefit of this approach is that you can use your existing network infrastructure  when you combine web services with coremedia cms you get a scenario as depicted in figure  
  the file sample doctypes xml located in the subdirectory  config contentserver doctypes is shipped with the installation of coremedia sci  create a new doctype file for the menu website or use the sample doctypes xml as a starting point and rename it to menu doctypes xml  add the new document types to menu doctypes xml  because all document types have the same attribute name a supertype document should be created  example    a shows how to define the document document type   
  if you want to create the content manually  you have to start the coremedia content server  the active delivery server  ads  and the coremedia editor     enter the bin directory of the coremedia installation and start the coremedia content server which manages the content with   cm capserver start     the start of the server will take some time  please wait until the server is up  all services are enabled  before proceeding with the next steps     enter the bin directory of the servlet container home directory  e g   installdirectory   tomcathome    start the coremedia ads  which is needed to generate the websites using templates and content  by calling cm httpd start start the coremedia editor  which is needed to create the actual content  with   cm editor  log in as user admin with password admin   the status of the server and generator can be checked by using   cm capserver status and   cm httpd status respectively   if problems occur always look at the log files  they reside under var logs in the appropriate directory  you can also read the troubleshooting section of this paper  section        since we did not start a workflow server  the editor log will include a number of harmless error messages documenting fruitless attempts to retrieve the task list etc   now the editor with the menu bar at the top  an explorer like folder overview on the left and the document overview on the right opens  only two directories exist  home and system  a new directory for the contents of the menusite must be created  click with the right mouse button on the top directory label with a single slash    from the context menu select new folder  name it menusite  click right on the newly created folder and create three subfolders named meat  fish and poultry  your screen should look like this   
  after the creation of some basic document types for the menu it is now time to create the content    you might either enter the content manually  see chapter   this is a rather lengthy task  but you become familiar with the document type model and the coremedia editor   or you might import the pre defined content delivered with the example  see chapter     
  the coremedia sci allows to check user rights on resources  see section   the access control used in the menu site example should enable the following scenario   each user is able to see the dishes of the day  each user is able to see all fish dishes  members of the group  poultryfan  can only see the poultry dishes   two steps are necessary to use access control  enable access control in the config bsh file of the ads  create users and groups and add appropriate rights to the resources   enable access control  simply add the following three lines to the file  adshome  web inf config bsh  
 the first line simply enables access control  the second line ensures that only those resources are included in the jsp for which you have access rights  it acts like a global tryinclude  see section   the last line defines the group which automatically holds all users which are not logged in  so  each user who visits the menu site is automatically a member of the group anonymous   create users and groups  now you need to create the three groups  anonymous    poultryfan  and a test user  joe   start the coremedia editor as administrator  the user administration window opens  
  the page document is supposed to hold the content of the main webpage of the menu website  in section    some dishes were inserted as links  the following template page render jsp for page displays the linked dishes by calling the renderteaser jsp for dish created in the last chapter  
  in order to login as a user who is allowed to see the poultry dishes a page must be created which enables to login  the next example shows the jsp template which will be included into the main jsp described in section  
  the document types created before are arranged in the document tree  the four document types added to the system can be seen  the ancestor of all document types is resource  document  and folder inherit from resource  the document type document inherits from document   the new document types dish  picture and page inherit from document  preferences  dictionary and query are system types  not necessary here  similar to object orientation methods and attributes of the document types can be seen  the attributes are the property fields created to hold information  e g  description  ingredients or price for document type dish     the  methods  of document types are so called views which are implemented as templates  if you have not extracted the templates from the download  see the previous chapter  there should be no templates shown in the document model browser  but for the document type resource  in image    a you can already see the templates which have to be added in the next steps  all the render   templates    
  the view dispatcher  in a standard installation of coremedia sci the templates providing the view for a document are found by the view dispatcher configured in the file config bsh  in the simplest case  valid in this example  the standard template finder looks for the templates below the path  tomcathome  webapps coremedia templates  for document views there must be directories with the name of the document type containing the templates  property views must be arranged below the directory proptypes in directories named like the property  a detailed description of the view dispatcher can be found in section      
  this chapter shows how to set up a basic website based upon the coremedia smart content infrastructure  it is especially intended for newcomers to coremedia sci   in a step by step tutorial an internet menu card will be created  you will be guided through every stage of setting up your coremedia website    in section     the installation of a plain coremedia sci system with an empty database is shown  in section     the creation of the appropriate document types will be demonstrated  in section     the creation of web content with the coremedia editor is shown  in addition you will find how to download and install all data of the example from the coremedia website   in section the enabling of access control will be demonstrated  next in section     the programming of templates for displaying the documents is shown  at least in section     some hints for troubleshooting are given  
  content management covers creation of content in the repository and analysis of used content  there are basically two ways to populate the content repository   manual editing importing external content  out of the box coremedia cms supports manual creation of content by a variety of clients which are open for customization  in addition  customized clients could be created from the scratch using different frameworks  described in section   the coremedia editor  a standalone java application  configuration and customization of this editor is covered in the editor developer manual  the webediting server  a servlet which serves the coremedia webeditor for content editing  the webeditor offers nearly the same functionality as the coremedia editor but needs less installation  the webdav support  which allows to access the coremedia cms by webdav enabled applications  see the administration manual for details   the importer which is used to adopt existing external content  e g  from legacy systems or content providers  it must be customized concerning the location and the format of the source content  see the importer developer manual for details   for analysis of the content repository and the acceptance of your websites in the internet  or intranet  there is coremedia analytics  it offers a set of predefined detailed reports  the analytics dashboard  and easy to use reports directly integrated with the preview of your web site  the in site analytics   you might extend both report types by your own analytics report  see the analytics developer manual for details  
  coremedia analytics offers three methods for tracking page views   by means of an interceptor in the content application engine  in this case the page view is counted immediately after a page has been completely rendered  the advantage of this approach is that it is very easy to set up and that it has minimum impact on the generated pages  by mean of a taglib as described in section  in this case  jsps include the  analtics pagecontext  tag  which will generate a page view event when closed  the taglib allows the specify the identity of the page being viewed more flexibly  by means of tracking images  using the additional tag  analytics trackingimage    in this case the page view is counted when an image embedded in the page is retrieved  this is arguably somewhat more reliable for counting only those page views for which the page was actually delivered to the client  so that the client has started rendering  it is also more in line with other standard counting methods   by default  a newly installed content application engine comes with an enabled interceptor for the built in controllers  which is configured in the file web inf spring analytics analytics controllers example xml    customize append id  analyticsexampleinterceptorscustomizer                     bean  controllerinterceptors      description      adds the  reportinterceptor  to the list of interceptors      description     list       ref bean  reportinterceptor        list    customize append   whenever more than one tracking method is present  coremedia analytics takes care to track page views only once  tracking images disable immediate event logging during rendering  the page identity specified using the taglib overrides the identity determined by the interceptor   when the property tracking taglib required in the file custom trackingbase properties is changed to true  the presence of the interceptor is no longer sufficient to generate a page view event  instead  the tracked pages must be explicitly tagged with a page context tag   when using the http cache  it is not possible to use the interceptor  you must use the taglib and tracking images   when using sampling to reduce the load for processing analytics data  you should use tracking images  in such scenarios it is typically desired to reduce the load on the caes by caching  so that only tracking images can guarantee exact numbers  moreover  tracking images themselves may be cached  if it can be decided by javascript code that a certain request is not supposed to be tracked  this reduces the load further  however  you might want to deliver certain pages dynamically even in high traffic portals  for such pages sampling and tracking without tracking images integrate seamlessly   the tracking image callbacks are handled by a specialized tracking controller  in the default installation  the http cache will recognize that it is not supposed to cache requests to the tracking controller  however  it is still configured to at least examine the request  because the servlet filter is mapped to all incoming requests  while this is a robust solution  you can improve performance by adapting the filter mapping in the file web xml once your uri format is stable  ensuring that the filter does not act on tracking requests  
  besides the configuration of paths and databases as described in the administration and operation manual  a few implementation tasks are required even for a simple installation of the coremedia analytics engine  if you intend to use in site analytics  you must use the analytics tag library in your jsps for identifying the current page and for hyperlinks that support link tracking  the usage is simple  but it will require changes to virtually all your jsps  please see section for details  if you intend to use in site analytics  you must add code that enables and disables the display of the analytics overlays to your preview web application  while you can do this by means of preview based editing as described in the content applications developer manual  other techniques are possible  too  refer to section for details about this task  if you choose not to use the analytics taglib  because in site analytics is not relevant for your use cases  make sure that the tracking interceptor as described in section is configured for all relevant controllers  if you intend to use the http cache with click tracking  you must use the analytics tag library in your jsps for identifying the current page and for rendering tracking images  the default content evaluator that is needed by the object analyzer has to be adapted in most cases to compute categories for content beans  see section for details  if you use beans other than content beans to identify a page  you should create an object id analyzer according to section so that pages can be placed into the correct categories and be given correct name  it is often necessary to implement a few of the interfaces described in section for gathering information about requests  in particular the interfaces for computing the user name and the locale for a request are highly application specific  additional interfaces from that section may be needed  too   
  if you intend to integrate third party tools into the analysis itself  there are basically two scenarios   the external tools are used to generate additional data  for example when importing data from an erp system  the external tools are used to analyze the existing data or to export the data to other systems   for both tasks you will likely want to extend the aggregation process that runs in the analytics data integrator  as described in section  that process provides several extension sections where you can place the code for invoking external tools  doing so ensures that the third party tools run at defined times  avoiding unexpected concurrency  if you can control concurrency in another way  you can of course access the analytics database directly at any time   another topic would be the integration of third party systems as sources for rendered data  the content application engine can also render objects that do not originate from a coremedia content server  the analytics engine is capable to log and analyze access to such objects  too  as for the cae  only a means for representing external entities as ids is required  but when statistics are displayed  a display name is required  this name can be obtained by an extended object analyzer that accesses the third party system   lastly  third party systems may be used for managing visitors or for tracking sessions  in this case  the plug in interfaces described in section are good starting points for an integration  
  invariably  reports contain a temporal aspect  if they did not  they would be immutable and therefore uninteresting  currently  reports are generated for two fundamentally different forms of timed data  event statistics and snapshot statistics   examples of events are views of web pages  user session starts  or search engine queries  an example of a snapshot is the current state of the content repository   the basic model of events is that they happen at a fixed point of time  events are then aggregated by filtering them according to certain criteria and either counting them or summing numerical properties associated with the events  the criteria always involve a condition that the event has occurred in a certain time interval  as a result we get numerical values that are associated with time intervals  the model for time intervals is documented in session   snapshots are taken at a certain time  usually it makes little sense to consolidate data from multiple snapshots  instead  data points from a single snapshot are aggregated or counted    snapshots are associated with a logical time that denotes when the snapshot should have been taken  this value may be different from the time when the snapshot was actually generated  especially because a snapshot might take some time  for example  if the snapshots are supposed to be recorded every midnight  but the report aggregator is busy and cannot start this operation until       and does not end before        the logical time of the snapshot would still be          this allows the easy retrieval of individual snapshots  which are always characterized using predictable values  a small delay is often unavoidable and it is generally the best solution to perform a snapshot as soon as possible after the requested time  however  if multiple snapshots were supposed to be taken until the report aggregator actually gets to recording even the first snapshot  only a single snapshot is actually recorded  namely the last  if we took multiple snapshots at the same time  all snapshots would look the same  which would not normally be of any help  
  the following issues are important for both in site analytics and analytics dashboard   what events should be tracked     by default the system will log and track all content and page views generated by the site  except for renderings of blobs   however  some of these requests may not provide relevant business information   requests for supporting objects  such as style sheets  css files  and javascript libraries may not come directly from your users and therefore might not tell you anything useful about end user activity      note that the coremedia tracking engine separates robot views  so called non seen traffic  from human visits to give you more significant reports   coremedia analytics provides mechanisms you can use to modify  include  and or exclude the events written in the source logs   see the administration and operations manual  section  reference of coremedia analytics   subsection  configuration in tracking properties   for the use of the tracking filter exclude   and tracking filter include   property settings   these allow explicit inclusion and or exclusion of events by simple regular expressions  you can also develop a custom logfilter implementation  if needed   are all tracked parameters in the right format       by default the parameters for each event written in the log files are taken directly from http request information   however  these might not be sufficient for your reporting purposes   for example  if your application uses url rewriting you may wish to modify the request information in the eventlog before it is included in the analysis   the coremedia analytics engine provides strategy interfaces that can be used to modify the interpretation of the source logs   see sections and section for a complete discussion of how to use these strategies to modify how information is written in to the log files     how are sessions visits being defined     the concept of a  session  or a  visit  is fundamental to how both in site analytics and dashboard reports display information    see section for further definition of  session     by default  the analytics engine assumes that a  visit  has ended when    minutes have passed since the last content or page view event occurred   however this may not properly reflect your site s normal usage   for example  for a call center intranet  each call center agent might make one site information lookup every    minutes  based on the default definition  each user might have one eight hour session per day   for dashboard analytics that gives you a very low level of visits per day  for in site analytics click through rates would be useless for any time interval less than several hours  you can change this behavior with the property   workflow server managers aggregator session timeout   see the administration and operations manual  section  configuration in workflowserver properties  for the usage of the workflow server managers aggregator session timeout property     
  the following issues are important only if you will be using in site analytics     where should the overlay displays be included     not every page and every object needs to include an overlay of usage statistics   for example  you may not wish to see how often a  return to top of page  button was clicked   by clearly identifying which pages and content objects links contexts are important for your editors to see  you can both save developers time and effort  and avoid a preview windows full of overlays in which it is difficult for the end users to locate useful information   the chapter provides full documentation of how tag elements should be placed to create overlays for different objects  but by reviewing your overlay requirements in advance  you can limit the effort required to provide the end users with the most useful information      what time interval should be used for the overlay     the overlays show line graphics representing time frames   by default  the system shows    minutes of data on this graphic  but this is configurable using the overlay default interval property   based on the usage of your site and your defined session length  a smaller or larger time frame might better display the data for your end users   see section  configuring overlays  in the administration and operations manual for discussion of the overlay default interval property   
  the following issues are important only if you use the analytics dashboard     what content items will be included in repository reports     by default  the object analyzer gathers data about all content present in the coremedia repository   if you have content which you want to exclude from reports  you can configure the system to collect information only on content you specify   see section  especially the discussions of contentselector and pathandtypecontentselector   how to use categories in reporting   categories can be created to group your repository content and show content views in differently aggregated ways  for example  total views of all sports related content within a site    it is a good idea to plan a category hierarchy strategy in conjunction with your content model  as you will need to assign categories to the content items you wish to group into categories   see section for more information about using categories   
  how are users identified   one dashboard report shows unique visitor counts  this report can only provide numbers that are as good as the algorithm to detect a user name for a request  because the computation of a user name can be very specific to one web application  the plugin interface usernameextractor has been provided for this purpose  there are ready made implementations for extracting the user name from the servlet session s principal or for assigning an artificial identifier using cookies  see chapter for a discussion of this interface and the available implementations   by default the user is obtained from the current servlet session  while this is a standard and non invasive identification method  many applications will require a different method   see section  legal issues  of the administration and operations manual for important information about possible legal implications of tracking unique visitors   
  following the installation and configuration steps provided in the administration and operations manual you will create the basic system architecture and functionality to immediately track site usage and display reports using the coremedia analytics engine   however  the results shown in your reports  and the data supporting them  may need further modification to ensure that your implementation delivers maximum benefit to your reporting audience     it is recommended that you read through and consider the issues discussed in this section  and make any appropriate system modifications  before you begin tracking and analyzing your data  creating a solid data and reporting foundation as early as possible will provide the information most useful to your report users  and will make any future modifications easier to implement     coremedia analytics includes two types of reporting interface   dashboard analytics  and in site analytics  see section   of this document for further descriptions of both types   issues and possible modifications are listed below according to which interfaces utilize them    
  the strategy interface to be discussed here are mostly defined in the package com coremedia analytics plugin where you can also find the default implementations  it will be explicitly stated  if a strategy is placed in a different package  because the strategy implementations tend to be short  it is generally easier to implement a strategy from scratch rather than subclassing an existing implementation   browserextractor  the browser extractor is invoked to determine the browser that is used by the client requesting a page  you must implement a single method   string getbrowser httpservletrequest request    the default implementation defaultbrowserextractor simply retrieves the user agent header from the http request   your own implementation may discard some of the information present in the header  for example the exact build number of the browser  or you may want to rewrite the technical identifier in a more human readable one  or you might want to perform additional guesswork for browsers that disguises their identity   of course  when you are not working in an http html environment  the name  browser  might not properly describe the user agent or device used to render a page  but still  browsers are the most frequent use case   localeextractor  the locale extractor determines the locale for which a certain page should be rendered  the reported locale is used in two cases  when tracking visitor behavior  the locale is written to the database  identifying the page  when using in site analytics  the locale determines which data to retrieve from the database for display   you must implement a single method   string getcurrentlocale object object  string view     httpservletrequest request   the return value of this method is the string representation of the locale  the length of the locale is limited to five characters in the database schema    the reported language should always match the language shown on the page  not the locale requested by the browser  if your web application delivers pages in a single language only  you should probably use a simple localeextractor that always returns a constant value  to this end  the class jvmlocaleextractor returns the default locale of the jvm  this is a good starting point that is chosen as the default  it is sufficient for simple cases   if the default locale is not appropriate  but the locale is still fixed for all requests  you can use the class constantlocaleextractor  it always returns a fixed locale string  which can be configured through its locale property    for determining the locale you might want to reuse the locale from the servlet engine as done by the requestlocaleextractor  the requestlocaleextractor returns only the two letter language code of the locale reported by the servlet engine  but you can set the property includecountry to true to include also the country code  this is only useful if your application delivers different pages for different locales  though    alternatively  you might want to inspect the currently rendered object in a custom extractor   logfilter  the log filter is used when not all requests to the content application engine should be logged and processed into reports  for example  it is rarely useful to log the retrieval of a css file  you must implement a single method   boolean mustlogpage object object  string view  string locale    httpservletrequest request   as a standard implementation  the patternlogfilter is provided  which allows you to specify regular expressions that the rendered locale and view must or must not match   objectidanalyzer  the class objectidanalyzer from the package com coremedia analytics wf plugin is used to link a page object to related content beans  for example  a page might render an object that aggregates one content bean indicating the position of the page in a navigation tree and one content bean storing the actual content  the interface contains a single method   objectidinfo compute string objectid    the argument string is the exact string produced by the idscheme that handles the bean  the method should not consult other data sources  all information that is needed for the analysis must have been encoded into the id   once the id is analyzed  the strategy object can instantiate an objectidinfo bean and set properties as appropriate  to this end  the setters   void setname string name   void setnameobject id string id   void setnameobject id string id   void setnameobject id string id   void setcategoryobjectid string id    are provided by the bean  the name is only set the in the very rare case that a human readable name is encoded into the id  which is discouraged  instead up to three other objects can be referenced  whose display names as computed by the object analyzer contribute to the display name of the page  the arguments to the setnameobject    methods are normally content bean ids starting with contentbean  and ending in the numerical content id  the category object is that content bean whose category according to the object analyzer also determines the category of the page  often this is a content bean from the navigation hierarchy   an object id analyzer may return null  if it is not responsible for an id of a certain format   pagedataextractor  a page data extractor analyzes a uri in order to determine information about the page it represents  the page is characterized by its object  its view  and its locale  the page data extractor may return the empty string as the locale to indicate that no locale can be determined and that the locale of the target page should be used  null must be returned if the uri can not possibly be generated by the analyzed web application   there is a single method that needs to be implemented    pagedata getpagedata uri uri    currently the page data extractor is only used to analyze the referrer string of an http request  thereby helping in determining the source of a page view   the defaultpagedataextractor uses a regular expression to parse the uri  the first capturing group of the regular expression is considered to be the numeric content id of the rendered content object  fixed values are used for view and locale   pagenameformatter  the page name formatter is used inside the analytics dashboard for format the names pf pages  to this end  it receives a reference to the current user session and a bean that contains further information about the page to be displayed   string formatname analyticsusersession aus    pagenameinfo pagenameinfo    the session can be used to localize parts of the name  if that is needed  it can also be used to access repositories that might contain further information about the page   however  in most cases  the field provided by the bean in the second argument should be sufficient to assemble a name  the fields indicate the object that is rendered on the page  the view and the locale  there is also the display names of the object as computed by the object analyzer  if an objectidanalyzer instance recognized the id  there are also references to the name objects computed by the analyzer and the display names assigned to those objects  if not available  the fields of the bean are null    the page name formatter simply returnes the formatted name or null  if it can determine  for example from the object id  that it is not qualified to compute a display name for the page in question   referrerdataextractor  the referrer data extractor analyzes the http referrer string and provides access to two pieces of information   a normalized referrer uri  depending on your needs you may want to discard some of the information available in the referer header  for example  you might want to limit the referrer information to the domain name only  thereby reducing the number of different referrers  a search term  the search term should be set  if the incoming request was generated by an external search engine   there is a single method that needs to be implemented   referrerdata getreferrerdata httpservletrequest request   the referrer data extractor is not unified with the page data extractor  because the default implementation of the referrer data extractor is often sufficient for custom applications while the implementation of the page data extractor can be highly specific to a single installation   the defaultreferrerdataextractor applies varying heuristics to the uri after matching hte uri s host name against patterns for well known search engines  it determines the uri by discarding the query part of the request uri   generally  abstracting too much will loose valuable information  which cannot be recovered later on  leaving the input data as is might lead to inconclusive reports  because each data point is supported by very few values   robotdetector  the robot detector is used to detect robots that visit your tracking enabled site  to create your own robot detector class you will have to implement one single method   public string detect httpservletrequest request    the default implementation useragentrobotdetector simply retrieves the user agent header from the http request and checks it against a list of known robots and wildcards provided by defaultrobotprovider class  by default the robots provider gets its robot information from a plaintext file  analytics robots db  and from properties  for more information about robot provider configuration have a look at the administration and operation manual   searchdataextractor  this strategy extracts information about internal searches performed using the coremedia search engine  if you decided to deploy this component and if you are importing the generated search logs  if you choose to create a custom extractor  you must configure your extractor in the aggregation process definition as described in section   you must implement one method to implement the interface   searchdata getsearchdata map attributes    the returned searchdata instance wraps information about the search collection that was accessed and about the requested search term  both pieces of information must be present  the argument map contains the attributes of the search request url as found in the log files  typically you will access the values assigned to the keys filter and query  for all values  url escapes have been resolved and plus signs     have been replaced by spaces   the standard implementation defaultsearchdataextractor uses regular expressions for obtaining the requested information   sessionextractor  the session extractor is used to determine a unique id that identifies a user session   string getsessionid httpservletrequest request   the default implementation defaultsessionextractor uses the id of the http session as reported by the servlet engine  generally  this is a good approach even for multiple content application engines  if a load balancer makes sure to always route requests from the same client to the same server   if multiple servlet engines have to serve requests of a single session  it might be necessary to implement a custom schema for assigning ids to sessions   siteextractor and contentsiteextractor  every object belongs to exactly one site  the site extractor and the content site extractor are responsible for computing the stringified name of the site from any given object  site extractors are used in the click tracking configuration  they map generic objects to site names  while content site extractors are used in the object analyzer configuration  they map content to site names only  you can configure the site extractor in the custom tracking xml file and the content site extractor in the properties corem objectanalyzer custom trigger xml file as a property of the defaultobjectstatecontentevaluator  see section for details    the interface siteextractor defines the following method   public string getsite object object   while the interface contentsiteextractor defines the method  public string getsite content content   the default implementation of contentsiteextractor is defaultcontentsiteextractor  when used in the live environment of a multi site installation  its bean property multisitemode must be set to true or false  depending on the intended behavior  in the content management environment  it can retrieve the server mode if a unified api connection is injected into the extractor and if the mode is set to auto  in multi site mode  this class uses the top level folder that transitively contains the content under examination as the site  prefixing its numeric id with contentbean   in single site mode  it simply returns contentbean   in all cases   another class defaultsiteextractor implements both interfaces  it uses the content bean id of the base folder of the content associated to a content bean as the site  only content beans are supported  internally  this extractor delegates to a contentsiteextractor  which can be replaced as needed  for example for activating or deactivating multi site mode   in general  an arbitrary algorithm is possible  but you should take care that the algorithm is stable  because an object cannot change its site later on   sizeextractor  the size extractor determines the number of bytes delivered in the current request  it is guaranteed that the templates have been completely rendered before this method is invoked   long getsize httpservletrequest request   httpservletresponse response   the default implementation defaultsizeextractor works in combination with the class sizefilter  the sizefilter must be included in the web xml configuration file as follows    filter     filter name analytics size filter  filter name     filter class com coremedia analytics util sizefilter     filter class    filter   filter mapping     filter name analytics size filter  filter name     url pattern  servlet    url pattern    filter mapping   unfortunately  it is not possible to add a similar filter using a spring configuration only   targetobjectresolver  when linking to a certain object  it may be necessary to rewrite the link to point to a different object  for example  a link to a small text fragment would likely be replaced by a link to the page object that contains the text fragment  to this end  the interface targetobjectresolver was added  but it has since been deprecated in favor of interface targetpageresolver   if you are using a target object resolver for both tracking and in site analytics  you should move the object resolution code to the rendered beans and indicate the correct bean in the  analytics pagecontext  tag  if you are using a target object resolver only for in site analytics  you should convert it to a targetpageresolver  which is more expressive for this purpose   targetpageresolver  an instance of the interface targetpageresolver is used if the page identified in an  analytics link  tag does not correspond to the page that is finally rendered after clicking the link  normally  it would be conceptually cleaner to compute the page before rendering the link  putting exactly the needed information into the url  however  this may not be possible if the computation performed by the controller is too expensive to be performed for each rendered link or if it would generate too many dependencies   in that case  the target page resolver may compute the rendered page for each link in an in site analytics application  allowing in site analytics to render the correct statistics without affecting the rendered urls  to this end  the target page resolver must be able to simulate the entire chain of link formatter  controller  and jsp template   one method must be implemented when directly using the interface targetpageresolver   pagedata resolve object object  string view  string locale     httpservletrequest request  httpservletresponse response    the returned object is an aggregate indicating the object  view and locale rendered when requsting a link to the given object  view and locale  frequently the view and locale  if that is used at all  are not changed by going through the rendering chain  only the object may have to be replaced  in that case  the simplest way of implementing a target page resolver is inheriting from the class defaulttargetpageresolver  this class passes all three arguments to the main method as is  but allows suclassers to overwrite individual methods  especially for the object   public object resolveobject object object  string view  string locale     httpservletrequest request  httpservletresponse response      return         as you can see  the resolver gets access to the request and response object  allowing it the same freedom that is also enjoyed by the linkformatter   typically the algorithm needed for resolving the target page identity is already available when combining the linkformatter and the controller implementation  it is a good practice to extract that code into a separate class that can then be reused by all involved strategies   usernameextractor  this strategy object derives the name of a user from a request object  in many cases  there might be no login procedure for your site  so that a user makes no sense  but in a shop a login might be mandatory   string getusername httpservletrequest request    the default implementation defaultusernameextractor returns the name of the request s user principal  which is useful if the servlet container s authentication model is used   for internet applications this is often not the case  for these sites no authentication is available  but it is still desired to distinguish different users  this can be done by storing a cookie in the user s http agent  where the cookie can be any string as long as it is unique  this is done using the cookieusernameextractor  to use it  it must be combined with an interceptor that actually sets the cookie at the right time in the request cycle  configure the extractor in the file tracking xml    bean id  analyticslog  parent  abstractanalyticslog       property name  usernameextractor        bean      class  com coremedia analytics plugin             cookieusernameextractor         property    bean   the interceptor must be added in the file cae controllers example xml like this    bean id  usercookieinterceptor   class  com coremedia analytics util  usercookiehandlerinterceptor      property name  cookiename  value  theusername      bean      bean class  org springframework web servlet handler  simpleurlhandlermapping      property name  interceptors        list         ref bean  reportinterceptor           ref bean  usercookieinterceptor          list      property          bean     if you are using tracking images  the interceptor must also be configured for the tracking controller  to this end  change the definition of the bean trackingcontrollermapping in the file analytics tracking base xml as follows    bean id  trackingcontrollermapping   parent  abstracttrackingcontrollermapping      property name  interceptors        list  ref bean  usercookieinterceptor     list      property    bean   
  the administration and operation manual contains a description of the standard configuration parameters for the coremedia analytics engine  mainly  these parameters are concerned with timing issues and the location of servers and files   beside these parameters  which can be set in property files  there is the possibility to plug in strategy objects at various points in the system  these objects must be written in java  implementing one of a number of interfaces from the public api  typically  the implementations are then plugged into the coremedia content application engine where they control the creation of log entries  in section these interfaces are discussed one by one   for in site analytics  additional work is needed when the parameters of the overlays should be changeable at runtime  typically  editing services for jsf will be used for this task as described in section   if these interfaces are not sufficient for achieving the desired behavior  it is possible to extend the aggregation process as described in section after a detailed introduction of the database schema  typically  this is only necessary when you want to provide completely new reports  
  the first step for any reporting customization is to determine specifically what information you wish the dashboard to display  and in what format it will be most understandable to your users  it is a good idea to review the standard reports provided by dashboard analytics to see if any of those could be used as a model for your new report  because there are many reusable components in all of those reports  the more of these you can use  the less development work your customization will require     follow the steps in section  this will guide you through the most important considerations in designing your new report     two of the most common scenarios resulting from this analysis     you wish to create a report that displays data that is already present in the result schema of the database  in this case  you should follow the steps in section below    you wish to create a report that displays data that can be generated from the fact and dimension tables of the analytics database  but does not exist in the result schema tables   in this case  you should follow the steps in section below        
  for this use case we will create a report that displays the top n sites by number of page views per site in a selected time period  pre aggregated data to support such a report exists in the result schema of the analytics database  but no standard reports display information in exactly this way    create the custom reporting definitions file      follow the steps in sections and section  this will create a sample report definition in the  web inf spring analytics analytics reportdefinitions xml file that we will update to create the basis of our new report  because the top internal search terms standard report provides a good model for our new report  copy the definition for the topinternalsearchterms from the analytics reportdefinitions xml file located in the cap analytics config jar file   be sure also to keep the latter file available as a reference throughout the next steps  the standard dashboard report definitions provide good examples for all report configuration steps      configure a state model in the  abstract   high level model  section of the report definition in file analytics reportdefinitions xml    refer to section for details about the state model  defaultstatemodel is used by the standard reports  it is suitable for both time series and category reports      define a list of state model variables in  state model variables  section of the report definition in file analytics reportdefinitions xml    refer to section for details about the predefined variables  each of the default abstract models provides examples of the use of existing variables  these variables support the selection parameters chosen by the report user when he she runs the report   the range and entries variables will be sufficient for our report  because our report parameters will only include selectors for time range selector and   number of entries to be displayed    remove or comment out the searchtermresolution entry      map the state model variables to data model dimensions in the  defining dimconstraint logical name to paths     section of the report definition in file analytics reportdefinitions xml    refer to section for details about the relationship between the state model variables and the data model  and a full list of state model variable types and their supported constraint aspects  each state model variable should be mapped to a data model aspect constraint   in our use case report definition  we need the range  resolution  and entries entry keys   however the searchtermresolution can be removed or commented out      define the query or queries needed to retrieve the data you wish to display from the database result schema     the query configuration is found under the  data model  section of the report definition in file analytics reportdefinitions xml  under section  queries         refer to section  which contains a full description of the query configuration  note that although you can implement your own queries  there are several generic queries already available for use  for our example report  we will use the preconsolidateddata xycategoryquery   change the bean class entry under property queries to com coremedia analytics definition report query preconsolidateddata xycategoryquery   and set the base table to totalviews and the time column to eventintervalstart     as part of your query definition  you are sometimes required to map dimension constraints to your query  this will automatically restrict the results returned by your query to the parameters specified by the end user in the report selectors  and can also be used by data consolidators  see below  as the keys in merging multiple sql queries  see section   however  in our use case  the time range and number of top n entries are already constrained by the data model and consolidator  so we do not need to configure an additional parameter in our query      configure a consolidator in section  query result consolidator    of the report definition in file analytics reportdefinitions xml    consolidators do post processing work  such as sorting and merging  on the result set s  returned by the query  ies   several preconfigured consolidators are available for use with standard type reports  these are detailed in the section     the rankingqueryresultconsolidator is suitable for our purposes in this use case  and it accepts as input the output of the preconsolidateddata xycategoryquery   change the bean class entry under consolidatorprototype to com coremedia analytics definition report query consolidator rankingqueryresultconsolidator  this generic consolidator does not utilize the searchtermresolutiondimconstraintname property  so this property must be removed or commented out      create titles and texts for the report under the view bean s section  visualization   rendering  of the report definition in file analytics reportdefinitions xml    see section and follow the steps  here you create localized report titles  report sentences  the text accompanying the selectors at the top of the report   and report descriptions  the text at the right explaining the contents of the report    you may create any title or description you would like  but in our example it is important that you include the  entries  and  range  selectors in the report sentence      configure the report s appearance under property  report content template and customizer  inside the view bean section of the report definition in file analytics reportdefinitions xml    you must specify a chart template to provide the basic graphical rendering of the data  section contains a list of the preconfigured report templates available for use      optionally you can include a chart customizer to further adjust colors  line thickness etc  see section for further details  preconfigured customizers can be found in package com coremedia analytics jasperintegration jfreechart customizers   and examples of use in other report definitions in the file framework version of analytics reportdefinitions xml    the template and customizer already present in our example report definition are acceptable choices so you may leave them configured as they are      define access rights to the report under section  required role  of the report definition in file analytics reportdefinitions xml    see section for details   again  the default should be acceptable unless your environment has been customized      publish the new report to the dashboard     open the file  web inf spring analytics analytics profiles and views xml and add your new report s definition name to the report definition  list  property  as described in section       
  for this use case we will create a report that displays the top n most used browsers in a selected time frame   the browser type for each  page and content view request is stored in the analytics database schema  but is not aggregated because it is not used in the standard reports   we will extend our reporting system to pre aggregate this result data  and retrieve it using a custom report                    determine what data you need for your report  and how it should be aggregated  your new report should retrieve its data from tables of pre aggregated data  not directly from the dimension or fact tables  because your desired data does not already exist in one of the standard aggregation tables  you will need to create and populate new result tables as described in a later step   analyze the data available in the database and determine what data you will need to retrieve and aggregate to support your new report s    see chapter for descriptions of available data  you can formulate a sql query to test your aggregation strategy and check that the aggregated results will be appropriate for your report   for our use case  we can find browser information in the sessions fact table   we will aggregate the number of sessions which used each browser type over all standard reporting time ranges    extend aggregator by adding custom aggregation actions   add aggregation actions into the  custom start  section under the  automatedtask name  customaggregationstart  action of the data aggregator xml workflow definition   complete descriptions of the uses and configurations of predefined tasks actions can be found in section    these predefined actions formulate sql that will act against existing database tables to populate new result tables  the sample sql aggregation you formulated in step   should help you determine which predefined action will suit your needs   to aggregate our browser data  we will use the aggregateintervalsaction   first we specify what data we want to aggregate   configure the sessions table as the sourcetablename  starttime as the sourceintervalcolumnname  and browser as the sourcekeycolumnnames   the output of the predefined action you choose will define what types of result tables you must create in the database schema  in our use case we will create a series of tables modelled on the standard result table schema   these new tables will usethe prefix  totalbrowsers    and will contain columns browserintervalstart  browser  and browsercount as the target values for interval  key  and count respectively   extend the database schema          
  you must create tables in the database schema that support the output of your custom aggregation action  in the previous step  the aggregateintervalsaction provides a target table parameter that specifies a prefix name for your target tables  as described in section  this particular action aggregates results over the predefined reporting system time intervals  listed in section  and inserts these values into tables with this prefix   using the prefix  totalbrowsers    you would then need to create twelve results tables using the naming convention totalbrowsers xx  where  xx  is one of the interval type codes  totalbrowsers hh  totalbrowsers dh  etc  their column names must agree with the names specified in the aggregateintervalsaction target   columnnames parameters  and their data types must be compatible with the columns referenced by the source   columnnames parameters   so each totalbrowsers xx table should contain at least the following columns   browser of type integer number  browserintervalstart of type timestamp date  and browsercount of type integer number  actual type names will depend on which database you are using          test the new workflow aggregator  upload and run your new workflow  see the administration and operations manual section  coremedia analytics   subsection  running the aggregation process  for details   ensure that your new results tables are populated with the expected values    create a report to access the new data  if you want to create a new report to access this new data follow the steps in recipe     when you get to steps   and    you simply have to configure your query to retrieve data from your custom tables instead of from the default results tables  
  except for the variable iterationstart all variables mentioned in the previous table are set in the task evaluateaggregationstrategy  this task contains an invocation of the aggregationstrategyaction which sets a number of workflow variables for controlling the integration based on the results of the import phase  for example  the strategy may decide to delay the aggregation if some data could not be correctly retrieved  the action can be changed by changing the custom section in the task evaluateaggregationstrategy   your implementation of the aggregation strategy and in fact all of your extensions may write to additional variables  which are preferredly defined in a special custom section in the header  you may choose to make your variables directly accessible by including them in the assignment or the initial assignment  
  the analytics engine defines a number of automated workflow actions  the actions are used in the standard report aggregation process  but you can also use them in your own extensions  please note that some configuration properties of the actions that are used in the standard process are not  yet  public api  when possible  please restrict your usages to the properties described here   all actions are defined in the package com coremedia analytics wf   
  in this chapter  the basic concepts required for understanding and extending the dashboard and its reports will be introduced  in the following       the architecture will be explained  in section       the internal structure will be presented and an example on how to create new reports or extend existing ones will be given   
  typically  you would define profiles for user groups using analytics  e g    a controller profile with views showing the overall and per site performance  top search terms on search engines like google  msn live  etc   a profile for editors with page views  exit pages  content repository information and an administrator profile showing page views  content repository information and later browser types   the profile views would customize generic report definitions  e g  change report titles and explanations to the user group s need   see  customization  on how to define profiles and views  
  the first step when creating a new or extending an existing report is to determine what report type you want to create  what data is required       choose the type of report you want to create  the report types available out of the box are   time series reports  these reports are typically rendered as bar or line charts with the time dimension as the x axis  an example is the  performance  report included in the default dashboard view  category reports  these reports map named elements  e g  pages  content categories  to numeric values  an example is the repository information report in the default dashboard view  category reports are typically rendered as a bar or pie charts  ranked category reports   top n elements    these are category reports which additionally filter and sort their named elements  examples are the top viewed pages  top entry   entry pages and search term reports included in the predefined dashboard view  in the top viewed pages report  the pages are sorted by total number of views and filtered such that only a subset  e g  the top    elements  is shown   of course you can add additional report types if necessary  as the dashboard reporting software components are based on jasperreports  http   jasperforge org sf projects jasperreports  and the jfreechart chart library  http   www jfree org jfreechart   it is simple to extend the list of report types      determine the data that you want to display in the report  for this  please  determine the report domain  i e  the x axis in a bar chart or the values represented by the slices in a pie chart   determine the report range  i e  the y axis in a bar chart or the values annotated at slices in a pie chart   identify secondary report range s   i e  additional dimensions that the report domain values are mapped to  examples are flags highlighting or marking single domain values  percentage values  etc  identify the report parameters that you want to provide to the report users  the parameters will allow users to dynamically choose the subset of data visualized  parameters map to report variables in the high level report model  state model  and to dimension constraints in the technical report model  data model    example    the  performance  report maps a single report domain  the  time domain  to two report ranges  a  the number of total page impressions per selected site and b  the number of visits per site  no additional metadata is given  report user parameters which constrain the displayed report subset are site  time range  and time resolution   example    the  top viewed pages  report maps a single report domain  namely pages  to a single report range  the number of views  the data set is sorted  entries are ordered by highest number of views  a secondary range is the relative percentage compared to all views per site  report user parameters which constrain the visualized data are number of entries displayed  site  and time range      check whether the report domain data and range data are provided by the reporting database   read the analytics database schema documentation   ref   to find out what publication and production system data are provided by the analytics database  for most reports that are purely content management system based  the data provided out of the box by the analytics database should be sufficient  if you intend to integrate additional third party data sources into the database  please consult the integrating third party tools   ref   section   
  after finishing the analysis  you are ready to create your customized reports  be reminded that in most cases  you will only have to copy and refine existing report definitions or perform little adaptations to the querytemplates and aggregators  see reporting application architecture section     you should have experience with spring bean configurations in order to create your own reports  
  query result consolidators process data returned from queries  they reuse the data model s dimension constraints to merge results from more than one query  aggregate  filter and sort data and finally enrich them with displayable names  relative numbers  percentages   etc   as a rule of thumb  aggregation  filtering and sorting should be performed as much as possible by the database and as little as possible by the consolidator  reports that are fed from the analytics database typically do not require additional aggregation of data  as the analytics database already provides pre aggregation and pre consolidation of data  see  ref    in the pre defined reports  sorting is done in the database via sql  order by  expressions  filtering is mainly achieved through database filtering and jdbc result set limiting  the consolidator remains in the query result processing chain but does very little   the consolidators  main capabilities come in handy a  when mapping and merging data from more than one query  b  post processing and filtering data  or c  to enrich query results with metadata  
   query type  spring bean name  description   queries for category reports  and ranking category reports this query type maps names entries  string identifiers as x values  to numeric values  y   y         preconsolidateddata genericcategoryquery   configurable  generic query type suitable for pre aggregated  pre consolidated data  respects the time based data aggregation mechanism of analytics database  see  ref    properties    basetablename    time based data aggregation mechanism related property  base name  without underscore and interval type code  of the report database table   see  ref     timecolumnname    name of the report database table column that holds the time information   its sql statement must return a result set where the domain value must be named  x value  and be convertible to java string type and the range values named  y     y    etc  and be of java double type     the generic query will pass the following query result fields to the consolidator   the string value named  x value  will be converted to string and passed to the consolidator as the x value  the x value may not be null  the string value named  x value displayname  as the x value s display name  per default  if no x value display name is provided  the consolidator will raise an error  this can be configured in case a consolidator s strategy is to provide the x value display name  any number value  floating point doubles  long integer values and integer values  will be passed to the consolidator as double values  the sql result set column name will be converted to uppercase and passed in as the value key  the default value keys are  y     y    but any value key without special characters can be used  the optional string value  annotation  will be passed to the consolidator as a value annotation  any other string or boolean sql result set value will be passed to the consolidator as a  metadata  attribute  its result set column name will be converted to uppercase and passed in as attribute key   any other values of other types will not be passed to the consolidator   note  it is the consolidator s responsibility to merge   remap   filter the values  attributes  and annotations from the queries  preconsolidateddata singlevaluequery   a configurable  generic query type suitable for fetching a single value from the database and passing it to the consolidator    its sql statement must return a single row with a column entry named  value   this value will be set as a consolidator state parameter  the name under which it will be provided to the consolidator must be set in the query s consolidatorparametername property     the value can be transformed before passing it to the consolidator by means of a pluggable valuetransformer of type hox util bijectiveconverter  rawrelationaldata genericcategoryquery   configurable  generic query type suitable for non consolidated  non aggregated  simple relational data  the query retrieves x and y values from the database and passes them unmodified to the consolidator  properties    basetablename    base name of the report database table  per default it is not dynamically adapted  unless an aggregation model mapping strategy is configured to do so   its sql statement must return a result set where the domain value must be named  x value  and be convertible to java string type and the range values named  y     y    etc  and be of java double type     the generic query will pass the following query result fields to the consolidator   the string value named  x value  will be converted to string and passed to the consolidator as the x value  the x value may not be null  the string value named  x value displayname  as the x value s display name  per default  if no x value display name is provided  the consolidator will raise an error  this can be configured in case a consolidator s strategy is to provide the x value display name  any number value  floating point doubles  long integer values and integer values  will be passed to the consolidator as double values  the sql result set column name will be converted to uppercase and passed in as the value key  the default value keys are  y     y    but any value key without special characters can be used  the optional string value  annotation  will be passed to the consolidator as a value annotation  any other string or boolean sql result set value will be passed to the consolidator as a  metadata  attribute  its result set column name will be converted to uppercase and passed in as attribute key    any other values of other types will not be passed to the consolidator    timeseries report queries this query type maps points in time  milliseconds as x value  to numeric values  y    y       values   preaggregateddata generictimeseriesquery   configurable  generic query type suitable for pre aggregated data  respects the time based data aggregation mechanism of analytics database  see  ref    properties    basetablename    time based data aggregation mechanism related property  base name  without underscore and interval type code  of the report database table  see  ref     timecolumnname    name of the report database table column that holds the time information     its sql statement must return a result set where the domain value must be named  x value  and be convertible to java calendar and then to java lang long milliseconds since      and the range values named  y     y    etc  and be of java double type   the generic query will pass the following query result fields to the consolidator   the datetime value  x value  will be converted to milliseconds  type long  and passed to the consolidator as the x value  the x value may not be null  the optional string value named  x value displayname  as the x value s display name  per default  no x value display name is provided  it is the framework s responsibility to generate localized names for time stamps  any number value  floating point doubles  long integer values and integer values  will be passed to the consolidator as double values  the sql result set column name will be converted to uppercase and passed in as the value key  the default value keys are  y     y    but any value key without special characters can be used  the optional string value  annotation  will be passed to the consolidator as a value annotation  any other string or boolean sql result set value will be passed to the consolidator as a  metadata  attribute  its result set column name will be converted to uppercase and passed in as attribute key  any other values of other types will not be passed to the consolidator  rawrelationaldata generictimeseriesquery   configurable  generic query type suitable for non consolidated  non aggregated  simple relational data  the query retrieves x and y values from the database and passes them unmodified to the consolidator  properties    basetablename    base name of the report database table  per default it is not dynamically adapted  unless an aggregation model mapping strategy is configured to do so   its sql statement must return a result set where the domain value must be named  x value  and be convertible to java string type and the range values named  y     y    etc  and be of java double type     the generic query will pass the following query result fields to the consolidator   the datetime value  x value  will be converted to milliseconds  type long  and passed to the consolidator as the x value  the x value may not be null  the optional string value named  x value displayname  as the x value s display name  per default  no x value display name is provided  it is the framework s responsibility to generate localized names for time stamps  any number value  floating point doubles  long integer values and integer values  will be passed to the consolidator as double values  the sql result set column name will be converted to uppercase and passed in as the value key  the default value keys are  y     y    but any value key without special characters can be used  the optional string value  annotation  will be passed to the consolidator as a value annotation  any other string or boolean sql result set value will be passed to the consolidator as a  metadata  attribute  its result set column name will be converted to uppercase and passed in as attribute key  any other values of other types will not be passed to the consolidator     
  the generic query classes have the following properties and follow these conventions   every query has a name  which is used by the consolidator to identify and optionally remap and merge y values from more than one query  query names should be per convention  q     q    the data source implicitly used by the query is the data model s defined data source   provide the sql statement to be executed in the property  sqlstatement   you may use placeholders  which are denoted with curly brackets  example  a placeholder named  length  is denoted as   length    without apostrophes  in the sql statement property     the placeholder  cond  is used throughout all reports to represent the  dynamically composed  sql  where  condition      three  implicit  placeholders are used to reflect the query type  raw  preaggregated or preconsolidated   they are used throughout the predefined reports     the  single value   basetablename  placeholder specifies the name of the single database table that contains the pre aggregated data  during query preparation it will dynamically be mapped to the concrete database table which is suited best to the selected time range and resolution  see  ref    depending on the query type chosen  see table above   the basetablename will be suffixed or not  in rawrelationdatamodelqueries  the basetable name will not be suffixed     the  implicitly defined  placeholder  intervaltypeidentifier  will generate the time interval suffix  without leading underscore  that will be appended to the base table name     the  implicit  single value   timecolumnname  placeholder names the table column that contains the data entries  time information  for the given timerange and timeresolution dimension constraints  a time based sql condition clause will be generated  per default  the timecolumnname is set to  eventintervalstart     the basetablename and timecolumnname placeholders and their mappings can be customized  and more than one basetablename and timecolumnnames can be set  more information can be found in the paragraph below   in general  the sql statement must bind the domain value  the value that represents the x axis value  to the name  x value  in the sql result set  use the sql  as  expression to rename query result columns  example   select page id as x value    for category results  the x value should be of an sql string type that is jdbc convertible to java lang string  for time series results  the x value must be of sql type timestamp  time series queries will internally convert it to  long   representing milliseconds  if you want to use other types of domain values you must define customized queries  query result consolidators and possibly define customized report templates  numeric values  floating points and integers  are automatically mapped with their uppercase db column name  default value names are  y   and  y    while arbitrary keys can be used  it is best practice to use identifiers  y    index  please note that the consolidator can be instructed to remap query result values  e g  value  q  y      the value  y   sent in by query  q    to its internal name  y     q  y   to  y    this way  variable name clashes can be avoided  more on consolidator configuration can be found in the following paragraphs  names like  x value  or  x value displayname  should be avoided  since they will not appear in the result  the x value and its display name have precedence  string and boolean values are automatically mapped with their uppercase db column name and treated as  additional  attributes  there are no default keys for these values  names like  y   or  x value  should be avoided  since y values and x value will have precedence  an optional string value named  annotation  will be mapped as the value annotation  the value annotation is intended to be used as a textual explanation of a data entry  example  a time series report where points in time are annotated as  relaunch of site x    import of content   etc    no other db query result fields will be mapped     please note  per default all mentioned fields will be passed through the processing chain and in the end will appear in the result  e g  the xml report output   the consolidator can be configured to filter out intermediary values or values not intended for output by configuring its resultremovefieldsexceptcsv name list property  more details will be given in the following paragraphs  
      copy the oracle jdbc drivers into the  coremediahome  lib directory  copy the oracle jdbc drivers into the tomcat common libraries directory  tomcathome  common lib   if you haven t provided the license file during installation  copy the license zip file into the  coremediahome  properties corem directory   now you are finished with the installation of the coremedia cms system      install the cae examples  this coremedia analytics example uses the cae menusite example which is contained in the cap examples jar  in order to unpack the example proceed as follows  unpack all cae examples  the ones below the cae  path  from the cap examples jar into a directory  for example cae examples  copy the file menu doctypes xml file from the menusite misc directory into the  coremediahome  config contentserver doctypes directory  remove all other  doctypes xml files in that directory      start the coremedia content management server  start and initialize the content and import the menusite content as follows start the content via   cm contentserver start     import the menusite content into the repository import the menusite content into the coremedia cms repository as described in the readme file in your cae menusite installation directory   now  you have a running content with the menusite content stored in the repository      set up the menusite click tracking and in site applications  we will create two instances of the cae menusite web application  one showing the application as perceived by customers  we will name this instance  menusite live   it will be registering customer clicks  and one instance displaying the customer clicks as perceived by in site analytics users  we will name it  menusite view    for reasons of keeping the deployment simple  we will deploy both application instances to the same tomcat server instance under different names  note that in production environments  this obviously will never be the case  the  menusite live  instance would normally run in the publication environment  while the  menusite view  instance would run in the cms production environment   both instances  live and view  require identical adaptations of their jsp templates  we will therefore first perform modifications on the one unpacked application and later create two different deployments from it  we will enable analytics in both instances by enhancing the existing jsp templates using the analytics tag library  we will define reporting contexts for html pages and enrich links using the taglib   locate the cae application s templates  in the example these can be found under menusite src templates com coremedia examples cae beans  open each template and perform the following changes  as applicable  to the jsp templates  import the analytics taglib at the top of a template  if your application is built on servlet     jsp      you must use the taglib s version for jsp           taglib prefix  analytics   uri  http   www coremedia com analytics               if your application is built on servlet     jsp      you must use the taglib s version for jsp              taglib prefix  analytics   uri  http   www coremedia com analytics               the menusite example in coremedia      and later is built on servlet     jsp      hence you must use the latter taglib definition  in case of doubt  have a look which cae objectserver taglib version is used          or          and use the corresponding analytics taglib       enhance existing links  both  a href            a  and combined  a href   cm link target               a  with an analytics link context by replacing them with  analytics link object            analytics link   the analytics link tag will create the link and wrap an analytics link context around it  link contexts are used to track page transitions     example  replace   a href   cm link target    self page      text  a    with   analytics link object    self page   text  analytics link         templates that render the html page scaffolding   html  and  body  tags  must be configured to enable sessions if you want to use in site analytics  they must include analytics header information and define an analytics page context  do the following   enable session by setting the jsp page directive  session  attribute to true        page contenttype  text html charset utf    session  true                include an  analytics head   head tag in the html page s  head  element  if no  head  element is defined  add an  head  element to the html page      html           head       analytics head             head     body            body    html         open an analytics page context inside the html page s  body  element  the page context should refer to  self       body     analytics pagecontext object    self              analytics pagecontext    body   you have now successfully enriched your web application templates with analytics  next we will create two instances of the application and deploy them to the servlet engine  tomcat    we will follow here the menusite application s build instructions  prerequisites  open the configuration file global properties in the example in etc and set the following properties   cae template dir  point to the webapp dir of the tomcat  for example cms jakarta tomcat webapps  make sure that the path does not terminate with a slash and that you use     not      tomcat home  point to the base dir of the tomcat  for example cms jakarta tomcat  make sure that the path does not terminate with a slash and that you use     not         create the menusite live application instance  tracking the customers  clicks   open the configuration file global properties in etc and set the following properties   cae template name contentapplicationengine template  the cae template with the click tracking plug in installed is required now     switch to the menusite directory and call ant build   this merges template and application files and creates the click tracking application instance in directory menusite output webapp        verify that click tracking is enabled in the resulting web application  goto the directory menusite output webapp web inf spring analytics  the directory must contain  among others  the following  xml and properties  files      analytics pageresolution xml   tracking xml  tracking base xml  tracking properties   tracking base properties       verify that the click tracking interceptor is configured  open the file menusite output webapp web inf spring analytics analytics controllers example xml  verify that it contains a customizer bean definition which adds the reportinterceptor bean to the controllerinterceptors list bean    configure a suitable usernameextractor to count unique visitors  as the  live  menusite does not provide a means of user authentication  we are advised to use the cookieusernameextrator to distinguish and count unique visitors  see also chapter     first  configure the user name extractor in the file web inf spring analytics tracking xml    bean id  analyticslog  parent  abstractanalyticslog      property name  usernameextractor        bean   class  com coremedia analytics plugin cookieusernameextractor         property    bean     next  it must be combined with an interceptor that actually sets the cookie at the right time in the request cycle  add the user cookie interceptor to the customizer bean in file web inf spring analytics analytics controllers example xml    bean id  usercookieinterceptor  class  com coremedia analytics util usercookiehandlerinterceptor      property name  cookiename  value  theusername      bean     customize append id  analyticsexampleinterceptorscustomizer   bean  controllerinterceptors      description      adds the  reportinterceptor  to the list of interceptors      description     list       ref bean  reportinterceptor          ref bean  usercookieinterceptor        list    customize append           in web inf spring objectserver properties  set the mbeans domain property  management jmx objectname domain  to  menusitelive     finally  publish the click tracking instance to tomcat   create a directory  menusite live  below  tomcathome  webapps and copy all files from menusite output webapp into this directory   now create the  menusite view  application instance  where customer clicks are shown using overlays    prerequisites   completely remove the menusite output and the menusite temp directories  completely remove the contentapplicationengine template directory in tomcat under webapps  please install a fresh copy of the contentapplicationengine template to the same directory  tomcat   webapps   contentapplicationengine template   this time with the insite plug in  no servers need to be installed  just the cae template with the plug in  this time the template is enriched with in site analytics   now follow these steps switch to the menusite directory and call ant build  this merges the template and application files and creates the in site application instance in directory menusite output webapp     unfortunately  the merging algorithm does not merge the web xml files  the template s entries are missing  create a merged web xml manually  containing the entries from the template as well as from the application   for the menusite application  proceed as follows   remove the file web xml in menusite output webapp web inf  copy the template s web xml  file  tomcathome  webapps contentapplicationengine template web inf web xml  to the directory menusite output webapp web inf      verify that in site is installed  verify that the file menusite output webapp web inf spring analytics overlays properties exists     ensure that overlays are enabled  open the file menusite output web inf spring analytics overlays properties  make sure the property overlay default visible is set to true      in menusite output webapp web inf spring objectserver properties  set the mbeans domain property  management jmx objectname domain  to  menusiteview   important is that the name is different from the name given in the menusite live webapplication    publish the menusite view instance to tomcat   create a directory  menusite view  below  tomcathome  webapps and copy all files from menusite output webapp  into this directory      optional  configure the analytics dashboard profile and views  please note that this section has changed since previous versions   the default dashboard view profile is now enabled for members of the administrators group per installation  users will be directed to a login page  after successful authentication  they will be granted access to the views defined in the defaultprofile  as the default profile defines suitable views and reports  we do not change it  if you want to change the view profile  you can find it defined in web inf spring analytics analytics profiles and views xml  please consult the documentation on profiles and views      configure the workflow server and run the data aggregator  in this example the installed workflow server will host the data aggregator workflow and thus be the analytics data aggregator  adapt the following properties in the workflowserver properties file in  coremediahome  properties corem   workflow server managers aggregator logprovider   url    http   localhost      menusite live servlet analyticslog workflow server managers aggregator loop duration     workflow server managers aggregator session timeout      the first property setting tells the aggregator manager at which url the click tracking cae application will provide its click tracking logs  this is typically the webapp base url with   analyticslog  appended  the last two property settings are for demonstration purpose only  to make clicks appear faster in the in site and dashboard views  do not use these settings for productive use     start the workflow server with   cm workflowserver start   next we need to create a data aggregator process instance and start it  the coremedia editor comes in handy  start the coremedia editor with cm editor and log in as user admin with password admin  open the workflow window and select menu file load    upload the file properties corem data aggregator with the file chooser  create a new process of the data aggregator workflow  select file new workflow data aggregator  start the process by clicking the  start  button    verify that the process is running        start the object analyzer  the object analyzer provides information about the content repository to analytics  in this sample scenario  it will only be used to map technical content ids from the cae click tracking logs to human readable content names  per default configuration derived from the content path names   the object analyzer can be started after the data aggregator process has completed the first iteration as it requires the data aggregator to initialize the analytics database    verify the object analyzer configuration  which can be found below the directory  cms installdir  config objectanalyzer spring    open the file  cms installdir  config objectanalyzer spring proactiveengine properties  verify that the repository entries point to the cms and the jdbc properties correctly names the analytics database configuration  database driver  uri  username and password   start the object analyzer  call bin cm objectanalyzer run from the cms installation directory      start the cae hosting the menusite applications and the dashboard  go live  start the cae hosting the web applications menusite live  menusite view and the analytics dashboard  invoke  cm httpd run  from the  tomcat bin  directory  and verify that both applications are deployed  check if the click tracking web application is running by calling http   localhost      menusite live servlet  from your browser  check if click tracking is enabled in the menusite live app by calling http   localhost      menusite live servlet analyticslog  the resulting page  an error page with error code      should read  parameter  mode  not given   check if the menusite view web application is running by calling http   localhost      menusite view servlet  from your browser   now that we have built and deployed the menusite application instances  we will start the data aggregation process       verify your setup  you have to check if all components of the analytics engine are properly working  open the  live  menusite application in your browser at http   localhost      menusite live servlet   click through the application  open the workflow window of the coremedia editor and check that the data aggregator process is still running   select the data aggregator workflow from the bottom pane on the left  watch the workflow variables in the variable view of the right pane  after some   minutes  the variables should have similar time values close to  now   with a difference of at most   minutes  sessions timed out   minutes ago   if any of the variables display values in the range of           no logs have been read or the log provider  the menusite live application  could not be found    if not log provider could be found  check the entry in   properties corem workflowserver properties  the logprovider property should point to the url of menusite  with an additional  analyticslog appended to it  open the log provider url in a browser window  if the provider is active  it should respond with a  mode parameter missing  exception     open the  menusite view  application in another browser window at http   localhost      menusite view servlet   you should see in site analytics overlays  verify that the analytics dashboard is reachable by calling http   localhost      analytics dashboard view from your browser  all reports should be empty  but not red   if all reports are red  except for the internal searches  it is a good indication that you forgot to copy the oracle drivers  the detailed error reason can of course be found in the tomcat log at  tomcathome  logs  in the file localhost log       watch coremedia analytics work  you are finished with the installation of the coremedia cms system including coremedia analytics  in order to watch reports  proceed as follows  open the menusite live application in your browser  calling http   localhost      menusite live servlet  click through the application  now open the menusite view application in another browser window at http   localhost      menusite view servlet   you should see in site analytics overlays reflect your clicks after short term  some one to two minutes   open the analytics dashboard in another browser window http   localhost      analytics dashboard view in a different browser      
  the dimension tables shown in the previous diagram were already discussed in conjunction with the fact tables  in the following  only the actual permanent report tables are discussed  which are marked using the  permanent  stereotype   you can see that all report tables contain an xx placeholder in their name  there is one of these tables for each time interval type as described in section  in the actual table name the xx is replaced by the interval type code   pageviews xx  these tables store in the column eventcount the number of page view events of a certain page in a given interval  page and interval are identified by the columns pageid and eventintervalstart  the column site redundantly stores the site to which the page under examination is associated   pageentries xx  similarly to the tables pageviews xx  the tables pageentries xx count page view events  but the count is restricted to those events for which the page view is the first event in a session   pageexits xx  similarly to the tables pageviews xx  the tables pageexits xx count page view events  but the count is restricted to those events for which the page view is the last event in a session   totalviews xx  these tables store in the column eventcount the number of page view events for a certain site in a given interval  site and interval are identified by the columns site and eventintervalstart   totalentries xx  similarly to the tables totalviews xx  the tables totalentries xx  count page view events  but the count is restricted to those events for which the page view is the first event in a session   totalexits xx  similarly to the tables totalviews xx  the tables totalexits xx count page view events  but the count is restricted to those events for which the page view is the last event in a session   
  the dimension tables shown in the previous diagram were already discussed in conjunction with the fact tables  in the following  only the actual permanent report tables are discussed  which are marked using the  permanent  stereotype   you can see that all report tables contain an xx placeholder in their name  there is one of these tables for each time interval type as described in section  in the actual table name the xx is replaced by the interval type code   extsearches xx  these tables store in the column eventcount the number of references from an external search engine using a certain search term to a certain site in a given interval  search term  site and interval are identified by the columns searchterm  site and eventintervalstart   intsearches xx  these tables store in the column eventcount the number of searches on the coremedia search engine for a certain search term in a given interval  search term and interval are identified by the columns searchterm and eventintervalstart   totalextsearches xx  these tables store in the column eventcount the number of references from an external search engine to a certain site in a given interval  site and interval are identified by the columns site and eventintervalstart   totalintsearches xx  these tables store in the column eventcount the number of searches on the coremedia search engine in a given interval  the interval is identified by the column eventintervalstart  
  the site dimension table shown in the previous diagram was already discussed in conjunction with the fact tables  in the following  only the actual permanent report tables are discussed  which are marked using the  permanent  stereotype   you can see that all report tables contain an xx placeholder in their name  there is one of these tables for each time interval type as described in section  in the actual table name the xx is replaced by the interval type code   uniquevisitors xx  these tables store in the column eventcount the number of distinct identifiable visitors who viewed a certain site in a given interval  site and interval are identified by the columns site and eventintervalstart   totalanonymousviews xx  these tables store in the column eventcount the number of page views that could not be associated with an identifiable user for a certain site in a given interval  site and interval are identified by the columns site and eventintervalstart  
  this manual provides information on the customizing of the coremedia editor   chapter   outlines a coremedia editor overview  chapter   describes the customization of the editor using the xml configuration files  chapter   shows how to use the editor api for own extensions  chapter   contains a reference of all xml elements and delivered classes for customization   
  content management covers creation of content in the repository and analysis of used content  there are basically two ways to populate the content repository   manual editing importing external content  out of the box coremedia cms supports manual creation of content by a variety of clients which are open for customization  in addition  customized clients could be created from the scratch using different frameworks  described in section   the coremedia editor  a standalone java application  configuration and customization of this editor is covered in the editor developer manual  the webediting server  a servlet which serves the coremedia webeditor for content editing  the webeditor offers nearly the same functionality as the coremedia editor but needs less installation  the webdav support  which allows to access the coremedia cms by webdav enabled applications  see the administration manual for details   the importer which is used to adopt existing external content  e g  from legacy systems or content providers  it must be customized concerning the location and the format of the source content  see the importer developer manual for details   for analysis of the content repository and the acceptance of your websites in the internet  or intranet  there is coremedia analytics  it offers a set of predefined detailed reports  the analytics dashboard  and easy to use reports directly integrated with the preview of your web site  the in site analytics   you might extend both report types by your own analytics report  see the analytics developer manual for details  
  the bundle element of the xml file defines the bundle file to use for localizing the coremedia editor and for user defined properties  the file defined in the bundle element  will be looked up by the coremedia editor and will overwrite the default values  for the bundle shown in the example above  the following file has to be created in the classpath   cminstallationdirectory  classes      my bundle properties for german localization   my bundle en properties for english localization   in this file  name value pairs in the format my column title my column title are used  if  my column title  matches the value of an attribut name in the element  columndefinition   then  my column title  would be the name of a column shown in the coremedia editor  it is also possible to store bundle files for other languages simultaneously  for example  you can store the english names in a file bundle en properties  more details can be found in section           as a default  this element is used in the editor startup xml file  
      attribute    description    name    this attribute is used for configuring the name of the property which should be initialized or validated     initialvalue    using this attribute  the value can be entered with which the property is initialized  see section for more details     validpattern    this attribute is used for entering a regular expression against which the content of the property is checked         
      attribute    description    class    this attribute gives the name of the class which checks the content of the field for desired properties  this test is carried out when check in  see section           for predefined classes      varies     this entity stands for further configuration possibilities which depend on the api of the class  the specific configuration possibilities must be obtained from your developers  
      attribute    description    class    this attribute gives the class which presets the fields on initialization of the document  see section           for predefined classes      varies     this entity stands for further configuration possibilities which depend on the api of the class  the specific configuration possibilities must be obtained from your developers  
      attribute    description    class    name of the class in which the sorting comparator is defined  the class must contain a public constructor without arguments and must implement an interface depending on the objects to sort  see the api documentation and section                 
  the predicate for filtering is entered with the  predicate  element  the provided filter classes are described in section            different objects can be filtered   the documents shown in the document overview of the coremedia editor can be filtered  due to different conditions  if the  predicate  element is used in a  filter  element   the folders shown in the folder view of the coremedia editor can be filtered  if the  predicate  element is used in a  treefilter  element   the document types which can be used in the editor  e g  which can be created  copied  moved etc    if the  predicate  element is used in a  documenttypes  element  that is the document types defined in the  documenttype  element inside the  predicate  element are no longer accessible  negative list   the workflows offered for initiating in the menu file new workflow    can be filtered  if the  predicate  element is used in a  processes  element   the workflows and tasks shown in the sub views my tasks  offered tasks and my workflows of the workflow window can be filtered by custom predicates  if the  predicate   element is used in a  workflow   element   
     attribute   description   class   name of the class with the predicate for filtering  own classes must implement the interface predicate  depending on the parent elements different object types will be filtered  see section             if you enter no class attribute the default predicates are used as described in section   
   attribute description historyiconcount   here you can enter the number of versions for which the status icon is shown in the version history of the document window  for example    document type  link  historyiconcount        the following values are possible       show the icon for all versions  not recommended       show no icons in the  version history   n  show icons for the last n versions  default value is    note  the value should not be chosen greater than    otherwise the editor slows down    type name of the document type for which the view is configured  viewclass here you can enter the class which should be used for displaying the documents  normally you would not enter anything  and therefore use the default hox corem editor generic genericdocumentview  you can use the tabbeddocumentview class for a tabbed view of the properties  see section           and the description of element tab below   compact the order of properties of a document in the coremedia editor depends per default  compact false  on the order defined in the document types xml or editor xml file  if you set compact true properties which do not use the full window width  int  date  will be shown consecutively    varies  this entity stands for further configuration possibilities which depend on the api of the viewclass  the specific configuration possibilities must be obtained from your developers   
  using this element of the xml file  the filters in the explorer window are configured  you will find predefined filter predicates in section            
   comparator    see the description in  configuring document types  in this chapter  
  using this element  a column in the document table view is defined      attribute  description  name  name of the column which is shown in the header of the column   class  this attribute is used for selecting a class for displaying the column  e g  intcolumn  stringcolumn see section           for details   this determines the field type which can be displayed  furthermore  the class sorts the contents of the column    width  this attribute is used for defining the minimum width of the column in pixels  if the window width is smaller than the total sum of all column widths  a scroll bar appears  scaling for a larger window is controlled with the attributes weight and resizable  the default value is     pixels   weight  this attribute gives the relative weight of a column in the scaling  rational numbers are entered  the default value for all columns is         resizable  this attribute is used for defining whether a column is resized at all  the default setting is  true   i e  the column is enlarged  resizing can be switched off with  false    searchfield this attribute can only be used for column definitions in the  search  element  set it to the name of the search engine s index field that should be used for sorting  the field must be sortable in the search engine  and the search engine feeder must set its value accordingly  you can either use predefined index fields or define custom ones in the index profile of the search engine  for the latter case  see the administration and operation manual how to set custom fields with the search engine feeder     
  this element is used to define a renderer class  which will be used instead of the predefined renderer of the column class  see example   you will find predefined renderer classes in section            
   columndefinition   see the description in  configuring windows with table views  and in section             
     attributes   description   editorclass   editor class to be used for showing the variable  see section           for a listing of the editor classes    name   name of the variable to be shown  as defined in the workflow definiton  
     attributes   description   editorclass   editor class to be used for showing the variable  see section           for a listing of the editor classes    name   name of the aggregation variable to be shown  as defined in the workflow definiton  
  with the help of the editor xml file you can define the fields of a document type which should be displayed in the document window   you can configure the following settings   which fields are displayed  which fields can be edited  which fields must be filled  how is the content of a field displayed  the initial values of the fields of a newly created document  how the content of a field is validated at check in   the configuration possibilities are shown using a document of type dish  the following figure shows such a document without specially configured fields  a dish document type could of course have completely different fields in your system  or not occur at all   the document has no fields of type blob and integer  however  the configuration of these fields can be carried out analogously to the configuration shown  the editors for these two field types can be found in section            
  define free text style group  if you want to define a style group without pre defined style classes where the user can enter own text proceed as follows  define a style group without style classes  eg    freetext  background  blue      add the style group to the content editor as explained in chapter   this style sheet group will only appear in the attribute editors but not in the tool bar  
  after defining the new style group and style classes you can localize it for use in the content editor   follow these steps   add a bundle element to the editor startup xml file  the bundle element defines the localization file to use   create the localization file in the appropriate directory   enter the localization entries   restart the content editor    if you do not localize your entries  the names will be taken from the css file    please read chapter for more details on localization    enter the localization entries   the following keys can be used to localize your stylegroup    richtext stylesheet  stylegroupname label  label of the stylegroup used in menus   richtext stylesheet  stylegroupname toolbarlabel  label of the stylegroup in the tool bar  usually empty  since icons are used mostly   richtext stylesheet  stylegroupname mnemonic  key mnemonic for the stylegroup   richtext stylesheet  stylegroupname tooltip  tooltip shown on mouse over   richtext stylesheet  stylegroupname image  url of a small         icon used in menus   richtext stylesheet  stylegroupname toolbar image  url of a small         icon used in the tool bar    the following keys can be used to localize each style option    richtext stylesheet  stylegroupname    styleoption label  label of the style option   richtext stylesheet  stylegroupname    styleoption tooltip  tooltip of the style option   richtext stylesheet  stylegroupname    styleoption image  url of a small         icon used for the style option   richtext stylesheet  stylegroupname   removeclassattributevaluelabel  label of the style option which removes the formatting  usually       is used   richtext stylesheet  stylegroupname   removeclassattributevaluetooltip  the tool tip of the remove option    example     here you see the localization of the inline format style group with the code style option defined previously  the image options have been omitted    richtext stylesheet inlineformatlabel text format  richtext stylesheet inlineformattoolbarlabel   richtext stylesheet inlineformatmnemonic i  richtext stylesheet inlineformattooltip selects special options for inline text  richtext stylesheet inlineformat  codelabel code  richtext stylesheet inlineformat  codetooltip formats text as code  richtext stylesheet inlineformat  removeclassattributevaluelabel      richtext stylesheet inlineformat  removeclassattributevaluetooltip removes inline formatting   in image you can see the result of the localized style group   
  general hints  use the simplevalidationexception instead of validationexception since validationexception is abstract  the constructor takes parameters for error messages and hints for problem resolution  these parameters are in fact property names for the property file bundles  see the cap editor api for details   don t try to change any documents in the validator  violating this rule may lead to deadlocks  inconsistent states  swallowed events etc  since the check in locks the proxy  which prevents events from the server to be processed  thus  you see inconsistent states in your validator   integrate your validator into the coremedia editor using editor xml  you can integrate your validator into the coremedia editor using the element validator of the editor xml file as shown in example   
  a property language resolver factory  is used to determine the language of a property which will be used for the spellchecker   interface to implement  own property language resolver factories must implement the interface hox corem editor propertylanguageresolverfactory with the method getlanguageresolver  in addition an inner class must be created which implements the interface languageresolver  see example    parameters to use  the getlanguageresolver method is called with the following parameters  
  property editors are used to edit properties in the document view of the coremedia editor  there are a lot of property editors provided by coremedia  see section  but sometimes it might be useful to extend the editors due to own needs   interface to implement  all property editors implement the interface propertyeditor or one of its sub interfaces  see javadoc   nevertheless  you will normaly subclass one of the existing property editors instead of implementing propertyeditor or its sub interfaces  if you want to support search and replace within the property  then the property editor must implement the additional interface searchabletextcomponent  and its method issearchable    must return true  search and replace affects the search and replace dialogs and the global search and replace workflow  the file cap examples jar  contains a simple example for a property editor with search and replace functionality  basicstringeditor   classes to subclass  the most common way to write own property editors is to subclass one of the existing editors  see section for a list of supplied property editors   integrate your property editor into the coremedia editor using editor xml  you can integrate your property editor into the coremedia editor using the attribute editorclass of the property element as shown in example  
  localization of the attributes can be done as described in chapter  simply add the language suffix after the  mybundle  part of the name   example   the name of the french version would be   mybundle fr properties 
      step    description         extend genericdocumentview    public class mygenericdocumentview extends genericdocumentvie         get the standard components from the superclass    jcomponent component  super getcomponent           now you can get references on the manager components and register your command as described in section    commandmanager commandmgr   getcommandmanager              return the new jcomponent        return component 
    step  description      extend explorerview     public class myexplorerview extends explorerview     overwrite the getcomponent method      public jcomponent getcomponent           get references to the commandmanager the listenermanager and or the toolbarmanager and or the menubarmanager     commandmanager commandmgr   getcommandmanager    listenermanager listenermgr   getlistenermanager    toolbarmanager toolbarmgr   gettoolbarmanager    menubarmanager menubarmgr   getmenubarmanager         now you can get references on the manager components and register your command as described in section     commandmgr registercommand  makecheaper   new com coremedia extensions myfirstcommand           call the super method getcomponent    it s important to call this method after you have associated the command with an activation model   super getcomponent      return the explorerview       return this        
   step description   create the command     public class insertelementcommand extends tagactioncommand   public static string command name    insert element   public insertelementcommand      super command name         register the command  see section for details     create the action you want to perform  the name of the action must match the name of the command above  the following code shows an example action which inserts an image into the richtextpane     public class insertelementaction extends abstractlinkaction     public insertelementaction         super insertelementcommand command name          public void actionperformed actionevent event        jeditorpane editor   geteditor event       stylededitorkit kit   getstylededitorkit editor       xhtmldocument document   getxhtmldocument editor       document removeselection editor       string uri   getreferencetointernaldocument              blobdatapropertyname       document insertimage kit  editor  uri           subclass hox corem editor toolkit property richtextpane  e g  as myrichtextpane  and override the createdefaulteditorkit   method to return your own richtexteditorkit    define your action in the editorkit class and override getactions to add your custom action to the action array     private final action insertelementaction   new insertelementaction    public action   getactions       return textaction augmentlist super getactions    insertelementaction       configure your myrichtextpane in the editor xml file as described in section    
  integrate your command into the coremedia editor using editor xml  there are no elements in the editor xml to integrate the commands directly  you need to subclass an editor or view class     integrate the command into the document view        in this case you need to extend the hox corem editor generic genericdocumentview class  the class can be added to the editor xml file using the attribute viewclass   of the element document  see section for an example      integrate the command into the explorer view        you simply need to set your own explorer view using the attribute explorerviewclass of the element framefactory in the editor xml file  see section for an example     
  a resource naming factory creates and modifies names of resources and folders  this is intended to enable customization of how resources and folders are named or renamed in different projects   interface to implement  own resource naming factories must implement hox corem editor resourcenamingfactory  please read the editor api for more details   classes to subclass  the easiest way to write own resource naming factories is to subclass basicresourcenamingfactory and to overwrite the appropriate methods  please read the editor api for more details   integrate your resource naming factory into the coremedia editor using editor xml  you can integrate your resource naming factory  into the coremedia editor using the attribute class of the resourcenamingfactory element as shown in example   
   attribute value default description addstylesheetgroups  stylesheetgroupname    usedonelement   usedonelement             using this attribute  you can assign a style sheet group defined in the coremedia richtext     css file to a property  the added style groups appear automatically in the corresponding attribute editor and in the toolbar  you need to replace  stylesheetgroupname  with the name of the style sheet group as defined in the  css file and  usedonelement  with the name of the element to which the style should be applied  the elements p  table  tr  td  li  ul  ol  a  img from the coremedia richtext     dtd can be used  in addition the special keywords inline  block and flow can be used  inline stands for any inline element  block for any block element and flow for any possible element  see chapter for details   a special keyword cannot be combined with any other element or keyword   if you want to use a free text field to enter the value of a style sheet group you have to add  string behind the name of the style sheet group  be aware  that this free text will not be rendered specifically  because it is not defined in the coremedia richtext     css file  it will appear as ordinary text  but you can define additional combo box entries e g  for some default values which will be rendered as defined in the css file   example  addstylesheetgroups   mygroup  string td  mygroup  string  showunknownstyles true  false true if this attribute is  true  unknown styles will be shown in the attribute editor along with a button to remove them from the element  if set  false  the unknown styles will not be shown  nestedtablesallowed true  false true if this attribute is set  true  you are allowed to use nested tables in the richtextpane  maximumtablecells integer     this attribute defines the maximum number of table cells allowed for a newly created table  spellcheckingenabled true  false true this attribute enables or disables spellchecking for the rich text pane  internallinkdocumenttype document type  using this attribute  you can set a default document type used for the internal link chooser  e g  if you set internallinkdocumenttype  article  only article documents will be shown in the chooser by default  internallinktarget new  replace  embed  other  none replace using this attribute  you can configure the default targets for internal links in the richtextpane externallinktarget new  replace  embed  other  none new using this attribute  you can configure the default targets for external links in the richtextpane imagedocumenttype document type  using this attribute  you can set a default document type used for the image document chooser  e g  if you set imagedocumenttype  image  only image documents will be shown in the chooser by default   
  the following attributes disable the respective menu items of the richtext pane   enabletableattributes  false   enabletablemodifying  false  enabletablecellmodifying  false  enableinserttables  false  enabletables  false  enableclassattributes  false  enabletextalignment  false  enablenumberedlists  false  enablebulletlist  false  enablelists  false  enablelanguages  false  enablelistindention  false  enablelistoutdention  false  enableinternallinks  false  enableexternallinks  false  enablelinks  false  enableinsertimages  false  enablesubscript  false  enablesuperscript  false  enablestrikethrough  false  enableunderline  false  enablebold  false  enableitalic  false  enableremovetextformatting  false  enablefontsize  false  enablefontcolor  false  enablefont  false  enablebackgroundcolor  false  enableheadings  false  enableblockquote  false   if these attributes are set  false   you can disable the respective menu items and tools of the richtext pane  default is  true   you must not use enabletables with other table settings  e g enabletablemodifying   enablelinks with other link settings and enablelists with other list settings  in the following  you will find child elements of the  property  element with the editor class richtextpane  you can use these elements to define the transformation of html elements of text in the clipboard into elements of the coremedia richtext     dtd  see example  and to configure the file creation dialog   this configuration affects copying within a richttext pane as well as between an external application and a richtext pane  html elements which are neither configured using   pastetransformation  nor included in te standard configuration  see javadoc com coremedia cap gui richtext richtextpasteconfig  will be ignored   the file creation dialogs of the richtext pane is used when you move a blob from the file system into a richtext pane  use the child element   newdocumentdialogsettings  for your settings    newdocumentdialogsettings   child elements   parent element   property   use the  newdocumentdialogsettings  element if you want to customize the file creation dialog  
     class   description   datepredicate   filters out documents which are older than the current date minus an offset which can be set  using the attribute relativeoffset  the unit of relativeoffset is milliseconds  you have to set the name of the document property to check  using the attribute name   example    explorer name  my configurable explorer        filter name    days modified date filter          predicate class  datepredicate  name  modificationdate   relativeoffset                     filter          mappredicate   filters out specially defined documents  to do so  two sub elements of  predicate  are provided    filtermap   in this element  the attribute document can be used to assign the document type which should be filtered and the attribute property can be used to assign the property which should be evaluated    filterset   in this element  the attribute filter can be used to define the string which should be filtered  only exact matches will be filtered  the check is case sensitive   example    predicate class  mappredicate       filtermap document  article  property  headline        filterset filter  sports       predicate   all documents of type  article  with exactly the string  sports  in the property headline would be filtered   if you define a name for this filter in the  filter  element  you need to create a custom bundle  see section         for localization  containing this name    undeletedpredicate   filters deleted documents   you need to set the attribute name of the  filter  element to  undeleted filter     publishedpredicate   only displays published documents   you need to set the attribute name of the  filter  element to  published filter     unapprovedunpublishedpredicate   displays documents which have been neither published nor approved   you need to set the attribute name of the  filter  element to  unapprovedunpublished filter     tobeapprovedpredicate   displays documents which have been moved  renamed  marked for deletion or where the latest version has not been approved   you need to set the attribute name of the  filter  element to  tobeapproved filter     tobepublishedpredicate   displays documents which have been moved  renamed  marked for deletion or for which a new version exists  this has been approved but not published yet    you need to set the attribute name of the  filter  element to  tobepublished filter   
    validator  description  setvalidator     using this class several validators can be combined as subelements validator of the element validator  setvalidator  uses the validator  interface and replaces the deprecated setvalidator class    example            documenttype name  text               propertytype name  content                   validator class  setvalidator                          validator class  my very own textvalidator                                 validator class  my very own spellvalidator                               validator class  my very own addvalidator                        validator               propertytype          documenttype    notempty   this validator checks whether entries have been made in a field  if the field is empty  an error message is created and the document is not accepted for checking in  the validator must be named as the value in the attribut class of the element  validator   notempty  uses the validator  interface and replaces the deprecated notempty class  genericvalidator  this validator checks whether a field is filled with the appropriate pattern  if the entry is wrong  an error message is created and the document is not accepted for checking in  the validator is called implicitly  if the attribut validpattern of the element  propertytype  is used  as a validpattern any regular expression can be used  see the element  propertytype  in section              minmaxintegervalidator    this validator checks whether a field is filled with an integer in the appropriate range  if the entry is wrong  an error message is created and the document is not accepted for checking in  this validator must be set with the class attribut within the element  validator   the min and max values can be provided with the attributs min and max    example   validator class  minmaxintegervalidator  min     max         linklistvalidator    this validator checks whether a linklist field is filled with a minimum  attribute minlength  or a maximum  attribute maxlength  number of entries  it also checks if a field is filled with unique entries only  attribute uniqueentries  and if the entries are all below a specified path  attribute path     example   validator class  linklistvalidator  minlength     path   looks     thus  at least one entry must be contained in the linklist field and the documents belonging to the entries must be located below the folder  looks   alwaystruevalidator this validator always validates to  true   if you use multiple editor xml configuration files  see section  you can use the validator to override other validators   
  this importer developer s manual provides coremedia know how about the importer and   in chapter   you will find a coremedia system overview  chapter   introduces the different importers which can be used with coremedia cms       in chapter     you will find a description of the universal xml importer which you can use to import arbitrary xml files  in chapter     you will find a description of the jpeg importer which you can use to import jpeg images   
  content management covers creation of content in the repository and analysis of used content  there are basically two ways to populate the content repository   manual editing importing external content  out of the box coremedia cms supports manual creation of content by a variety of clients which are open for customization  in addition  customized clients could be created from the scratch using different frameworks  described in section   the coremedia editor  a standalone java application  configuration and customization of this editor is covered in the editor developer manual  the webediting server  a servlet which serves the coremedia webeditor for content editing  the webeditor offers nearly the same functionality as the coremedia editor but needs less installation  the webdav support  which allows to access the coremedia cms by webdav enabled applications  see the administration manual for details   the importer which is used to adopt existing external content  e g  from legacy systems or content providers  it must be customized concerning the location and the format of the source content  see the importer developer manual for details   for analysis of the content repository and the acceptance of your websites in the internet  or intranet  there is coremedia analytics  it offers a set of predefined detailed reports  the analytics dashboard  and easy to use reports directly integrated with the preview of your web site  the in site analytics   you might extend both report types by your own analytics report  see the analytics developer manual for details  
  coremedia xml files essentially match the coremedia dtd but the importer does not support the full extent of the dtd  there are both limitations and expansions   the root element is  coremedia   as child elements  multiple  document  elements can arise  each  document  element describes a document  the  document  elements contain in turn one or more  version  elements  the  version  elements contain child elements which can be divided into two groups  field elements and action elements  they describe the content and status of the document  section        describes the field elements and section         the action elements in detail  
  the main components of coremedia xml are the elements  coremedia    document  and  version   these elements provide the structure of  documents  the content is held in field elements below  version  elements    coremedia    coremedia  is the root element  it contains  as children  the documents for import   attributes   xml base gives the basis url for the href attributes which refer to resources  the href attributes can then be given relative to this url  setting xml base is optional  the default value is the file url of the xml file    document    document  stands for a document in coremedia sci   document  elements can be direct children of  coremedia  or specified so to speak  inline  in  linklist  elements   attributes   name and path form the name of the document under which it is stored in coremedia sci  both attributes must be set  path is always interpreted as an absolute path  if the importer finds a document with the same name and the same document type in the target directory a new document version is created  if the existing document has a different type  the import fails  if no such document exists  a new document is created   type describes the document type of the document and must also be set  the permissible values are the types which you have defined when configuring coremedia sci   id identifies the document  other documents may use the id to reference this document  see section           to satisfy the dtd  the id must be entered  even when the document is not referenced  for handling ids  the following rules apply   internal ids are automatically mapped to the corresponding target ids by the importer  how this mapping occurs in detail depends on whether the document is mapped  via name and path  to an existing or to a new document  the explicit allocation of new target ids is not possible via import and is rejected by the importer  if the value is a valid target id and the given name and path does not match the position of the existing document  the document is moved to the new position  if the new position is already occupied by another document  this is not overwritten and the import fails  a target id which designates an existing document of a different document type results in an import failure    version   a document in coremedia sci usually consists of several versions  on import of a document  new versions of the document are created  all content information of a document belongs to a certain version  correspondingly   version  is the only permissible type for child elements of  document   a  document  can contain multiple  version  elements  i e  the complete history of a document can be imported in one step  the  version  elements contain the actual content and the state in the form of field and action elements   attributes   number is irrelevant  since new versions are always created on import and the successive number results automatically from the existing versions of the document  re import of an existing version via the number is therefore not possible  due to the dtd  number must be set nevertheless  if you have only one version element use     as the attribute value  
  the spring framework uses the apache license which you will find in section  in addition  the following notice belongs to a spring framework distribution  
  coremedia cms is a content management system for easy and convenient creation and administration of up to date content  interactive features and personalized web pages    for this purpose  coremedia provides an environment for online editorial workflow processes  users can simultaneously create and edit content and so conveniently maintain a website  integration of contents from print editorial systems  office applications and news agencies  dpa  sid  reuters  etc   is possible via import mechanisms  internet display of the content or creation of various export formats is made possible by the coremedia active delivery server  ads  with its flexible template technology or by the coremedia content application engine  cae    key distinguishers for coremedia cms are transparent editing processes  graded user and rights administration and easy integration into an existing system landscape   the following chapters describe the administration of the coremedia cms system feedcontext   an overview of the architecture of the coremedia cms system in chapter   the preconditions and installation steps for the system including the installation of web start and migration from previous versions are described in chapter   the migration of a previous release to coremedia cms      in chapter   the administration essentials of coremedia cms e g  how to start the components  in chapter   the monitoring of the system covering the watchdog application  and logging in chapter    user administration issues in chapter   the administration of individual system components is described in all of the following chapters   
  the following platforms have been approved for the individual components of coremedia sci and for the approved databases  see section    
  coremedia sci uses repositories for data storage  therefore it requires one or more external relational databases  a correctly installed and activated database is prerequisite for the operation of coremedia sci  how to connect the coremedia system to databases is described in detail for the different databases in configuration in capclient properties   
  the proactive delivery server needs a supported oracle database for use  see chapter   
  you will find the approved components in the following sections   java platforms in  java   operating systems in platforms  databases in databases  servlet containers in servlet   please see also appendix for a complete overview of  rd party software support  
    copy the license file fastsearch lic you obtained for fast into the oeminstaller directory  for fast instream      or into the fastinstaller directory  for fast esp        below the directory where you unpacked the coremedia search engine archive file    start the graphical installer and select the search engine as described in chapter     
    click  next  to continue with the installation   now you will be asked for the destination directory etc  as described in the general installation chapter  after this you will be asked if you want to edit the properties of the server    
    if you want to set up the coremedia content server now  click  yes   if you want to configure later manually  click  no   you have to do the basic configuration in the corresponding property files in the directory   properties corem later  for a detailed description of the properties see chapter      if you decide to carry on with the set up  dialog boxes will ask you for the properties of the selected coremedia sct components  in the subsequent dialog boxes all paths are given relative to the installation directory   now  the dialog box for configuring contentserver properties is shown  
    enter hostname or ip address of the cm server s internal httpd which serves the login service ior  the configuration files and the   jar for webstart in the field cap server http host  enter the port of the cm server s internal httpd which serves the login service ior  the config files and the jar for webstart in the field cap server http port  the field cap server documenttypes shows the wildcards used to search for document type definition files  see section and section for details if you want to change the default setting  if you have chosen to enable the search engine you can configure some properties defining the location of the search engine  please see section for a description of the properties      now the window for configuring sql properties pops up   
  adjust the configuration of database connection in sql properties  the parameters are   sql store driver  this parameter references the jdbc driver of the selected database  the driver is database specific  sql store url  this parameter gives the url where the cm server can reach the database  sql store user  name of the previously created database user  sql store password  password of the previously created database user  for more details see section   sql store dbproperties  this parameter references a database specific configuration file in the directory   properties corem  configuration files for all supported databases are supplied and contain special information for the particular database  they must not be changed  the default file names are  db  properties for a db  database  mssql properties for a microsoft sql server and oracle properties for an oracle database       enter the necessary data  replace  localhost  with the computer name in sql store url where the database is installed  if you are not using an oracle database  the other entries also have to be adjusted  continue with the configuration by clicking  next    now the window for the configuration of the capclient properties opens up  
     the parameter cap client server ior url holds the url where cm components can obtain the ior of the cm server  corba communication with the server takes place via the ior  see also section           enter the location of the ior and click  next       a window opens in which the file editor properties can be edited   
  this dialog box edits the file editor properties      enter the path to the editor configuration file editor xml in the field editor configuration  this field is jointly used from all editors that are remotely started over the web with java web start  in this case the field must contain the following url      http    host   port  coremedia files properties corem editor xml    where  host  and  port  must match the values of cap server http host and cap server http port in the previous dialog box that edits the file capserver properties  for more information on starting an editor with java webstart see section              enter the path to the editor startup configuration file  editor startup xml by default    enter the default setting for the domain of the user in login domain  if you want to login immediately with the default settings enter  true  in the login immediate field  default is  false   continue the configuration by clicking  next     a dialog box appears to configure the file editor xml  for more detail see section           the following parameters can be configured   preview webserver host  this parameter defines the computer where the production preview active delivery server runs  preview webserver port  this parameter determines the port where the preview active delivery server of the content server runs  difference webserver host  this parameter defines the computer where the differencing services run  difference webserver port  this parameter defines the port where the differencing services run  difference webserver uri  this parameter defines the uri of the differencing web application   difference webserver loginport  this parameter defines the default login port to the differencing web application   
    click  next  to continue with the installation   now you will be asked for the destination directory etc  as described in the  general installation information  chapter  afterwards you will be asked  if you want to configure the properties of the server     if you want to set up the coremedia live server now  click  yes   if you want to configure later manually  click   no       if not   make sure to do the basic configuration  in the corresponding property files in the directory   properties corem later     if you decide to configure now  set the component properties via dialog boxes  for a detailed description of the properties see chapter    all path information is relative   now you may configure contentserver properties  
    enter host name or ip address of the live server s internal httpd which serves the login service ior in the field cap server http host  enter the port of the live server s internal httpd which serves the login service ior in the field cap server http port  enter the document type file for the live server in the field cap server documenttypes  if you have chosen to enable the search engine you can configure some properties defining the location of the search engine  please see section for a description of the properties      now the next window pops up for configuration of sql properties   
     the url where cm components can obtain the ior of the cm server is entered in the parameter cap client server ior url  corba communication with the server takes place via the ior  see also section           enter the location of the ior and click  next    if you are installing a slave live server  the window for replicator properties will open  
    if you want to use the analytics engine  check the box and press  next        now you will be asked for the destination directory etc  as described in the  general installation information  chapter  afterwards you will be asked for configuration of the workflow server     if you want to configure the coremedia workflow server now  click  yes   if you want to configure later manually  click  no       if you choose  no   make sure to do the basic configuration in the corresponding property files in the directory   properties corem later     if you decide to configure right now  configure component properties via dialog boxes  for a detailed description of the properties see chapter    in the subsequent dialog boxes all paths are given relative to the installation directory   now  the dialog box for configuring workflowserver properties opens  the reporting properties will only appear  if you have chosen to install reporting services  
      enter the appropriate values into the fields  read section for a description of the workflow server related properties and section for the analytics engine related properties       
  adjust configurations for database connection in sql properties  the database for the workflow server must be same as for the content server  the parameters have the following meaning   sql store driver  this parameter references the jdbc driver of the selected database  the driver is database specific  sql store url  this parameter gives the url where the workflow server can reach the database  sql store user and sql store password  in these parameters  the information about the database user is entered  for more detail see section         sql store dbproperties  by this parameter  a database specific configuration file in the directory   properties corem is referenced  configuration files for all supported databases are supplied and contain special information for the particular database  they must not be changed     enter the necessary data  if the database is installed on a different computer from the server you have to replace  localhost  with the computer name in sql store url  if you are not using an oracle database  the other entries also have to be adjusted  continue with the configuration by clicking on  next    in the following dialog you can configure the file capclient properties  
     the url where cm components can obtain the ior of the cm server is entered in the parameter cap client server ior url  corba communication with the server takes place via the ior  see also section            enter the location of the ior of the content server and click  next    
  if you want to run the coremedia editor via webstart  you don t have to install the coremedia editor  in this case  the webstart editor is installed with the content server  for more information on starting the coremedia editor with java web start see section        
  if you want to install a coremedia editor  proceed as follows  select the coremedia editor option and click  next       now you are asked for the destination directory etc  as described in the  general installation information  chapter  afterwards  you will be asked to configure the coremedia editor     if you want to set up the coremedia editor now  click  yes   if you want to configure later manually  click  no       if not   make sure to do the basic configuration in the corresponding property files in the directory   properties corem later     if you decide to do so  configure component properties via dialog boxes depending on the selected cm components  for a detailed description of the properties see chapter    in the subsequent dialog boxes all paths are given relative to the installation directory   now  the dialog box to configure the capclient properties file is shown  
     the url where the coremedia editor can obtain the ior of the content server is entered in the parameter cap client server ior url  corba communication with the server takes place via the ior  see also section          enter the location of the ior and click  next    now  a dialog box appears to configure the path to the editor properties file  see section           
  this dialog box edits the file editor properties     you can define a user with password and domain for login  enter the data in the fields login username  login password and login domain  if you want the coremedia editor to start automatically with username  password and domain as defined above  set the  login immediate field to true  enter the path to the editor configuration file editor xml  in the field editor configuration    enter the path to the editor startup configuration file  editor startup xml as default   for server installation apply as described in step     continue the configuration by clicking  next     a dialog box appears to configure the file editor xml  for more detail see section           the following parameters can be configured   preview webserver host  this parameter defines the host where the production preview active delivery server or cae runs  preview webserver port  this parameter determines the port where the production preview active delivery server or cae is listening  difference webserver host  this parameter defines the host where the coremedia differencing service runs  difference webserver port this parameter defines the port where the coremedia differencing service runs  difference webserver uri  this parameter defines the name of the differencing web application  prefixed with a slash  difference webserver loginport  this parameter defines the ssl login port used for single sign on  if running in a tomcat container  this port must equal the port configured for the ssl connector in the tomcat configuration file server xml  see enable https for more details   
  now you are prompted for the destination directory etc  as described in the  general installation information  chapter  afterwards  configure the ads     if you want to set up the ads now  click  yes   if you want to configure later manually  click  no       if you choose  no   make sure to do the basic configuration in the corresponding property files in   properties corem later     if you decide to configure right now  configure component properties via dialog boxes  for a detailed description of the properties see chapter    all path information given is relative      the next window configures the server xml file and will only open up if you install tomcat with the active delivery server   
  the default tomcat servlet engine is configured with the file   conf server xml  in general  no configuration is necessary in this file  for the content server the http port of the preview active delivery server is set as default to       while the live server generally has the http port       the loopback port is used to start the active delivery server  the shutdown port which defaults to      is used to shutdown tomcat     click the  next  button   now  the dialog box for configuring capclient properties is shown      the url where cm components can obtain the ior of the cm server is entered in the parameter cap client server ior url   corba communication with the server takes place via the ior  see also section          enter the location of the ior and click  next   click  finish  to exit the installation of the coremedia active delivery server   
  now you can select the proactive delivery server components  see chapter for details on this component      select the component and click  next       the window shown below will open  you can decide whether the default servlet engine tomcat   will be installed or not     
     now you are asked for the destination directory etc  as described in the general installation chapter  after the files have been copied  you will be prompted for configuration of the proactive delivery server     if you want to set up the proactive delivery server now  click  yes    if you want to configure later manually  click  no       if not  make sure to do the basic configuration later     if you decide to do so  configure component properties via the dialog boxes  for a detailed description of the properties see chapter    all path information is relative      the next window is intended for the configuration of the server xml file and will only open up if you install tomcat together with the proactive delivery server   the default tomcat servlet engine is configured with the file   conf server xml  in general  no configuration is necessary in this file  for the content server  the http port of the preview generator is set as default to       while the live server generally has the http port       the default of the shutdown port is       this port is used for shutdown of the tomcat      click the  next  button      now  the dialog box for configuring capclient properties is shown     the url where cm components can obtain the ior of the cm server is entered in the parameter cap client server ior url   corba communication with the server takes place via the ior  see also section          enter the location of the ior and click  next      in the next dialog you can configure the database used by pads  if you have chosen to install the database message service  there are additional properties for the database message service   
  now you can select the jmsreceiver  see chapter for details on this component      select the component and press  next       now you will be asked for the destination directory etc  as described in the  general installation information  chapter  after the files have been copied  you will be prompted to configure the jmsreceiver       click on  no  because further configuration has to be done manually in the corresponding property files in the directory   properties corem    
    select the required importer s  and continue the installation by clicking  next      now you will be asked for the destination directory etc  as described in the  general installation information  chapter  after the files have been copied  you will be prompted to configure the importer     if you want to set up the importer now  click on  yes   if you want to configure later manually  click on  no       if not   make sure to do the basic configuration  in the corresponding property files in the directory   properties corem     if you decide to do so  configure component properties via dialog boxes depending on the selected cm components  for a detailed description of the properties see chapter    in the subsequent dialog boxes all paths are given relative to the installation directory   now  the dialog box for configuring capclient properties is shown      the url where cm components can obtain the ior of the cm server is entered in the parameter cap client server ior url  corba communication with the server takes place via the ior  see also section          enter the location of the ior and click  next       the installation is complete     click  finish  to finish the installation of the coremedia importer   
  if you want to install the coremedia search engine proceed as follows  do the prerequisite work as described in chapter   
    start the coremedia cms installer as described in chapter  you must have administrator privileges to install the coremedia search engine in a microsoft windows environment  select the coremedia search engine option and click  next    the next installation dialog asks for the destination directory  the coremedia search engine will not be installed directly into the specified directory but into a subdirectory searchengine  note  that the subdirectory must be empty when installing otherwise the installation will not proceed     enter the directory and click  next    now a window with the summary of your selections opens up     click  next  if you want to use the selections   now the installation asks you for the directory with the contents of the coremedia search engine archive file  this directory is named oeminstaller for fast instream     and fastinstaller for fast esp      note  that you must have write rights in this directory    
    click the  ok  button to start the installation which may take some minutes   an dialog box informs you that the installation has started  if the installation has finished another window opens up      click  finish  to finish the installation   if an error occurred during installation you might have a look in chapter for some troubleshooting   after installation you should consider installing available hotfixes for fast  the directory hotfix in the coremedia search engine archive file contains available hotfixes and installation instructions  the directory might not exist if there are no hotfixes  
   component description web application template and extensions   installs a cae web application template as a starting point for your own cae development  as an option you can select extensions for the cae  it it possible   but not always useful   to install as many extensions as required with the same cae web application template   the following extensions are available   tracking analytics extension which is mandatory to track users on your website with the analytics engine  read the content applications developer manual for details  in site analytics which you need to show in site analytics overlays in your cae preview  read the analytics developer manual for details  portal extension for your portal applications with the cae  read the content applications developer manual for details  editing services for jsf extension for your editing services and pbe applications with the cae  read the content applications developer manual for details  http cache extensions for your http cache applications  read the content applications developer manual for details  proactive engine application template installs a proactive engine as a template for your own business code integration  read section and the content applications developer manual for details  cae feeder template installs a cae feeder as a template for your own feeding application  read section and section and the content applications developer manual for details  web services engine installs a web services engine  read the delivery developer manual for details  install sample source code installs sample source code for the cae   
  now you will be asked for the destination directory etc  as described in section  afterwards  you will be prompted to configure the content application engine and all installed components      if you have chosen one of the web application templates  editing services for jsf and or the web services engine  you will be asked for the configuration of the server xml file of tomcat   
    enter the appropriate values into the fields and click  next    if you have chosen to install the proactive engine template  the next window opens up  read section for a description of the properties   
     enter the appropriate values into the fields and click  next    if you have chosen to install the cae feeder template  you will be asked to configure the caefeeder properties file  see section for a description of the properties  
  the coremedia analytics engine consists of multiple parts that must be installed separately   one tracking component in every delivery cae for providing access to log data  the object analyzer  the analytics data aggregator  the in site analytics component in a preview cae  the dashboard analytics web application   you have to install all parts of the analytics engine to get the full functionality   except for click tracking  you must configure a connection to the analytics engine database  as long as there are no name conflicts due to document type tables  this may be the same database that is also used for a content server or a workflow server  besides the usual jdbc parameters driver class  url  name and password  you will be asked to specify a database type  this type must either oracle  db   or mssql  indicating an oracle database  a db  database  or a sql server database respectively   after the installation  you have to copy the database driver jars to the following analytics components  analytics data aggregator  object analyzer  analytics dashboard  and in site analytics  only the tracking component does not access the database directly  for web applications  the database drivers should be installed globally for the entire web application container   the database tables will be generated during the first start of the analytics data aggregator  it is not necessary to create the tables manually  however  you must make sure that the analytics data aggregator is started once before all other analytics components   installing in site analytics  for installing a delivery cae with enabled in site analytics  follow the instructions of section  you can track a plain cae or a cae with http cache extension  installing click tracking  for installing a delivery cae with enabled click tracking  follow the instructions of section  you can track a plain cae or a cae with http cache extension  installing the analytics data aggregator  for installing the analytics data aggregator  follow the instructions of section  make sure to check the corresponding option during the installation  while setting the properties  make sure to provide the correct database configuration   
      check the object analyzer box and click  next  to continue   now you will be asked for the destination directory etc  as described in the chapter  afterwards a configuration dialog for the proactiveengine properties for the object analyzter appears   
  now you will be asked for the destination directory etc  as described in the chapter  afterwards  you will be asked for the configuration of the server xml file of tomcat  
  now you are asked for the destination directory etc  as described in section  after the files have been copied and if you have selected to install tomcat you will be prompted for configuration of tomcat     if you want to set up tomcat now  click  yes   if you want to configure later manually  click  no     if you have clicked  yes  the next window will open up in which you can configure the server xml file  in general  no configuration is necessary in this file  if you use more than one tomcat on the same machine you might have to adjust the shutdown port     enter the ports you want to use and click  next    the last window will open up and will approve the success of the installation     click  finish  to finish the installation   
  if you want to install the coremedia search engine please read chapter for the prerequisite work  
  you find a printed version of the install script in section of the appendix  
  in detail  the parameters of a script file for the installer are   destinationdirectory  the installation directory where the coremedia component s  is are to be installed  in this directory  the executing user must possess write read rights  components  selection of the coremedia component s  to be installed  permissible are  contentserver  workflowserver  searchengine  editor  importer  dotnetbridge  ads  pads  contentapplicationengine  editor extensions  webeditorserver  tomcat  unifiedapi  portal  analytics  servertype  selection of the server type  permissible are the content management server   contentmanagement  or  multisite  for an installation with multi site management   the master live server   masterlive   or the replication live server   replicationlive    importformat  selection of the importers to be installed  if importer was selected as a coremedia component  permissible are  imageimport  cm xmlimport  licensefile  file path to the license file   licensefile    for the content server which must be copied to this location before  during installation the file will be copied into the directory  coremediahome  properties corem and renamed to license zip  folder  name of window start menu folder where program icons are installed  you can create a folder structure using the backslash  e g  coremedia production will create a folder coremedia with a sub folder production in the start menu  locale  language selection for the installer text outputs  contentapplicationengine components  selection of the installation of the content application engine  permissible are a standalone template installation   client   a complete cae webapplication   webapp    the web services engine  wsengine   the sample sources  sources   the proactive engine template  proactiveengine template  and the cae feeder template  caefeeder template   contentapplicationengine webapp plugins  selection of extensions for the cae webapplication  webapp    you can choose from  the http cache extension   httpcache    the editing services extensions   editingservices    the portal backend extension   portalbackend    the insite analytics extension   analytics insite   and the tracking for analytics extension   analytics tracking    all of these extensions can be freely combined  pads component  selection of the pads component to be installed  possible are context and receiver  context will install a complete pads  receiver will only install a jmsreceiver  unifiedapi components  selection of the components of the unified api  possible are the libraries necessary for running unified api programs   libraries   and the source code of the interfaces of the unified api   sourcecode    webeditingserver components  selection of the web editing server components  possible are the webeditor   webeditor    the webdav support   webdav   and wage   wage    portal components  selection of the portal components  the portlets for ibm websphere   portlet ibmwps    the portlet for sap enterprise portal   portlet sapep   and the portlet emulation tool   portletemulation    workflowservercomponent install analytics  enabling the workflow server to act as an analytics data aggregator  analytics components  the subcomponents of the analytics engine that should be installed  possible values are  dashboard or objectanalyzer  note that the analytics data aggregator is installed as a workflow server and that tracking is enabled in the content application engine  analytics db    database properties that are used for configuring the analytics database  these values are reused for all components that access this database   for description of properties configuration for selected cm components please see the previous section   graphical installation  or the detailed description of each component in the following chapters   if an error occurred during installation of the search engine please read chapter for some troubleshooting  after installation of the search engine you should consider installing hotfixes for fast  the directory hotfix in the coremedia search engine archive file contains available hotfixes and installation instructions  the directory might not exist if there are no hotfixes  
  the coremedia cms scope of supply contains the documentation of the coremedia cms in html format  in order to use this documentation you need to unzip the cap  versionnr   html zip file into the docs manuals html directory of the content management server installation directory  under unix  copy the file in the directory and use the following commands   unzip cap  rel no   htmldocu zip  this will create subdirectories for all coremedia cms manuals  read section to see how to get the manuals delivered from the content management server  
  if you get serialization errors of the workflow server after updating the system  you need to run the workflowconverter utility  see section          
  in this chapter you will find a short description of which components must be installed and how to start them for the first time after installation  create a database user on your database for each server instance  content management server  master live server and each of the optional slave live servers  install and configure the coremedia components on the content management environment and on the content delivery environment   in the content management environment   you have to install at least the content management server and a coremedia editor or webeditor for the differencing feature of the coremedia editor you have to install the coremedia differencing service  if you execute your own workflows or if you do not publish directly from the editor and the webeditor  not directly is default configuration   you have to install the workflow server  if you want to see a resource layout preview initiated from the editor or webeditor  you have to install an active delivery server or a content application engine  if you want to import data you need to install a importer  if you want to use web services you need to install the coremedia web service engine   in the content delivery environment  you have to install at least the master live server and a content application engine or an active or proactive delivery server listening to the master    if you install slave live servers  you have to install content application engines  active or proactive delivery servers listening to the slaves  in this case you may but you need not to install delivery servers for the master live server       for every coremedia content server instance  copy the database driver files as described in chapter  if your cm content server instances are running on a windows platform  register each cm content server as a windows service with the command cm contentserver install   a    u user  p password  as described in chapter  start the coremedia content server instances with the command cm contentserver start  on windows platforms you can alternatively launch the cm servers from the corresponding start menu item or from the windows services window  see chapter for details   if your workflow server instances are running on a windows platform  register each workflow server as windows service with the command cm workflowserver install   a    u user  p password  as described in chapter  start the workflow server instances with the command cm workflowserver start  on windows platforms you can alternatively launch the workflow servers from the corresponding start menu item or from the windows services window  see chapter for details   now you can upload workflows using the upload utility  see section  for each workflow server instance  the valid names are defined in section        e g execute cm upload  u admin  p  password   n three step publication xml  be careful  if you do not have the unlimited  but the single workflow edition of the workflow server  you can upload only one workflow  your chosen workflow cannot be changed without support of coremedia  please make sure to select the right workflow  the license restriction does not apply to the global search and replace workflow  if you have chosen this workflow  you can later upload one of the other predefined coremedia workflows  but again only once  if you want to use the global search and replace workflow  recommended  you have to upload the global search and replace workflow with the workflowupload utility  execute the command cm workflowupload  u  username   p  password   name global search replace xml and replace  username  and  password  with the user name and password of the admin user  id    respectively  to start this workflow a user must be member of the group composer role  if you have purchased the workflow server  unlimited edition   you can adapt the global search and replace workflow to your needs      if you have a workflow server  unlimited edition   you can continue uploading further workflows in the same way as described for the global search and replace workflow in the previous step  if you want to run your active delivery server in tomcat on a windows platform  register the active delivery server as a windows service with the command cm httpd install   a    u user  p password  as described in chapter  if you want to run your active delivery server in tomcat  on windows or not   start tomcat and the active delivery server from the  tomcatinstdir  bin directory with the command cm httpd start  on a windows platform you can alternatively launch the active delivery servers from the corresponding start menu item or in the service list window you can open with controlpanel administrative tools component services services  local   see chapter for details   start the editor with the command cm editor or from the corresponding start menu item and login as admin user  for security reasons  change the passwords of all predefined users  default settings are password username   make sure to change the passwords in the property files of the affected components also  e g  you change the password for the user importer  you have to change the property import password in the  importer  properties file   be sure that the access rights for these files are set in a secure way  e g  no read rights for group and all   
  this chapter describes requirements and procedures for installation  de installation  and starting of coremedia sci   how to install the coremedia system using the graphical installer is described in section   how to install the coremedia system using the script based installer is described in section   how to update an existing coremedia system is described in section how to uninstall an existing coremedia system is described in section how to start an installed coremedia system is described in section    the section describes the system environment necessary for coremedia sci which has to be set up first to ensure trouble free operation of coremedia sci   coremedia sci is shipped with an installation program for interactive graphical installation and configuration of the software   an automated  script controlled installation without graphical output for distributed installation is also possible  basic configuration of cm components is done directly after the installation   a standard distribution of the coremedia sci consists of the following files   cap  rel no   jar   coremedia sci installer where  rel no   is the current release number cap  rel no  api zip  archive for coremedia api documentation cap  rel no   html zip  the coremedia manuals as html files   cap  rel no   pdf zip  the coremedia manuals as pdf files  cap  rel no   source zip  selected java source files of the coremedia sci  cap  rel no  js  a starter script for the installer with windows vista readme txt  information about the coremedia sci installer install script  template script file for non gui installation notes html  release notes information file changes html  overview of changes cap examples jar  the examples from the developer manuals cm searchengine fast     coremedia search engine archive files for different fast versions and platforms in the searchengine directory  install webstart win jar   web start installation archive for jre  the installer must be executed with the same jre jdk used for running the components  since it automatically adjusts some configuration files of the coremedia system to this java version   a graphical installation under unix requires an installed and running x server   on unix os it is recommended to set up a new user for both installation and operation of the coremedia system before running the installation program   for installation  the file cap  rel no   jar is copied into a directory where the newly set up user has write read rights  if a script based installation is carried out  the file install script must be configured as described in the subsection script based installation  see section          when installing a coremedia content server  the license file should be kept ready  since it will be accessed during the installation  but you can also add it later  
  corba communication  the coremedia sci     incorporates a new corba orb  the definition of callback ports has been eliminated  only one corba port as well as the ior port are now necessary  if you have made any settings to surpass firewalls in the server and or client configuration  consult chapter on how to change your settings  
  the cm exe installed with sci     automatically supports native windows services for starting and stopping coremedia  see chapter for more detailed information  
  db  database  if you use a db  database you need to create a function as shown in example  you can dowload the source from http   www b software ibm com dmdd library samples db      udfs index html where the procedure is described in fnbitand txt   
  document types  the coremedia definition file for document types allows to explicitly declare xml properties with your own dtd now  if you are using your own dtds for sgml texts already or simply want to migrate to the new xml property  please consult section and read section     of the developer manual     the server will  however  accept your old definition without changes  
  cm workflowconverter  before starting the workflowserver for the first time it is necessary to run the workflowconverter utility  see section   
     without workflow customizations   with workflow customizations      install the coremedia cap        system update as usual       install the coremedia cap        system update as usual       start the production server       adapt and recompile all your customized classes with the coremedia        jars       run the workflowconverter utility  for details see section           cm workflowconverter  c      deploy your customizations       start the workflow server       start the production server        run the workflowconverter utility  for details see section           cm workflowconverter  c       start the workflow server  
  migration from coremedia cap relase     to      in order to migrate version     to version       adjust user rights according to the new user rights model  see section       for more information about migrating user rights  for the new spellchecker  a new doctype  dictionary  has been added to the  coremediahome  properties corem required doctypes file  add this doctype declaration to your doctype file  modify active delivery server properties and templates according to the new active delivery server deployment  see section       for more information on active delivery server migration    
  in this section you will find basic information about changes between coremedia sct     and coremedia cms       these changes may be a reason for a migration towards the newest version of coremedia cms  it is assumed that you have a running coremedia sct     system with some custom enhancements which you want to migrate to coremedia cms         common   although coremedia aims to keep backward compatibility to previous provided apis it has been imperative to do some smaller changes  therefore you may encounter classes or methods in coremedia s apis to be changed or removed  when migrating to coremedia cms      you have to adapt those parts of your code which are using the mentioned api changes  those adaptations can be done with only small effort anyway    to identify the amount of work to do  you should have a look at the release notes which are bundled with every release  in these notes you will find documentation of all api changes as well as some hints how to adapt these changes in your custom code  you will also get an overview about relevant adaptations by simply recompiling your custom code having the new java cms      libraries in your classpath  just have a look at all compilation errors and warnings    we strongly recommend to recompile your whole custom code against the new coremedia cms      java libraries before deploying and running this code on a coremedia cms      system    don t forget to use only the new java libraries instead of their older counterpart when running your code on a cms      system  please consider that the dependencies of the java libraries among each other may have changed in cms       therefore the set of libraries needed by a single component may be adapted   content server  configuration  the configuration file capserver properties needs to be renamed to contentserver properties  in addition you have to adjust some of its properties   properties cap server repository  xxx  need to be added by moving corresponded properties cap client repository  xxx  from file capclient properties    property cap server workflow server url needs to be added  properties cap server search  xxx  and cap server feeder may be added but may also be ignored when abandoning the search feature    inside the file publisher properties all properties named publisher remote  xxx  need to be renamed to publisher target  xxx    repository  some changes have been done related to repository s database schema  there is an automatic migration of this schema when starting the new content server the first time  thus there is no need to do those changes manually   servertools  most of the servertools have been redesigned and are now provided with new syntax and semantics  thus the underlying java classes may have been changed too  please consult accordant chapter in this manual   search engine feeder  the search engine feeder needs a user  feeder  which has at least read rights for all documents that should be indexed  see section   if you upgrade from a previous version of coremedia cms you have to create the user manually   workflow server  configuration  the file workflowserver properties needs to be adjusted by   adding a new property workflow server remoteaction handler with a default value com coremedia cotopaxi workflow builtinremoteactionhandler  switching property workflow server adapters directory to a new default value com coremedia cotopaxi workflow unifiedusermanageradapter   repository  an existing workflow repository needs to be migrated manually using the workflowconverter tool  please see further description for this tool inside this manual   api  the workflow client api has been slightly changed  when using custom workflows implementations you should have a look at the api changes described in the release notes    scripting  api  although the scripting api has been re implemented internally  the public part has been kept almost the same  please consult the release notes as well as the javadocs to keep track of this changes   libraries  before running your scripting client under cms      you have to put these additional libraries into your classpath  cap unified api jar  cap client jar  cap base jar  cap workflow jar  coremedia common jar  commons logging jar  commons cli jar  concurrent jar  activation jar  bouncy castle jar  xercesimpl jar and xml apis jar   servlet engine  the tomcat     servlet engine contained in coremedia sct     has been replaced by tomcat      in this context  the default installation path has been changed from tomcat   to jakarta tomcat   for example this may be an issue when using an automatic deployment    furthermore the way of configuring tomcat has been changed slightly between versions     and      please consult the tomcat documentation when using a non standard configuration   coremedia editor  configuration   the editor configuration editor xml has been extended by an element  search   which may be ignored when you don t use the search feature  in addition all  displaymap  elements inside  columndefinition  need to be adjusted by replacing all entries document     with document  content     api  the editor s public api has been changed at several places  please consult the release notes as well as the javadocs to keep track of these changes    ads pads  api  some small changes have been done on the api provided with ads and pads  please consult the release notes as well as the javadocs     configuration  the property liveserver in the configuration file pads xml has been removed and must not be used any longer     libraries  the  rd party library commons logging jar is now part of ads pads  please do not forget to bundle this with your web application    wage  some changes have been done on the standard jsp templates located under templates  and wftemplates   therefore you have to integrate your own changes into these templates    installer  when using the script based installation you have to adjust some names  e g  values of property servertype  inside your installation script  please consult the default installation script and read comments carefully  
  in this section you will find basic information about changes between coremedia cms      and coremedia cms       these changes may be a reason for a migration towards the newest version of coremedia cms  it is assumed that you have a running coremedia cms      system with some custom enhancements which you want to migrate to coremedia cms        common  although coremedia aims to keep backward compatibility to previous provided apis it has been imperative to do some smaller changes  therefore you may encounter classes or methods in coremedia s apis to be changed or removed  when migrating to coremedia cms      you have to adapt those parts of your code which are using the mentioned api changes  those adaptations can be done with only small effort anyway   to identify what changed in the release  you should have a look at the notes html and apichanges html files which are bundled with every release  in these notes you will find documentation of all api changes as well as some hints how to adapt these changes in your custom code     we strongly recommend to recompile your whole custom code against the new coremedia cms      java libraries before deploying and running this code on a coremedia cms      system    don t forget to use only the new java libraries instead of their older counterpart when running your code on a cms      system  the dependencies of the java libraries among each other may have changed in the new release  therefore the set of libraries needed by a single component may be adapted   api  the deprecated interface hox corem common xmlgrammar has been removed  use com coremedia cap common xmlgrammar instead   content server  oracle database tables  some changes have been done related to the repository s database schema  the content server now uses oracle blobs instead of long raws to store blob data in oracle databases  there is an automatic migration of this schema when starting the new content server the first time  be aware  that the migration process temporarily doubles the space requirements of the database  after the automatic migration has completed successfully perform the following steps  stop the content server  restart the oracle instance  start the content server again   when not restarting the oracle instance  a sporadic oracle bug may manifest which corrupts the content of random blobs  afterwards  you should backup the table spaces  because redo logging is turned off during the migration    document types  in previous versions of the coremedia system  indices have been generated automatically for document properties  since  coremedia cms      you have to set an index attribute to this document type  in order to create or keep an index  so  if you migrate from a previous version of the coremedia system and if you want to keep the indices  you have to add this attribute to the document types  please see section for details   events  there are no version approval or publication events any more on the live server  these events are redundant because every content on the live server has to be approved and published  otherwise it wouldn t be there  this change is related to the fact that the unified api does not offer a publicationservice in the live environment  so that the approval state of content is not defined on the live system  anyway    publisher licenses  the publisher now requires a license for the  publisher  service for each user that performs a publication  an additional license is needed for the publisher user himself  to be on the safe side when upgrading from coremedia cms       get a license file containing an entry for service  publisher  where the concurrent users and or named users are those of service  editor  plus service  importer  plus one   workflow server  repository  an existing workflow repository needs to be migrated manually using the workflowconverter tool  please see further description for this tool inside this manual   this is particularly true if migrating an oracle database  because the internal definition columns will be null initially after converting the database schema to blobs   content application engine  configuration  the configuration of the cae has slighly changed concerning linkschemes and controllers  default controllers  e g  contentviewcontroller  are moved to custom controllers xml and framework controllers xml is removed completely  default link schemes  e g  contentlinkscheme  and their mappings are moved from framework linkformat xml to custom linkschemes xml   search engine  api  the interfaces you use to customize the search engine feeder were moved from package com coremedia cap feeder to com coremedia cap server feeder  this affects the interfaces indexdocumentfilter and indexdocument    portal integration  in order to migrate the coremedia portal integration from coremedia cms      to coremedia cms      you need to change configuration on the portlet side and on portal application side  the following subsections describe the changes of both mentioned parts    migration of the portal frontend  the portlets now use the more performant class httpclientimpl for accessing the portal application  therefore you have to change your contentservice xml file to use the new httpclientimpl bean   for example change the following entry    bean class   com coremedia portal frontend service  defaultwebservicecontentservice      property name  name  value  contentservice         property name  endpoint   value  portalapplication webservice url      bean   to    bean class  com coremedia portal frontend service httpcontentservice        property name  endpoint        value  portalapplication httpcontentservice servlet url                bean   migration of the portal application  change the webservice servlet of your cae portal application to the enhanced  httpcontentserviceservlet   instead of    servlet     servlet name webservice servlet  servlet name     servlet class com systinet transport servlet server servlet   servlet class     load on startup    load on startup    servlet   use     servlet     servlet name httpcontentservice servlet  servlet name      servlet class com coremedia portal backend webservice      httpcontentserviceservlet  servlet class           must match  dispatcher  servlet mapping          init param         param name contentservletpath  param name         param value  servlet  param value        init param           must be loaded before  dispatcher  servlet          load on startup    load on startup      servlet   change the value for the parameter contentservletpath to your dispatcher servlet mapping   installer  when using the script based installation you might have to add new information due to the added components   
   direct migration to coremedia cms      is only possible from a coremedia cms       coremedia cms      or coremedia sct     system  if you want to migrate from previous versions you have to do it step by step  e g  if you are currently using a coremedia cap     system you have to perform the following steps  migrate to coremedia sct     apply the changes described in chapter  you do not need to install a cms      system  but you have to do all the api changes and so on  apply the changes described in chapter  you do not need to install a coremedia cms      system  but you have to do all the api changes and so on  migrate to coremedia cms       in this chapter you will find the necessary steps for a migration from coremedia cap     or higher to coremedia cms       
   task involved chapters backup the system   coremedia sci stores content in databases and holds configuration files in the file system  no special tools for backup are provided because the file system and database tools  i e  special backup programs  are sufficient for backup  there are two ways to extract content from the system   read section        to learn about the dump utility which displays content from the database on standard out   read section to learn about the dumpusers utility that writes all users  groups and rules managed in the content server into an xml file   read section        to learn about the serverexport utility which stores content of the database in xml files   in no way use these tools as a replacement for a database backup program  clean up the system   while working with the coremedia sci system new content is produced imported and old content becomes dispensable    read the user manual to learn about the recycle bin archive   read section       to learn how to remove documents completely from the recycle bin and how to get rid of  unnecessary intermediate versions of documents   read section to learn how to remove documents completely from the repository but keep in mind that the tool is intended for emergency cases only  configure the system for  normal  use   during the graphical installation of coremedia sci all important properties can be set  if this has not been done sufficiently or changes become necessary   read the following chapters to find property and configuration files   read section       to learn how to set up a connection with the database   read section       to learn how to provide the url  for fetching the ior of the servers  read section       to learn how to configure the files with the document types and license  the hostname and port of the server   and more    read section       to learn how to set up the mime types   read section         to learn how to configure the generator context   read section         to learn how to configure the servlet container of the ads   read section to learn how to configure the http cache   read section         to learn how to configure the editor    read section           to learn how to configure the language and the browser used  and many more features   monitoring the system   while using coremedia sci  the correct operation of all components has to be controlled  if problems arise  learn to read log files for information about this problem   read section        to learn how to configure and use the watchdog utility to control and restart the components of the system   read section         to learn how to check the status of some components with the command cm  component  status    read section       to learn how to configure the log output of the components  read section to learn how to use jmx management for the components  understanding the server system   coremedia sci is based on a distributed component model with separate content server  master live server and optional slave live server   read chapter   for an overview of the system   read section       to learn how the components communicate with each other   read section       to learn how to start the servers   read section     to learn all the rest about the servers   read section       to learn how to administrate the live server slaves   
   documenttype description example intproperty with an  intproperty   a field s value must be a whole number   intproperty name  priority    stringproperty choosing the settings below the maximum number of characters to be entered is limited to     as defined in length  the maximum byte length would be     bytes as defined in utf length  the attribute utf length is optional  if you do not use this attribute  the value of the attribute utf weight of the  doctypes  element will be used to calculate the maximum byte length   length   utf weight        if you set none of the attributes utf length and utf weight  utf weight     will be used  see below for details  to define the byte length   stringproperty name  author  length       utf length          dateproperty such fields display dates and times  editors for simple input are available  dateproperty name  date    xmlproperty whereas for some properties  such as the author  a simple character string is sufficient  an  xmlproperty  specifies an xml document field  xmlproperty requires a grammar attribute which refers to the dtd or schema of the content   xmlproperty name  text  grammar  coremedia richtext         blobproperty   especially with graphic data you should take into consideration the later output format in document type definitions   for example  a scanned in photo with      dpi is suitable for printing  but not for a web page  scaling images is a complicated business and you should not rely on the rather rudimentary functionality of a browser  instead  there are two better alternatives   use a professional image processing program to adjust graphics optimally to all required sizes and resolutions  and create a field for each required variant of a graphic in the document type  e g  for  original graphic online print  colour print  black and white thumbnail  the second possibility is scaling images with the help of jsp templates  since the result of the execution of the template is stored in the ads cache  this procedure is also very efficient   blobproperty name  graphic  mimetype  image       linklistproperty some documents belong together in terms of content  even if they do not reference each other with internal links in xml texts  for example  images belong to a press report which are not explicitly mentioned in the text as illustrations  the number of images differs from case to case  so that it is not practical to define one field per image in the document type  for such cases there is the  linklistproperty   which holds a list of documents  all documents of such a list must be of the same document type as determined with the attribute linktype  or a subtype of that document type  it is also possible to compute reverse links   linklistproperty name  images  linktype  image      
  the document model browser is a tool for graphical display of document types  their inheritance relationships  their properties  and possibly their views  the document types are displayed as uml class diagrams  see image    a for a screenshot of the document model browser in action  
  in this section  you will find a description of the database schema used by the coremediacms system  the content server analyzes the document types file and automatically creates the database schema from it    resource tables  the following tables hold information concerning resources    documenttypename   this table has the name of the corresponding document type  resources  holds information for each resource existing in the coremedia system   property tables  the following tables hold information concerning properties   blobs  connects blobdata with the document type table  blobdata  contains the actual blobs content in a long raw column   texts  connects sgmldata and sgmltext with the document type table  sgmldata  contains mark up data of an xml property  sgmltext  contains actual text data of an xml property  linklist  connects the document which links with the document to which it links   user management  the following tables hold information for the user management   cmusers  contains the user data   cmgroups  contains the group data  cmusergroup  connects users with groups  cmrules  contains the rules of user groups   the  documenttypename  table  the content sever creates  the following columns for each  property of the described type  properties which are inherited are defined in the parent document type table and in all inheriting document type tables  therefore  you have to change the table of the parent type and the tables of each subtype if you change a property of the parent type     intproperty  column of type number     with the name of the property  stringproperty  column of type varchar  utf   length   the utf   length results from the length defined via the length attribute of the stringproperty multiplied by an utf   weight  by default this factor is three  see section for a description of the utf   length  dateproperty  column of type date with the name of the property and another column of type varchar     with the name  propertyname  tz   in addition  each document type table contains the following system attributes   
  coremedia cms manages content organized in freely configurable so called documents  documents normally contain the information of one entity  they may contain only a single information e g  an image or may merge all information concerning a content object    to have a consistent appearance and to avoid unnecessary effort  templates should be used for the creation of documents  coremedia supports this in the form of document types  which can be designed in an object oriented way    documents as in use in coremedia sci are described by so called document properties  also called fields or properties for short   a document of the type  pressstatement  for example may consist of properties such as   author date title summary textual content accompanying images  on the other hand  an image document has different document fields  e g  dimensions and graphical data   the more a document is structured in specific fields  the more flexible is the access to contents from output templates e g  for web page construction   furthermore  the coremedia editor allows to use document fields as search criteria  so it also pays off here to put some more effort in the creation of document types and to have as many properties as possible   since content type and source format of the documents are application specific  coremedia sci document types are not rigidly programmed  you have the possibility to design the document types and fields that you need to represent the maximum amount of structured information from your documents in coremedia sci  in general  this design process will be done in cooperation with members of the editorial staff   the document types can be defined in one or several xml files  to support a more modular document type assembly  its structure is described more detailed in the following sections  in section you learn how to install your document type file  
  the individual directories contain the following files     bin  start scripts  see section   for unix  cm  and windows  cm exe  cmw exe  as well as the start scripts of the individual coremedia components and utility programs    classes  optional local classes  note  the directory does not exist in the standard installation  it can contain customer specific extensions     config  component   xml configuration files of the component  the  component  directory supports the new modular configuration as described in the content application developer manual    config  component  framework  jar files containing the default xml configuration files that should not be changed    docs manuals  pdf user manuals for delivery from the editors    docs manuals html  html manuals for delivery from the content server and webeditor    etc xml  utility files for the cm xml importer     etc xsl  style sheets for the legacy importers which are adopted to the xml importer framework    etc keys  key files for password encryption in the database  the directory will only be created  when the encryption of passwords in the database is enabled  not default      jakarta tomcat  tomcat servlet container installation  for details of the directory tree see below    lib  runtime resources like java jar files and dtds    lib xml  xml dtds    lib sgml  sgml dtds    lib serveronly  corba classes needed by the cm server    lib ext  customized java classes for the cm editor      properties corem  coremedia cms configuration files in java properties format    var log  log files of the coremedia components  see section     var run  runtime data  e g  process id     var tmp  temporary data     webstart ext  configuration files for java webstart    webstart lib  libraries for the coremedia editor via webstart    webstart images  images for java webstart     
  in order to communicate with the coremedia content live server or workflow server  two open ports are required   the http port to fetch the ior  the corba port for communication   in the default configuration  the corba port changes with every restart of the server which is inconvenient in case of an intermediate firewall  in this case  the port can be set to a fixed value through the property cap server orbserverport in contentserver properties  in the following example  the orb is configured to listen on port         cap server orbserverport           if you want to access the server from  outside  a firewall and the server ip address is not directly accessible  due to network address translation for example   it is possible to establish an ssh tunnel  the tunnel forwards all traffic from the client to the server  of course  the endpoint of the tunnel must be able to reach the server   figure shows the scenario  
  corba is used for the communication between coremedia system components  all coremedia components require the ior of the coremedia server which they want to communicate with  the ior of the coremedia server will be delivered by the server via the http protocol   all components require the ior of the coremedia server with which they want to communicate      the url where to get the ior of the coremedia server is configured with the parameter cap client server ior url  ior url  in the file capclient  properties     the value of the parameter is http    server   port  coremedia ior  instead of  server  you have to insert the name of the computer where the server is running  instead of  port  you have to insert the http port on which the client connects to the server  both values are defined in the capserver properties file  see section      example  the coremedia server host has the name productionserver and the capserver properties file contains the property cap server http port        in this case  you can obtain the ior with the following url     cap client server ior url http   productionserver       coremedia ior  the coremedia content live server embed their own hostnames into the ior which must be resolved by the client machines  if this is not possible by the client  you can configure the server to embed a numeric ip address into the ior  to do so  use the property cap server orbserverhost in the contentserver properties file  in the following example  the orb is configured to embed its numeric address   cap server orbserverhost                 
  as said before  classic coremedia client components read its capclient properties file to access the property cap client server ior url for the ior url of the server  newer cae spring unified api based clients read its spring configuration file  repository xml  capconnectionfactory     to access the server ior  when coremedia servers act as clients to access other coremedia servers  they read the ior url from other configuration files   the content server must know the ior of the master live server during publication      the ior url is stored in the property publisher target ior url of the file publisher properties  see section          the slave live server  when installed  has to communicate with its master live server      the ior url is stored in the property replicator publicationiorurl of the file replicator properties  see section          
  various coremedia components and utilities as shown in example can be started with the command cm  componentname   the command cm is located in the directory  coremediahome  bin   under windows an installed component can additionally be started via the entry in the coremedia program folder in the start menu  two commands can be used to start a cm component    the cm command     with this command the program is started and a console window is opened  in which the process output of the java virtual machine can be seen  the cmw command    with cmw  the component is started directly and a console window does not open   the cm command can use the  nolog option  this option overwrites the output redirect parameter setting of the cm jpif file with the empty value  thus all log output is written to standard out   you will find a description of all server utilities in chapter  other tools which can be started with cm cmw can be found all over the manual   
  note   cm  xmlimport is a freely configurable xml importer  in which the prefix  cm  can be exchanged for any other desired prefix  see section          according to the installation different coremedia components can be selected  on entering the command cm without further details  an overview is given of the installed and executable coremedia components  
  mostly  you have to add another parameter after cm  component name      install  registers the component as windows service  only on windows platforms   see section for details     start  starts the process in the background on unix platforms or as windows service on windows platforms  requires install in the latter case  run  starts the process in the foreground  on a windows platform the process is not started as a windows service and needs no install first  term  signal   stops the process by sending the given signal  only on unix platforms   stop  on a unix platform  stops the service by sending the term signal  waiting for    seconds and then sending the kill     signal if the process is still running  on a windows platform stops the windows service  previously started with start  kill  stops the service by sending the kill signal immediately  only on unix platforms   restart  restarts the service  same as stop followed by start  status  checks whether a service is active or not    threaddump  writes a threaddump to a file    uninstall  unregisters the component as windows service  only on windows platforms    the cm command always changes the working directory to corem home  thus  if a relative path is given as a parameter  e g  with the  script parameter in cm sql  it must be relative to corem home  
  the following coremedia relevant modifications can be configured for the java virtual machine in the java vm args section of the jpif file   the memory usage within the java virtual machine can be configured using the parameters  ms size  and  mx size    ms specifies the initial object memory size and  mx the maximum object memory size  the memory requirement for the components is preconfigured and depends on the main memory size according to the standard hardware recommendations  but can be increased using this parameter if necessary   the orb can be configured to use a fixed corba port using the parameter com sun corba orbserverport as described in section   furthermore  the target of the log outputs of the java process  see section      can be configured with the parameter output redirect   three jpif files cannot be invoked directly with the cm command  they are executed internally   pre config jpif for installation depending settings  in this file  the parameter verbose can be set to false to reduce jvm outputs  on a unix system  the jvm to use is set in this file  module jpif for general environment settings for the java programs in the coremedia system  post config jpif for special coremedia jvm settings   these files are automatically configured during the installation process  in general  these files need not be changed  
  if you have invoked this command successfully  the coremedia component is registered  you can check this using the service list window which you can open with controlpanel administrative tools component services services  local   you can execute the install command as often as you want  but note that the old entry will not be deleted if the value of service name in the jpif file of the component was changed   deregistration of coremedia components as windows services is described in chapter  you can also perform these tasks  and some more  with the help of sc exe  a microsoft command line utility  
  coremedia sci uses file based licenses  only server components  content server and live servers  have a license file on their own  all other components are licensed by the license file of the server they connect to  the license file will be read in from the directory defined in the property  cap server license in the capserver properties file and will be validated each time the licensed component starts  if the license is valid  the component will start properly  coremedia distinguishes between two kinds of licenses     time based license   limits the use of a component to a specific period of time    ip based license   limits the use of a component to a specific computer  defined by its ip address and or host name   both license types can define a valid sci release using the release attribute  if you use time based licenses  the component will not start if the license has expired  in addition  the license file defines a grace period  you receive a notification  after exceeding the grace period  you will see this warning each time you start the coremedia editor and in the log files of the component    both license types may limit the number of clients which can connect to the component simultaneously  this is achieved  using the following concepts     named user   a named user is a specific coremedia sci user  known by the system  each service connects as a user to the server  the attribute named users defines the maximum number of users which are allowed to use a specific service    concurrent user   concurrent users are users which are connected simultaneously to the server  the attribute concurrent users defines the maximum number of named users which are allowed to connect simultaneously    multiplicity   a named user may connect several times to the server  e g  start two editors   the attribute multiplicity defines the maximum number of allowed connections for a named user   use the utility printservices  see section  to get these information and the utility usedlicenses  see section  to free used licenses  if the built in user admin  user id    has no open sessions  that user may log in to the content server even if the licenses are otherwise exhausted  this makes it possible to start the utilities for recovering from a license shortage in any case   example  
  you can control the coremedia watchdog using the cm tool with the options  start stop kill term run restart status   please read section for a description of all options   watchdog  you have to differentiate between a windows and a unix environment  in both cases  the component arguments  the components to be watched  in the command must be defined in the configuration file watchdog xml  see section    windows environment  if you have installed the watchdog as a windows service  see section   proceed as follows  add the components to watch to the java main args property in the  coremediahome  bin watchdog jpif file   e g  java vm args   watch watchcontentserver watchgenerator    start the watchdog with cm watchdog start   stop the watchdog simply with cm watchdog stop   unix environment  if you want to run the watchdog in a unix environment you can either enter the components to watch as described for the windows environment or proceed as follows  start the watchdog with    cm watchdog start  componenttowatch       probedog  for the probedog mode you don t have to differentiate between windows and unix environment  execute the probedog with  cm probedog  component     
  the file watchdog properties configures log actions and the name of the watchdog xml file that contains the actual watchdog configuration  the watchdog properties file defines the following properties   watchdog config  xmlconfigurationfile     this property refers to the xml file which configures the watched components and the triggered actions  the file properties corem watchdog xml is preset here which contains a few common settings for coremedia servers and active delivery servers  log action  n  class  log action  log action  n  selectors  log level    log action  n  initargs  arguments    the default log action writes log message to the file watchdog log  see section       on how to configure log actions       
     result code symbolic name description    ok  the component works properly without errors      unexpected error  an exception has been thrown  that is not caught and handled by the action      timeout  an action has not finished in the specified time interval      error  an action has failed with an unknown error  this is the default code for all unhandled codes in  edge  elements      respawning too fast  an action was executed to often in a specified time interval  see section                   io error  an action has failed with an io error      no licenses  an action has failed because there was no free license      invalid login  an action has failed to authenticate against the coremedia server      corba error    an action has failed because a corba orb raises a corba exception        repository error  an action has failed with an exception thrown in the coremedia server repository      query malformed  an action has failed because the query was malformed  this result code indicates a serious internal error and should not happen      query failed  an action has failed because of a database error       no jdbc driver  an action has failed to load the jdbc driver class  the specified driver class is either invalid  or the jar file is missing in the class path      no connection  an action has failed to establish a database connection  this indicates an internal database error or a configuration problem      sql exception  an action has failed to create or execute a sql statement  the error indicates an internal database error or a configuration problem      insufficient mode  this result code indicates that the current run level of the server is lower than the configured run level     service stopped  this result code is returned by the servicestatus action if the service is not running  either because it has been stopped  or because the run level of the server is too low for the service to run      service failed  the servicestatus action has failed because the service was ended due to a  critical error       service disabled  the servicestatus action has failed because the checked service is not activated  the service activation can depend on the server type  for example  the replicator service is only available on a slave live server      code escalated  the processstatus action has found escalated tasks in the observed process      code toofewinstances  the processstatus action  has found too few instances of the observed process definition      code toomanyinstaces  the processstatus action  has found too many instances of the observed process definition   
   component file property content server contentserver properties cap server management jmxremote url workflow server workflowserver properties workflow server management jmxremote url active delivery server    tomcathome  webapps coremedia web inf web xml   tomcathome  webapps coremedia web inf properties management jmx capgenerator jmx agent xml see section content application engine the corresponding properties file of the component  for example objectserver properties for the cae template  management jmxremote url  
  the coremedia content server is the central component in the coremedia system  among other things  it manages the content repository and the user authorization  like all coremedia components it is based on java technology  at least two coremedia content servers are required to run an online editorial system  the coremedia content management server is the production system used to create and administrate content  in the content delivery environment the master live server receives the approved content from the content management server and makes it available to the active or proactive delivery server or to the cae which generate websites or documents in other formats like pdf  if you are using the coremedia multi site management extension  content from different top level folders can be published to different master live servers   for highest stability and scalable performance  the content delivery environment can be expanded by so called replication live servers  see chapter      the coremedia content servers and the other coremedia components communicate using corba  to build up a corba connection with the server  a client first has to send an http request to the server to get the ior  which contains the necessary connection parameters  to be able to connect  each host involved in the corba connection must be able to resolve the name of the other host through dns   these property files hold the server configuration   capclient properties  clients only  capserver properties sql properties publisher properties  content management server only  mime properties replicator properties  replication live server only   note  the property files may contain additional property entries which are not described in the administration manual  as a rule  these properties are for special  system relevant settings which should not be adjusted by the customer  
  slave live servers have been introduced in chapter    this section describes them in more detail  the slave live server is a complete server installation with its own database instance  like a master live server installation  the slave live server differs from a master live server in the following points     a slave live server needs a different license file  that defines the server type  live     for a slave live server you must configure the replicator properties file  see section     the content of a slave live server is updated in a different way  the slave live server is a replicated image of the master live server  it receives changes from the master live server and updates its database accordingly  in particular  it can track changes after an offline phase  the process responsible for content update is called the replication process or replicator   the following points are important     the active delivery server  ads  no longer accesses the master live server directly   you can install any number of slave live servers  depending on the license    each slave live server accesses its own database instance   multiple active delivery server webserver pairs can access each slave live server  
  these are looked up only once when uploading the workflow  see section for a more detailed description of workflowserver properties  
  coremedia cms has some groups and users for standard operation  so called build in users groups see section  e g  workflow  on the content server   you can add additional users and groups to administrate access rights on the content  coremedia distinguishes between content and live groups  groups which have rules valid on the content management server and groups which have rules valid on the live server respectively   example    you create a news site which offers content in the categories sports  politics  economy and gossip  your editorial staff contains    editors    for each category  each editor has only access to content of his specific field  so you need to administrate at least   additional groups and    users on the content management server each group with different access rights   you can either administrate these users and groups using the build in user administration of the coremedia editor or you can connect the coremedia system to an existing ldap server  therefore coremedia cms supports any ldap server  because ldap has no obvious concept for content and live groups coremedia cms provides a userprovider class  see section and the javadoc   this class differentiates between live and content groups  coremedia provides the pre defined activedirectoryuserprovider to connect to an active directory server  if you use an active directory server you have the possibility to define all groups of this server as live server groups  content server groups or both using the properties  com coremedia ldap contentgroups true com coremedia ldap livegroups true  in the  coremediahome   properties corem jndi properties file   if you want to connect to another ldap server you can extend the ldapuserprovider class for your own user provider  see section and the javadoc    groups need to be connected with rules in order to have impact  in the example above  the group sport might have a rule which allows to read and write content from and into the sports folder  use the user administration window of the coremedia editor to add rules to your groups  read section for details on rights and rules   
  coremedia cms needs some groups and users for standard operation  so called build in users groups see section  e g  publisher  on the live server  you have to create the build in users groups for each installed live server by executing the cm initcontentserver tool for each server  see section     in addition to these build in groups you can add business oriented users and groups  with these groups you administrate access rights on the delivered content  you define the users who are allowed to read content   example   you create a news site which offers standard content for registered customers  gold content for paying customers and platinum content for customers paying even more  the customers might sum up to          so you need to have at least   groups  e g  standard  gold  platinum  on the live server containing         user    it s as likely as not that your company administrates these users on an ldap server  therefore coremedia cms supports any ldap server  because ldap has no obvious concept for content and live groups coremedia cms provides a userprovider class  see section and the javadoc   this class differentiates between live and content groups  coremedia provides the pre defined activedirectoryuserprovider to connect to an active directory server  if you use an active directory server you have the possibility to define all groups of this server as live server groups  content server groups or both using the properties   com coremedia ldap contentgroups true com coremedia ldap livegroups true   in the  coremediahome  properties corem jndi properties file   if you want to connect to another ldap server you can extend the ldapuserprovider class for your own user provider  see section and the javadoc     you must not change the ldapuserprovider after starting the content server with ldap user authentication  if  for example  you have defined content groups first  and change this to content and live groups later  the live server will not notice this change   groups and users or memberships of groups and users are not published or replicated so you have to administrate them individually on each server  there is only one exception to this rule   assume  you have a resource with a rule connected to a group and this group does not exist on the live server  if you publish this resource  a group with the same name will be created on the live server  this group has no members and is no member of another group  it s only a placeholder so that the rule is connected to something  which you have to populate with memberships   groups need to be connected with rules in order to have impact  in the example above  the group platinum might have a rule which allows to read content contained in the platinum folder  for your convenience rules are administrated on the content m server and are published and replicated  therefore the content server needs to know the groups used on the live server  the easiest way to achieve consistency between the two server types is to use the same ldap server with the same userprovider configuration  you can also use different ldap server but you have to ensure that the live groups on live server and content server are the same  groups are identified by their name and domain so this has to be identical on both servers   if you have provided the live server groups to the content server you can use the user administration window of the coremedia editor to add rules to the groups  live server groups are identified by their checked live server group check box  a rule will appear on the live server not until a resource connected to the rule has been published  to maintain data integrity only read rights are allowed on the live server             
  the coremedia content server contains the search engine feeder  which sends content and metadata of documents to the coremedia search engine  the search engine extracts the textual data of the documents  indexes them and provides the possibility to search for these documents  for more information about the coremedia search engine  see section  coremedia search engine    this section describes the integration of the search engine in the content server  this includes the search engine feeder and the search functionality itself  for configuration and operation  see section  configure search engine integration  and section  operation of the search engine feeder    the coremedia content server hides the functionality of the coremedia search engine from its clients  it contacts the coremedia search engine to serve client search requests  the coremedia editor  the coremedia webediting server and custom clients that use the coremedia apis get the search results directly from the coremedia content server  only the coremedia content server connects to the coremedia search engine  
  the search engine feeder of the content server makes documents searchable  in the content delivery environment it is often required to search not only for documents but for content beans of a content application engine  see section  cae feeder  and the coremedia content applications developer manual  section  cae feeder  for the description of the cae feeder  which supports this use case  
  the database must be accessible over the network and should be enabled for the unicode character set  each content server and live server requires a different database user account  the database users must be able to create and delete tables and indexes in their schema   for oracle  see example        a and example        b   manual creation of tables is not necessary  a content server automatically creates tables  the first time it is started  the standard settings of the database or the standard values defined for the database user are used as default for the tables and indexes created  e g  the initial reserved memory  
  there are two possibilities to recover a corrupted master live server database   recovery with master live server s backup stop the master live server  the slave live servers will still be running  however  no publications will be possible  restore the backup of the master live server  restart the master live server  since the slave live servers do have a newer content base than the master live server  no replication is possible and the slave live servers have to be recovered as well   recover the slave live servers as described in section   because a backup for the master live server has been restored  all publications executed in the time between creating and restoring the backup are not available on the live side  you can use the tool republish  see section  to repeat the publications automatically   
  it is not possible to switch from an existing single site system to a multi site system by simply setting cap server multipleliveservers true  please read section for a detailed description of the migration process  
  during migration  a lot of configuration information and code has to be validated or adapted to ensure that it will conform with the new repository structure  you have to test the updated configuration files and programs in a realistic environment  to that end  you have to set up a new test environment  that is converted to multi site mode early on during the migration project  in the following you will learn how to set up such a test system  most changes are quite similar to the actual conversion process that happens at the time of the relaunch  create two new database users for a new content management server and a new master live server  initialize the database users using consistent backups of the existing servers  install a new content management server and a new master live server  release coremedia cms      or later  and configure them to use the new database users  keep the servers in single site mode  start the servers  update the folder structure of the content management server  publish the changes   you might want to perform the required actions using an automated script  so that the script can be reused later on during relaunch   shutdown the content management server    run cm multisiteconverter in the content mangement server installation this will automatically perform the following actions   verifying that the content management server was previously in single site mode and that it is not currently running  updating the database to include correct base folders for all resources  updating the database to mark the schema as multi site enabled  changing the property cap server multipleliveservers in capserver properties to true         start the content management server  update the file publisher properties to include the new top level folder as its single publication target   you may now install and use additional clients as needed   when setting up the new repository structure in step    the ideal way is to put all resources into a single top level folder  except the home and system folders  home and system folders normally contain no published content  see section   if you decide to keep multiple top level folders  there may remain wide links  wide links are links from one top level folder tree to another top level folder tree  because such links might potentially span multiple publication targets  leading to local dead links  they are strongly discouraged and are reported as an error during publication  therefore you might want to execute a query for wide links in the coremedia editor at this point  you might have to rethink your repository structure if wide links cannot be easily cleaned up  
  it is possible to perform an update of the coremedia system at the same time when the multi site mode is enabled  for example  you may want to upgrade from coremedia sci     to the current release of coremedia cms at the same time as making the switch to multi site management  in this case  the new servers and clients to be installed are always using the new release  but they may have to be started in single site mode once before making the switch   when installing the new content management server  make sure to install a single site server  this reflects the fact that the database is still in single site format and will be changed during the actual migration process  immediately after step    of section    you have to stop all live servers and start preinstalled instances of live servers using the new release  this way  another generator downtime can be avoided  after this point  always use the client and server start scripts of the newly installed servers    immediately after step    of section    you have to switch to the new installation of the content management server for the rest of the procedure  that is  when the instructions require you to start a program  you have to start the newly installed program of the target release  the new content management server must initially be configured for single site mode  depending on the source and target releases  additional procedures might be mandatory at this point  see section for additional information    if you are doing an upgrade from coremedia sci     or earlier to coremedia cms      or later  you have to take an additional action after step     you must start the new content management server once and shut it down immediately after it has come up successfully  only after a content management server of coremedia cms      or later has run at least once  you may proceed with step      
  the previous migration steps assumed that your existing content is supposed to be part of one publication target and that the migration to the multi site mode was prompted by the need to add entirely new publication targets  in some cases  you might want to split the existing content among multiple publication targets   the overall procedure remains the same  but some additional steps become necessary   first of all  you have to create more than one top level folder  but still only one folder per site that you will host  distributing the existing content as you see fit  having assigned the content to top level folders  you should run a query for wide links in order to detect misplaced resources or conceptual flaws in the design  after you have migrated to multi site mode  it will be much more expensive to correct such problems   after the generators are up again as per step    of section  perform the following additional actions  install new master live servers to bring the overall number of master live servers to the desired number of publication targets  copy  on the database level  the master live server database for every new server  typically  you create a backup and restore it multiple times  now  perform the same action for replication live servers  if needed  reconfigure the generators to use those live servers that are applicable to the site they are building  at this time  you may switch one generator at a time  effectively reducing the impact on the availability of your site  if a load balancer is distributing requests  reconfigure that as needed during the restarts   you can now proceed with the migration as before  making sure to configure all publication targets in the file publisher properties in step      as all master live servers were initialized as identical copies of the old master live server  they contain content that is not applicable for their publication target  you can destroy that content at any time after the migration is complete  make sure that there is a current backup of the servers and database schemas that will be modified    make sure that all adss and other clients of the master live server and its associated live servers are only using those folders that are published on the replication live servers and not those folders that are to be deleted    in the publisher properties of the content management server  disable the affected publication target by assigning no folder to the publication target    on the master live server  run  cm multisitecleanup  u publisher  p  publisherpassword   foldernames    including the name of every top level folder that you want to destroy on the command line  be careful what content you destroy on which master live server  the content that is applicable for the publication target must not be deleted  obviously  the cleanup tool will check whether some of the resources that are to be destroyed are still referenced from the outside  in this case  a destruction is not possible  the tool performs only those destructions that do not cause dead links  you may have to republish corrected versions of externally referring document and repeat the cleanup  if the destruction fails    re enable the publication target in the content management server configuration    if step   has left part of the resources undestroyed  you can now fix the offending links by changing the document on the content mangement server  creating two new versions of the offending documents  and publishing both documents in succession  because the master live server stores only two versions of any document  all old versions on the master live server will disappear  afterwards  you can go back to step   and try to clean up the remaining resources   this cleanup step should be performed during times of low load  but causes no restarts or cache refills  
  modifying an existing coremedia installation as described in the previous sections results in a period during which the system is unavailable  the duration of that period is expected to be small  typically a few minutes  if the migration is properly planned and tested  after the migration the server and ads caches are refilled  which can be a considerable time  too  depending on the actual load profile  if the overall availability expectations are not fulfilled using this scheme  it is suggested to use multiple replication live servers of which only one replication live server is allowed to replicate the repository structure change at a time  whereas the other replication live servers must have stopped replication  only the ads attached to the live server that is currently replicating have to be switched off and replaced by new ads that can cope with the new repository structure  this way  most of the ads will be up at any given time  this is complex and not normally necessary  though  it also requires much more project specific planning  so that a detailed description is omitted here  in many cases the downtime during steps   to    of section   can be bridged by setting up a webserver delivering a set of static pre generated pages  if that is needed  
  the wish to perform a migration project from single site to multi site mode might arise when a coremedia cms system is extended to host an intranet application besides an existing internet web server  it is also possible that multiple sites that were previously hosted on different servers are about to be unified on a single system   in multi site mode  all content that belongs to a publication target should reside below a single top level folder  therefore  the main target of the migration is to modify the repository structure to reflect this requirement   before the migration  the repository might look like this        articles    home    inbox    news    pictures  whereas afterwards one more folder has been introduced that hosts most of the repository s content        home    live       articles       inbox       news       pictures  after determining the new repository structure  the main step of the migration is handled by the cm multisiteconverter tool  which updates both the database and the main configuration file  still  care has to be taken  because the content management server has to be down while doing the conversion  for typical coremedia cms installations a considerable number of servers  generators  and importers is deployed and an extended downtime that is noticeable to the content consumers is not acceptable  a migration path will be shown  that keeps the visible downtime low   there will be certain aspects of the process described in the following sections that are not directly applicable to your installation  it is therefore important to spend enough time on finding a process that meets your needs  before starting the actual migration project   for a start  we assume that you are migrating to the coremedia multisite management without changing migrating to a different release at the same time  if you want to do so to avoid multiple downtimes  see section  furthermore  we assume that the content that is currently stored in the existing content management server should go to a single master live server  so that you are free to add further master live servers later on  if you want to distribute the existing content over multiple master live servers  see section for details  
  as described in chapter all events are written to the changelog table of the database  the table is never truncated by default in order to enable event replay right from the beginning  nevertheless  you might want to reduce the size of the ever growing table by your own  
  the two login predicate module options are optional   n  is an integer value  if a login predicate is configured  both options must be set  it is not allowed to omit e g  the second option in the table  login predicates are described in ection loginpredicates  the following table contains the module options for ldaploginmodule  
  note  an administrator can manually query and remove used licenses from the database table  see the server tool cm usedlicenses in section  cm usedlicenses section    
  a new group is created by giving it a new name and allocating existing users to the group  the group id is automatically given by the application  choose file new group  or click  on the tool bar or press  ctrl   g  resp   alt   g     name the group  choose the group type      you may choose administrator group to provide administrator rights to the group members or content managment server group to create a non administrative group on the content server  check live server group if you want to create a group for the live server  you have to create the same group on the live server  read section for details on live server user groups      save the group settings   click  on the tool bar  or press  ctrl   s  resp   alt   s   
  if a rule is applied to document types in a directory  the current rights structure for the particular group is passed on to the documents in subdirectories  if another rule should apply in a subdirectory it has to be created explicitly for the particular document types  for available rights and their impact see section   if a user possesses different rights for a resource due to belonging to multiple groups  these rights are combined additively   example  
  assigning licences  because the license limits the number of concurrently logged in users  it may happen that this limit is reached and additional logins must be rejected  this is done on a first come first served basis  whoever logs in first is granted permission  later attempts may fail  when you use coremedia cms to manage the content of a single enterprise  this is normally the desired behavior  when it is important that a new connection is opened  there is always the possibility to ask other users to log out  thereby freeing concurrent licences   when hosting multiple content applications in a single content management environment  you might want to control the logins more closely  you may have legal or operational requirements that a login is possible for certain users  because it is not generally possible to free already assigned licences  the server must take care to reserve licences when they are still available    for example  you might want to ensure that each of your five content applications is granted at least one login  other licenses should be freely distributable  if you have bought eight concurrent licenses  there must not be two content applications that lock up three session each  because there are only two concurrent session for three content applications left  still  there is nothing wrong with one content application that reserves three or even four concurrent sessions   to facilitate the controlled distribution of concurrent licences  a so called login bouncer can be enabled  picture it as guarding the entry to the server based on owner defined rules  in order to enable a bouncer  set the property cap server login bouncers of the file contentserver properties to the location of an xml file that describes the bouncer s configuration  typically  such files are placed in the directory properties corem below the installation directory   the bouncer grants licenses from a number of pools and enforces certain limits to the number of logged in users  both pools and limits apply to that set of users whose names match a given regular expression and who directly or indirectly belong to certain groups   a limit sets the maximum number of licenses that is granted to those users that are subject to the limit  a user may be subject to multiple limits  if even one limit is reached  the user is not allowed to log in   a pool is controlled using two parameters  a minimum size and a maximum size  given that the limits are respected  the bouncer will try to distribute the users and the available concurrent logins among pools in such a way that     every pool receives at least its minimum number of licenses    every pool receives at most the number of users given by its maximum size  and   every pool receives at least as many licenses as users   upon every login attempt it is checked whether a new license can allocated to the pools  possibly reassigning licenses across pools for users that are already logged in   minimum sizes guarantee that a certain number of users whose name matches the pools pattern can login  no matter which other users try to log in  these licenses are set aside until a user of that pool demands a license  maximum sizes allow the number of licenses provided to grow as needed  contrary to limits  additional users that match a pool s pattern may login after the pool has been exhausted  however  in this case there must be some other applicable pool with free licenses  one notable exception is the user admin     who is always permitted to login regardless of the set of currently logged in users  the super admin is only controlled by the licence itself  not by the bouncer   in the xml configuration  you may install bouncers for each individual service by inserting a  loginbouncer  elements below the  loginbouncers  document element  normally  only the service editor is restricted  because other services are used by scripts and other servers in a more deterministic way   for every bouncer  you can add an arbitrary number of  limit  and  pool  elements  three attributes define the set of users to which a limit or pool applies  at least one of the three attributes should be given  when more than one is given  the set of users is restricted further     pattern   a regular expression according to the syntax of the java package java util regex  you can read about this syntax at http   java sun com docs books tutorial extra regex   only users whose names match the pattern are included in the set  the name of a user defined in the built in user management ends in a    e g   there might be two different users joe  and joe domain  the pattern must take the domain part into account    directgroup   the name of a group whose direct members are included in the set    group   the name of a group whose direct and indirect members are included in the set  this restriction can be costly to check in the case of a deep group hierarchy   for a limit the following additional attribute applies     max   the maximum number of concurrent logins allowed by this limit  this attribute is required   for a pool the following additional attributes apply     max   the maximum number of concurrent logins granted by this pool  defaults to infinity    min   the minimum number of concurrent logins granted by this pool  defaults to    the sum of all minimum values must not exceed the number of available concurrent logins   a sample configuration might contain xml elements as shown in follows  
  configure coremedia search engine location  the coremedia search engine is based on fast  the configuration refers to different components and servers of fast  see the fast documentation for a description of these  configure the corba url of the fast config server in the property cap server search corba url  configure the http url of the fast config server in the property cap server search http url  configure the hostname of the fast naming server in the property cap server search naming host  configure the port of the fast naming server in the property cap server search naming port   configure coremedia search engine collection configure the name of the fast collection in the property cap server search collection  you can use the fast administration page to create a new collection as described in section  coremedia search engine operation    configure searching in folders configure cap server search usefolderids true to enable a bugfix  bungsberg       for searching below folders with whitespace or special characters in their names  the default is false for backward compatibility with existing search engine installations  for existing search engine installations  make sure the fast index profile contains the field folderpath before enabling this property   for example  
  enable feeding  configure the location and collection of the coremedia search engine as described in chapter   you can enable feeding by setting the property cap server feeder enable to the value true  an enabled search engine feeder automatically starts when the content server goes online and can be stopped and restarted using the search engine feeder administration page as described in section  a disabled search engine feeder starts when you change the configuration to enable it   the configuration of the search engine feeder is contained in a separate xml file  which is specified in the property cap server feeder config   for example   cap server feeder enable true cap server feeder config properties corem feeder xml 
  this section describes common configuration and operation tasks to integrate the coremedia search engine into the content server  see section  references of the content server  for a description of all relevant configuration settings and section  search engine integration  for concepts of the search engine integration  
  this section describes the operation of the search engine feeder  which is part of the coremedia content server  see section  search engine integration  for concepts and section  configure search engine integration  for configuration of the search engine feeder  
  start and stop the search engine feeder  the search engine feeder automatically start when the coremedia content server enters runlevel online if the search engine feeder is enabled as described in section  to manually start and stop the search engine feeder use the links on the administration page of the coremedia content server    
  the content server contains an embedded web server   jetty   that delivers the ior of the content server or the manuals for example  you can also use the web server for jmx management  see section   in order to have a secure connection  configure ssl for the server as follows  create a certificate using genkey as described in section for example  make sure that the certificate name is the same as the cap server http host property in contentserver properties  configure the ssl connection in the file contentserver properties in  coremediahome  properties corem using the following properties   cap server https port   the port to use for the secure connection  cap server https keystore   the path to the java keystore file containing the certificate  cap server https password   the password to the keystore  cap server https keypassword   the password to the server s key  often the same as the keystore password      restart the content server using cm contentserver restart  now  you can connect to the embedded web server using ssl       
  the coremedia content server provides jmx access for management and monitoring    two protocols are supported   jmxmp hessian with or without ssl  jmxmp is the standard for jmx but if you apply the hessian protocol  you can use the integrated http server of the content management server to connect to  thus saving a port  hessian also requires authentication  thus improving security  in addition  you can use a https connection to the web server with the hessian protocol  section describes how to configure an ssl connection for the integrated http server   enabling jmx support  in order to enable jmx support you have to add the url of the connection server to the property cap server management jmxremote url in the contentserver properties file  
  this chapter describes tasks necessary for the administration and configuration of the coremedia content servers  this chapter might not cover all possible tasks  if you are missing some tasks you should have a look in chapter  there you will find a description of all relevant properties  that you might use for configuration of the coremedia cms  
  the publisher is a sub process running in the content management server  when the publisher publishes resources  it creates new sessions to the content mangement server and the master live server  you configure the publisher in the file publisher properties of the content mangement server installation   if you change username  domain and password for the publisher  you have to make these changes in the user administration of the appropriate server too  to change the settings of the master live server  you need to connect to the master live server with the coremedia editor  then you can use the user administration  see section        for the changes   when defining publisher priorities as described subsequently  the idea is to prioritize sessions with a higher portion of user interaction  higher numerical values indicate a publication that has to be processed first  by convention  publication priorities should be nonnegative integers  usually  the default priorities ensure a smooth publisher operation  when applying a change  two unmodifiable values have to be taken into account  expedited server publications of rights rules run at a priority of      all customized priorities must be strictly less than that value  accelerated coremedia editor publications run at a priority of     automated publications should normally receive a lower priority   in the properties given below  some properties take a different form when using coremedia multi site management  in that case  an index number is used to indicate the publication target that is configured using this property value  the index numbers are consecutive integers starting with   and running up to the number of publication targets  
  configure the xmlproperty conversion  since sci     the new coremedia richtext     dtd was introduced to replace the previously used coremedia sgmltext dtd  in addition  it is now possible to use own dtds  in general  text which conforms to the coremedia sgmltext dtd will be automatically converted into coremedia richtext     dtd conform text without any additional configuration  in some cases  e g  custom xml formats   more work is necessary  please read also section   
  if your coremedia workflow server instances are running on a windows platform  register the coremedia workflow server as windows service with the command   cm workflowserver install   a    u user  p password    as described in chapter  start the coremedia workflow server instances with the command   cm workflowserver start  this will also create groups required by the standard workflows  on windows platforms you can alternatively launch the coremedia workflow servers from the corresponding start menu item or from the windows services window  see chapter for details   in order to upload a workflow definition you can use the upload utility  see section    the valid names are defined in section       and have to be suffixed with  xml e g  you have to execute   cm upload  u admin  p  password   n simple publication xml   if you would use the simple publication workflow   
  upload workflows  if you have purchased the coremedia workflow server  unlimited edition   you can create your own workflow definitions  in order to make these definitions available to the users you need to upload them  for this purpose  you can either use the upload utility  see section        for a detailed description  or the menu item file load in the workflow window of the coremedia editor   
  convert uploaded workflows  uploaded workflow definitions are stored in the database as serialized objects  if incompatible changes in classes occurred  you need to convert these workflows  for this purpose  you have to use the workflowconverter utility  see section       for a detailed description        
  the workflow server contains an embedded web server   jetty   that is primarily used to deliver the ior of the workflow server  you can also use the web server for jmx management  see section   in order to have a secure connection  configure ssl for the server as follows  create a certificate using genkey as described in section for example  make sure that the certificate name is the same as the workflow server http host property in workflowserver properties  you may be able to use the same certificate as for the content server  configure the ssl connection in the file workflowserver properties in  coremediahome  properties corem using the following properties   workflow server https port   the port to use for the secure connection  workflow server https keystore   the path to the java keystore file containing the certificate  workflow server https password   the password to the keystore  workflow server https keypassword   the password to the server s key  often the same as the keystore password      restart the workflow server using cm workflowserver restart  now  you can connect to the embedded web server using ssl  
  the coremedia workflow server provides jmx access for management and monitoring   two protocols are supported   jmxmp hessian  jmxmp is the standard protocol for jmx but if you apply the hessian protocol  you can use the integrated http server of the workflow server to connect to  thus saving a port  hessian also requires authentication  thus improving security  in addition  you can use a https connection to the web server with the hessian protocol  section describes how to configure an ssl connection for the integrated http server   enabling jmx support  in order to enable jmx support you have to add the url of the connection server to the property workflow server management jmxremote url  in the workflowserver properties  file  
  the file workflowclient properties defines configuration options for logging  not coremedia editor    user management for the workflow client  remote action handlers and the parameters necessary to connect to the coremedia workflow server  for more information about logging see section      
  the file workflowserver properties contains the mapping of ldap groups to the workflow groups  the log configuration of the workflow server and parameters for the workflow server s internal web server  for more information about logging see section      
   property value default description workflow server http host string  configures the workflow server s internal web server for clients that request the ior  enter the host name or ip address of the computer where the workflow server is running workflow server http port int  configures the workflow server s internal web server for clients that request the ior  enter the port of the computer where the workflow server is running workflow server orbserverhost string  the host of the orb which the workflow server uses  workflow server orbserverport int  the port of the orb which the workflow server uses  workflow server keepalive orbserverport int     the port to use for the orb keepalive mechanism  use this mechanism if you experience occasional hang ups of the server that last for about a minute   set to a positive number to specify a fixed port  when set to    an arbitrary port will be used for keepalive  when set to     the keepalive mechanism is not activated  workflow server keepalive interval int      the interval between two keepalive requests in milliseconds  if keepalive is activated  workflow server uapi orbserverport int    the port for a unified api client  which connects the workflow server to the content server    workflow user string workflow define a user for the connection with the content management server  workflow password string workflow define a password for the connection with the content management server  workflow server tx max int    limits the maximum number of database connections  roles map approver role  roles map composer role  roles map publisher role string     the predefined workflows require the groups approver role  composer role and publisher role  see chapter for details   these groups are automatically created  if you use an ldap server for user management  you might not want to use the predefined groups  in this case  you can map an ldap group to the appropriate workflow group e g  approver example org  the members of the ldap group approver example org will be treated as members of the approver role group etc  note  that you can only map one ldap group to one workflow group    if you change this mapping after you have already uploaded workflow definitions  you have to reload the workflow definitions  workflow server managers  managername  class string  register a custom manager for use in the workflow server  the manager is created when the server starts  workflow server managers  managername  order int   the startup order for a custom manager  managers are started in the given order  if the order is not specified    is assumed  managers with the same order are started alphabetically according to their name   
  you configure the coremedia workflow server with three files   workflowclient properties    this file contains the log configuration of the client and the parameters to connect with the server  workflowserver properties    this file configures the log of the server and the http host name and port of the internal web server  editor xml    besides the coremedia editor content client gui configuration  this file defines the appearance of the workflow client gui  this feature is described in the workflow developer manual     in addition  the workflow server uses some of the settings from the sql properties files as described in section      the properties used to connect to the database  sql store driver      and   sql pool reaperinterval  sql pool reapertimeout  sql pool validatorinterval  sql pool validatetimeout  sql pool checktimeout   
  the coremedia search engine is a fast installation with coremedia specific adaptations for content processing  it maintains an index and provides full text search capabilities  the coremedia cms is delivered with two feeder components  which can be used to feed the search engine   the coremedia content server contains the search engine feeder  which sends documents to be indexed to the search engine  this makes it possible to search for documents in the coremedia editor  coremedia webeditor and custom content applications     section  search engine integration  describes the concept of the integration  section describes the operation of the search engine feeder  section describes the configuration of the search engine feeder  content applications often require search functionality not only for single documents but for content beans of a content application engine  the coremedia cae feeder makes content beans searchable by sending their data to the search engine  which adds it to the index     the section  cae feeder  of the  content application engine  chapter in the coremedia content applications developer manual describes the concepts and usage of the coremedia cae feeder   section  cae feeder  describes the administration and operation of the cae feeder   the index of the search engine contains fast documents  which carry unique string identifiers  a search returns the documents that match a given query  the term document in this context refers to a fast document  when using the search engine feeder  a fast document represents a coremedia document  when using the cae feeder a fast document represents a content bean  multiple search engine feeders and cae feeders can use the same search engine but require separate so called collections  a collection groups documents in the index of the search engine  searches use a collection to retrieve results for the specific application   a fast document consists of several fields that are configured in the fast index profile  the coremedia search engine comes with a default index profile  which can be used for both the search engine feeder and the cae feeder  the fast configuration guide describes how to customize the index profile for your needs  note  that some fields of the index profile are required for the operation of the search engine feeder and cae feeder  see the comments in the default index profile for a description of required fields  
  to start the web editor enter the start address in the address list of the browser  in general  this is constructed as follows   http    host   port  editor editor do  e g    http   myhost      editor editor do  for  host  enter the name of the computer on which the web editor runs  for  port  enter the port address configured in the file server xml   if you want to establish an encrypted connection via https  you have to perform the configuration of the servlet container as described in section         first  afterwards  the web editor can be started via   https    host   secureport  editor editor do  for  secureport  enter the https port address configured in the file server xml  
  if you want to deploy the webeditor into the websphere application server you need to configure the web application and create the war file   configure the webeditor web application as decribed in chapter  for the use with the websphere application server you need to add the following line to the editor web inf config bsh file   generator setbackdoorconnector new hox corem generatorv  alternateservlet  backdoorconnector      now  you can create the war file as follows  install the webeditor without the tomcat servlet container  see chapter   switch to the directory of the webeditor  cd  coremediahome  webapps editor create the war file  jar cvf editor war  
  the file  tomcathome  webapps editor web inf config bsh is the main configuration file of the web editor  the methods are mainly identical to the configuration of the active delivery server in section          
  this chapter describes tasks necessary for the configuration and administration of the webdav support of the coremedia web editor server  this chapter does not cover all possible tasks  if you miss some tasks  have a look at section  
  the coremedia web editor server contains a webdav server which supports access to content of the coremedia content management server with webdav enabled applications like microsoft word        the webdav support is provided by a web application which is deployed in the servlet container  the contents of the content management server appear in a web folder of the webdav client  section describes how to create a windows web folder  configure webdav support in the files  webdav properties  capclient properties log properties  to configure logging  see section   located in the directory  webdavservletcontext  web inf properties corem where  webdavservletcontext  is the path to the webdav servlet context  for example  jakarta tomcat webapps webdav  
  cut  copy and paste do not work in a rich text property of the webeditor  possible cause   the functionality is not allowed for unprivileged scripts   possible solutions   enable the functionality as described in section  
  the standard output of the license utility looks like this   license    licensee  development installation   valid from            t                 valid until            t                 grace until            t                 release   any    host   any    ip   any    workflow customizable  true   service  coremedia    cap service debug      c       n      m infinity    service  coremedia    cap service webserver      c      n      m infinity    service  coremedia    cap service filesystem     c      n      m infinity    service  coremedia    cap service importer     c      n      m infinity    service  coremedia    cap service replicator     c      n      m infinity    service  coremedia    cap service feeder     c      n      m infinity    service  coremedia    cap service publisher     c      n      m infinity    service  coremedia    cap service system     c      n      m infinity    service  coremedia    cap service workflow      c      n      m infinity    service  coremedia    cap service editor      c      n      m infinity   the compact notation of the services denotes the used and the available concurrent licences  e g      c   the used and the available named licenses  e g      n  and the multiplicity  e g  m infinity    the verbose output of a service additionally shows the users that hold a named license  e g      service  coremedia    cap service editor     concurrent licenses     used        named licenses     used        multiplicity   infinity      users        rolf  coremedia    cap user       for details about the license model of the coremedia cms see section      
  the following sample output of the processes utility shows two simple publication workflows   processes     id  coremedia    cap process     definition  simplepublication      coremedia    cap processdefinition      id  coremedia    cap process     definition  simplepublication      coremedia    cap processdefinition     use the  v option or the dump tool  see section x      to obtain details about a process  
  the verbose output of the publications tool looks like this  sample  one publication only    pending publications    publication  coremedia    cap publication       priority         user  rolf  coremedia    cap user          preview  false     size        stage     you can also run publications without the  v option and obtain the details of a publication with the dump tool  see section x       
  the output of the rules utility looks like this  sample  one rule only      content     coremedia    cap content      group    editor  coremedia    cap group      type     coremedia    cap contenttype document    rights   rmd  for details about the meaning of rules see section      
  this utility kills specified sessions on the content server  you can obtain the ids of the open sessions with the sessions utility  see section x        well behaved clients terminate their sessions  and the content server automatically kills sessions which don t respond within a certain timeout  so this is an emergency tool which you will need in exceptional cases only  
  with the runlevel tool you control the mode of operation of the content server  see section       for details about runlevels  you should always use runlevel to shut down the server  
  coremedia documents can be exported into xml files in the file system with the cm serverexport utility  these files can be imported again with cm serverimport  the cm serverimport is different to the coremedia xml importer  which is described in section         the following limitations for export exist     only the latest version of a document is exported    no metadata  e g  the last modification date or the status  published   is exported    for documents marked for deletion  only name and path are exported   from the limitations mentioned above the following consequences arise for import     only the latest version of a document can be imported    documents which were marked for deletion are empty  i e  all property fields contain null values  such as empty strings  zeros  etc    every imported document has the status  checked in  and  not approved    xml files are created so that internal links to these documents are maintained after import  on import of the complete content of a coremedia server  the content  the folder structure of the documents and the linking of the documents is maintained for documents not marked for deletion   the properties of the document types on the export server do not have to match those on the import server  those which are not available on the import server are ignored  and those which exist in addition are filled with null values   server import  the importer command has the following syntax in coremedia sci   cm serverimport    r    v    v     u user   d domain   p password   file   dir     the options have the following meaning   
  the usage is   cm sql   script  scriptname    if a sql script is passed via the option  script  the script will be executed   after entering cm sql  a connection to the coremedia system database is opened using the database settings configured in sql properties  see section            if the command is carried out in a windows environment  a graphical user interface opens which allows sql commands to be entered  
  this utility can be used to start and stop tracing  logging  of specified sessions on the content server  the logging must be configured with the log facility trace  all sessions traced by tracesession will log in the same file  see section     for details on the logging of the coremedia cms  
   parameter description  q stop tracing the specified sessions  s specify a session by its id  you can obtain the ids of all sessions with the sessions tool  see section x        t specify the sessions to be traced by their common type  run the sessions tool with the  v option to find out about the types of the open sessions  the legal values for this parameter  see usage  are obvious shortcuts for those types  there are two special values  unknown and all  all denotes all sessions  unknown denotes all sessions but those of the concrete type values   
   parameter description  v checks which workflows can not be deserialized and have to be converted   c  processid   if you use  c without a process id parameter  all uploaded workflows will be converted if necessary  if you enter process ids  only the workflows with the given process ids will be converted   x  processid   similar to  c the workflow converter converts the uploaded workflows if necessary  if the conversion fails  the workflow process and all corresponding workflow instances are removed from the workflow server   r processid jar replace a custom made jar file for a workflow with a new version  see section for the upload of a jar file    
    parameter description  a equivalent to the combination of  ap and  av   ap approve the place of any content below the base folder that is not place approved yet  if the content is not marked for deletion or withdrawal  also approve the latest version   av approve all versions following an already approved version of any content below the base folder  also approve the places of contents containing such versions   b publish all resources below the base folder that are approved but not published yet and that are not marked for deletion or withdrawal   c check in all documents below the base folder which are checked out   f the path of a folder for which you want to start the operations  e g   articles sport   if no path is entered  all resources below the root folder will be used  if you use a multi site enabled system  it is mandatory to enter a path to a folder that belongs to a single base folder  see section    
  destroy makes one best effort to withdraw the resources from the master live server before it destroys them on a content management server  it is tried to keep the master live server remains intact  i e  referencing documents are also withdrawn  on the content management server however  the referencing documents are not destroyed  and thus dead links may arise   destroy is an emergency tool  the normal way to get rid of resources without causing dead links is to move them to trash and have them deleted by the cleaners  see section x        concerning users and groups  destroy is not an ldap tool  if you apply destroy to ldap users or groups they will soon reappear in the coremedia cms if the ldap server and the corresponding userprovider still serve them  if you delete users and groups on the ldap server  the coremedia cms notices this automatically  so you don t need destroy in the regular case but only to fix inconsistencies caused by errors or misconfiguration of userproviders  
  you can use the republish tool to publish all content and versions below a given folder which have been published in a given period  a major use case is the update of a master live server which has been recovered with a backup  see section    there are certain limitations when using this tool   because the tool spawns only a single publication  it should not be used when there are many thousands of resources to be published  in particular  for the recreation of a fresh master live server from a content management server the tool cm publishall described in section is more appropriate  the tool cannot repeat the publication of withdrawals and deletions  the tool cannot repeat the publication of resources that have been marked for withdrawal or deletion after being published  the tool cannot repeat the publication of moves and renames of resources that have been moved or renamed again after being published  if the publication of a new folder fails for any reason  no resources contained in the folder can be published  if the publication of a new document fails or any reason  no documents linking to that document can be published  
  start creates a new workflow for each specified name or id  you can start multiple workflows of the same type by specifying the name or the id several times  use the processdefinitions tool  see section x      to list the available process definitions  note that you can only start workflows of process definitions which are enabled  
  with the ior utility program you can display an ior in a user readable form  this program determines whether the computer name or an ip is used for communication over corba and which corba port is used  the corba communication settings can be configured  see section           the program is executed with    cm ior  ior    ior         example  
  general usage  all server utilities are implemented as cm programs as described in section        i e  you run them from the command line with cm or cmw  most of the tools open a session and therefore need a user who is specified by three command line options  u   d and  p   furthermore you can explicitly specify the ior url of the content server to connect to  if you don t specify the url  it is taken from capclient properties  
  in order to enable the statistics log proceed as follows  enter the following lines to the log properties file  the log level must be info    log action  no   class fileaction log action  no   selectors generator statistics info log action  no   initargs file var logs statistics log  filesize         restart the ads   please see section for a description of the log parameters   the data will be printed periodically in one line  each line forms an xml document with generic key value pairs   example    statistics  entry key  pagecache hits  value            entry key  foldercache faults  value                statistics    the following keys are defined   time 
  since several active delivery server instances can run in one servlet container  a log is initialized for each individual instance  the configuration of the log output is determined in the file log properties of each instance  active delivery server context   the format of the entries corresponds to the configuration possibilities described in section      
  in order to connect client and servlet container via https you have to generate a key for the servlet container  this key is sent from servlet container to client with each query of the client to the server  the client decides whether the sender of the key is trustworthy with every single request    before key generation you must have made jdk jre configurations described in the previous section    creation of the key for active delivery server browser verification   the tool for creating the key is supplied with the jdk  you create the key with the following entries   enter the following command          java home  bin keytool  genkey  alias tomcat  keystore  example coremedia      keystore  keyalg rsa        in this way you call the program keytool in the directory  java home  bin  you initiate creation of the key    genkey  with the alias name   alias tomcat    a key is created according to the rsa algorithm  the key is saved in the keystore file  example coremedia      keystore  here you can enter your own path name   if you already have a keystore file  you must enter this              at the next input request  enter a password  if you want to save the key in an already existing keystore  you must enter the password of this file        at the next input request  enter the name of the server  the entry given below is an example             what is you first and last name            unknown   webserver coremedia com                confirm the following input requests with  return   until you are asked to confirm the correctness of the previous entries        enter  y  and  return  to confirm the previous entries  you can cancel by entering  return             after a short pause  you are asked for the  key password for   tomcat                   here you must use the keystore password for the key with the alias  tomcat        creation of the key is thereby ended    key for active delivery server active delivery server verification   this part is only necessary  if you want to use the web editor via https  it is not required for the usage of the webdav server    the active delivery server communicates internally with itself  for this reason it requires a so called  truststore  in which the keys which are trusted are stored  the truststore file corresponds to the keystore file  in principle you have three possibilities for using the truststore file      simply enter the keystore file as truststore file  to do so  it is only necessary to make the appropriate entry in the file httpd jpif  see section         copy the keystore file to the truststore file and make the appropriate entry in httpd jpif        you already have a truststore file which you must continue to use  in this case  you must export the key from the keystore file and import it into the truststore file  proceed as follows        export the key with the following command             java home  bin keytool export  file  home testuser importantkeyfile  alias tomcat  keystore  example coremedia      keystore          the parameters have the following meanings            file  name of the file into which the key is exported            alias  alias name of the key which is exported            keystore  keystore from which the key is taken                 import the key into the truststore using the following command             java home  bin keytool import  file  home testuser importantkeyfile  alias tomcat  keystore  example coremedia      truststore          the parameters have the following meanings           file  name of the file from which the key is imported       alias  alias name of the key which is imported         keystore  truststore into which the key is imported       
  coremedia sci includes the new proactive delivery server  see section  which offers enhanced pre generate functionality  if you do not need to stuck to the old pre generator because of compatibility reasons  it is recommended to use this new component  
  the default settings of the ads caches are conservative guesses which are intended to work with the default settings of the java virtual machine  vm   the default maximum heap size for the vm is    mb which should work even on small sized machines  for productive use you should increase and optimize these settings  see section for details  if you have increased the heap size you can start optimizing the cache settings  these settings are done in the  adsinstalldirectory  web inf config bsh file  in section you will find a table with all important options  the complete list of options can be obtained from the api documentation of the class hox corem servlets generator  you will find more information concerning caching in the active delivery chapter of the coremedia delivery developer manual   
   active delivery server configuration options   method  setlogfacility type  string default setting   coremedia active delivery server    explanation  identifier of the log for active delivery server outputs  the physical target of the log outputs is then configured in the file  web inf properties corem log properties      method  setresourceuriformat type  hox corem servlets resourceuriformat default setting  new hox corem servlets beans standardresourceuriformat     explanation  the object which determines the string format of the page uris  i e  the appearance of embedded links in generated pages  this is also influenced by resourceuriprefix  generaterelativeuris  generate relativeuripaths   standard resourceuriformat creates uris according to the document path in coremedia      method  setresourceuriprefix type  string default setting  context   servletpath  in general   coremedia generator    explanation  the prefix of all generated uris  inserted before the result of resourceuriformat  valid values are     or paths which begin with     and end without      should not be adjusted in the case of standalone configurations  since  otherwise  any links which are created do not refer back to the active delivery server  in the case of an embedded configuration in a web server  the prefix can be changed  but must then be correctly reconstructed before the webserver passes the request to the container  e g  through mod rewrite      method  setgeneraterelativeuris type  boolean default setting  true   explanation  generation of uris relative to docbase      method  setgeneraterelativeuripaths type  boolean default setting  false   explanation  generation of uri paths relative to docbase  only valid with generaterelativeuris true      method  settemplatefinder type  hox corem servlets templatefinder default setting  new hox corem servlets beans standardtemplatefinder     explanation  this object implements the mapping of uris to templates  here  you can select the new viewdispatcher or the standardtemplatefinder from previous releases  for more details  please consult the developer s manual      method  setservername type  string default setting  null   explanation  the hostname embedded in generated uris  this should be the host under which the site is visible from outside  for example  this can be the name of a remote web server process which passes on requests to the active delivery server  if the setting is null  the hostname is taken from the http request      method  setserverport type  int default setting  same as generatorport   explanation  port in generated uris  this should be the port under which the site is visible from outside  if  for example  the active delivery server is configured  behind  a web server  the web server port  typically     should be entered here  in case of a standalone configuration  enter the load balanced port of the servlet container here  see  section             if unset  the port is taken from the http request      method  setcontextpath type  string default setting  none   explanation  this value must be set to the context path of the active delivery server application  e g   coremedia      method  setgeneratorhostname type  string default setting  local hostname   explanation  this setting denotes the hostname under which the active delivery server can open http connections to itself      method  setgeneratorport type  int default setting  none   explanation  this setting denotes the port under which the active delivery server can open http connections to itself  use only if    you are not using a servlet     container  or you are using an autonomous application  e g  the lucene indexer    in the first case you need to set the port to the value of the unlimited thread pool of the servlet container    method  setpagecachedirectory type  file default setting    coremedia generator   explanation  the cache directory of the active delivery server      method  setcacheabledefault type  boolean default setting  false   explanation  cacheable flag for templates without  coremedia page cacheable  xxx         method  setconditionalgetsupport type  boolean default setting  false explanation  if the page has not been modified since it was last accessed by the client  it will be read from the client s browser cache    method  setuser type  string default setting  webserver   explanation  username with which the generator logs onto the coremedia server      method  setpassword type  string default setting  webserver   explanation  password with which the active delivery server logs onto the coremedia server      method  setpregenerateroot type  string default setting  not set   explanation  root uri of the page tree generated in offline generation  must be in the format created by resourceuriformat  i e  without resourceuriprefix  can be set multiple times  so as to generate from multiple roots      method  setuploader type  hox corem servlets uploader fileuploader default setting  not set   explanation  uploader object to which page generation events are passed on  e g  to transfer the pages to another computer      method  setfoldercachesize type  int default setting        explanation  the maximum number of cached folder objects from the content server  an increased size leads to higher consumption of java heap memory but also accelerates the access of coremedia documents       method  setdocumentcachesize type  int default setting       explanation  the maximum number of cached document objects from the content server  an increased size leads to higher consumption of java heap memory but also accelerates  the access of coremedia documents     method  setpagecachesize type  int default setting         explanation  the maximum number of pages referenced from the page cache  the actual number of cached pages can be larger  since they  hold  other fragments through include relations  a pregenerator ignores this setting because it generates all dependent pages which will be administrated by the dependency manager       method  setpageobjectcachesize type  int default setting       explanation  the maximum number of cached result objects in the page cache which were created by the context getobject functionality  see developer s manual   an increased size improves the performance but as this cache lies completely in the main memory it should be dimensioned carefully according to the type of objects      
  you can define for which resources pads should build pages using the following elements    page     define a resource uri for which a page should be built   pageselector     select resources based on path and type for which pages should be built   pagelinkpredicate     restrict the followed links between pages    build pages defined by a resource uri   use the element page with the resource uri to start from in the attribute uri to generate pages  see section for details on the resource uri format used    example     page uri   pads generator site index html      this will generate the page with the specified resource uri and all pages that are reachable through links    build pages for selected resources   use the element pageselector to build pages for resources of a certain type and located below a given folder  see the next table for details on the attributes of pageselector   
  uploaders receive the generated values  e g  pages   they can be attached directly to pads or to a remotely running jmsreceiver  see section   two different uploader types are included in the distribution    fileuploader     the fileuploader writes files into the the file system   jmsuploader     the jmsuploader sends values to a java message service  jms  queue or topic    the coremedia developer manual describes how to write and configure custom uploaders    the fileuploader   the fileuploader writes files for generated values into a directory  with page generation one file is created for each page with a file path equal to the resource uri of that page  the fileuploader creates  deletes and overwrites files to reflect the current state of the repository    the fileuploader is configured with the element fileuploader which allows the following attributes   
    attributes  optional  description  id  no  each uploader must be configured with a unique and persistent identifier  the identifier is used to detect new uploaders and to send them all values that were generated before the uploader was registered  you can disable this behavior using the attribute receiveinit    filter  yes  using the filter attribute you can define a regular expression that restricts the pages that should be sent by this uploader  only pages whose resource uri matches the filter expression are passed to the uploader  the default is       i e  all pages are sent to the queue or topic   receiveinit  yes    set this attribute to  false   if the uploader was added to the configuration after the first start of pads  and should not receive notifications about existing values     if set to  true    default   the uploader will receive update events for all values that were generated and not yet removed by pads before the uploader was configured  the uploader receives these events once when pads starts and if it detects the uploader as new  i e  if the uploader was not configured at the time of the last start of pads     note that uploaders always receive notifications for updates and deletes which happen after they were added to the configuration     this attribute has no effect if the uploader is added to the configuration before the first start of pads or if it is configured in a jmsreceiver or dbmessagereceiver     initialization of jmsuploaders with lots of existing entries should be avoided  a jmsreceiver can be initialized with the values of existing entries as described in section    builder  yes  if you have developed custom extensions to generate other values than pages  you need to set this attribute to the scheme of the custom builder  which is mostly the builder s class name   the attribute also accepts a comma separated list of several builder schemes  read the coremedia developer manual for more information about builders and schemes   initialcontextfactory  no  name of the initial context factory class of the jms provider   providerurl  no  the url to access the jms provider   connectionfactory  no  name of the connection factory class of the jms provider   topic  no  the name of the topic to which the jmsuploader should connect  cannot be combined with attribute queue   queue  no  the name of the queue to which the jmsuploader should connect  cannot be combined with attribute topic    
  you can configure the coremedia proactive delivery server using the following files in the web inf directory   properties corem capclient properties      configure the ior of the coremedia content server to connect to as for all components  properties corem log j properties    the configuration file for logging  apache log j is used for logging  please see http   jakarta apache org log j docs documentation html for documentation  as a default  log output will be written to web inf var logs pads log  properties corem pads xml    this is the main configuration file of pads and will be described in the following subsections  most of the settings in this file can also be made  or overwritten  in config bsh using the padsconfig object which implements the java interface com coremedia cap generator pads padsconfiguration  see the pads api documentation for details   config bsh    in this file  settings for page generation can be made as known from the active delivery server  see section for details    
  when using pads data is stored in both the content server and the database of the pads   content server  the content server s database contains the resources in their unprocessed state and a change log  pads  the pads s database contains values  serialized builder result objects  which are derived from the content server resources via application logic  it also contains the dependencies of these values among each other and among the source documents and it contains a link to the change log of the content server  this link can be used to adjust the state of the pads with the state of the content server   in certain cases the pads database has to be rebuilt   the content schema has been changed  therefore the builder creates different results  pads and content server are affected   the builder has been changed and delivers different documents  only the pads is affected  the builder has been changed and the serialized objects stored in the pads database are no longer compatible  only the pads is affected   the creation of a new pads database takes a long time  therefore  use a second pads parallel to the production system to create the new database   the content schema has to be changed  if you want to change the content schema  you need temporary copies of the content server and pads databases  proceed as follows  if you need to do not only schema changes but also content changes  e g  you need to change configuration documents  you have to start with an additional step  execute the following sql command on the content server database and note the values  you will need them later   select sequenceno  idtag from changelog  where sequenceno    select max sequenceno  from changelog   e g     sequenceno idtag                      make copies of the content servers  content management server  master live server  and pads databases and change the database schema on these copies as described in section  if you need to do content changes  execute them on the copies  start the copy of the pads with the copied content servers  this will start the generation  when generation has finished you have new pads content on the copies    
    if you have made content changes and the pads has finished  enter the notes into the copy of the pads schema  execute the following sql statements   update cacheproperties set content   sequenceno   idtag    where property  timestamp   e g   update cacheproperties set content                   where property  timestamp   this will force the pads at the productive system to start at the very moment  at which the copy has been made     execute the schema migration on the productive system  to migrate slave  proceed as described in section  connect the copied pads database to the migrated content servers of the productive system  only the changes which appeared after the copy of the pads database have to be processed    only the builders have changed  if you only have changed the builders  proceed as follows  install a parallel running pads with the changed builders  if the pads has finished with building objects  move the database contents of the pads to the production system   
  when pads starts for the first time it creates database tables for its cache and starts the computation of the values for the configured root keys and other values which are linked during value computation  with each restart it checks if all values for the configured root keys have been generated and starts a new computation if necessary  newly registered uploaders will be notified about existing values if they are configured to receive initialization events  furthermore pads checks if template files for page generation have changed and invalidates dependent pages at restart   pads listens for changes in the coremedia content server repository and invalidates dependent values  when pads is restarted  it processes all repository changes that have happened in the meantime   pads notifies uploaders about changes when a consistent state has been reached  a consistent state is reached when all configured and linked values have been computed and pads is not processing cap events anymore  if running at a live server  consistent states are reached only after complete publications  however  pads tries to combine multiple publications  i e  not every single publication leads to a consistent state and uploader notification   before a consistent state is reached and uploaders are notified  a garbage collection is started to delete any values which aren t reachable from the configured root values anymore  furthermore  garbage collection detects so called dead links  dead links point from existing and needed values to non existing values  they arise from a changed configuration  e g  a removed pagelinkpredicate  see section  or from errors during the computation of linked values  in that case  a computation is rescheduled  uploaders aren t notified until all needed values have been computed successfully   uploaders are notified about all changes since their last notification  different uploaders will be notified concurrently but each uploader receives notifications sequentially  pads waits until all uploaders have been notified before it resumes its work  there is no timeout for uploader notifications  
  configure an uploader for the jmsreceiver   you need to configure an uploader which is used by the jmsreceiver  configuration of the uploader is done via the appropriate uploader element inside the jmsreceiver element  the configuration is nearly equal to the configuration of the uploaders of pads  see section   only the id and receiveinit attributes are not needed here and ignored if set    the following example uses a jms topic from a swiftmq router  other jms providers can be used likewise  
  if you want to connect a jmsreceiver to the jms provider  regardless of the source   topic or queue   you want to connect to  you should use a dump file with already generated values to speed up the initialization  prerequisites are a jmsuploader at the proactive delivery server and a properly configured jmsreceiver    initialize a jmsreceiver connected to a topic  start the jmsreceiver with the  r option to create a durable topic subscription       bin cm jmsreceiver run  r       the jmsreceiver will stop automatically after registering at the jms provider         create and save a dump file from the admin pages as described in chapter  you can specify the builders and a filter expression to narrow the dumped values to the interesting ones for the uploader   start the jmsreceiver again  using the  i option and providing the dump file created in the previous step       bin cm jmsreceiver start  i  dumpfile    initialize a jmsreceiver connected to a queue  attach a new jmsuploader  to pads and set the attribute receiveinit of the jmsuploaders to  false    create and save a dump file from the admin pages as described in chapter  you can specify the builders and a filter expression to narrow the dumped values to the interesting ones for the uploader   start the jmsreceiver  using the  i option and providing the dump file created in the previous step       bin cm jmsreceiver start  i  dumpfile  
  if you select the status link on the administration page you will get information concerning the status of the proactive delivery server as shown in figure   
  it is possible to use an apache web server for delivering cached items directly from the http cache s value store  reasons are for example   deliver pages from the cache in case of maintenance of the cms system  improve the throughput with one or more web servers in front of the http cache   figure shows the concept of this coupling  
  apache ssi assembly mode  if you use the apache ssi assembly mode you have to configure an apache web server as a reverse proxy  that replaces the apache ssi placeholder  edit the httpd conf file of the apache web server as follows  in the example it is assumed  that the tomcat with the cae web application uses port      and the apache web server uses port     the context path of the cae application is  menusite   loadmodule proxy module modules mod proxy so  loadmodule proxy http module modules mod proxy http so   loadmodule include module modules mod include so     reverseproxy konfiguration  proxyrequests off   proxypass  menusite  http   myserver      menusite   proxypassreverse  menusite  http   myserver      menusite      configure the maximum inclusion depth here  proxymaxforwards     limitinternalrecursion       proxy http   myserver      menusite        order deny allow     allow from all      options  includes       enable inclusion filter for this mimetypes only    addoutputfilterbytype includes text html text plain     proxy    combination of assembly mode with apache web server delivery  it is not possible to combine the embedded assembly mode with an apache web server as an additional delivery system   if you want to combine the apache ssi assembly mode with the apache web server in the as is delivery mode  see section  you have to do a special configuration of the apache web server  this is  because the modules mod asis and mod include can not be combined in a simple way  you have to delegate each step in a virtual host and combine the hosts again in a row  the next image shows a schema of this coupling   
  this section describes common configuration tasks  see section  reference  for a detailed description of configuration settings  configuration is done in the files caefeeder properties and log j properties  which are both contained in the directory  installroot  config    configure the content server  the cae feeder can be used to index content beans for contents from the coremedia content management server or a live server  configure the content server in the file caefeeder properties as in the following example  
  a customized and configured cae feeder starts with the following command   bin cm caefeeder start  the following command stops a started cae feeder   bin cm caefeeder stop  note  that you need to install the application as windows service if running on windows  see section  starting the components  for a description how to start coremedia components  
  this section describes the properties of the configuration file caefeeder properties  which is located in the directory  installroot  config caefeeder spring  for common configuration tasks  see section  configuration   
  this section describes administration and operation of the coremedia cae feeder  the cae feeder provides full text search capabilities for custom content applications by sending the data of content beans to the coremedia search engine  custom applications can use the search engine to find the content beans afterwards  for concepts and required customization see the coremedia content applications developer manual  section  cae feeder   for more information about the coremedia search engine  see section  coremedia search engine    note  that the coremedia content server contains the search engine feeder  which sends the data of coremedia documents to the search engine to provide search functionality for documents in the coremedia editor  coremedia webeditor and custom applications  section  search engine integration  describes the search engine feeder   the release contains an extensible cae feeder template as starting point to develop applications that send content beans from the content application engine to the search engine  the cae feeder template is a standalone application  which includes an internal proactive engine    the installed cae feeder template consists of files in the following directories  
  the coremedia editor can be configured using different xml files  the names of these files are defined in the editor properties file  the files are a small bootstrap file  editor startup configuration  necessary for some settings before the actual start of the editor  and the xml files for the customization of the editor  the following use cases are supported   everyone uses the same configuration file  this file is defined by the property editor configuration  everyone uses the same common configuration file with additional group  group configuration  and or user  user configuration  specific configuration files  each group has its own configuration files defined by group configuration and the  configgroups  element in the editor startup file  additional user specific configuration files can be used  the groups might share configuration files but they do not have to   if a user is member of more than one group for which specific configuration files exist  then the system chooses an arbitrary group for which the configuration file is taken  so  it s good practice  to have only one group for each user for which a configuration file exists  if this is no option  you can define your own selection scheme as described in the editor developer manual   the files are evaluated in a specific order   no  configgroups  element used bootstrap file defined by editor startup configuration   common configuration file defined by editor configuration group specific files defined by group configuration  user specific files defined by user configuration     configgroups  element used bootstrap file defined by editor startup configuration   group specific files defined by group configuration and in  configgroups  in the editor startup xml file  see chapter for details   user specific files defined by user configuration    be aware  that you need to define a file in editor configuration in both cases  even if it will not be used in the second case  otherwise an error occurs   example for a configuration without a  configgroups  element  you have made the following settings in editor properties   editor startup configuration editor startup xml editor configuration editor xml group configuration editor group     xml user configuration editor user     xml  a user named  axel  who is only member of the group  editors  logs in and the following configuration files are applied in the shown order  editor startup xml editor xml editor group editors xml editor user axel xml  example for a configuration with a  configgroups  element  you have made the following settings in editor properties   editor startup configuration editor startup xml editor configuration editor xml group configuration editor group     xml user configuration editor user     xml  and these settings in editor startup xml    configgroups      configgroup name  editors          configuration name  common           configuration name  editor         configgroup    configgroups   the same user as before logs in and the following configuration files are applied in the shown order  editor startup xml editor goup common xml editor group editor xml editor user axel xml  merging of files  all elements which can occur only once   due to the coremedia editor dtd   will be overwritten by the settings of the succeeding configuration file  the following elements use inheritance   bundle and explorer elements will be added   existing  document and process definitions of documents and processes elements  will be overwritten  new definitions will be added   existing documenttype definitions of documenttypes elements use inheritance on the propertytype element level  that is  existing propertytype definitions  e g  a validator set for the property name  will be overwritten and new definitions will be added   example   the interesting parts of the editor xml look as follows    bundle name  first bundle     spellchecker enabled  true     documents     document type  article        property name  headline  editorclass  firstclass        document    documents   documenttypes     documenttype name  article        propertytype name  editor          validator class  notempty           initializer class  setchiefeditor         propertytype       documenttype    documenttypes    the interesting parts of the group specific editor definition look as follows    bundle name  second bundle     spellchecker enabled  false     documents     document type  image        property name  caption  editorclass  secondclass        document    documents   documenttypes     documenttype name  article        propertytype name  editor          modelclass class  mymodel           initializer class  seteditor         propertytype       documenttype    documenttypes   applying both editor definitions will result in the following behaviour   both bundles will be used  the spell checker will be disabled  article documents will use the property editor firstclass with the property headline and image documents the property editor secondclass with the property caption  article documents will use the validator class notempty  the initalizer class seteditor and the model class mymodel with the property editor   see chapter for a detailed description of the properties   you can either use locally stored files for each client or administrate these files centrally on the content server and deliver them to the clients   for locally stored files adding the path relative to  coremediahome   for centrally stored files adding the url to the content server as described below   
  defining the xml configuration files enter the name of the xml file with the path relative to  coremediahome  into the appropriate properties   editor startup configuration editor configuration  define user or group specific configuration files enter the name of the xml files with the path relative to  coremediahome  into the appropriate properties   group configuration user configuration  you must add the wildcard     to the name of the xml file  this wildcard will be replaced by the group name or the user name of the user  if the user belongs to multiple groups  the system will choose an arbitrary group     if required configure the  configgroups  element in the editor startup file as described in section  
  in this chapter you will find a description of the main administrating and operating tasks of the coremedia editor  if you miss the description of some properties or tasks  please have a look at chapter where you will find a description of all relevant properties  
  the file workflowclient properties defines configuration options for logging  not coremedia editor    user management for the workflow client  remote action handlers and the parameters necessary to connect to the coremedia workflow server  for more information about logging see section      
  you can define the browser for the web extensions  see chapter  using the element  webbrowsers   multiple browsers for different locales and operating systems can be defined  the browser for the preview can be chosen from the file preview menu of the overview window  if you do not define any browser  the web extensions cannot be executed   
  the importer is started with  bin cm my importer start  in a windows environment the importer is installed as a service and can optionally be launched from the corresponding menu item or from the windows services window    according to the configuration  the importer runs permanently or terminates itself  when configured to run permanently  unix only  it can be stopped with  bin cm my importer stop  in a windows environment you stop the importer from the corresponding menu item or from the windows services window   furthermore  the importer can be restarted  unix only  when executing  bin cm my importer restart  initialisation of components is described in general in section          
  the coremedia jpeg image importer imports jpeg image files into the coremedia content management server  in addition to the actual image information  the jpeg image importer also imports text information which has been saved by adobe photoshop in the jfif image file  if the image file was created with this program    this importer documentation shows how to use the importer api which is based on the jaxp api from sun microsystems  jaxp allows parsing and transforming xml documents from any source  the implementation of the importer is done by transformer classes which are executed consecutively at running time  the aim of this  serial connection  is the flexible generation of xml documents in the coremedia xml format  from this format the importer framework creates the corresponding documents on the coremedia server  in order to use a transformer  you only have to add the appropriate transformerfactory class and their configuration parameters in the configuration file   the importer is started with the command  cm imageimport start  initialisation of components is described in general in section          the name of the configuration file is imageimport properties  in addition to the basic configuration which must be defined for every importer  it contains the configuration of the multiresultgeneratorfactory transformer implementation classes used   the standard class subdirgeneratorfactory is used as the multiresultgeneratorfactory   
  coremedia analytics uses a relational database for storing all data that is generated during the aggregation process  depending on the number of page views that you want to analyze  the load on this database can be very high  some recommendations for improving database performance can be found in the following   when sizing the database machines  you should estimate the amount of data that will need to be stored   by default  every page view is stored permanently and requires about     bytes on disk  assuming   billion page impressions per year  this will lead to   tbyte over    years  by default  information on every session is stored permanently and requires about     bytes on disk  for short sessions this might yield another   tbyte over    years  daily snapshots of the content meta data are made  for   million content objects at about     bytes per object  we get     gbytes over    years  the other tables are expected to be smaller than that  but might produce another   or   tbytes in total   of course  the exact values for the storage requirements may vary depending of the typical access pattern for the site  an automatic purge procedure can be configured to discard historic facts and statistics as described in section  if that is desired   coremedia analytics generates a continuous load  after a downtime  coremedia analytics will need to catch up with the events that were generated during the downtime  it can take longer than the original downtime before the latency is back to normal   a scheduled downtime should therefore happen at times of low load  unscheduled downtimes should be avoided by using fault tolerant hardware  in particular by using a raid  if you oversize the hardware for normal operation  it can recover faster after a downtime   coremedia analytics creates a high write load   if a single disk or a raid   does not handle the writes  you should add further disks  choosing a raid level that is optimized for this case  a hardware raid controller with write caches will improve performance   while some of the tables are used only temporarily  much disk space is required for storing the processed fact data   depending on the access characteristics and on the tracking configuration  a few hundred bytes will be permanently stored in the database per page view  possibly totaling many gbytes of required disk space  if it is known for sure that the individual events will not be needed for future analysis  it is possible to truncate the archive tables like pageviewsarchive   coremedia analytics uses transactions affecting very many rows  when aggregating yearly statistics or when making snapshots  more than a million rows may be written in a single transaction  to this end  some configuration parameters might have to be tuned   make sure the database s transaction log is large enough to account for such transactions  transaction logs of     mbyte or more are recommended  you should make sure that the redo logs of the database are placed on very fast disks  the transaction log should be rotated at most once in five minutes  otherwise  it needs increasing   many databases support the concept of an archive log  which allows to replay the transactions that were completed since the last backup   each page view will result in the creation of about    kbyte of log data  depending on the database product used  archive logs should be kept until the next successful backup has been performed  assuming a typical backup frequency of   day  the archive logs might still get ten of gbyte large  so that appropriate disk storage has to be provided  if the database is well protected by means of regular backups and a raid system and if the potential loss of a day of analytics data seems acceptable  it is a valid option to deploy analytics in a database with disabled archive logging  because the database will be busy for a long time after a restore of an earlier backup  analytics might take a long time to catch up with the recent events   while coremedia analytics performs many read requests  these requests typically refer to data that was written shortly before  the database should be able to answer these requests without performing disk i o   if you experience a significant amount of disk reads  increase the main memory allocated to the database  possibly putting in more hardware memory   modern databases generate execution plans for queries based on statistics on the database contents   in some cases  coremedia analytics gives hints to the database on how to optimize queries  still it is a good idea to keep the database statistics up to date  because coremedia analytics uses some tables that get filled and then almost emptied  it is a good idea to stop the aggregation process gently at the end of an iteration before generating the statistics and restarting the process in the data aggregator  as most tables get emptied at the start of an aggregation process iteration  this is the time when the most useful statistics can be generated  as long as coremedia analytics runs smoothly  it is not normally necessary to generate statistics over and over again   the transactions of the aggregation process will run in the isolation level read committed  this ensures a robust operation at the minimal operational cost   by default  all tables and indices are defined in the default table space  in order to distribute the load across multiple disks  you may want to move some of the tables to other table spaces  if you do so  the staging tables and the fact tables sessions and pageviews would be obvious candidates for a special treatment  to this end  please see the analytics developer manual for details about the database schema   indices  too  may become faster if they are not written to the same disk that also holds the indexed table itself   if you provide multiple webapps and multiple live servers  each of which serves a single site  you may use a single analytics data aggregator to aggregate logs from all sites into a single database  this results in a comparatively simple setup that allows global reports to be defined  but if you aim for very high loads  you might find it beneficial to split individual sites or portals as far as possible  to that end  you would use separate aggregators and separate databases   hints for db   in order to provide good support for row level locking  set the parameter maxlocks to     and locklist to a sufficiently high value  the exact value for locklist depends on the available memory  but       may be a good start   you must provide both a tablespace and a temporary tablespace with a block size of at least    kbyte   other than that  the general recommendations for setting up the database and tablespace as described in section apply   hints for oracle  in order to speed up the import of event logs  coremedia analytics disables indices on staging tables while bulk data is written  this will result in warning messages in the oracle log  complaining about unusable indices  while this is a normal condition  it may appear disturbing  by setting  workflow server managers aggregator index rebuild threshold    in the file workflowserver properties  you can ensure that indices are never disabled   hints for postgresql  it is advisable to enable the auto vacuum and auto analyze daemons   hints for non oracle databases  it is assumed that disk space that was used by deleted rows will become reusable automatically  if necessary  appropriate database processes have to be started  for example  for postgresql the usage of the auto vacuum daemon is strongly recommended   this applies to non oracle databases  for oracle the most frequently used tables are compressed using alter table     shrink space cascade at appropriate times  
  the analytics data aggregator is built on top of a workflow server  so that all configuration options of a workflow server also apply to the analytics data aggregator  however  there are additional options that are accessible through the analytics manager that lives inside the workflow server  most of these options find their use when the aggregation process runs   about configuring time intervals and delays  when configuring time intervals or delays for the data aggregator you can use the duration in seconds  entered as an integer value  but you can also provide a more human readable time specification by suffixing an integer with a unit  for example   h would mean six hours and   m would mean    minutes  supported units are s  second   m or min  minute   h  hour   d  day   w  week   and a  year   alternatively  the english nouns may be used as units  days are equivalent to    hours  years to     days  there is no month unit  a space may separate integer value and unit   you may concatenate multiple value unit pairs by spaces  commas or the keyword and for more complex durations  for example   h   m would be just as valid as   hour and    minutes or   h    min for representing      seconds   note that this syntax is only available for the data aggregator  which is the only component for which many delays must be configured   configuring the database  the analytics data aggregator needs access to a database for importing and aggregating the data  like all configuration options  the associated configuration options can be found in the file properties corem workflowserver properties    the affected properties are  workflow server managers aggregator driver   workflow server managers aggregator url   workflow server managers aggregator user   workflow server managers aggregator password   workflow server managers aggregator database    the property values are the same that are configured for in site analytics as described in section   changes to these properties require a restart of the analytics data aggregator   configuring the time zone  when reports for longer intervals are generated  these reports should be based on the calendar used  for example  daily reports must take the start of the day into account  weekly reports care about the start of the week  which might be either sunday or monday  therefore  the time zone  the country and the locale must be configured for the analytics to generate plausible values  this is done using the properties   workflow server managers aggregator timezone   workflow server managers aggregator language  workflow server managers aggregator country   once you have started the aggregator with a certain time zone  this property should never be changed again   configuring the in site analytics granularity  page view events are processed into the in site analytics tables  these tables use a very fine time resolution  which is configured using the property workflow server managers aggregator loop duration  by default  it is set to    seconds  which allows finely resolved graphs for as little as    minutes total duration  however  you may want to set this to a higher value in order to limit the amount of disk space used for overlay reports  if you do so  make sure that the chosen interval length divides      seconds evenly in order to allow correct hourly reports to be built from the overlay data   once you have started the report generation with a certain loop duration  this property should never be changed again   configuring log providers  each content application engine for which tracking is enabled must be listed in the workflowserver properties  so that the report data aggregator can fetch the generated logs  for each cae  one row of the following form is written   workflow server managers aggregator logprovider  id  url    http    host   port   webapp  servlet analyticslog  here  id  denotes an identifier for the log provider  which can be chosen arbitrarily  but which must not contain dots  the values for  host  and  port  are determined by the configuration of the servlet engine  whereas  webapp  is the name of the tracked web application   you may add  remove or change rows that specify log providers at any time  the new values will be taken into account during the next import   configuring aggregator timing  there are a few parameters that control at which time the aggregated data is available  with workflow server managers aggregator session timeout you can set the session timeout in seconds  after the full hour  page view data for the entire session timeout period has to be fully available before the statistics for the previous hour can be generated  this ensures that page views can be reliably identified as last page views in their session  allowing the data aggregator to generate exit statistics   after facts data  for example representing page views  has been made available  it is kept in the fact tables for workflow server managers aggregator archive delay seconds before being moved to the archive tables  if you want to keep the data around longer than the default of one hour plus potential leap seconds  you may increase this value   if the data aggregator was down for an extended period of time  it may take a long time aggregating statistics before processing the more recent data  the property workflow server managers aggregator maximum aggregation duration limits time for which statistics may be generated after a downtime  by default  this value is set to one week  but it may be increased to further reduce the probability of data loss   if the data aggregator cannot access a log provider  a content application engine with tracking  for an extended period of time  it will not proceed with the computation of statistics in order to be able to fetch logs from the log provider once it is up again  after workflow server managers aggregator maximum aggregation delay seconds  however  statistics are generated despite a failed log provider  this ensures that best effort data is available after a while  by default  this value is set to five days  but you may lower it to a few hours  if needed  the value should always be significantly lower than the maximum aggregation duration in order to avoid data loss   configuring purging  by default  old events and old statistics remain in the database forever  the data aggregator may be configured to purge old data  however  separate configuration is possible for four groups of data  fact archive  in site analytics data  event based dashboard analytics data  and snapshot based dashboard analytics data   the purging of the archive is controlled by the following parameters in the file workflowserver properties  here shown with their default values   workflow server managers aggregator archive purge delay   workflow server managers aggregator archive purge duration   m workflow server managers aggregator archive purge interval  w  if the purge delay is   or unspecified  the archive will not be purged  otherwise facts with the given age are purged from the archive  if archive purge delay is smaller than archive delay  then facts are purged immediately without being moved into the archive first  however  normal configurations use a short archive delay and an archive purge delay that is significantly longer than the backup cycles of the analytics database   the archive purge duration denotes the maximum length of a time interval that may be purged in a single transaction  larger values result in faster processing  but increase the probability of large transactions that cannot be handled by the database    the archive purge interval is set to the approximate time between two purges of the archive  as soon as half the given interval of data has accumulated since the last purge  the data aggregator starts to look for idle periods during which it starts with the purge  the data aggregator is assumed to be idle when the current iteration of the aggregation process has consumed at most     of the loop duration configured in the property workflow server managers reporting loop duration  if twice the archive purge interval has elapsed since the last purge  data is purged immediately  even if the data aggregator is very busy  because this is undesirable  the purge interval should be set large enough that an period of relative calm can be expected during that duration  the default value of one week is usually a good compromise between a timely release of disk space and good response times   if a table could not be completely purged before the data aggregator decides that it is too busy  the table will continue to be purged during the next iteration  if time permits  after the table has been fully purged  a table compression step is inserted for oracle databases  the command alter table     shrink space cascade is executed  releasing disk space of deleted rows  for other databases it is assumed that this happens automatically   in site analytics data is purged according to three similar parameters   workflow server managers aggregator insite purge delay   workflow server managers aggregator insite purge duration   m workflow server managers aggregator insite purge interval  w  again  the delay determines the amount of data that must be kept  the duration limits the transaction size  and the interval determines how often a table is purged and consequently how much data might be accumulated on top of the absolutely required data set   even if you set the delay very low  it is ensured that at least the data that is required for computing other statistics is available  the value should be set to cover the maximum interval for which in site analytics displays data  as configured in the content application engine   for the snapshot data and statistics  another set of parameters applies   workflow server managers aggregator snapshot purge delay   workflow server managers aggregator snapshot purge duration   h workflow server managers aggregator snapshot purge interval  w  if these properties look familiar  that should not come as a surprise  the only major difference is that the transaction size is    hours by default  this ensures that even when entering daylight saving time  only one set of snapshot data is purged   finally  the data for the analytics dashboard is kept in yet another set of tables  which are purged according to yet another set of properties   workflow server managers aggregator dashboard hh purge delay   workflow server managers aggregator dashboard dh purge delay       workflow server managers aggregator dashboard purge duration  d workflow server managers aggregator dashboard purge interval  w  while the dashboard purge duration and the dashboard purge interval control the transaction size and the cleanup frequency as for fact and in site tables  the delay for which data is kept is configured by multiple properties  one for each time interval type   there are twelve time interval types  which are explained in more detail in the analytics developer manual  hh  data for one hour  computed every hour   dh  data for one day  computed every hour with obscure exception due to daylight saving time   dd  one day  computed every day   wd  one week  computed every day   bd  two weeks  computed every day   md  one month  computed every day unless the starting day does not correspond to a similarly numbered day in the subsequent month   ww  one week  computed every week   mm  one month  computed every month   ym  one year  computed every month   qq  one quarter  computed every quarter   ff  half a year  computed twice a year   and yy  one year  computed every year     for each of these interval types  a different purge delay may be configured  for example  it makes sense to purge hourly data sooner or later  but it is almost certainly a bad idea to discard any of the yearly data sets  even if you set these values very low  the corresponding data will not be purged if it might be required for reaggregation into coarser time interval types or if it might be displayed in any of the standard reports  for example  the two year reports may be shown with a resolution of one day  so that at least two years worth of the dd tables are kept   in some cases  you might not want to treat all tables of the same time interval type equally  to this end  you can configure individual delays for single tables  for example  the tables totalviews hh and totalentries hh are required to display the report on the perfomance by the time of day  therefore it makes sense to keep these tables for a longer time  to purge the hh tables aggressively while keeping more of the two special tables  you might set the following properties   workflow server managers aggregator dashboard hh purge delay  d workflow server managers aggregator dashboard totalviews hh purge delay  y  h workflow server managers aggregator dashboard totalentries hh purge delay  y  h  if multiple tables require purging  the data aggregator will start with the table that has the highest quotient of the elapsed time since the last purge and the configured purge interval   as a final note  remember that purged data is really gone and that it is very difficult to reconstruct even if old database backups are still available   configuring search log analysis  if you operate a coremedia search engine  you can configure the analytics data aggregator to fetch and import the search logs  these logs are written to the directory var log querylogs below the search engine installation home  in order to make these logs accessible to the analytics data aggregator  you must create a script that moves all complete logs from the directory to a directory on the machine of the analytics data aggregator  please note that there is always one log that is currently being written  this log must not be touched   once you have created such a script  you can configure it in the workflowserver properties  the configuration might look as follows   workflow server managers aggregator search log import  duration      workflow server managers aggregator search log import  offset     workflow server managers aggregator search log  script movesearchlogs sh workflow server managers aggregator search log  directory searchlogs workflow server managers aggregator search log archive  directory searchlogs old  in the example  the script movesearchlogs sh in the installation directory of the analytics data aggregator would be called every      seconds  that is  every hour  it would be called     seconds after the full hour  the logs would be expected in the directory searchlogs after the script has run  once the aggregator has processed the logs  they would be moved to the directory searchlogs old  the next time that the script runs  it may optionally archive the logs that are present in searchlogs old   if the aggregation process has to be restarted  it may happen that unprocessed logs are still present in the log directory  such logs should not be removed  because they may have to be reimported after the next start of the aggregation process   configuring unique user analysis  coremedia analytics offers the possibility to count unique users who visited a site  in this case  multiple visits by a single user in any given time frame are not counted twice  there are two analysis methods   exact counting  this method yields exact numbers as far as possible  it still has to extrapolate if the user cannot be detected for some accesses  because this method has to reevaluate the data of up to one year when creating reports  it is very resource consuming  it is not recommend if you expect more than    million page impressions per year  approximation  in this case  the set of users is represented in a highly compact  but lossy way  this allows an estimation of the number of unique users with an error of less than     and often less than       as long as the number of users remains below or in the order of   billion  this method is efficient and scales very well   generally  we recommend the approximating method  even the counting approach cannot be fully precise unless your application can guarantee that the user can be reliably detected for all requests  so that the error during tracking the users is greater than the error incurred by the approximation during analysis  the limit to about   billion users should be of no significance as much higher numbers are a strong indicator of an error condition   even if your current load is below the given limit or if you are willing to invest in hardware  there is still the risk that in the future the load will rise significantly  therefore  the exact counting method is typically only useful in an intranet scenario   by default  the aggregation of unique user data is enabled and the approximating method is selected   workflow server managers aggregator unique users enable true workflow server managers aggregator unique users approximate true  you may want to update these setting  if you keep the analysis enabled  make sure to use an appropriate usernameextractor plugin as described in the analytics developer manual in order to get meaningful numbers for your deployment   while you may switch the analysis method after the first start of the data aggregator  the data for time periods that include the time of the switch will be unavailable or wrong  the same hold for enabling or disabling the aggregation   implementing standalone deployment  when choosing the standalone deployment of the analytics data aggregator as described in section  you must perform a number of additional steps that are not necessary when the main workflow server is shared as the analytics data aggregator  from the coremedia support  obtain a master live server license file that allows the operation of a workflow server and of coremedia analytics in the live environment  deploy the license and restart the master live server  create a user workflow on the master live server and put it into the group system  install the analytics data aggregator  configure the analytics data aggregator to reference the master live server in its capclient properties  add the line  workflow server allow live true  to the file workflowserver properties of the analytics data aggregator     other than that  configure the analytics data aggregator as described in this manual  configure the master live server database for the analytics data aggregator in the sql properties  configure the property  cap server workflow server url      in the file contentserver properties of the master live server using the correct ior url of the new analytics data aggregator     start and initialize the analytics data aggregator  upload the aggregation process using cm upload  configure the editor for the master live server by adding the attribute   editor enableliveworkflow  true           editor    in the file editor xml      upload and start the aggregation process as usual     tuning the performance  the property workflow server managers reporting loop duration determines how often the analytics data aggregator starts an aggregation  if you lower this value too much  the data aggregator will start a new loop as soon as the previous loop is finished  this will achieve the minimal latency for the reports  but it will result in a permanently high load on the servers  if you set this value too high  it will take a long time before clicks are shown in the overlay reports  so that loop durations beyond    minutes are usually not advisable   the property workflow server managers reporting thread pool size determines the number of concurrently running threads for parallelizable operations  in particular this applies to the import of logs  increase this parameter  as long as this improves the performance  keep in mind  that very high values might leave the jvm out of memory or out of native threads  a change of this property requires a restart of the data aggregator  
  this chapter describes tasks necessary for the configuration the coremedia analytics engine  this chapter might not cover all possible tasks  for a complete listing of configuration options  you might want to have a look at section  there you will find a description of all relevant property files for use with the coremedia analytics engine  
   x x x x tracking enable true false true whether the tracking component should gather information  used for disabling an installed tracking component entirely  e g  when reusing analytics enabled templates in a project where tracking is not required  tracking taglib required true false false whether the analytics taglib must be used to make a page view trackable during rendering  by default  the interceptor alone suffices to track a page view  set to true  if you want have better control over the set of pages that is tracked and if you are sure that you only want to track page views delivered through jsps  tracking sampling multiplier integer     the multiplier to be used in sampling  a value of   indicates that sampling should not be performed  a value of   indicates that all events should be used  but that sampling should already be prepared by setting appropriate cookies  a higher value indicates the fraction of events to use  e g   a value of   indicates that only     of the page views should result in an event    this property can be dynamically reconfigured using jmx   to ensure the maximum quality of the generated statistics  this value should only be changed near midnight  tracking sampling multiplier max integer      the maximum multiplier that is expected to be reported by a browser  higher values are potential attempts to skew the statistics  must be set at least as high as all multipliers used in the last hours   this property can be dynamically reconfigured using jmx  tracking sampling multiplier keep delay integer        the time for which the multiplier should be kept constant in a single session  in seconds  should be longer than the session timeout configured in the data aggregator   this property can be dynamically reconfigured using jmx  tracking sampling multiplier cookie string smplm the name of a cookie that stores the multiplier to be used by a certain session  this cookie is short lived  tracking sampling user name cookie string smplu the name of a cookie that stores the user name to be used for sampling  this cookie is very long lived  tracking sampling cookie domain string  the domain to be set in the sampling cookies  leave empty to set no domain  tracking sampling cookie path path   the path to be set in the sampling cookies  set to a path that includes all requests to your webapp or the tracking controller tracking directory incomplete path analyticslog incomplete  the path to the directory that contains analytics logs for which no clock synchronization information has been gathered  tracking directory complete path analyticslog complete  the path to the directory that contains analytics logs with clock synchronization information  tracking max lines per log int      the maximum number of rows that is written into a single log file  choosing this value too low will cause many temporary file to be generated  choosing this value too high will lead to large transactions when writing the logs into the database  tracking search engine detection    string  properties with this prefix are used for configuring the external search engine detection  see section for details  tracking page data extractor pattern regular expression  the regular expression that is matched against the referrer url by the default page data extractor  the first capturing group of the expression must match the numeric id of the referring content  tracking page data extractor view string default the view that is returned by the default page data extractor  tracking page data extractor locale string  the locale that is returned by the default page data extractor  if empty  this indicates that the language of the target page should be used  tracking filter exclude types csv csv string com coremedia cap common blob a comma separated list of type names that causes objects of these types to be excluded from event tracking  if empty  no types are excluded  per default  all blobs are excluded from tracking  as identified by implementing the interface com coremedia cap common blob  tracking filter include types csv csv string  a comma separated list of type names that objects of tracked events must match  if empty  no restriction applies  tracking filter exclude type pattern regular expression  a regular expression that causes objects with matching type name to be excluded from event tracking  if empty  no types are excluded   tracking filter include type pattern regular expression  a regular expression that the type names of objects of tracked events must match  if empty  no restriction applies  tracking filter exclude view pattern regular expression  a regular expression that causes matching views to be excluded from event tracking  if empty  no views are excluded  tracking filter include view pattern regular expression  a regular expression that the views of tracked events must match  if empty  no restriction applies  tracking filter exclude locale pattern regular expression  a regular expression that causes matching locales to be excluded from event tracking  if empty  no locales are excluded  tracking filter include locale pattern regular expression  a regular expression that the locales of tracked events must match  if empty  no restriction applies  tracking filter include default view true false true whether to include the default view into event tracking  tracking multi site true false auto auto whether the convention of treating folders immediately below the root folder as the site should apply for the default site extractor  use auto in the content management environment to reuse the server configuration only  tracking robots db location path  web inf analytics robots db points to the robots db file that contains robots  recommended file can be found at http   www robotstxt org  other database files containing robot information as plain text are supported as well  tracking robots db idpattern regular expression  robot id       a regular expression that is used to search the analytics robots db file for robot ids used for detection  tracking robots robotscsv csv string  see analytics robots db for details  a string containing additional robot ids not contained in analytics robots db file in csv format  tracking robots wildcardscsv csv string  see analytics robots db for details  a string containing wildcards used for robot detection in csv format  tracking robots browserscsv csv string  see analytics robots db for details  a string containing browsers used to skip robot detection in csv format  tracking ip drop bits int   the number of bits to drop from an ip address during tracking  if that is needed for privacy due to applicable law   
  coremedia editor and webeditor send http requests to the differencing service  the coremedia editor additionally sends an https request with every http request to authenticate the user to avoid a relogin against the web application  the differencing service asks the content server for the two document versions  computes the differences and returns the result   to accept https requests  the web server must be https enabled  see enable https on how to configure https in tomcat  the coremedia editor must know the host name and ports of the differencing service  see enable differencing on how to set up differencing in the coremedia editor  
  this section contains the content of the install script file as described in section  
  the section describes who this book is addressed to  the structure  how these books are made  and typographic conventions  the section summarizes all you should know in order to utilize the coremedia editor and webeditor within a coremedia system  it introduces the coremedia content server and live servers  the workflow  resources  and the tools provided for editing  the section coremedia editor user manual gives an in depth explanation of the coremedia editor functionalities  the coremedia webeditor user manual introduces the coremedia webeditor  only the differences to the coremedia editor are described so please read also chapter for the basics of editing  the section describes the predefined reports of coremedia analytics  the second main section holds an overview type reference about all menus  menu items  tool bars and their functionality for both coremedia editor and webeditor   enjoy your work with coremedia sci  
   section version description     section           added description of new analytic dashboard reports    section   version           documented the new in site analytics mode  sourceless clicks     section   version           added description of spellchecking for the webeditor  
  a coremedia system is made of two environments  a production environment and one or more live environments  depending on if the multi site extension has been installed or not    production is the creation  modification  deletion  and editing of texts  images  multimedia file  or the  mostly automated  import of content   after production  the edited content is  moved  to the live environment by a publication  i e  the database content in the live environment is updated and made available for a different group of users   the illustration outlines the basic architecture of such a coremedia system   but the technical base allows much more complex scenarios       
  coremedia applications handle two kinds of objects  documents and folders  documents consist of structured content which can be edited in the editor  folders structure and organize the content  documents and folders are subsumed under resources  they share the following characteristics     they are located in a folder   they have a name   they have a unique id number   documents have a definite type  the available document types are defined once by the project team of the coremedia system  the type of a document is defined at creation  it cannot be altered afterwards  the document type specifies the number and types of fields in a document  see section    resources are initially created on the content server  they must undergo approval and publication before they appear on the live server  changes to a published resource  too  must be published before they appear on the live server   resources are in different states during the editorial lifecycle  read more about the states of documents in section  and more about folder states in section  
  deleted documents were moved into the recycle bin   the differences in handling the recycle bin from handling the windows recycle bins are   there is a recycle bin only on the content management server  in order to delete files  start your coremedia editor  select and delete them  e g  via file delete   publish these resources  e g  via file publish   if they had been on the master live server before  they are now deleted there  furthermore  you cannot directly access deleted files  in order to retrieve a document you have to perform a query and copy the document from the query window into the target folder or restore them  how to perform a a query  learn in section  in contrast to windows recycle bins  you can t restore folders with content  if you restore a folder from the recycle bin  only the folder but no contained documents will be restored  on the other hand  if you restore a document  whose folders has also been moved to trash  this folder will also be restored   
  to inspect the rights and rules that apply to a resource  have a look at the information window  see section   
  the coremedia editor provides different windows for different editing routines   an explorer window  this is the default and main window  see illustration  a workflow window for creation  processing and surveying workflows  see section  a query window for assembling  modifying and managing queries  see section  a publisher window to monitor progress and results of publication processes  see section  a document type window to overview the different available document types  see section  a user manager window    for non administrators  this window is required for password changing  see section     for administrators  this window allows to create and modify group and user settings as well as individual and resource rights  see section    
  the differencing view displays the differences of two document versions in a web browser  section and section explain how to start the browser from the coremedia editor and coremedia webeditor respectively   the figure below shows the browser window displaying the differences of two sample document versions  the window can be divided into four parts   header row middle column with orange button controls left column showing a toolbar header and the first document version right column showing a toolbar header and the second document version  
  coremedia sci is shipped with a webdav server and so supports webdav enabled application such as microsoft word       you ll have direct access to documents in the coremedia repository  displayed as webfolder for this purpose  of course  you ll have to have read rights on the resources in order to view them     for more information about the rights system go to section    for a sample webdav routine  go to section   
  the simple and intuitive usability of content editing tools make the coremedia sci a valuable work tool in everyday publishing and editing routines   this chapter briefly introduces the different tools and their user interfaces  outlines functionality and new features that come with coremedia sci   the standard editing tool is the coremedia editor  a standalone java application that is installed on the editor s computer  see section for a short introduction and section for all the features and handling  the webeditor is a browser based editing component  in interface and handling it bears as close a resemblance as possible to the coremedia editor  see section for a first impression and section for usage  coremedia editors have a powerful text editing and formatting component   the richtext pane  it allows extensive formatting and wysiwig editing of special richtext documents  you ll find a brief introduction in section and more detailed information in the relevant chapters of manual and manual  the differencing view shows you the differences between two document versions  in section you will find a description of the functionality  for very specialized editing tasks it is possible to connect webdav enabled applications such as photoshop  golive  or microsoft excel to the content repository and access coremedia resources  find out more in section    full unicode support pays tribute to international information transfer and global networks  see section     
  in section you will find a description of all  menu entries and tools of the coremedia editing tools  
  user and groups  in order to perform tasks within the predefined workflows  users have to be assigned to special role groups  in addition to their project specific group memberships     composer role  to be able to create  and start  a workflow   approver role to be able to approve resources within a workflow   publisher role  to be able to publish resources  these role groups  see also this article  are predefined  membership is granted by the coremedia administrator    in coremedia sci role groups and normal groups can be merged together  i e  you wouldn t see the role groups in the user management window  instead  the role groups would be assigned to normal groups via a configuration file  see the administration manual for details   
  we had mentioned a set of four plus one predefined workflows in the first paragraph of this chapter  the plus one workflow is called global search and replace  a function for handling huge numbers of documents  retrieving and replacing search strings in automatic or interactive mode  find a detailed description of this workflow in section  
  your project contains graphics files  for these  a document type picture with a field online has been designed  this field stores the graphic file as blob  i e  in a binary format   if the webdav server is activated and you have the according rights on these documents  you may edit these directly in a webdav enabled application such as photoshop  if you utilize the windows xp office package  the file names must not contain any umlauts or special characters   start the application  click the menu items in order to open the file  navigate to your webfolder  insert user name and password for the coremedia system  and choose the document   after you have finished editing  just save the document  changes are visible in the coremedia editor then   the same routine goes for renaming  moving  creating  and deleting documents in coremedia sci  too  however  you can only delete folders and documents which are not published  folders and documents that have been deleted in webdav enabled applications are moved to the recycle bin in the coremedia system   the illustration shows both the structure in the coremedia system and the matching view in the windows explorer  
  using the direct search you can search in structured text fields  string fields  xml fields  for specific words or phrases and replace them   in section you will find a description of the direct search usage  
  see abbildung for the explorer window with the search field right above the document overview  you might enter the search term into the search field or select it from the combo box  the combo box contains the last used search terms  click  search  or press  enter  to start the search in the current folder with all subfolder  the explorer window switches to the search modus  i e   the search field disappears at the right side  the document overview of the current folder will be replaced by the still empty result list and the folder view at the left side will be replaced by a search area   
  the search area contains the following components  search term  the field shows the search term  press  enter  to start a new search  restrict to document type  you can restrict the search result to specific document types  this component will not be shown in the file chooser dialog  search in folder  the search is limited to the shown folder  subfolder checkbox  shows  if the search spans subfolders   search   click this button to cancel a running search or to start a new search   back   click this button to cancel a running search and or to leave the search modus  the explorer window will be shown in the standard style  documents previously selected in the document overview will be again selected    see abbildung for the explorer window with the search area  the documents found from the search will be shown at the right side of the explorer window in a specific document view  the document view differs from the non search document overview  it contains less columns and has an additional column containing the path of the found document  if you click the heading of a column  this column will not only be sorted but a new search will be started  this is necessary  because the overview shows only a part of the result set if it exceeds      documents or the editor has canceled the previous search  therefore the sorting of a column might lead to a different number of hits or to different documents   e g  sorting for document names in an ascending order might give      documents starting with  a  to  g  and sorting in descending order might give      documents starting from  z  to  o    you might always hide or show the search area without starting a new search  simply click  switch to full text search  in the toolbar or select edit full text search   
  the global search and replace workflow is intended to change text in many documents  e g  a company name has changed or a name was misspelled  it is not recommended to use it as a pure search tool  the workflow uses the direct search in a document in order to perform the changes interactively or automatic   in section you will find how to use the global search and replace workflow  
  queries are intended for very detailed search in the metadata  and data  of documents  it s easy to find out which documents have been changed by editor a in time b and which are not published yet  it s also possible to search for specific text in structured text fields   string fields  xml fields  but it s not possible to search for binary data    you perform the query in a specific window  see section and section for a desription of queries  
  coremedia s smart content infrastucture  sci  is a system for the comfortable and easy administration and creation of up to date content  interactive functions  and personalized content for the internet and intranets  the section surveys a coremedia system  its components  and their interaction   the section introduces coremedia resources and their different states in the content lifecycle  the kapitel describes the recycle bin  which has some differences to windows    the section outlines the the characteristics of users  groups  roles  rules and rights  the section introduces the editing tools for content modifications in a coremedia system  the section briefly introduces the basic concept of the coremedia workflow and explains essential terms and ideas  the  kapitel describes webdav support of the coremedia system  the  kapitel  describes the search facilities of the coremedia system  the  kapitel describes the remote control of the editors  remote control means  that you can call functionality of the editor directly from a web page  this functionality has to be enabled in a project   
  the overview window of the editor is divided into four major sections  the folder overview      the bookmark overview      the document overview      and the detail view      have a closer look at illustration   
  it can also be the tool bar of the richtext feature as introduced in section  
  in section you will find a description of all menu entries and tools of the toolbar  
  in order to change your password   select window new user manager window from menu bar       the user manager window displays the tab with your user settings on it  user name  user id  password fields  home folder and group membership information  see illustration     
  furthermore  you can view the rights of the individual groups  as in illustration  by     selecting group edit group from menu bar    clicking on the edit group symbol  or   double clicking the group     
  to avoid confusion  no more than one folder or document with the same name are allowed to exist within a folder  if a folder or document already exists with this name  a further window appears which asks you to give the new folder a different name  if a folder is not located correctly in the folder hierarchy  you can move the folder to the correct position by cut and paste  see section      
  due to the new rights concept introduced in coremedia sci      users only see folders that they have the appropriate rights for  if you don t see a folder that is supposed to be already existing  check for your rights on this folder with your coremedia administrator  to learn more about the rights concept  consult section  
  the folder hierarchy determines the content structure at your website  documents hold the content  therefore  documents must be placed in the appropriate folders      learn how to create documents in section  and how to move them in section     
  if you want to delete a folder or a document  keep in mind that     folders that have not been published before are destroyed and the documents are moved into the recycle bin  see sectiocn     folders or documents that had been published before are marked for deletion and will be deleted with the next publication  for more information  see   section   if you want to delete a folder   select the folder  then     choose file   delete from the file menu or   click the  in the toolbar   or right click the selected resource and choose delete from the context menu  see illustration    a dialog box opens up     
  if you want to delete a document select it  then   choose file   delete from the file menu  click the delete symbol in the toolbar or right click the selected resource and choose delete from the context menu  see illustration   
  please make sure that the deletion of a resource does not create dead link because these lead to publication errors inevitably  see section   
  in order to revoke the state  marked for deletion   see section   proceed as described above  but choose the revoke delete menu item resp  toolbar symbol instead     how to track documents moved to  the recycle bin is described in section   
  for basic knowledge about resources   folders and documents   see section  
  the next chapters hold information about   how to create and handle folders in section  and how to create and move documents in section   the various features for editing documents are described in detail and by examples in section  
  the new richtext component as introduced in section is a major step towards wysiwig editing  differences in handling  as compared to the standard component  see section  are described in the single chapters of this section  
  a document goes through several states during the editorial process  see section   the different states indicate whether documents are being edited  have been approved for publication or have already been published    the status of the document is shown  for example  in the status field  in the version history or by the symbol at the top left corner of the window  see section   to apply changes to a document you have to check it out    with checking out  a new version is created  this new version can be edited and saved in an intermediate stage as often as necessary  as long as the document is checked out  no other user can check it out  change or delete it  however  other users can access older version without making changes  they can read it  copy text passages or binary data  search for terms  etc  to check out a document that is already opened in the document window  you have the following options   click into the document and press  enter   select file check out from the menu bar  click  on the toolbar  press the keyboard shortcut  ctrl   l    a greyed out check out symbol indicates that the document is already checked out  
  the richtext component adds a plethora of text formatting opportunities  such as    bold     and italic       underlined  strikethrough  subscript and superscript  all        different fonts      font sizes       paragraph templates       paragraph alignment  left  center  right  all       font color and background color       these can be applied via tool bar  the context menu or partly using the attribute editor  see section    formatting text  to format a text section  e g  as italic    click at the position of the text to be formatted    format the text e g  as italic by     selecting format character format  italic from the menu bar or character format italic from the context menu    clicking on the toolbar    using the keyboard shortcut  ctrl   shift   k     and then start typing   alternatively  you can use the following method    select the text with the mouse    format the text with one of the next options     select e g  format character format italic from the menu bar or character format italic from the context menu   click on on the toolbar   the text will be displayed in italics  set the cursor to the required position and continue work   undo formatting  if you want to undo a particular formatting    mark the text section as described above and   format the text with one of the following methods     select format character format default from the menu bar or character format default from the context menu     
  using a blockquote  you can format a paragraph as a quotation and you can add the quotation source  it depends on your project  how the quotation will be highlighted in the output  you can enter the quotation source  e g  a url  using the attribute editor  the use of the source information also depends on your project  e g  as a tooltip    format as quotation  in order to format a paragraph as a quotation  proceed as follows    choose the paragraph    format the paragraph by    choosing add blockquote from the context menu or   click  and  in the tool bar     the paragraph will be highlighted         open the attribute editor to enter the quotation source by     choosing the menu item format stylesheet attribute or   by choosing stylesheet attribute from the context menu or by   clicking  and   in the tool bar   the attribute editor opens as in abbildung  
  remove links   external and internal links can be removed by   selecting the linked  blue and underlined  text  unformatting the text  as described in section      
  numbered and bulleted lists       numbered list   applies the format of a numbered list  see illustration       bulleted list    applies bullets to a list  see illustration   
  you may search for words or combinations of characters within a structured text field      and you may also search for one term and replace it by another       how to perform a cross document search with the help of the global search and replace workflow is described in section  
  to search for a term    check out the document   choose edit search  or    press  ctrl   f   or  alt   s          type in the search term and check the options  see illustrationc          after a term was found  the search has to be continued by clicking  search          finish or cancel the search by clicking  cancel         if no matching term was found  an error message says so     
  to replace one term with another     check out the document    choose edit   replace  or     ctrl   f   or  alt   e          type in the search term  the replace term  and check the options  see illustration      click  search  to begin    after a term was found  you may    click  replace  to replace the term   click  search  to continue the search without replacing this one term  or   click  cancel  to cancel the search and replace procedure       if all terms have been replaced  this is indicated          finish or cancel the search by clicking  cancel    
  assign attributes  in order to assign attributes to a table  a table row or a table cell  proceed as follows  select the table cell or row  open the attribute editor  by choosing one of the following methods   select table set table attributes from the context menu or  click  and  set table attributes    in the tool bar   the table attribute editor opens up  see abbildung      select the appropriate tab  select the favored attribute  you will find a description of the attributes below   click  ok    
  this chapter describes how to insert  and edit images into richtext panes or blob fields   some basic tasks of image editing are covered by the coremedia editor  but for further processing go with professional software such as potoshop tm    as the coremedia sci supports webdav standards  it is possible to integrate these tools  for further reference  see the section  it is also possible to drag images from a document into an external application for editing  after you have finished editing  you can simply load back the image into the repository   if you want to paste images into richtext panes  these images have to be stored in image documents in the coremedia repository  the cms simplifies the task of document creation  you can use drag and drop to move an image into the richtext pane  the coremedia system offers the option to create a new image document for this image   insert images using drag and drop  in order to move images from your computer into the coremedia repository  there must be a document type capable of storing the image format   proceed as follows  click the image file in the windows explorer and move it on the richtext pane   a dialog opens up  you can choose if you want to insert the image as an external link  an internal link or as an image  for the latter two points  the system has to create a new document     click  insert images       a dialog opens up in which you have to define the document to create  
        click           in the image attribute editor  see lustration     choose the image via document chooser    if the document contains more than one image  you can chose the favored field using image property      otherwise     is filled with the field containing the image    chose the appropriate attributes    click  ok  to close the image attribute editor  
  you can modify the position of the image by applying paragraph alignment  see section  
  the document has been checked out and can be given back  right hand symbol  or the changes cancelled  middle symbol    you can find an overview of the different states in section  
  coremedia cms can store several versions of a single document  often you want to compare two versions to see what you have changed  the differencing view  allows to display two versions with their differences side by side see in a web browser  see kapitel  to open the browser from the document view  you can  select file difference in the menu or click  in the toolbar   
  the information window is a valuable tool to find out details about the resource   to open     select the resource and   choose     file   properties from the menu bar  or   properties from the context menu  or   click  in the toolbar   the information window has four tabs    state   learn  who has created  approved etc  the ressource   history      learn the details of the editorial lifecycle here  also see section     rights      see the rights on the resource here  learn the basics in section    rules      lists the rules applied to the resource  more about rules in section   
  in this case  an  information window can be opened up with the menu entry file properties which shows all information about the document in detail  see section  the user who is last in the version history has the document checked out  
 the first step in global search and replace is to determine the set of documents to be processed   select the documents   or execute a query and select documents to be processed from the query result     start the workflow via the menu item file new workflow global search and replace      if not already open  the workflow window opens now  the compose task is assigned to you and is automatically accepted  see image      a    
  after creating the list of documents to be processed and finishing the task  you are assigned the options task  this task is automatically accepted  see abb    here you can set search and replace options  
  in order to replace text in documents from the document list automatically   without a user interacting   proceed as follows   click the button  automatic replace   a progress window  see bild  shows the total number and number of already processed documents  documents that you are allowed to edit  have write rights on  and that are not checked out by other users will  be processed  all other documents will be skipped   stop automatic search and replace  to stop automatic search and replace   click  stop  in the progress window      changes already made until stop will not be undone   
  for interactive search and replace select a document from document list  it is displayed in the document view of the workflow window  the first appearance of the search text is highlighted   if no matches are found  nothing is highlighted    skip document  click  skip document      marks the selected document as skipped  if no document is selected  the first in document list will be skipped   replace  click  replace      replaces highlighted text  highlights next text match  if no more matches appear  the document will be checked in automatically and the next document will be chosen   replace all  click  replace all      replaces all  replace not and continue  click  search      the highlighted text will not be replaced  the next match is highlighted   search from beginning  see  search   but starts from the beginning of the document   if not all documents from the document list have either been skipped or processed  the search and replace task appears again in your workflow window  you can either skip the remaining documents and so finish this workflow or delegate the task to another user  see section         
  after you set the options for search and replace and completed this task  you are assigned the search and replace task  it is automatically accepted  see bild      a     this step is the processing of documents  the actual search and replace  you can choose between automatic and interactive search and replace modes  
  the coremedia workflow global search and replace is designed for searching and replacing text in more than one document  this workflow complements the local search and replace functionality as described in section  we recommend to read the workflow related chapters first in order to familiarize with workflow functions and ideas  
  search and replace text  in order to search and replace text in several documents  create a document list and start the workflow     you may select these documents manually or from a query result  for executing queries  see section      set search options and      for example  you can determine which fields of the documents will be searched     execute search and replace   the following chapters hold a description of these steps  
  to fill your project with content such as texts  images  tables  links  etc   and to keep this content up to date  you edit the documents    you can edit documents in the detail view section of the coremedia editor user interface  or open them in an extra document window with a double click  on them in the document overview  see section   
  the administrator can approve and publish resources without using a workflow  coremedia sci allows to enable this feature for other users  depending on the needs of your installation   see image        a   so  if you miss these buttons and menu items in your editor ask your administrator for advice or skip the section  please read section for an introduction into publication with coremedia sci  
  please do read section and section in section in order to become familiar with basic terms and principles of handling resources in a workflow  
  here we continue with    step publication which is a classic four eyes workflow  see section for details   so editor and approver are different users    if editing is finished  you can approve the document for publication  create a workflow     start the workflow and create a change set     approve resources  and    publish resources    read section to learn more about the workflow window  section lists how prepare and perform the workflow routine  and section explores other options     
      menu bar   the menu bar provides access to all features  handling of the query itself  the conditions  view and navigation options and access to other windows        toolbar    provides access to all funcions except view and window options        query window    the query tab in the query window lets you select one of the available doctypes  limit the hits to             or all and displays the number of found documents  the comment tab     is described in section        list of chosen and set conditions   they can be displayed in a tree view via view   show tree  too        result window    displays the search result with configurable view options as well as the time the query took in its footer  
 start the genericwebeditor by launching your web browser   then type in it s address bar      http    contentserver   port  editor      contentserver  and  port  are project specific  they ll be provided by senior or technical staff     the login screen  see illustration  opens   
  the overview window of the webeditor is divided into three major sections  the folder overview      the document overview      and the detail view      have a closer look at illustration   
  it can handle the newly introduced richtext feature  see section  too  
  either choose file   open from the file menu or click on the appropriate symbol to open this document in the document window for editing  see illustration   
  in order to change your password   select window new user manager window from menu bar       the user manager window displays the tab with your user settings on it  user name  user id  password fields  home folder and group membership information  see illustration   
  if you want to delete a folder or a document  keep in mind that     documents that have not been published yet will be moved into the recycle bin without further confirmation    folders that have not been published before are destroyed and the documents are moved into the recycle bin  see sectiocn     folders or documents that had been published before are marked for deletion and will be deleted with the next publication  for more information  see  section   if you want to delete a folder or document    select the resource  then     choose file   delete from the file menu    click  in the toolbar   
  in order to revoke the state  marked for deletion   see section   proceed as described above  but choose the revoke delete menu item resp  toolbar symbol instead    how to track documents moved to  the recycle bin is described in section   
  please make sure that the deletion of a resource does not create dead link because these lead to publication errors inevitably  see section      
  to learn more about folders and documents  read  section in section  
  the next chapters describe      how to select resources  section     how to create and move folders  section       how to create and move documents  section      how to rename resources  section  and     how to delete resources  section    the basic routines equal those in the coremedia editor  that s why we recommend to have a closer look at section too  
  the new webeditor can handle the new richtext component too  we ll survey the features throughtout section  
  consult section for the description of the single icons  they are identical in function  
  numbered  bulleted and nested lists can be created like with the coremedia editor  read section to learn more  
  the editing of richtext tables is similar in both coremedia editor and webeditor  only the dialog for table size has been omitted  in the webeditor you will always get a     table which you can shape to your needs using the appropriate tools  please have a look at sectin    that s how tables look like in the webeditor  
  if you want to learn more about editing link lists  see section  
  to integrate new binary data from the file system in image documents  you have the possibility of loading binary data from the file system   to do this  proceed as follows    select the document  in which the binary data should be loaded    open the document in the overview window    check out the document    click the  browse  button of the blob field            the dialog window for selecting the favored file opens         select the file and click  load    the name of the file is shown in the document window  to save the binary file to the coremedia repository   you have to check in or save it    chose the mime type of the file in the field mime type        save the document or check it in   an error message appears  if the chosen mime type does not match the actual mime type of the binary data  see abbildung   
  while you have checked out a document  no other user can check out the document  if you want to let other users work with the document  you need to check it in  you can either     choose the menu item file check in or    click  in the tool bar   now the document is checked in again and other users can check it out for editing  you can check the status of the document in the column version of the document overview  see kapitel for a description of the icons   
  coremedia cms is able to store several versions of a single document  often you want to compare two versions to see what has changed  the differencing view allows to display two versions with their differences side by side see in a web browser  see section   to open the browser from the document view  click  in the toolbar 
  to view the detail information     select the document  and   click  in the toolbar    using the list of the version field  you can get the information for each version of the document  otherwise  use the window in analogy to the coremedia editor as described in section  
  the red framed part shows the name of the user who has checked out the document  you can get additional information concerning the document choosing the menu item file properties  see section   
   before you start the global search and replace workflow  you can select documents to edit in the workflow      select the documents  see abschnitt             or     execute an appropriate query  see abschnitt      and select the documents from the result          start the workflow by chosing file new workflow    select global search and replace from the opening window and press the  start workflow  button         if the workflow window was not yet open  it will open up now with the compose task automatically accepted by you          you can add or remove documents from the document set         remove document        a  select the document s           b  chose edit cut         add document        a  select one or more document s  in the overview or query window and copy it using the menu item edit copy or the appropriate button from the toolbar         b  switch to the detail information window of the workflow window  add the documents to the document set using the menu item edit paste or the appropriate button         you can also add documents using the document chooser         a  click the document chooser button from the links toolbar  the blue  magnifier          b  select the document and click  chose           you can complete the composing of the document set choosing the menu item file complete task or click the appropriate button in the toolbar         the compose task will be completed and the options task will be started  up to now  no changes have been applied to the documents  so  the coremedia repository will not be changed if you abort the workflow at this step    
  the following options are available    search for  the text to be searched for   replace by  text to replace the found text   case sensitive search  determines whether lower and upper cases matter  not activated by default    properties  lists all searchable text fields of all document types of the selected documents  the names of the properties are composed of  document type   field name   select some of them  or select all by pressing the keys  ctrl   a       set the options according to your specific requirements and type in the search text and the text to replace it with     finish the creation of the document list via the menu item file complete task resp  the symbol bar item    now the search and replace task will automatically be assigned to you and you have three possibilities to proceed    execute the task in the coremedia editor    open the coremedia editor and process the task as shown in kapitel    reject the task    chose file reject or the toolbar item  the task will be offered to all authorized users    delegate the task    chose file delegate or the respective toolbar item  a dialog box opens which displays all authorized users  chose the appropriate user and click  chose   the task will be automatically assigned to the user who can handle the task in the coremedia editor  
  the coremedia workflow global search and replace is designed for searching and replacing text in more than one document  in the webeditor it s only partly possible to execute the workflow  because the actual search and replace must be done in the coremedia editor  in the webeditor  the user can execute the following steps     select the documents to search in and start the workflow     collect more documents to search in     define the search options     delegate or reject the search and replace task or execute the task in the coremedia editor     you find a description how to execute the search and replace task in the coremedia editor in kapitel     
  before you start to edit documents in the webeditor  we recommend to read section and the previous sections in this section   the functionality is as similar to the coremedia editor functionality as possible  that s why the section and especially section contain useful information too   to edit documents in the webeditor   start the webeditor  as described in section  log in select the document  check out the document  open the document in a document window     click the open document symbol in the toolbar     click into the fields and start editing   
  some crucial differences in handling are   the spellchecker  section  is not yet available for the genericwebeditor  there is no undo redo functionality    there is no context menu     
  the richtext toolbar resembles the richtext toolbar in the coremedia editor  the link list toolbar is explained in section  
  the concept of coremedia workflows is surveyed in section  we recommend to read section too  because user interface and handling are similar to those in the coremedia editor  there are only small changes           the menu bar offers less items        the detail information window contains a tool bar which offers the tools for editing the selected task or workflow        the task and workflow overview has been revised for better usability  you will find all tasks accepted by you below my tasks  all tasks offered to you below offered tasks and all workflows started by you below my workflows    in addition  you may read section in order to utilize this preconfigured workflow too  
  starting workflows  the start of a workflow in the webeditor differs slightly from the start in the coremedia editor because an additional window is involved  so  the start will be described in this chapter  for all other workflow tasks  read kapitel     overview window   choose file   new workflow    and select the workflow  see illustration     click  start workflow      workflow window   choose window   workflow window  then choose new workflow     and select one    click  start workflow    
  the predefined performance report  see performance report  displays the aggregated number of page impressions and visits for a given  sub  site in the selected time interval    the following definitions of page impressions and visits are used   page impression  coremedia analytics defines a page impression  pi  as a single play out of a page to a site visitor  visit  in coremedia analytics  a single user web session is counted as one visit   the diagram s x axis expands on the time interval given by the time range parameter with ticks  axis marks  according to the time resolution parameter  each x axis tick represents a time interval tval  expanding from the given point in time to the next tick  including the left lower interval boundary and excluding the right upper one  each x axis tick is mapped to the aggregated number of page impressions  shown as a bar  and visits  shown as a line  within the time interval    example  in the detail report view given below  the x axis tick representing may      starts on  st of may at midnight and ends on  st of june at midnight  including the initial point in time but excluding the ending one   
  the predefined top viewed pages report  see screenshot  displays a ranking of the published pages which have been requested most often by visitors during the specified time interval  additionally  coremedia provides a report which displays the top viewed pages for a given category and all of its subcategories  the later report is called  top viewed pages per category   the diagram follows a tabular structure    the leftmost column displays the page rank  pages with an identical number of requests will display the same rank   the name column shows the page display name or  if no display name is available  the page technical id  to the right of the name column the number of total absolute requests of the object is shown  additionally  this number is visualized with a horizontal bar displayed behind the name column  the rightmost column indicates the relative proportion of all page requests during the selected time interval for the given site   
  the predefined top entry pages report displays a ranking of entry pages of the selected site for the given time interval   
  the predefined top external search terms report  see screenshot  displays a ranking of search terms used by visitors in popular external search engines to find and enter your site  technically  entry page requests  requests that originate from a different site  are scanned to determine whether they originate from an external search engine s result page  and if so  the search term used in the search engine is recorded  because the request format of search engines is not standardized  not all requests can be detected as requests from a search engine  requests from the following search engines are recognized   www google com www altavista com www lycos com www dogpile com www msn com www search com www aol com www alltheweb com  the term  external search engine  refers to search engines outside the scope of a coremedia cms system installation  e g  google  altavista  etc   please note that you cannot refine your report to select a specific external search engine  
  the predefined repository information report  see screenshot  shows a distribution of content items by content category  the repository information report is site specific and the site can be selected via report parameter  additionally  a number of filters can be applied to further detail the reported repository status information   your repository content is typically organized following a hierarchical category schema  the repository information report reflects the hierarchical category structure and allows you to navigate up and down the category hierarchy  per default  the category  top   which subsumes all defined categories  is selected  the report chart displays the content distribution for the currently selected category  if not empty  the current category is represented by the first pie section  counted clockwise from top   followed by a pie section for each direct  non empty subcategory   to indicate which categories can be detailed further  the names of non empty  structured subcategories  those that have again subcategories and thus can be drilled into  are prepended with plus sign     in the report chart  category that do not show that sign are elementary categories  in the context of the selected site  and cannot be detailed further   
  the unique visitors report shows the number of distinct visitors who visited a given site in a certain time interval  a visitor who returns to the site is not counted twice within the time resolution unit  for example  a report may be resolved to days  covering a week  if a visitor visits the site twice on monday  but only once on tuesday  this report will show a single unique user for both days   the possible choices for variables and the offered actions for this report are identical to those of the performance report described in section  but only a single time series is shown  namely the number of unique users for each time interval  
  the visits per unique visitors report shows the average number of visits to a site for visitors who visited a given site in a certain time interval at least once   the possible choices for variables and the offered actions for this report are identical to those of the performance report described in section  but only a single graph is shown  namely the average number of visits  
  the page impressions per unique visitors report shows the average number of page impressions of a site for visitors who visited a given site in a certain time interval at least once   the possible choices for variables and the offered actions for this report are identical to those of the performance report described in section  but only a single graph is shown  namely the average number of page impressions  
  the page impressions per visit report shows the average number of page impressions that make up a single visit for a given site  only those visits are taken into account that are limited to single site   the possible choices for variables and the offered actions for this report are identical to those of the performance report described in section  but only a single graph is shown  namely the average number of page impressions  
  the visit duration report shows the average duration of a single visit for a given site in seconds  only those visits are taken into account that are limited to single site  the duration of a visit is the time difference between the first and the last page impression of the visit  time spend on the last page before the visit s session times out is not taken into account   the possible choices for variables and the offered actions for this report are identical to those of the performance report described in section  but only a single graph is shown  namely the visit duration  
  the term  analytics dashboard  comprises a visualization and interactive drill down of long term statistical cms related performance and system status data  the report data is being collected from cms      content management systems  feeding content play out and content consumption oriented reports  as well as from cms      content delivery systems  feeding editorial system status reports   coremedia provides the customer with an extensible set of general cms related reports and with a toolkit which enables them to easily extend existing reports or add new ones when needed   a user s entry point is a customizable analytics dashboard  see dashboard view   which provides a quick overview of several reports  if desired  a user may open a detail view for a refined report visualization which allows interactive drill down  see report detail view    open the analytics dashboard  the analytics dashboard is  a web based application  enter the uri below in your browser  ask your administrator for the hostname and port of the coremedia analytics installation and replace  hostname  and  port  with this values   http    hostname   port  analytics dashboard view  the analytics dashboard opens up  possibly after going through a login dialog  in figure you can find an example screenshot  the actual dashboard at your site may contain more or less reports  depending on the configuration of the analytics dashboard   dashboard and detail report views  in the dashboard  reports are organized by views  views structure the information reported to a given user  one view represents a  logical  aspect of reported information  e g  the overall performance of a site  searches and search terms  page views or a categorization of content  in the dashboard user interface  each view is shown as a tab  by clicking on the tab  the corresponding view is displayed to the user   a view is composed of one or more  usually three and more  reports  each report is visualized in a report box with a report title     on top  a report sentence     describing the data shown and a report chart      see screenshot below  clicking the  details   link opens a detail view of the selected report   
  please read kapitel for a description of the menu  
  please read kapitel for a description of the menu items     
  please refer to kapitel for a description of the menu  
  please refer to kapitel for a description of the menu  
  please refer to kapitel for a description of the menu  
  the query window allows to search for documents  the window consists of two main parts below the menu bar and toolbar        menu bar   the menu bar provides access to all features  handling of the query itself  the conditions  view and navigation options and access to other windows        toolbar    provides access to all funcions except view and window options        query window    the query tab in the query window lets you select one of the available doctypes  limit the hits to             or all and displays the number of found documents  the comment tab     is described in section        list of chosen and set conditions   they can be displayed in a tree view via view   show tree  too        result window   displays the search result with configurable view options as well as the time the query took in its footer  
  please refer to kapitel for a description of the menu  
  please refer to kapitel for a description of the menu  
  please refer to kapitel for a description of the menu  
  please refer to kapitel for a description of the menu  
  please refer to kapitel for a description of the menu  
  please refer to apitel for a description of the menu   
  the overview window of the webeditor consists of three main parts  the folder overview      the document overview     and the detail view      see illustratio    menu bar     the menu bar shows all yet available menus  the accessible menus depend on the object  document  folder  you have chosen and your user rights  you can use the menu bar mainly for editing functionality and for opening additional windows  tool bar     the tool bar allows fast access to the main functions  document overview     and title bar of the document overview     the document overview shows the document in the selected folder  the documents can be sorted ascending or descending by document type  document name  creation date and version  a double click on a document opens it in a separate document window  folder overview     you can use the folder overview to inspect and edit the folder structure  detail view     the detail view shows the content of the selected document in the selected version  in addition  you can edit the document in the detail view   
  please refer to kapitel for a description of the menu item  
  please refere to kapitel for a description of the functionality  
  please refer to  kapitel for a description of the menu items  
  the reference section summarizes all the functionalities of all the user interfaces  it comes in two halves  the coremedia editor reference and the webeditor reference  well  they re not equal halves  the webeditor reference lists just the differences  as the webeditor is quite a lookalike of the editor    the editor reference is organized by the different available windows and utilites      in section    in section    in section    in section    in section    in section    in section 
  coremedia cms      is the successor to the coremedia cms      system  which introduced features such as   price winning layout and usability improvements of the coremedia editor and webeditor integrated analytics solution dynamic  rule based content delivery editing services for jsf for easy creation of customized guis portal integration with read and write access to the coremedia repository  for more details please refer to what s new in cms      and the cms      manuals  coremedia cms      has its focus on an easy start into projects and on web      the following new features are available   the starter kit for a quick and successful start with cms       using best practices for common tasks the social software extensions to exploit the full power of today s web     techniques with coremedia cms an enhanced modular configuration to easily integrate project solutions and plug ins extended coremedia analytics with more out of the box reports  export of reports to various formats  analytics combined with the http cache extended coremedia content application engine with the coupling of the http cache with apache and mixing of dynamic and static fragments using the http cache  the following figure shows an overview of the coremedia components  highlighting the improved and new components in red   
   product copyright used license by printed license cms      cms        cms       antlr jguru com public domain x  x x asm asm license inria  france telecom x  x x bouncy castle the legion of the bouncy castle the legion of the bouncy castle x x x x bean scripting framework ibm ibm x    beanshell patrick niemeyer   gnu lesser general public license and  sun public license x x x x bridge java ibm ibm x x x x c p  machinery for change  inc  gnu lesser general public license     x  x x central authentication service yale university yale university x x x x cup parser generator scott hudson  frank flannery  c  scott ananian scott hudson  frank flannery  c  scott ananian x x x x apache ant  axis  cactus  cglib  commons beanutils  commons cli  commons collections  commons digester  commons dbcp  commons fileupload  commons http  commons httpclient  commons javaflow  commons lang  commons logging  commons net  commons pool  derby  fop  jakarta bcel  jakarta oro  jakarta taglibs  log j  lucene  struts  tomcat  xml commons resolver  xalan  xerces  xmlbeans the apache software foundation apache software license     und apache license     x x x x dom j dom j license metastuff  ltd  x  x x ehcache luck consulting pty ltd apache license     x  x x ejb persistence sun microsystems inc  enterprise javabeans v       specification   license x  x x util concurrent package doug lea http   gee cs oswego edu dl  public domain  x x x fast instream   fast search   transfer  www fastsearch com   fast search   transfer  www fastsearch com  x x x fast esp   fast search   transfer  www fastsearch com   fast search   transfer  www fastsearch com    x groovy bob mcwhirter   james strachan bob mcwhirter   james strachan  the codehaus x  x x gifencoder jef poskanzer acme x x x x hsqldb hypersonic sql group hypersonic sql group x    hibernate red hat middleware llc and third party contributors gnu lesser general public license     x  x x install toolkit java ibm ibm x x x x itext bruno lowagie  paulo soares gnu lesser general public license x  x x jasperreports       jaspersoft corporation gnu lesser general public license x  x x java architecture for xml binding sun microsystems  inc  binary code license agreement x    java api for xml processing sun microsystems  inc  binary code license agreement x    java bean activation framework sun microsystems  inc  binary code license agreement x x x x java bean calendar control john margaglione  gnu lesser general public license x x x x java cryptography extension sun microsystems  inc  binary code license agreement x    java mail sun microsystems  inc  binary code license agreement x x x x java management extensions sun microsystems  inc  binary code license agreement and supplemental license terms x  x x java message service sun microsystems  inc  binary code license agreement x x x x java server faces sun microsystems  inc  binary code license agreement x x x x java servlet sun microsystems  inc  binary code license agreement x x x x java transaction api sun microsystems  inc  binary code license agreement and supplemental license terms x  x x java tools jar sun microsystems  inc  binary code license agreement x x x x java webstart sun microsystems  inc  binary code license agreement x    jboss javassist shigeru chiba gnu lesser general public license     x  x x jboss common jboss inc  and individual contributors gnu lesser general public license     x  x x jclark jar  xp  xt  james clark james clark x x   jelmer gif plugin jelmer kuperus apache license     x  x x jetty mortbay apache license     x x x x jcommon object refinery limited and contributors gnu lesser general public license x  x x jfreechart object refinery limited and contributors gnu lesser general public license x  x x jpython  jython jim hugunin corporation for national research initiatives x    jtidy world wide web consortium world wide web consortium x x x x jaxen bob mcwhirter   james strachan bob mcwhirter   james strachan x x x x jdom jason hunter   brett mclaughlin jason hunter   brett mclaughlin x    joesnm blast internet services  inc  gnu lesser general public license x x x x mx j mx j mx j license version     x x x x mootools mit license valerio proietti   x x netcomponents daniel savarese netcomponents license x x x x org json package json org json license x  x x orbacus iona technologies iona technologies     oromatcher daniel savarese oromatcher license x x x x snmp trapappender mark masterson m  technologies  based on apache software license  version     x x x x sun j re sun microsystems  inc  binary code license agreement for the java   runtime environment x x x x thunderbird portable all contributors mozilla public license     x  x x portable thunderbird launcher       john t  haller gnu general public license x  x x rome   alejandro abdelnur   patrick chanezon   elaine chien apache license        x spring framework all contributors apache software license     und apache license     x x x x tinymce moxiecode systems ab gnu lesser general public license     x  x x wasp systinet corporation www systinet com systinet wasp license x x x x xstream joe walnes xstream bsd license x  x x yaml dirk jesse yaml c    x  
  there is something new in the air  editorial content produced and distributed not only with your classical content management system  but additionally by anyone out there on the net  this is the meaning of web       web users participate  but not only web users  also users in an intranet or extranet   what is special about this  all web     sites have in common  that the user brings in value by rating or voting or adding user generated content  thus interacting in a new social way  in order to attract those people  you need to extend your site by social software functionality  coremedia therefore developed the social software extension  this new component adds web     functionality to coremedia cms  
  the social software extension  sse  builds on the well known content application engine  which integrates editorial content with user generated content  ugc   all user profile data and all user generated content  ugc  is kept in a dedicated database  sse comes with a management interface for easy user and content management  the social software extension is shipped with a powerful api that you can use to access the content in the database  the recommendation engine is the place  where the magic occurs  it determines so called neighborhoods between users  that is  which user is similar to another user  from these neighborhoods  the engine calculates recommendations  the social software extension can be easily deployed and used with the starterkit   benefits   easy adding of web     functionality to websites fast delivery of user generated content editorial control of publications personalization by collaborative filtering  seamless integration with other coremedia cms components  main features   separate storage and management of user content user profile management filtering removal of offending posts with management interface rating  voting  tagging and commenting functionality extensible content model recommendation engine featuring out of the box recommendation algorithms and the option to implement custom ones rss  atom feeds enterprise search integration of ugc comprehensive api to access the ugc  further reading   read the coremedia social software manual for a comprehensive description of coremedia social software    see http   blog coremedia com for an implementation of the coremedia social software     
  every project has its own challenges that make it unique  but every project also has common tasks  to not reinvent the wheel over and over again  you need both  a flexible framework for the fiddly tasks  and a solid basis for the standard work  coremedia cms was always known for its extensibility and flexible apis and now coremedia backs this with the starter kit for fast project success  the starter kit comes with best practice solutions for navigation  multi language support  multi site support and many more  if you use the standard templates  you can set up a website in less than an hour and start entering your content and design  the starter kit is fully customizable and allows the usage of the complete cms      framework  
  benefits  shorter project time through   high degree of pre fabrication and ready to use best practice concepts based on proven coremedia cms technology  quick and easy extensibility   easy integration of high quality plug ins and partner solutions  see also modular configuration   features  predefined and extensible document types and templates for navigation  multi lingual support  layout and standard content  multilingual support multi site and micro site support predefined navigation concept with integrated navigation editor prepared for use of coremedia analytics  easy integration of coremedia social software human readable and search engine optimized urls management of different layouts and styles  standard templates using yaml css framework standard templates already integrate preview based editing  further reading  read the coremedia starter kit manual for a comprehensive description of all features  
  the analysis of your web site gives valuable data for your further planning  the more you know  the better you can calculate revenues  place your content  plan your hardware an the like  an important information is the number of unique visitors  to know  how much page impressions your website has is good  to know how much different users visited your website is better  coremedia analytics with its      view of repository and website usage comes with five new reports which deal especially with unique visitors  another five reports give you a deeper insight into the used content and the searches done on your site   other valuable information comes from  ivw boxes  which count tracking images  coremedia analytics analyzes log files delivered from such a box  once you have all data analyzed by the analytics engine you can use the data for further processing  coremedia analytics integrates with your existing applications and exports the reports in pdf  xml or excel format   coremedia analytics is fully integrated with the http cache by means of tracking images  so  you can have fast delivery of cached pages with accurate analysis of the data   
  wouldn t it be nice to combine the features for your content applications from a library of pre fabricated plug ins  newsletter  imagemaps  tagclouds   plugging together what you need to make it special and stunning with the least effort   that is the vision  maybe you can buy a plug in from a coremedia partner  who already solved your requirement before  or reuse one you developed once in a project or even if there is no plug in for your custom functionality yet  at least an clear modular development concept for your project would be desirable   with the  modular configuration  coremedia get s closer to this vision  to offer you a flexible content management system which you can easily extend  coremedia improved the way of configuring   structuring web applications in the content application engine and the whole cms   
  benefits  better integration into existing workflows through  export of your reports  integration of ivw logs  better analysis of your web application through  ten new reports  better drill down into categories new reports for unique visitors  features  the coremedia analytics engine offers the following new features   export of reports in pdf  xml and excel format    ten new dashboard reports   top viewed pages per category top internal search terms per collection page impressions per category internal search count report internal search count per collection report unique visitors report visits per visitor report page impressions per visitor report page impressions per visit report visit duration report analysis of ivw logs integration with the http cache  further reading  read the analytics developer manual and chapter   of the coremedia user manual for further details  
  the web becomes alive  most web pages are not static anymore  personalization  user generated content  tons of requests  it s hard to deliver this dynamic content in time  but apart from the ever changing personalized content  there is often a non changing static frame of a page  be it an image  the navigation or the like    the new extension to the coremedia content application engine is suited to this use case  having a static part of a web page cached in the http cache for fast delivery and adding dynamic fragments directly from the cae results in the fast delivery of mixed pages  the migration to this new feature is easy  mostly you have to replace the cm include tag in your jsp templates with httpcache include   
  this placeholders could be resolved by the http cache  but also by an apache web server or via ajax in a browser  you can use the concept of placeholders to implement own external assembly strategies  for example  you can add edge side includes to your templates  then an akamai server could do the assembly of static and dynamic content  
  benefits  faster delivery of pages with mixed dynamic and static content   features  mixing of dynamic and static fragments  use of edge side includes  further reading  read the http cache section of the content application engine chapter in the content application developer manual for a description of the new http cache features  
  this section shows the base  figure  and standard  figure  document types of the coremedia starter kit as uml diagrams  please  refer to section for a description of these document types  
  this manual gives an overview of all new features and major changes which have been added to coremedia cms       
  benefits  easy and fast integration of custom functionality less integration efforts through modular development concepts  features    reworked cae structure and configuration based on latest spring      configuration concept with customizers  for elegant post processing of properties or beans  extended modular document type definition processing in the content server migration tool for cms           cae web applications to the cms      modular configuration structure   further reading  read the content application engine chapter in the coremedia content applications developer manual for further details  read also the migration to cms      chapter in the administration and operation manual in order to learn how to migrate your existing cae web applications   
  unified api clients  the unified api has been adapted to the new language features of java    in particular  generics  enums  and covariant return types are used to obtains a safer and cleaner api   the changes are fully source code compatible as far as calls to api objects are concerned  the changes are generally not binary compatible  so that you must recompile your source code when migrating to cms        a number of methods has been deprecated  in particular  many methods whose names end in an underscore have been replaced by methods without the underscore  these new methods have been made possible by covariant return types   enumeration types are now implemented using java enums  please convert usages of the numeric constants in the enumeration classes to usages of the enums themselves  e g   for programming switch statements   when implementing  a few changes to implementing classes are necessary   the method expression evaluate takes a parameterized map type as the second argument  adapt the type in all implementations  the method booleanexpression evaluate now returns the type boolean  adapt the return type in all implementations  unless you are already deriving your class from booleanexpressionbase  those methods of rightspolicy that return a collection must now return a parameterized type  
  the internal procedure in the active delivery server while processing an http request is divided into the following steps  the resources and  if given  their version  the template  and template parameters are extracted from the requested url  this process is configurable and will be described in more detail in section      if the page is declared as cacheable and the page contents have already been generated and are still valid  the page is delivered directly from the cache  for this  see section     otherwise  new page contents must be generated  first  the template to be used is determined as described in section      the selected jsp template is executed with the parameters determined in step    the java code contained in the jsp page can access content from the coremedia system with the help of the coremedia generator api  in order to generate appropriate output  the generated content is either delivered directly to the user or first stored in a cache file and delivered from there   it is best to read the sections of this chapter in parallel with the delivered java api documentation  the documentation generated with javadoc is more detailed and more complete  while this manual can give the central themes and a better overview  for this reason  you will often find references in the text to fully qualified class names and method names  which you can take as suggestions for further reading   to be able to configure and use the coremedia active delivery server  ads  successfully  you should be familiar with the following technologies   the java programming language  http   java sun com   the coremedia active delivery server  ads   and therefore also its api  are completely written in java  you require knowledge of java to understand the interfaces and to program your own code  jsp      for the production of web pages  etc   java server pages are used  http   java sun com products jsp    the servlet     specification  http   java sun com products servlet   jsp technology is based on this  and it is also helpful for understanding page fragments   include  as well as the cache used by coremedia sci  http  rfc        http   www rfc editor org    everyone who constructs a website should know the fundamentals of the http protocol  request  response  header  content type   but such knowledge is also useful when producing other formats  since the servlet standard is based on http  html  wml  fo  etc   according to the type of output which the active delivery server  ads  should create  you must of course know a lot about the output format  so as to be able to create the templates for parameterization   html for a website  wml for wap  fo  formatting objects  for generation of pdf or other printed formats  etc  the multipurpose internet mail extensions mime  rfc        the media types defined in this standard are used in the http standard for describing the content type of an http response  in the coremedia system  mime types describe the format of stored binary data  blobs   the document object model level   dom  http   www w  org dom    this recommendation of the w  consortium is used by coremedia for representing xml and sgml texts  access occurs through the standardized java api  package org w c dom    the simple api for xml sax      http   www saxproject org    this quasi standard is used for connecting xml parsers created by third parties and for stream oriented transfer of xml documents  packet org xml sax    
  please notice  that the active delivery server is deprecated in cms       it will receive support and maintenance over the support period of cms       but it will not be part of future versions of coremedia cms any more  if you intend to create new content applications with coremedia cms       you should use the official successor of the ads  the content application engine  cae   among others  the cae is based on the unified api instead of the generator api and offers a much more sophisticated caching model  new coremedia components  such as coremedia analytics  the portal integration or the social software extension are only compatible with the cae  please read the content application developer manual for further details  
  the queryservice allows synchronous  structured queries against the content repository  a query is a string formulated in the coremedia query language  with an optional array of parameter objects which may be referenced from the query string  the number of results to return can be limited  there are two variants of queries  those applying to content objects and their current property values  and those applying to versions  including working versions   queries are initiated with the posecontentquery  and poseversionquery  respectively   a query string expresses a condition on content objects  the queryservice  returns all content or version  objects in the repository for which the condition is true  the condition is made up of a logical combination  and  or  not  of type constraints  comparisons and tests  which may refer to the object s properties   a query may also refer to getters defined in the content  version and publicationservice  interfaces in the same way it refers to user defined properties  by giving its name  the names of api methods are transformed as follows   content for a zero argument method whose name starts with get  the implied property name omits the get  and starts with a lower case letter  so the method getcreationdate    becomes creationdate  for a zero argument method whose name starts with is  the implied property has the same name as the method  so the method ischeckedin    becomes ischeckedin  version transformation is similar to content  but to avoid confusion  all getters are prefixed with version  so geteditor   becomes versioneditor  boolean valued getters start with versionis  publicationservice a one argument method that takes a content  as its argument is transformed as if it were a zero argument method defined in class content  and analogously for version  so isapproved version   becomes versionisapproved  and getpublisher content   becomes publisher   an implied property based on a version  getter is only defined for documents  not for folders  in a content query  it implicitly refers to the working version for a checked out document  or to the latest version for a checked in document   there are three implied properties with a deviating semantics   the word id represents the current content  and not the string returned by the method getid    defined in content   for version queries  the word version  represents the current version  for content queries  it represents the working version for checked out content  and the latest version for checked in content  the implied property containswidelink  is true if the content or version contains a link  in a link list or in xml  to a content that belongs to a different base folder   when an order by clause is given  the query result is sorted according to the values of the given properties  these properties must be defined for all content types for which the condition may be true   please refer to the javadoc of class queryservice  for a comprehensive list of implied properties available in query expressions   the query syntax is as follows   query       conditional expression   order by     limit       order by        order by order entry      order entry       limit       limit numeric literal     order entry       property   ascending   asc   descending   desc       conditional expression       type       type       type        conditional expression      conditional expression or conditional expression     conditional expression and conditional expression     not conditional expression       conditional expression       below content     references content     property references content     referenced     referenced by versionorcontent     property is  not  null     comparison expression     contains expression     value expression      type       identifier      comparison expression       value expression comparison operator value expression      comparison operator                            lt       lt         contains expression       property contains literal expression     property contains exact literal expression     property contains prefix literal expression     property contains stem literal expression      value expression       property     literal expression      property       implied property     identifier      content       literal expression      version       literal expression      versionorcontent       literal expression      literal expression       string literal     numeric literal     boolean literal     date string literal     path string literal     user string literal     id string literal     input parameter      boolean literal       true     false      identifiers consist of java identifier characters  where the name of an identifier collides with a keyword or an implied property  the identifier can be enclosed in double quotes to preserve its meaning as an identifier  examples   article title document   parent   date   string literals are delimited by single quotes  a single quote inside a string literal is represented by two successive single quotes  examples    hello world   banker  s baguette   numeric literals conform to java syntax  essentially  a numeric literal is a sequence of digits  optionally preceded by a minus sign  examples           as date literals  the unified api supports a subset of iso     strings  namely those matching yyyy mm ddthh mm sstzd  where the time zone distance tzd  is expressed as  hh mm or  hh mm  examples             t                         t                path literals denote a content by giving its path  beginning at the root folder  it is an error if no content exists at the given path  examples   path   home admin  path      user literals denote a user name and a domain name separated by an    character  if the domain name is empty  the    character may be omitted  examples   user  admin  user  fred msad   id literals denote a content  version or user by giving its id  as returned by capobject getid    examples   id  coremedia    cap content     id  coremedia    cap version       id  coremedia    cap user      an input parameter refers to an object passed along with the query string  input parameters are represented by a question mark immediately followed by a sequence of digits  which represents the zero based index of the parameter object  examples              type rules  queries are strongly typed  for example  when you try to compare a string with an integer  an error  malformedqueryexception  will be reported  there are rules that govern the required types for subexpressions  and the resulting type of each expression in the grammar above    the following tables shows all possible types that occur in subexpressions of a query  the second column shows corresponding java types  which is relevant for parameter objects and implied properties  the third column shows the corresponding cappropertydescriptor type of a content property  which is relevant for non implied properties  
  search with simple query language  use one of the search methods to perform a simple search for non archived documents  there are multiple search methods with different parameters to restrict the query to documents of a given type and below a given folder  see the api documentation for details   these methods take a query string in the simple query language  the coremedia content server embeds this query into a fast query language query when performing the search  the simple query language consists of terms and or phrases which are separated by white space  the simple query language is used in mode simpleall which means  that a logical and is applied between the terms and or phrases within the query   a query term is basically a word to search for  only alphanumeric characters are allowed here  you can prefix the term with a minus operator       to indicate a not expression  i e  the word must not appear in the search results  likewise you can use a plus operator       as prefix but it is the default and will be ignored  the following example query will search for documents which contain the word news but not the word sport   news  sport  the query term may end with an asterisk       to perform a wildcard query which matches all words that start with the characters before the asterisk  note  that the asterisk may appear at the end of the term only  the next example returns all documents containing words that start with test   test   a phrase to search for is enclosed in double quotes  wildcards are not allowed in phrases and plus and minus operators are ignored  a search for documents containing the phrase hello world can be performed with    hello world   please refer to fast query language and query parameters guide for a detailed description of the simple query language support of the fast query language   the following example searches for documents of any type which contain the word hamburg below a folder  site  the list obtained from the searchresult contains the found content objects sorted by their name  sorting is explained in a following section   content site   contentrepository getchild  site    contenttype type   contentrepository getdocumentcontenttype    searchresult result    searchservice search  hamburg         the query string                        name   true     sort ascending by name                       site  true       below folder site                       type  true       any type                                        max      hits  list content  hits   result getmatches       search with fast query language  if you need a more powerful search you can use the structured fast query language  fql  with the more generic searchfast method  please refer to the fast query language and query parameters guide for a detailed description of the fast query language   you must use the fql for example if you want to search in certain index fields or want to search for archived documents  too  index fields are defined in the index profile file  the coremedia index profile contains fields for many implied properties  you can use the fast administration pages to view the index profile which contains descriptions for the available fields  please refer to the fast configuration guide for more information about index profiles   one of the available fields in the index profile is creator which contains the id of the user who created the document  the following example searches for all documents that are located below the folder  site  were created by user admin and contain the word test  note that ids and paths must be quoted when used in a query string   user admin   userrepository getuserbyname  admin     searchresult result   searchservice searchfast     feederstate success        and creator       admin getid               and folder starts with    site            and test      name   true          sort by name                         max      hits  list content  hits   result getmatches     an important thing to note is the term feederstate success within the query string  you must specify this term in every query except when searching for documents that were not successfully indexed  in the latter case you must include the term feederstate error  if you don t want to find documents in the recycle bin  you must either search below a given folder as in the example above or include the term isdeleted false   the term test is not prefixed with the name of an index field  in that case the default composite index field content is used and the search is performed on the full text content  
  expressions are executed when guards are evaluated  when they are nested in actions  and for other configurable computations  like actions  expressions are typically executed in the context of a task  but may occasionally be executed in the context of a process   the main method of a task is evaluate workflowobject map string object    which receives as arguments the workflow object in which the expression is evaluated and a number of local properties  these properties must not be confused with the variables present in the workflow object or its view  instead  the properties are purely local to the expression  without any form of persistence  they are typically set in the predefined expressions let  exists  or forall    if an expression modifies the given map  it should make sure to return it to its previous state before returning from the evaluate method  preferably  this is done in a try finally construction    please see the javadoc for more details regarding the data types that are permitted as return values of the expression and for the parameter map   if you are creating an expression that will only return boolean values  you can implement the interface booleanexpression  thereby you indicate the reduced set of return values and make your expression usable in a greater number of contexts  in particular in guards and as a subexpression of predefined boolean connectives   mixing unified api and wfapi expressions  you can include unified api expressions and wfapi expressions in one process definition  this allows a stepwise migration of existing plug ins to the new apis  you may even use  for example  old style expressions as subexpressions of unified api expressions  in this case  the expressions are automatically wrapped so that they appear as objects of the api that is used by the containing object  the wrappers will take care of converting argument values and return values when calling methods of the wrapped expression   when using unified api expression inside wfapi actions  care has to be taken with respect to the correct treatment of null values  because the wfapi uses typed nulls and the unified api expressions may return an ordinary java null  a special subtype of wfvalue has been introduced to the wfapi  nullvalue   this value should not be used when working purely inside the wfapi  only when a unified api expression returns a null and when that value must be propagated to a wfapi action or expression  the abovementioned wrapper objects convert the value to a nullvalue  of course a plug in that was written for coremedia cms      or earlier may not expect a value of that type  possibly failing during a type cast  therefore  existing plug in implementations may have to be hardened against the new value type nullvalue  before you can use them with unified api subexpressions   note that it is often desired to port the entire set of plug ins to the new api anyway  so that this paragraph applies to a few specific cases  only  it is possible to use the built in actions and expressions without restrictions  they will neither produce untyped nulls nor misbehave when they come across a nullvalue  
  as a very simple application  here is a little tool that aborts all running workflows     worklistservice worklist        connection getworkflowrepository   getworklistservice      set process  running   worklist getallprocessesrunning      for  process process  running        process abort         the code deals with the workflow repository and one of its aspects  the worklist service  the worklist service maintains a number of collections of workflow objects  each collection contains those workflow objects that match a certain predicate  running processes  escalated tasks  available process definitions  and so on   in the example abortallprocesses  we use one of the administrative worklists  the method getallprocessesrunning   returns the set of all processes that are started  but not yet finished  
  elaborating on this example  a minor variant follows  suspendmyprocesses operates only on processes that were started by a single user  more precisely  only processes of the current session s user are returned during a call to getprocessesrunning     workflowrepository repository   connection getworkflowrepository     worklistservice worklist   repository getworklistservice      set process  running   worklist getprocessesrunning      for  process process  running        process suspend         as you can see  the processes are suspended instead of being aborted  suspended processes keep their state and can be resumed later on  
  this section provides some examples of various types of plugins  all classes must be deployed on the workflow server in order to become functional   expression  the first example show how to create a reusable expression for performing queries in the content server  the full source code of the class queryexpression is available in the examples jar  the expression starts by extracting the unified api connection from the argument workflow object   alternatively  the connection could have been injected by implementing the capconnectionaware interface   public object evaluate workflowobject wo    map string object  localvariables      capconnection connection   wo getrepository   getconnection      queryservice queryservice   connection getcontentrepository        getqueryservice     afterwards  all subexpressions are evaluated  note that we are passing the localvariables to the subexpression unchanged     object   parameters   new object expressions size       for  int i      i   parameters length  i          expression expression   expressions get i       parameters i    expression evaluate object  localvariables        lastly  we can pose the actual query     return new arraylist content  queryservice      posecontentquery query  parameters        in the xml definition  the subexpressions occur as xml subelements and the query as an attribute of the  expression  element    expression class  com coremedia examples plugin queryexpression    query  referenced by         get variable  document      expression   the query string is passed into the queryexpression object by means of a specific setter setquery string   the subexpression get is parsed and handed to the example expression and stored in a list named expressions  by means of the following method   public void add object o      if  o instanceof expression        expressions add  expression o       else       throw new runtimeexception  don t know how to add   o          even if you do not intend to use subexpressions  you might want to implement a similar method when requiring a highly flexible configuration mechanism  every nested xml element that cannot be handled by a more specific setter method is passed to the set object  method   this example expression is used in a process definition that can be found in the file find linked xml  which is distributed with the examples  you can upload the definition jointly with the prepackaged example classes by using a command like this   cm upload  u admin  f find linked xml  j cap plugin jar  log in as user admin to run the uploaded workflow  
  longaction  in the following  an action that sends a mail is implemented  because the mail server is a external component that might not respond immediately  a long action is created  we omit the definition of various string fields that hold configuration values for the action and skip immediately the methods for executing the action   during the first phase the receiver  subject and body text of the mail are determined   public class mailaction implements longaction     public object extractparameters task task        com coremedia cap workflow process process         task getcontainingprocess        string receiver   process getstring receivervariable       string subject   process getstring subjectvariable       string text   process getstring textvariable       return new object   receiver  subject  text        afterwards  the mail is actually send outside of a db transaction     public object execute object params        object   paramarr    object    params      string receiver    string  paramarr         string subject    string  paramarr         string text    string  paramarr         boolean result   false      try         result   send host  user  password           from  receiver  subject  text         catch  exception e          return e            return result          protected boolean send string host  string username      string password  string from      string receiver  string subject  string text    throws messagingexception  addressexception                  please see the full source code for details of the mail delivery  which is outside the scope of this manual  finally  the result is converted into an action result     public actionresult storeresult task task  object result        if  result instanceof boolean          return new actionresult   boolean result  booleanvalue           else         return new actionresult  exception result                assuming there are process variables receiver  subject  and text  the longaction could be used in a process definition as follows    automatedtask name  sendmail  final  true      action class  com coremedia examples plugin mailaction      host  smtp company com      user  automailer      password  secret      from  noreply company com      receivervariable  receiver      subjectvariable  subject      textvariable  text      automatedtask     
  performerspolicy  one example of a performers policy is the defaultperformerspolicy  which is distributed together with the unified api sources and not in the example package  we are going to discuss the main method of that class here   first  the users that may possibly execute the task are calculated   public performers calculateperformers task task     collection permittedusers      set user  users   new hashset user       users addall permittedusers     users removeall getexcludedusers task     if the task is forced to a user  that user is chosen     user forceduser   getforceduser task     if forceduser    null        if users contains forceduser           return new performers forceduser  true              otherwise  we look for users who are preferred  but have to rejected the task     users removeall getrejectedusers task      set user  preferredusers       new hashset user  getpreferredusers task      preferredusers retainall users     if preferredusers size              return new performers preferredusers  false        if we failed due to rejections  those rejections are cleared before recomputing the set of users  note that this is a side effect that is explicitly allowed during the calculateperformers method     if users size           getrejectedusers task  size              removeallrejections task       return calculateperformers task  permittedusers        if there are no rejections to be cleared  we have to go with the users that are not preferred     return new performers users  false     
   rightspolicy  in the following  we will present the unified api half of a custom rights policy  that policy assigns rights to exactly that user who created a process and grants rights for the creation of new processes to all members of a single group    the server half  as presented in the workflow manual  is only sufficient for use in the workflow server  for the editor  and for ads based applications  the unified api needs its own implementation  you can find the complete source code in the examples distribution   first  we need some code to deal with serialization and configuration   public class onlyownerrightspolicy implements rightspolicy     private static final long serialversionuid                          l    private group group   null    public void setgroup group group        this group   group        public group getgroup         return group        public void setgroup string groupatdomain     throws wfexception       userrepository userrepository   wfserver getconnection         getuserrepository        group group   userrepository getgroupbyname groupatdomain       if  group    null          throw new runtimeexception  could not find        group   groupatdomain             setgroup group        the last method is called only in the workflow server while an xml process definition using the new policy is parsed  we are therefore allowed to obtain the server s unified api connection through the wfserver singleton   now we can look at some of the methods that compute the rights of individual users     private user getowner workflowobject workflowobject        if  workflowobject instanceof task          workflowobject             task workflowobject  getcontainingprocess              return   process workflowobject  getowner          public boolean mayperform workflowobject workflowobject      right right  user user          if  user issuperuser    return true      user owner   getowner workflowobject       return owner    null    owner equals user         public boolean mayperform workflowobjectdefinition     definition  right right  user user          return user ismemberof group              skipping some parts of the code that are very similar to the server side code as presented in the workflow manual  we observe that there is also a weight method that estimates the main memory size of the policy in bytes  it is used for caching policies  here we estimate    bytes for the policy and    bytes for the referenced group     public int getweight         return          finally  there is the unmarshalling process that is needed to create a policy instance in the client vm     public rightspolicymarshaller getmarshaller         return new onlyownerrightspolicymarshaller           the marshaller itself resides in yet another class  let us look at the unmarshal method  only   public class onlyownerrightspolicymarshaller  implements rightspolicymarshaller           public rightspolicy unmarshal capconnection connection       byte   data          onlyownerrightspolicy result   new onlyownerrightspolicy        if  data                  int groupid    data       x      ff             data          x    ff               data           x  ff                 data                result setgroup connection getuserrepository            getgroup idhelper formatgroupid groupid               return result               notice how a connection is passed into the unmarshaller  so that it can be used to build unified api objects for use in the policy  
  the web application has integrated preview based editing  if you want to change the layout or content of the site  you can simply open the navigation editor which is an extension of the web editor  the navigation tree on the left side  reflects the hierarchical structure of the web site   
   section version description     
  in this chapter you will find a table with all major changes made in this manual  
   section version description    section version         tracking images and their use were documented  section version         tracking images and their use were documented  section version         added description how to configure the contentsiteextractor for the object analyzer  section version         it has been documented that the  analytics link  element supports the onclick attribute now  section version         the new attributes supported by the analytics tag library have been documented  section version         the example configuration of the robot detector was extended to include the parameters on additional robots  suspected browsers  and suspected robots  section version         documented the new  analytics linkattributes  tag  which helps in generating very complex analytics enabled links  section version         documented sampling for analytics  sampling allows you to greatly reduce the server load due to analytics when operation very large websites  section version         documented sampling for analytics  sampling allows you to greatly reduce the server load due to analytics when operation very large websites  section version         documented sampling for analytics  sampling allows you to greatly reduce the server load due to analytics when operation very large websites  section version         documented that the property tracking enable has mode to the file tracking properties  section version         documented sampling for analytics  sampling allows you to greatly reduce the server load due to analytics when operation very large websites  section version         documented sampling for analytics  sampling allows you to greatly reduce the server load due to analytics when operation very large websites  section version         explaining how to make the most customizations of the aggregation process using spring xml configurations without the need to modify the process definition  section version         explaining how to make the most customizations of the aggregation process using spring xml configurations without the need to modify the process definition  section version         explaining how to make the most customizations of the aggregation process using spring xml configurations without the need to modify the process definition  section version         explaining how to make the most customizations of the aggregation process using spring xml configurations without the need to modify the process definition  section version         explaining how to make the most customizations of the aggregation process using spring xml configurations without the need to modify the process definition  section version         documented the newly added  analytics param  tag    section   version           the targetpageresolver has been documented and references to the deprecated interface targetobjectresolver have been removed   
  in this chapter you will find a table with all major changes made in this manual  
   section version description     
  in this chapter you will find a table with all major changes made in this manual  
   section version description      section   version           documented new uapi connect parameters and mbean parameters    section   version           documented new uapi connect parameters and mbean parameters   
  in this chapter you will find a table with all major changes made in this manual  
   section version description     
  in this chapter you will find a table with all major changes made in this manual  
   section version description      section   version           custom dictionary is now used for spellchecking suggestions    section   version           added description of new  authenticationfactory  element   
  in this chapter you will find a table with all major changes made in this manual  
   section version description      section   version           added description of analytics feedback plug in and dynamic content    section   version           added description of analytics feedback plug in and dynamic content    section   version           added description of analytics feedback plug in and dynamic content    section   version           added description of struct property editor    section   version           added description of struct property editor    section   version           added hint for microsoft sql server usage    section   version           added chapter that describes the configuration of the cae feeder  
  in this chapter you will find a table with all major changes made in this manual  
   section version description section         adapted the webservices chapter to the new jax ws support    
  in this chapter you will find a table with all major changes made in this manual  
   section version description     
  in this chapter you will find a table with all major changes made in this manual  
   section version description     
  in this chapter you will find a table with all major changes made in this manual  
  next to the innovative new features of coremedia cms       such as social software extension or starterkit  coremedia also cared about the maturity of existing functionalities  the storage of blobs by the content server is now much more versatile to meet the needs of e g video dominated websites  blobs can now be dispatched to different database tables or to the file system  you can configure this behavior through metadata of the blob such as size  mime type or document type   customers asked for a possibility to use the cae feeder with other search engines than the delivered one  thus we extended the api which enables you to connect the cae feeder with arbitrary search engines   editing services for jsf now offers an extension which analyzes the document types definition and builds corresponding editing forms from it  you can use these forms as a starting point for your own editing applications   the unified api has been adapted to the new java   language features like generics and enumeration types  this leads to a safer and more convenient api programming style  the migration of existing unified api applications is simple  because all calls to api methods remain source compatible   last but not least  coremedia introduced the so called contributions  with this  several tools and helpers are provided which amend our product and help you in your daily work  they come  as is  without any warranty or support but under a permissive open source license  feel free to improve or change it to your needs and participate by donating your own       
  features    versatile blob handling  http transmission of blobs for unified api applications  the content server automatically chooses between different blob stores  file based blob storage  storing blobs in different database tables    api to use different search engines with the cae feeder      analyze the document types definition and build editing forms for editing services for jsf      type safe unified api      contributions   cae console  development tools for better insight to the cae   jcr level   implementation  excl  query interface     
  the coremedia starter kit comes with a graphical installer  that allows you to install a complete coremedia cms starter kit system  by default  the installer writes the file cap starterkit install properties into the current working directory  this file contains all settings specified during the installation and will be used as default for a new installation from the same directory  you can also use this file as an install script for the script installation    java  jar cap starterkit installer      currentversion  jar   text text auto    o  outputfile     p  inputfile   
  the installer is based on antinstaller  see http   antinstaller sourceforge net   and supports a silent text mode installation  by default  the installer reads the properties from the file starterkit install properties in the current working directory but you can specify another file with the  p parameter  you can use a file generated by the graphical installer as an installation file   start the text installation as follows   java  jar cap starterkit installer      currentversion  jar  text auto   p  propertyfile    
  every project has its own challenges that make it unique  but every project also has common tasks  to not reinvent the wheel over and over again  you need both  a flexible framework for the fiddly tasks and a solid basis for the standard work  the starter kit comes with best practice solutions for navigation  multi language support  multi site support and many more  if you use the standard templates  you can set up a website in less than an hour and start entering your content and design  the starter kit is fully customizable and allows the usage of the complete cms      framework 
  coremedia sse comes with the management views component allows editors and administrators to search and approve user generated content and manage users and groups   the following three views are provided as standard   a user generated content approval view  this is used by editors for the approval process  which involves the approval or rejection of user generated content  a user generated content view  this is used by editors to search for user generated content and review the approval status of the user generated content  a user management view  this is used by administrators to manage users  this includes the creation and management of user groups  as well as the banning  of users   the coremedia sse management views application is intended to be used by cms editors and administrators    the standard usage rights for the management views are as follows   the approval view is accessible only to members of the cms groups administratoren and editor   the user management view is accessible only to members of the cms group administratoren   these chapters below cover the usage of the management views management application  
  in this chapter you will find a table with all major changes made in this manual  
   section version description      section   version           added the previewcontroller in the cae to make it possible to use preview functionality of the coremedia editor and webeditor with the content application engine    section   version           added the previewcontroller in the cae to make it possible to use preview functionality of the coremedia editor and webeditor with the content application engine    section   version           documented how to reuse templates that contain analytics tags in a non analytics project    section   version           the certified sun java version has been changed to java        or higher due to bugs in older java     releases affecting coremedia cms operations    section   version           added the search engine feeder s configuration attribute indexgroups to the element feeder in the file properties corem feeder xml to disable possibly expensive feeding of groups with read rights    section   version           documented the options for computing click statistics  especially if the standard javascript callback of the  analytics link  tag is nto sufficient  documented updated configuration options of the data aggregator    section   version           fixed wrong column name in schema migration    section   version           corrected documentation of deployment of the object analyzer in the workflow server    section   version           documented the property workflow server managers aggregator db scripts for locating database update scripts    section   version           documented the flags for enabling the multi site semantics for computing sites for analytics  using folder immediately below the root folder as sites     section   version           documented the flags for enabling the multi site semantics for computing sites for analytics  using folder immediately below the root folder as sites     section   version           documented the flags for enabling the multi site semantics for computing sites for analytics  using folder immediately below the root folder as sites     section   version           added description of new query server utility option    section   version           the disk requirements for permanent data and for archive logs have been documented in the analytics administration section    section   version           added new supported platforms   section   version           added new supported platforms   section   version           added the webdav server s configuration option filesystem export  i  emptydocument for folder mappings    section   version           added new supported platforms   section   version           some additonal attributes of the  http  action of the watchdog were documented  now supporting http basic authentication and response verification    section   version           documented sampling for analytics  sampling allows you to greatly reduce the server load due to analytics when operation very large websites    section   version           documented sampling for analytics  sampling allows you to greatly reduce the server load due to analytics when operation very large websites    section   version           documented sampling for analytics  sampling allows you to greatly reduce the server load due to analytics when operation very large websites    section   version           documented sampling for analytics  sampling allows you to greatly reduce the server load due to analytics when operation very large websites    section   version           documented the new configuration options for selecting the possible sizes and the default size for ranked   top      analytics reports    section   version           it has been documented how the navigation from the single page dashboard to the analyzed page can be configured and used in coremedia analytics    section   version           a new configuration property for in site analytics has been added  which determines which mode is used for the link overlays    section   version           a new configuration property for in site analytics has been added  which determines which mode is used for the link overlays    section   version           the limitations of the tools cm republish and cm publishall have been documented    section   version           the limitations of the tools cm republish and cm publishall have been documented    section   version           documented the new analytics property workflow server managers aggregator index rebuild threshold    section   version           documented the new analytics property workflow server managers aggregator index rebuild threshold    section   version           added description of new jmx watchdog action   section   version           added description of proactiveengine monitoring   section   version           the new automatic purge feature of the data aggregator has been described  this feature allows to discard unneeded fact data and old statistics  the data aggregator will choose times of low load to execute these potentially expensive tasks    section   version           it was documented that the tracking multiplier should only be changed close to midnight  thereby ensuring good data quality    section   version           the new automatic purge feature of the data aggregator has been described  this feature allows to discard unneeded fact data and old statistics  the data aggregator will choose times of low load to execute these potentially expensive tasks    section   version           it was documented that the tracking multiplier should only be changed close to midnight  thereby ensuring good data quality    section   version           the new automatic purge feature of the data aggregator has been described  this feature allows to discard unneeded fact data and old statistics  the data aggregator will choose times of low load to execute these potentially expensive tasks   
  up to coremedia cms       the content server stored all blobs in one database table  this was sufficient for many cases  but there are scenarios where other solutions are preferable  for example   different access characteristics for different blobs very high volume of blobs requirements on upload and play out speed  coremedia cms now offers two methods to cope with different requirements for blob storage   configure the table space for blob data as described in section define different  media stores  for blobs  described in this section   media stores for blobs  coremedia cms supports different media stores for the storage of blobs  depending on some properties of the blob  such as  size  mime type target property and document type   the media store is only responsible for storing and retrieving the actual bytes  the mime content type  garbage collection  and authentication is managed by the content server  coremedia cms supports the following media stores   storing blobs in files storing blobs as zip files zip blobs and store them in the blobstore table storing blobs in different database tables  by default  blobs are still stored in the coremedia cms   file based blob storage  as one option for a blob store  you can store blob contents on the file system reachable by the content server  the content server takes care that the number of files subdirectories per directory does not grow too large  by default  files are stored in the blobstore file directory below the content server installation     for consistent backup  suspend the server s blob collector with the property sql store collector suspend true in the sql properties file before starting the backup process  
  this feature is not intended to manage existing file structures  and does not support file access that bypasses the content server  also  a file structure may be accessed by only one content server at a time  
  storing blobs as zipped files  you can compress blobs which are not compressed by themselves  such as text blobs  and store them in the file system or in the database  by default  the zipped files are stored in the blobstore zipfile directory below the content server installation directory or in the blobstore table of the database  storing zipped files in the database requires a temporary directory which is var temp by default   storing blobs in different database tables  you can configure multiple database tables  each with individual database specific characteristics  to store the blobs in  the content server will not create the tables automatically  so you have to create them manually   configuring blob store selectors    
  not mandatory  you only need to do this configuration  if you want to store your blobs in a location different from the default location in the cms  
  configure the blob stores in the file   blobstore yourname  xml in the config contentserver spring blobstore directory   replace   yourname   with a name of your choice  the content server loads all xml files from the directory  and adds them to the default blob store definitions  
  take the blobstore example xml file as an example and see the javadoc of the hox coreme server media package for further details    if you want to store blobs in different locations  depending on some properties of the blob  you can add media store selectors to the content server  a media store selector defines under which conditions a specific blob store should be used  figure shows the configuration of two media store selectors  one for blobs larger than         bytes  which are stored in the file system  and one for images smaller than      bytes  which are stored in a different database table    
  storing blobs in postgresql largeobjects  on postgresql  a different storage format inside the database is used for large blobs  the native postgresql largeobject format supports streaming  and will not cause the server to run out of memory on huge blobs  in contrast to postgresql s bytea type used before  by default  bytea is used for blobs up to   mb  largeobject is used for larger blobs  note that largeobject storage has administrative implications   for backup  pgdump has to be invoked with special parameters access control for blobs in the db is only possible on a per database level  not per schema  cm schemaaccess dropall will not work  because it does not recognize blob oids  
  the following blob store names are predefined    file  for storing blob contents in the file system  dbblob  for storing blob contents in the database table blobstore  consult the javadoc of hox corem server media blobstore for further details   zipfile  for storing blob contents in the file system in zipped format  zipdbblob  for storing blob contents in the database table blobstore  in zipped format  the empty string      for storing blob contents in the cms tables as in previous releases   media store selectors are stored in the property mediastoreselectors of the blobstore bean  you can use the customizer tag  customize prepend  to prepend your media store selectors to the list  the content server iterates over this list and the first matching condition defines the blob store to use for the specific blob   if you need to  you can use the full power of spring for configuration  however  as an administrator  you only need the following beans and tags to construct your condition   the conditionalmediastoreselector is the bean which chooses the blob store to use  it has a property condition which takes the condition    bean   child elements   property   parent elements   list    customize prepend    customize append   the  bean  element defines the bean which should be configured  in the context of the blob storage media store class or condition bean  which should be configured  
  proceed as follows to configure the conditionalmediastoreselector  take the blobstore example xml file as a template for your media store selector  add a new  bean class  hox corem server media conditionalmediastoreselctor   tag below the  list  tag of the  customize prepend bean  blobstore  property  mediastoreselectors   tag or uncomment an existing configuration from the file  add a  property name  storename  value  selectedmediastore     below the  bean  tag and replace  selectedmediastore  with the name of the media store where the blob should be stored  construct your matching condition   configuring store locations for file storage  you can change the default locations for the storage of blobs in the file system  open the file blobstore properties in the config contentserver spring blobstore directory  uncomment the appropriate property and add your path   for the location of blobs stored in the file system use the cap server blobstore file rootdir property  for the location of blobs zipped and stored in the file system use the cap server blobstore zipfile rootdir property  for the location of temporary files for blobs zipped and stored in the database use the cap server blobstore zipdbblob tmpdir property  
   property description class   defines the bean class  which should be modified  in the context of the blob storage  these are media store beans or condition bean  which should be configured      
   property   child elements   bean    list   parent elements   bean   the  property  element defines the property of a bean  which should be configured  the  
  the following condition beans can be used   
   condition name description hox corem server media andcondition a condition which takes a list of conditions in the conditions property  you configure a list with the  list  element  it returns  true  when all conditions are fullfilled  hox corem server media orcondition a condition which takes a list of conditions in the conditions property  you configure a list with the  list  element  it returns  true  when at least one of the conditions is fullfilled  hox corem server media matchcondition   a condition which takes some values defined with  property  elements and which compares these values with the values of the blob to store  the matchcondition can take the following values   primarytype   required primary mime type of the content  subtype   required sub mime type of the content  typeparam   required parameter for the mime type of the content can be either of the form  name value  to test for a specific value for a type parameter  or of the form  name   without      to test for presence of a  name  parameter  minimumlength   required minimum content length in bytes   maximumlength   required maximum content length in bytes  documenttypename   required document type name of the target document  propertyname   required property name of the target property  isversion   required property of the version attribute  that is  will the blob be stored as a version   true    or as content   it returns  true  when all values match   
   attribute description name the name of the bean property  which should be configured  value the value  which should be added to the bean property   
   list   child elements   bean   parent elements   property   the  list  element groups conditions  which should be used in an andcondition or orcondition  it has no attributes  
  in coremedia cms you define your document type definitions in xml files  coremedia cms allows you  to administrate document type definitions in a modular manner  that means  that document types can be defined in different independent files  instead in one monolithic file  the content server loads and combines all document type files which match a given pattern you can define the pattern in the cap server documenttypes property in the contentserver properties file  see section for details    
  since coremedia cms       the structure of the cae web application engine has been optimized to serve the purpose of modular configuration  see section for details   the new structure looks as follows   web inf       web xml         central configuration of the web application                      additional central configuration e g  log j       lib               jar              config jar      dataviews       dataview configuration              xml      templates       jsp view templates              jsp      spring          spring custom configuration              xml              properties         
  the following chapter relies on the spring mvc architecture which is the basis of the cae web application  so  you should be familiar with the basic principles  see http   static springframework org spring docs     x reference mvc html for example  

  web xml is the central configuration file in the servlet specification and it keeps its place in the cae configuration  here  important entry points of the web application   such as the path to the other configuration files or the application context   are defined  due to its central role  the web xml file is one of the few configuration files which can only be modularized in a very limited way  nevertheless  in a newly installed cae web application the web xml file is constructed in such a way that it does not have to be adapted in a typical project   in the cae web application  the spring root application context is created by a so called contextloaderlistener the listener reads in all spring bean configurations  whose location follows one of the following patterns   classpath  framework spring   xml  classpath  framework spring     xml   web inf spring   xml   web inf spring     xml  that is  framework configuration files in the classpath  typically in the   config jar files  are loaded if they are located in the framework spring directory or in its direct subdirectories  in addition  all xml files located in the  webapp  web inf spring directory and all of its direct subdirectories are loaded   properties files of the placeholder configuration  see section for details  are treated the same way    dispatcher  the dispatcherservlet accepts http requests and translates them to the spring mvc world via a controller  for this servlet another applicationcontext is created that inherits from the root applicationcontext  that is  all beans defined in the root applicationcontext are available and are extended by beans specifically defined for the servlet  for the applicationcontext of the servlet all configuration files are loaded whose locations match one of the following patterns   classpath  framework spring    servletname  servlet   xml   web inf spring    servletname  servlet   xml  for example   the file  web inf spring servlet dispatcher servlet my config xml would be loaded from a servlet named dispatcher  if no configuration files match these patterns  an empty applicationcontext is created in which all beans of the root applicationcontext are available   this mechanism allows you to define several dispatcher servlets with distinct configurations  
  dataview configuration files are loaded from the web inf dataview directory  this implies that each xml file in that directory requires the http   www coremedia com      objectserver dataviewfactory name space  
  as stated before  custom spring configuration files  bean and property configurations  are loaded from the web inf spring directory or its sub directories   the framework configurations on the other hand are loaded from the cap objectserver webapp config jar or cap objectserver webapp uapi config jar files  where the latter contains the unified api dependent configurations   in web inf spring you will find the following files  cae contentbeans example xml cae controllers example xml cae linkschemes example xml  which are example configurations for controllers  content beans  and link schemes  in a project  these files will typically be replaced by application specific configurations  the files contain detailed information on how to use them for configuration    

  a plug in is intended to add some self containing functionality  which can be combined at will with other plug ins in a cae web application  this chapter describes a convention which should be used to structure the files of a cae web application plug in  the aim of the convention is twofold   copy the parts of a plug in into a cae web application without conflicts with other plug ins   keep different activated plug ins in a cae web application apart   the most important convention is  that all the plug in s files have a distinct identifier in their name or path in the sense of a name space  this leads to the following structure of a plug in        web inf        spring             plugin name                   xml                 properties       dataview             plugin name  xml       templates             plugin package                   jsp       lib             plugin name  jar            plugin name  config jar     pluginname           html         gif          spring configuration  each plug in might contain an arbitrary number of spring configuration files  bean and property configuration   name these files  pluginname   name  xml or  pluginname  properties and locate them in a directory with the name of the plug in  web inf spring myplugin myplugin beans xml for example  if the plug in contains framework configurations  locate them in a directory  framework spring  pluginname   in the configuration jar file   dataview configuration  locate a data view configuration of your plug in below the directory  web inf dataview named  pluginname  xml  if the plug in contains a framework configuration  locate it in a file  framework dataview  pluginname  xml in the configuration jar file   jsp templates and beans  as stated above  the jsp templates of the cae are named according to the bean s class  namely  packagename   classname  jsp or  packagename   classname   view  jsp  name the bean classes in a way that shows the name of the plug in clearly  com mycompany cae plugin myplugin mybean for example  as a consequence  the templates need to be named in the same way   jar files  program code of a plug in should be located in a jar file  named like the plug in  lib myplugin jar for example  if the plug in contains some framework configurations  they should be located in a  pluginname  config jar file  lib myplugin config jar for example   web resources  additional web resources   such as html files or image files   should be located in a special directory  myplugin  for example   web xml  a plug in might define additional servlets  filters or the like to the ones defined in the web xml of the cae web application  in this case  you can create a file web inf web xml  pluginname  that contains the differences to the main web xml file  this file has to be merged manually with the main web xml file  
  frameworks delivered by coremedia contain  besides the program code  also configurations  the configurations determine the concrete characteristics of the application or enhance the framework with concrete functionality  if you create applications with the framework often several people are involved  who might work independently  in this context it is important  that the structure of the configuration allows to work without intersections   aim of a modular configuration is therefore  to enable you to develop the different parts of an application independently in order to ease the creation of the whole application  the following steps support this goal   no central configuration files as possible pattern based loading of configuration files usage of customizers conventions for the naming and storage of configuration files  plug ins  one aspect of the modular configuration is the introduction of a plug in concept  the main idea is to distribute extensions or specific functions in a given directory structure  ideally  you can simply copy such an plug in in the installation directory of the framework in order to install and activate it   plug ins allow you to build a library of functionality  which you can use in arbitrary combinations  depending on your project requirements  in principle  a plug in can span more than one component  it is possible  for example  that a plug in defines document types for the content server and  content beans for the cae   configuration with spring  the spring framework offers mechanisms to  wire  the components  beans  of an application using configuration files which are heavily used by the modular configuration  coremedia extended these mechanisms with some conventions which are described in this chapter  
  required knowledge  for a full understanding of the following sections  you should have knowledge of the aspects described in http   static springframework org spring docs     x reference beans html  
  a spring applicationcontext uses two kinds of configuration files  bean and property configurations  bean configurations are xml files in which the components of the application and their interaction or dependencies are defined    example    beans xmlns  http   www springframework org schema beans     bean id  mainservice  class  com mycomponent service        property name  service  ref  subservice       bean    bean id  subservice  class  com mycomponent service       beans   here two beans mainservice and subservice are defined and the property service of mainservice is configured with the subservice bean   this kind of configuration files is used to describe the concrete architecture of an application  therefore  software developers or architects will  in general  create and edit these files    in contrast  there are the property configurations which use name value pairs in order to define administrative settings of the application  such as parameters to connect with external systems or timeouts for some aspects of a component   example   jdbc driver org postgresql driver jdbc url jdbc postgresql   localhost postgres  these properties are linked from a bean configuration using so called  property placeholders   these are named placeholders  that are replaced with the concrete property values during creation of the applicationcontext   example    bean id  remoteservice  class  com mycomponent service        property name  connectionurl  value    jdbc url       bean    so  specific configurations are moved into property files in order to give administrators a simpler view on the configuration  
  the configurations delivered with coremedia frameworks can be divided into two groups   framework  framework configurations define essential components and configurations of the framework  therefore  they provide a kind of basic infrastructure  which should not be changed quickly in projects  in order to preserve the correct operation of the whole application  on the other hand  coremedia might change these files in the course of maintenance    custom  custom configurations contains the files  which define the concrete appearance  of the application in a project  some custom configuration files are shipped with the coremedia cms but you can and should replace  remove or modify these files in the course of a project  each file contains a description  which shows how to adapt the file in a sensible way   custom files can be divided in two sub groups   examples  these are configurations which are intended as examples  that is  the files show how you can do the configuration of a specific aspect of the application  these files contain  example  in the name  cae linkschemes example xml for example  and you will typically replace them in a project   default settings  these are configurations of some aspects  which are intended as sensible default settings  in most of the projects  you can use these settings with no changes at all or at most small changes or extensions  
  layout and naming of the spring configuration files follows a specific pattern  in principle  the framework configuration files are located in a jar file named  xxx  config jar below the framework spring  directory  the custom files on the other hand are located in the file system below the spring  directory   the spring  directory is reserved for the actual coremedia component  such as the cae web application  you can use an arbitrary sub directory spring myproject  for project specific configurations or extensions   a lookup mechanism automatically loads all configuration files in the spring  directory and below  the files are loaded in a determined order   framework configurations are loaded before custom configurations  configurations from the  spring directory are loaded before the files from its sub folders   later loaded configurations have always precedence over the earlier loaded ones  this is important  if a bean property is defined in more than one file  in this case  the later loaded entry overrides the earlier loaded one   a configuration file should contain related single configurations  the file cae mbeans xml for example contains all mbeans used in the application  the example shows  that configuration files are named following the pattern  component   name  xml   name  denominates the content  while  component  defines the sub component for which the configuration is used  
  a cms application which bases on the spring framework  normally contains a lot of spring configuration files  each file defines multiple components or beans which are part of specific aspects of the application  in order to get an overview of the whole application  you need sometimes an overview of all beans and their interactions  for this use case  coremedia uses and enhances the open source software spring beandoc  http   spring beandoc sourceforge net   this software allows you   in analogy to javadoc   to generate html overview pages from your bean configuration files  for each cms spring application coremedia creates such documentation based on the custom and framework configuration files   bean annotations  in general  framework configurations are not intended to be changed in a project  on the other hand  single framework beans can be used in the custom configuration as a service  there are also cases where it might be useful to configure a framework bean  e g  in the sense of a hook  using a customizer   in order to communicate these aspects of a framework bean  coremedia defined a set of bean annotations  similar to annotations in java  these annotations are tags which can be added to the bean s description   description   in the bean configuration file  these annotations are not automatically analyzed  but are simply conventions to mark beans   the following annotations are defined  
   customizer is a mechanism  which enables you to change an existing bean definition without touching the actual configuration file of the bean  technically speaking  a customizer is a beanpostprocessor bean  which adjusts the bean during creation of the applicationcontext  the declaration of a customizer uses the  extensible xml authoring   see http   static springframework org spring docs     x reference extensible xml html for details  which enables you to write compact bean definitions   examples    beans xmlns  http   www springframework org schema beans    xmlns xsi  http   www w  org      xmlschema instance    xmlns customize  http   www coremedia com          coremedia spring beans customization   xsi schemalocation      http   www springframework org schema beans    http   www springframework org          schema beans spring beans     xsd    http   www coremedia com               coremedia spring beans customization    http   www coremedia com               coremedia spring beans customization xsd      bean id  someservice  class  com mycompany service      property name  enable  value  false       bean    customize replace bean  someservice  property  enable     value  true      beans   here  the property enable of the bean someservice is set to  true       customize append bean  somemap    map     entry key  key   value  value        entry key  key   value  value       map    customize append     here  two more entries key  and key  are added to a bean from the type map   syntax  the syntax to define a customizer are as follows    customize operation    bean  beanname   property  propertyname      custom value  value     or   customize operation    bean  beanname   property  propertyname      custom ref  custom beanname     or   customize operation bean  beanname    property  propertyname          bean  map  set  list or properties    customize command   basically  an operation   customize operation   is performed on a bean  bean        or on a property of a bean  bean      property         as a parameter of an operation  you can use a value  custom value        or a reference to a bean  custom ref         instead of a bean reference  you can also use an element  map    list    set    properties  or  bean  as a parameter  the customizer can be disabled by an attribute enabled  false    the following operations are supported   replace   depending on the context  a bean will be replaced by another bean with the same name or a bean property will be set to another value  append prepend   this operation works on beans or properties which are comprised of multiple elements  thus are of type list  set  map  string array and the like  you can add elements to the start   prepend   or end   append      if different customizers work on the same bean or property  conflicts may arise  therefore  you can use the attribute order to define the order of execution of the customizers    customize replace bean  myservice  property  name    value  myservice    order         customize replace bean  myservice  property  name    value  myservice    order         the example shows two customizers  both working on the property name of the bean myservice  due to the lower order value       the first customizer has a higher priority and is executed first  afterwards  the second customizer overwrites this setting again  
  in the request processing chain  controller objects are the first to receive the web request from spring s dispatcher servlet  spring chooses the controller based on the uri prefix  a controller decomposes the request  creates or looks up objects  performs actions and finally forwards the request to the view  the content application engine comes with a number of built in controllers that implement read only access to content beans and their blob properties  you can find their definitions in the file spring cae controllers example xml   the contentviewcontroller  uri prefix   content  is responsible for the display of content beans  it receives a content id in the uri  e g   content     and retrieves the corresponding content bean  additionally  it evaluates an optional query parameter  view   next  it performs a cache lookup for a dataview of the content bean  by default  the bean s default data view will be used for any view  this is configurable in your  mycomponent  controllers xml   the result and the desired view name are forwarded to the view dispatcher for rendering  the contentblobviewcontroller  uri prefix   contentblob  is responsible for delivering a blob property of a content object  it receives content id and blob property name in the uri plus an optional view name  the blob property value of the content object is then rendered in the desired view  by default  the blob data is simply copied to the servlet response  note that the unified api has already performed blob caching on disk  so a simple file copy takes place  the previewcontroller  uri prefix   preview  is responsible for handling preview requests from the coremedia editor and coremedia webeditor  it takes an id query parameter with the id of the object to preview  the controller creates the object from the id and redirects the browser to that object   if you want to extend the content application engine  you may have to write a custom controller implementation  this is mainly necessary if  you want to accept and process form submissions you want to accept requests for beans that are not based on content you want to restrict the built in controllers  
   annotation description  public   marks  that the functionality of the bean can be used in the sense of a service   configurable   marks a bean or property  that can be modified using customizers   overridable   marks a bean  that can be replaced by another bean in the sense of an alternative strategy   
  example    bean id  someservice  class  com mycompany service     description    this is some service    public      description    property name  enable  value  false      description     enables the service     configurable       description     property    bean   the bean is marked for public usage  in addition you are allowed to change the value of the property enable   
  in order for the coremedia content application engine to instantiate the right classes at runtime  they need to be configured with the factory  the engine s default factory implementation uses the spring application context to instantiate content beans  this way content beans can participate in spring s dependency injection mechanism   for example  they can receive references to other services without having to resort to service lookups in jndi or the servlet context   the content type to content beans mapping is defined in web inf spring cae contentbeans example xml using spring s xml notation  the file should contain a prototype definition for each class corresponding to a document type    prototype definitions follow a specific naming scheme  in order to be found by the factory  they must be given the same name as the factory  followed by a colon     and the name of the document type for which they were generated  for example  a class com company article that represents article documents is registered with the factory as follows    bean    name  contentbeanfactory article     scope  prototype     class  com company articleimpl      this line is a template for the content bean factory  it says   this is a definition for a content factory bean for the document type article this definition is a prototype  not a singleton  it must be newly instantiated for every article document the implementation class is com company articleimpl short   for documents of type article  return a new instance of class com company articleimpl     important  using scope  prototype  is vital  otherwise spring would cache one instance and return the same object every time   
  after defining the data views  make sure to configure the cache correctly  so that the data view objects are not ejected from the cache immediately  an indicator for this situation is the message  unreasonable cache size null for java lang object  in the log files   to configure the cache  you must set a property conforming to the pattern dataviewfactory cachesize   in the file spring objectserver properties  as a minimal solution  you can insert the line  dataviewfactory cachesize java lang object        into the objectserver properties  this will allow a total of       data view objects to be cached   a more elaborate method would be to partition the cache according to the type of the cached objects  the type of an object is defined either by the java type hierarchy or  if the object implements the interface com coremedia dispatch hascustomtype  by the result of the method getcustomtype    for ordinary content beans  the java type hierarchy is used   you can configure sizes for different types  if multiple types apply for a single cached object  the most specific type is used  for example  dataviewfactory cachesize com company cms supertype      dataviewfactory cachesize com company cms subtype       would allow the caching of up to      direct or indirect instances of supertype as long as these are not also direct or indirect instances of subtype  for subtype  at most     instances would be cached  this can make sense if instances of subtype consume a lot of main memory  so that      instances might lead to an outofmemoryerror   because data views extend their bean class  it is sufficient to configure cache sizes for the bean classes in the file objectserver properties  you need not reference the class names of the automatically generated data view classes   the default cache configuration contains a single line to the effect of  dataviewfactory cachesize com coremedia objectserver blob     cachedbeanpropertyblob       which ensures that blobs accessed through the beanpropertybloblinkscheme are properly cached   please note that the configured cache sizes are directly forwarded to the cache of the unified api instance that lives in the cae  that cache is an instance of the class com coremedia cache cache  that class does not perform any type hierarchy analysis when caching objects  this is only done by the data view factory inside the cae   
  you can render objects of type com coremedia xml markup by including them into a jsp using    cm include self    amarkup      this uses the class xmlmarkupview as a default view  which converts richtext to xhtml applying the following transformations     internal links are converted to uris pointing back into the cae   links  href attributes in the xlink namespace  without protocol and server are url encoded   anchor and image elements with xlink href attributes are converted to xhtml a href and img src    the coremedia richtext namespace is dropped from the elements  if you want to use your own transformations you have to proceed as follows  define your own view  plain for example  in spring cae views xml using a customizer    customize append id  programmedviewscustomizer  bean  programmedviews      map       entry key  com coremedia xml markup plain          bean              entry      map    customize append      use xmlmarkupview as the implementation of the view  but apply a custom filter factory which creates a sax filter chain  per output  proceed as follows   let your filter factory extend richtexttohtmlfilterfactory  overwrite  createfilters  and append your own transformations before super createfilters   public list createfilters httpservletrequest req   httpservletresponse res   markup markup  string view    list result   new arraylist    result add new myfilterforrichtext     result addall super createfilters req  res  markup  view         configure your filter factory in cae views xml as follows        entry key  com coremedia xml markup plain      bean class  com coremedia objectserver web xmlmarkupview        property name  xmlfilterfactory          bean class  com coremedia objectserver web        myrichtexttohtmlfilterfactory            property name  idprovider  ref  idprovider             property name  linkformatter  ref  linkformatter           bean        property      bean    entry        
  in general  a custom controller implementation needs to implement the interface org springframework mvc controller  the web page http   static springframework org spring docs     x reference mvc html mvc controller discusses controllers in general   in the first place  a controller looks strikingly familiar to a servlet  it is found due to an uri mapping and its input is a servlet request and response  but there are some differences  first of all  controllers are not instantiated by the servlet container but by the spring bean container  that means they can receive required services through dependency injection instead of the servlet context  also  their output is a little more interesting  after handling a request  a controller needs to return an object of type modelandview  this is a pair of a map  the model  and a view name  the model contains named  result  objects which can be retrieved and displayed by the view  in jsp based views  the model map will typically be exposed as request attributes  thus easily accessible through jsp el   the content application engine picks up the result  through a custom viewresolver implementation  and directs it to the view dispatcher for display  in order to participate in the content application engine s templating  the model needs to contain an entry named  self   the corresponding object will be subject to view dispatching using the returned view name  the content application engine comes with some static convenience methods in the class controllerutils to create such modelandview objects  for example  a controller that wants to render a black bean would look as follows   public class blackbeancontroller extends abstractcontroller     protected modelandview handlerequestinternal      httpservletrequest request  httpservletresponse response           render a black bean cooked     blackbean b   new blackbean        return controllerutils viewof b   cooked           the method viewof will create a modelandview object that contains  a mapping  self     a blackbean as model  cooked  as the view name  correspondingly  the view dispatcher will now look for a template blackbean cooked jsp   note that the model can contain auxiliary beans next to  self   see the class com coremedia objectserver web controllerutils for a complete list of methods to create and populate modelandview objects  in the content application engine you should always use the factory methods in controllerutils since they deal with the  default  view name  null   the  raw  spring apis do not allow for a null view name   in order to enable a controller  you need to define it and add it to the uri mapping in your project specific  mycomponent  controllers xml    bean id  blackbeancontroller        class  com company blackbeancontroller         bean id  customcontrollermapping             blackbean blackbeancontroller      all requests to  context  servlet blackbean are now directed to the black bean controller   servlet is the mapping of the spring dispatcher servlet in web xml  you can change its prefix to your likings  unfortunately  the empty prefix      does not work  jsp templates will not work if you configure that  
  you are asked to customize the http cache according to your business needs  doing so means implementing your own cacheablerequestpredicate  requestnormalizer  cacheableresponsepredicate or eventlistener beans  this chapter aims to give you an introduction of how to implement your custom components and how to embed them in the http cache  in addition  have a look at the api documention    registering your customized components  when you have implemented a customized component  you have to register it in the http cache application  to do so  copy a jar containing the implemented classes into the web application s classpath located at  web inf lib  after that  you have to edit the file  web inf spring httpcache httpcache hooks example xml  which is a spring framework based configuration file  see http   www springframework org   this file contains the definition of four beans named requestnormalizer  cacheablerequestpredicate  cacheableresponsepredicate  and eventlistener which reflect the above mentioned components  for registering your implementations  all you have to do is to replace the particular bean s class as well as its configuration  as follows    bean id  cacheablerequestpredicate     class  com mycompany mycacheablerequestpredicateimpl           bean     implementing a cacheablerequestpredicate  in order to write a cacheablerequestpredicate  you have to implement the interface com coremedia cap httpcache requestpredicate  a default implementation com coremedia cap httpcache uriregexprequestpredicate  is provided  this implementation matches the request s uri against a number of configurable regular expressions  for example  requests having uris http   myhost mywebapp servlet content      or http   myhost mywebapp servlet content      may be marked as  cacheable  when using a pattern  servlet content    on the other hand  a request having an uri http   myhost mywebapp servlet contentblob      doesn t match the pattern and therefore is not marked as cacheable   when implementing the requestnormalizer you should keep in mind that caching a response causes system resources such as disk space  cpu or database io to be consumed  on the other hand  the removal of a cached response due to an invalidation makes the httpcache consume resources such as cpu and database io as well  for this reasons you should carefully design your cacheablerequestpredicate and your web application in such a way that the number of cached responses is kept as low as possible  as a rule of thumb the response for a request should only be cached if it is typically  expensive to compute  so the cost of recomputation exceeds the costs of putting it into the cache  not invalidated a short time after being cached    you should also consider to use the memory based dataview caching mechanism for certain responses instead of generally using the httpcache for all responses   implementing a requestnormalizer  create a requestnormalizer by implementing the interface com coremedia cap httpcache requestfilter  in your implementation  you may want to use class com coremedia cap httpcache defaultrequest  which contains useful methods for dealing with request objects  by default  the class com coremedia cap httpcache allheadersremovingrequestfilter is provided  all headers  such as browser information and cookies  are removed from the requests and are therefore not taken into account for caching    the requestnormalizer is a good way to achieve the above mentioned goal to keep the number of cached responses low  when implementing a requestnormalizer  you should choose a restrictive approach  e g by removing headers and parameters from the request which are not used  for instance  requests which vary in the user agent header field only  should be normalized to an identical request in case that the user agent doesn t make any difference for the response  a restrictive approach is also important with regard to malicious requests  varying request headers or parameters could harm your website by causing lots of useless responses to be cached   implementing a cacheableresponsepredicate  implement the interface com coremedia cap httpcache responsepredicate for writing a cacheableresponsepredicate  the class com coremedia cap httpcache rfc    cacheableresponsepredicate is used as a default  it is based on section      of rfc       the http     standard  and excludes certain responses  for example those which contain the header  cache control  no cache   from being cached   the cacheableresponsepredicate is applied by the httpcache when the response is already written to disk  as a consequence  writing a response to disk which finally shouldn t be cached is a more expensive operation than letting the cacheablerequestpredicate decide to not cache the response and then render it by the cae directly  for this reason  you should prefer the cacheablerequestpredicate for determining the cacheability and use the cacheableresponsepredicate for rare exceptions instead    implementing an eventlistener  an eventlistener is implemented by using the interface com coremedia cap httpcache eventlistener  it is important to acknowledge the incoming invalidation events by calling the event s acknowledge   method after the event has been handed  if you don t do so  the event will be repeated later on  the default implementation com coremedia cap httpcache autoacknowledgeeventlistener should be used if you are not interested in any invalidation events  it simply acknowledges all incoming events without doing any further processing   dependency tracking for the cae web application  in the context of the http cache and from a special point of view  you might understand the cae web application as a function for computing values of a type  http response   in fact  the http cache internally uses a persistentcachekey implementation which delegates its computation to the cae and returns the cae s output response as its value    in order to make the http cache keep track of certain dependencies  you have to trigger these dependencies from inside your cae web application  embed such code in any place which is passed during the cae response generation  such as your templates  your controllers or your  content  beans  use the same static functions on com coremedia cache cache as described above for the persistentcachekey s evaluate  method  for example  if you want a response to become invalid after    seconds  you have to call com coremedia cache cache cachefor          during the response s computation    when using the cae s contentbean mechanism  content dependencies are tracked automatically  so you don t have to worry about them  for example  if a response accesses a content repository based contentbean property  this content dependency will be tracked  any change to this content will lead to an appropriate invalidation    when triggering dependencies you should keep in mind that every single dependency needs to be stored in the database and therefore causes the consumption of some database io  thus  a large number of dependencies for a single response might imply an significant load to the database  on the other hand  more dependencies might cause more invalidations to take place  for this reason  you should try to keep the number of dependencies low  excluding unnecessary dependencies by temporarily disabling dependency tracking  cache disabledependencies   and cache enabledependencies    might be a useful mechanism when dealing with dependencies      
  internal details  internally  a  httpcache include  tag and its  httpcache param   and  httpcache header  tags will be transformed into an com coremedia cap httpcache request object  this is done  transforming the bean view pair into a uri using a link scheme  based on the request object and the cacheablerequestpredicate  the http cache distinguishes between static cacheable and dynamic fragments   if it is a static fragment   the headers and parameters passed to the fragment and filtered by the requestnormalizer are included in the cachekey  the headers and parameters passed to the fragment and filtered by the requestnormalizer are the only ones  which are visible in the jsp template   if it is a dynamic fragment   the headers and parameters passed to the fragment are not filtered  they are combined with the headers and parameters of the root request and are visible in the jsp template   guidelines for the use of fragments  including fragments in jsp templates is very similar to the standard programming paradigm of the  content application engine   a bean  self  is passed to the jsp template  nevertheless  there are some subtleties you should keep in mind   do not use request or session attributes in static fragments  technically it is possible  but it leads to inconsistencies  given  that such an attribute changes while caching a fragment  this change does not apply  when you retrieve the fragment later from cache  in the embedded assembly mode you can enrich links in static fragments with session information  with httpservletresponse encodeurl      for example   in the cache  this information is stored as a placeholder  which is replaced by the current session id during assembly  so you can prevent a user who has disabled cookies  from leaving his session       dependencies  that are set explicitly or implicitly during execution of the jsp template  with com coremedia cache cache dependencyon      for example  are stored as dependencies of this fragment if the fragment is cached  the headers and parameters that are accessible via the httpservletrequest object  with httpservletrequest getheadernames   for example  depend on the headers and parameters passed to the template via  httpcache param  and  httpcache header  for example    depending on the assembly mode you use  the response status and response headers are treated differently for a non root fragment  so take care when developing templates  how the headers interact    embedded assembly mode  only status and header of the root fragment are delivered  for sub fragments they are ignored  this implies  for example  that a  time to live  set in the  expires  header of the root fragment is valid for the whole page  hold in the cache  if a sub fragment has a shorter  time to live   this shorter setting might be ignored  in conclusion  the sub fragment is displayed for longer than its life time  client side assembly modes  the meta information of all fragments is used  a cache access always implies a specific overhead  so  only use  httpcache include  when it makes sense and brings an advantage to include a fragment  do not use it as a means of template structuring  for this purpose use  cm include    if you use the ahah assembly mode  you have to include the corresponding javascript library into each relevant page  for example       page contenttype  text html charset utf     session  false          taglib prefix  c  uri  http   java sun com jsp jstl core        doctype html public     w c  dtd xhtml     transitional  en    http   www w  org tr xhtml  dtd xhtml  strict dtd     html      head        title      title            import the ahah javascript library           script language  javascript  type  text javascript       src   c url value   libjs libjs js       script        script language  javascript  type  text javascript          loadpackage  com coremedia httpcache ahah            c url value   libjs               script        script language  javascript  type  text javascript          new com coremedia httpcache ahah fragmentloader   register           script       head      body               body     html    example  this example shows you how to add fragment caching to your standard cae applications  it demonstrates how beans  controllers  link schemes and templates might work together  be aware  that this example is intended as a draft  it is only a starting point for your own improved solutions   it is assumed that the html pages to deliver  consist of multiple content beans  this beans are representations of the single fragments  such as  navigation    login    teaser  and the like  for each fragment  i e  bean  you can determine whether it is static or dynamic    beans  you need to be able  to determine whether a bean is a representation of a static or dynamic fragment  to this end  you might introduce a marker interface or model your content in an appropriate way    in this example  the document model contains an abstract document type named  dynamic   which represents dynamic content  therefore  all content beans representing dynamic content implement the dynamic interface  so  you simply have to check  if a content bean implements this interface and if so  it is a dynamic bean   link schemes  you have to extend the link schemes in such a way  that the distinction between static and dynamic fragments is reflected in the created uris  each fragment has to be covered by the link scheme and therefore be represented by a uri  this is in contrast to standard cae applications  where only the root fragment needs to be addressed by a uri   in the example  the contentlinkscheme will be extended in the following way   public dynamiccontentlinkscheme extends contentlinkscheme        string formatlink object bean  string view     httpservletrequest request     httpservletresponse response  boolean forredirect     throws urisyntaxexception        if  bean instanceof dynamic              format the link with the configured prefix        super formatlink bean  view  request  response  forredirect               else             not responsible  let next linkscheme handle this         return null                          configure the link scheme in your project specific  mycomponent  linkschemes xml as follows and make sure that they are registered at the linkschemes bean    bean id  staticcontentlinkscheme     class  com coremedia objectserver web links contentlinkscheme       property name  prefix  value   static              bean      bean id  dynamiccontentlinkscheme         class  com mycompany applicationcontentlinkscheme       property name  prefix  value   dynamic              bean      controllers  you have to extend the controllers in such a way  that for each uri generated by the link schemes  exist an appropriate controller  that handles the fragment  as for the link schemes  not only the root fragment but all sub fragments need to be handled    in the example  you simply have to configure one controller in your project specific  mycomponente  controllers xml file to handle all uris    bean id  dynamiccontentviewcontroller         class  com coremedia objectserver web contentviewcontroller      property name  prefix  value   dynamic            bean         bean id  staticcontentviewcontroller        class  com coremedia objectserver web contentviewcontroller      property name  prefix  value   static            bean         bean class  org springframework web servlet handler        simpleurlhandlermapping       property name  mappings         value          static   staticcontentviewcontroller         dynamic   dynamiccontentviewcontroller                   value       property     bean           jsp templates  in the jsp templates you need a  httpcache include  tag for each included fragment  only use this tag if it is necessary for caching  for example  if you switch from a static to a dynamic fragment or vice versa  in other cases you are better of with the  cm include self    bean     tag   cacheable request predicate  in a final step  you have to adapt the cacheable request predicate   so that the distinction between static and dynamics fragments can be made using the uri  in this example  the uriregexprequestpredicate has been used and configured in the spring httpcache httpcache hooks example xml file         bean id  cacheablerequestpredicate         class  com coremedia cap httpcache uriregexprequestpredicate       property name  acceptpatterns         list          value  servlet static    value         list       property        property name  rejectpatterns         list          value  servlet dynamic    value         list       property     bean        
  the implementation of the external http cache assembly strategy bases on cae jsp templates  therefore  it is easy to include additional assembly systems  in general  you only have to create another cae template called   web inf templates com coremedia cap httpcache assembly placeholder  custom assembly mode name  jsp   here  replace  custom assembly mode name  by a short name identifying your custom assembly mode  this template replaces each  httpcache include  with a placeholder  which in turn will be translated into an include operation by the external assembly system  the template is backed by a bean of type com coremedia cap httpcache assembly placeholder  which contains all information  required for the creation of the placeholder   example  you want to use  edge side includes   see http   www w org tr esi lang   so that an akamai server can do the assembly  then  the template would have the name web inf templates com coremedia cap httpcache assembly placeholder esi jsp and might look like the following       taglib prefix  c  uri  http   java sun com jsp jstl core          page session  false       esi include xmlns esi  http   www edge delivery org esi          src   c out value    pagecontext request contextpath      self path   self query   escapexml  false         onerror  continue       the placeholder created by the template would look as follows    esi include xmlns esi  http   www edge delivery org esi       src  mywebapp myfragment query true  onerror  continue    the uri contains the context path of the web application  the path of the fragment and additional query parameters  not included in this example are additional  httpcach header  or  httpcache parameter   passed within the  httpcache include  tag    esi   the short name used for the assembly mode is an identifier for this custom mode  you can activate the mode setting the property httpcache assembly mode esi in the web inf spring httpcache httpcache properties file  see the administration and operation manual for details   
  each content bean in the cae represents a content object from the coremedia content server    in order to specify the indexed content beans  you have to define the set of source contents using a content selector  the content selector is part of the content trigger framework of the proactive engine   the file caefeeder triggers xml  which is located in the directory  installroot  config caefeeder spring  contains the spring framework bean definition of the content selector  the default implementation pathandtypecontentselector selects contents by type and path  which can be configured in the file caefeeder properties in the same directory  the property feeder contentselector basepath specifies the base path of the contents and property feeder contentselector contenttypes contains a comma separated list of content types   the following example selects all contents of type text and download which are located below the path  sitea core com  
  the feedablecontentbeanevaluator creates feedables from contentbean objects  it extends the contentbeanevaluator of the content trigger framework of the proactive engine and is configured in the file caefeeder triggers xml  which is located in the directory  installroot  config caefeeder spring   an implementation of com coremedia cap feeder persistentcache keytransformer is used to create identifiers for fast documents in the index of the search engine  the default keytransformer implementation creates identifiers of the same format as the idprovider of the content application engine    for example  a content bean for the content with the numerical id    is represented by a fast document with the value contentbean    in the field id  search applications can use the idprovider to get a content bean for the identifier again   the feedablecontentbeanevaluator uses an implementation of com coremedia cap feeder feedablepopulator to set the elements of the feedable for a content bean  by default a beanmappingfeedablepopulator is used which maps java bean properties of contentbean objects to elements of the created feedable as configured  if required  a custom implementation can be configured in the property feedablepopulator of the feedablecontentbeanevaluator bean  this section describes the configuration of the beanmappingfeedablepopulator   the property beanclassproperties in the definition of the beanmappingfeedablepopulator takes a java util properties object  which maps bean class names to a comma separated string of their indexed bean properties  by default  the properties object is created from properties in the file caefeeder properties  which is located in the directory  installroot  config caefeeder spring these properties have the following format   feeder beanmapping  bean class      comma separated list of bean properties    the following example defines the mapping for content beans of classes com coremedia demo contentbeans fragment text and com coremedia demo contentbeans media download  for content beans of class text and subclasses  the java bean properties headline and text map to elements of the feedable  when constructing a feedable the beanmappingfeedablepopulator calls the property methods getheadline and gettext of class text to retrieve the values for these elements   feeder beanmapping com coremedia demo  contentbeans fragment text headline  text   feeder beanmapping com coremedia demo  contentbeans media download data  the above configuration provides a simple way for bean properties which are mapped to elements with the same name  furthermore the bean properties will always be added to the textbody index field  a more powerful configuration is available with property beanmappings in the definition of the beanmappingfeedablepopulator  you can use both beanclassproperties and beanmappings to configure the mapping   the property beanmappings in the definition of the beanmappingfeedablepopulator takes a list of mappings where each mapping applies to one bean class  the definition is contained in config caefeeder spring caefeeder mappings xml  a mapping for a single bean class is represented by a com coremedia cap feeder bean beanfeedablemapping  each beanfeedablemapping contains a list of mappings for java bean properties of the bean class in the property beanpropertymappings  a mapping for a single java bean property is represented by a com coremedia cap feeder bean beanpropertyfeedableelementmapping  the beanpropertyfeedableelementmapping maps a single java bean property to an element of the feedable  when setting the elements of a feedable for a specific content bean  the mappings for the whole class hierarchy of the content bean are considered  the order of the configured mappings is important  the property mapping of the first configured beanfeedablemapping overwrites other mappings for the same element   the following example defines a mapping for the superclass of all content beans com coremedia objectserver beans contentbean  the bean property content modificationdate maps to the feedable element named freshness  the bean property uses the syntax of spring framework s beanwrapper for nested properties  when constructing a feedable the beanmappingfeedablepopulator calls the property methods getcontent   getmodificationdate   of class contentbean to retrieve the value for the element  furthermore the value is not added to the textbody index field and does not use advanced text processing  note that the index field freshness is used for ranking of the search results in the default index profile  furthermore the example sets the type of the feedable to the value of the nested property content type name  which resolves to name of the underlying content s type  getcontent   gettype   getname    
  if you need more control  you can set up a cae feeder without proactive engine and use the public api to feed the coremedia search engine  such a setup does not require a database  it is based on the cae feeder template but requires some manual configuration   for wiring a feeder without proactive engine  add the following spring configuration file  e g  as file config caefeeder spring caefeeder standalone xml  
  several configuration files are used to tune preview based editing  the central configuration file is  framework spring editing jsf dispatcher servlet pbe xml in the cap editing jsf config jar  it contains a bean named pbeconfig which is responsible for configuration of enabling or disabling preview based editing and target uris for the editors  don t change this file directly    use the  web inf spring editing jsf dispatcher servlet pbe properties for your configurations  the settings of this file are read by the pbe xml  for the most basic context menu without any custom commands  it should be enough to configure the pbe properties file and enrich some templates of your web application  in some situations it may be helpful to customize the pbeconfig bean  this can be done by adding spring customizers to the corresponding custmization pbe xml in the directory  web inf spring editing jsf dispatcher servlet  the usage of customizers is described in section    as the default commands may open a coremedia webeditor or coremedia editor  you have to provide an uri for either one  the following table displays the properties to be edited  
  after installation  the webapp editing holds all files necessary for preview based editing   the files below  web inf spring editing jsf dispatcher servlet are the files you should use if you want to change the files below  framework spring editing jsf dispatcher servlet located in the cap editing jsf spring config jar  do not change framework files directly  as framework files may change when you update to a new version of the coremedia system  
  two new services make the creation of new preview based editing commands much easier  while the unified api supports content handling and editing when accessing the coremedia server  the editing services api makes it possible to easily create new user interfaces for manipulation of data    after installation of the contentapplication template webapp there are several default actions available  the default actions which may appear in a context menu are subsumed in framework spring editing jsf jsf dispatcher servlet editing pbe toolbars xml file  located in the cap editing jsf spring config jar file      bean id  pbemenuactions          class  java util arraylist        constructor arg         list           value opendocumentviewaction  value           value opendocumentaction  value           value opencontaineraction  value           value separator  value           value movetopaction  value           value moveupaction  value           value movedownaction  value           value movebottomaction  value           value removelinkaction  value           value separator  value           value cutlinkaction  value           value copyaction  value           value pastelinkaction  value           value separator  value           value loginaction  value           value logoutaction  value           value separator  value           value openinfoaction  value          list        constructor arg      bean    in your own application you override this file and add new actions by adding a spring bean definition file located under  web inf spring editing   e g  editing toolbars xml  containing the bean definitions below  be aware to include the default actions you will still need     xml version       encoding  utf       beans xmlns  http   www springframework org schema beans         xmlns xsi  http   www w  org      xmlschema instance         xmlns customize    http   www coremedia com      coremedia spring beans customization         xsi schemalocation    http   www springframework org schema beans   http   www springframework org schema beans  spring beans     xsd   http   www coremedia com       coremedia spring beans customization   http   www coremedia com       coremedia spring beans customization xsd    customize replace bean  pbemenuactions         list           value opendocumentviewaction  value           value opendocumentaction  value           value opencontaineraction  value           value separator  value           value newfragmentaction  value           value removefragmentaction  value           value newpageaction  value           value renamepageaction  value           value removenavigationaction  value           value newsubcontentfragmentaction  value           value newsubcontentpictureaction  value           value blanksubcontentaction  value           value removesubcontentaction  value           value showsubcontentaction  value           value separator  value           value newpagelanguageaction de  value           value newpagelanguageaction en  value           value separator  value           value movetopaction  value           value moveupaction  value           value movedownaction  value           value movebottomaction  value           value removelinkaction  value           value separator  value           value changestyleaction  value           value removestyleaction  value           value separator  value           value democutlinkaction  value           value copyaction  value           value pastelinkaction  value           value separator  value           value loginaction  value           value logoutaction  value           value separator  value           value startworkflowaction  value           value openinfoaction  value          list     customize replace    beans    the values in the upper lists are references to action beans configured in editing pbe actions xml   
  the http cache is an extension of the cae web application which is used for caching http responses   this chapter describes http cache related administration issues only  without explaining the underlying concepts  have a look at the content applications developer manual for further details   http cache webapp configuration  the http cache plugin for the cae web application template  contentapplicationengine template  consists of a few more files   an additional directory web inf spring httpcache  containing custom configuration files is introduced   an additional jar file cap httpcache config jar containing framework configuration files is introduced  the framework content are not intended to be changed by customers  the file web inf web xml has been extended  all configuration issues for the standard template  such as configuration of the objectserver properties or log j properties  also apply to the http cache template  in addition  the file web inf spring httpcache httpcache properties needs to be adapted   database  you have to specify a database for the http cache  before configuring the database properties  you have to create a new database user as described above  alternatively  due to the use of different tables you can reuse the same database user which you are using for the cms repository    
  after that  add the database s jdbc driver to the web application s classpath by copying the jar into web inf lib   finally  adapt the jdbc related configuration properties   jdbc driver oracle jdbc driver oracledriver jdbc url jdbc oracle thin  localhost      oracle jdbc user username jdbc password password jdbc dbname oracle  value cache  specify a location in the file system where the http cache is supposed to store its cached http responses  you can use an arbitrary directory where the servlet container s process  such as apache tomcat  has sufficient rights to read and write files  modify the entry as  valuecache store directory c  data httpcache  if you want the http cache to run on an empty cache you might set  httpcache clear true  which causes all cached values and dependencies to be deleted when starting up the http cache  make sure to remove this entry as soon as the http cache has started up if you don t want the httpcache to be cleared on the next restart   running the components  start the http cache web application by starting the servlet container  e g  apache tomcat  where it is deployed in  
   location description bin  files required for starting the application such as proactiveengine jpif lib  all required java libraries config proactiveengine spring  location of all configuration files   var logs  target of the logging output files   
   directory description  installroot  bin contains files required to start the application   installroot  config caefeeder contains configuration files for the cae feeder   installroot  lib contains required libraries   installroot  var logs contains log files   
  in order to define the bean type model  you must define bean types and register them at the bean type repository   currently  a few restrictions apply to the bean type definitions   bean types and properties need to be explicitly defined for the content rules framework  no mechanism is provided to derive the model structure from the cae contentbeans xml definitions or java bean classes  only few property types are supported  namely the ones that can be handled by the single bean repository type supported   bean types are defined the file web inf spring editor extensions beanqueryeditor beantypes xml using the spring framework bean configuration scheme   a bean type definition comprises the following properties   
  of all components of the analytics engine  the tracking component needs the least configuration  mainly because it is a passive component that simply collects events and waits for the events to be fetched  none of the following configuration properties are mandatory   enabling and disabling tracking  whether or not tracking should be enabled or disabled can be configured in web inf spring analytics tracking base properties using the property tracking enable  for details see section   configuring sampling  you can configure a tracking cae to discard many or most events in order to reduce the server load  this technique is known as sampling and it is commonly employed to reduce the hardware requirements for tracking websites with very many accesses  by rescaling the data before display in in site analytics or in the analytics dashboard  this operation is largely transparent to the end user  sampling is configured in the file tracking properties   sampling is based on the multiplier value configured as tracking sampling multiplier  the multiplier is an integer value n so that only  out of n visitors are tracked  consequently  only   out of n sessions and   out of n page views are tracked  if the configured multiplier is    the default   tracking is disabled and all page views are tracked  the multiplier can be changed temporarily using jmx or permanently in the property file  when changing the multiplier from   to another value  it should first be changed to   and kept   for at least a day  this ensures that all sessions that were tracked before sampling was activated have a chance to complete  similarly  a multiplier greater than   should only be changed to   and not directly to    after changing the multiplier between two values greater than    the new value only takes effect after visitors have not made a page view for at least the time configured as tracking sampling multiplier keep delay  this ensures that the modifier does not vary within one session   set the sampling multiplier for all involved caes to the same value and keep the multipliers in sync   the sampling multiplier can be changed at any point of time and almost all statistics are completely unaffected by the change  except that statistics may become unreliable if the multiplier is set too high  however  the approximating mode for unique visitor statistics require a complex preaggregation logic that works best if the sampling multiplier is changed near midnight  this way  almost the entire day is counted with one multipler  allowing for a reliable daily preaggregation  if you have to change the sampling multipler at other times  don t do so more than a few times each year   the value tracking sampling multiplier max denotes a maximum possible value for the multiplier  normally  the configured multiplier will be used  but for sessions that started before the last change of the multiplier  an old value may be used  because the multiplier has to be stored in the web browser  it may be tampered with  the maximum value ensures that only plausible values for the multiplier are possible   the user s identity and the currently active multiplier are kept in cookies  whose name and origin can also be configured in tracking properties  the cookie names should be kept constant   configuring the storage of logs  after installing a content application engine with enabled tracking  all page views are automatically tracked  the gathered data is temporarily stored in plain text files  which are then fetched by the analytics data aggregator  you should probably configure the directories in which the files are stored  to that end  please adapt the properties tracking directory incomplete and tracking directory complete in the file web inf spring analytics tracking properties in the web application    please make sure that there is enough free space to store the events of several hours  so that no events are lost in the case of a downtime of the analytics data aggregator  each click might generate a few hundred bytes of data  so that a plausible amount of disk space would be     mbytes to   gbyte per cpu    it is advisable to write log data to a local disk  not to a remote file system  multiple content application engines must not use the same directories   configuring multi site  when enabling tracking in the live environment  the normal case   make sure to set the flag tracking multi site in the file custom tracking properties to either true or false  it is not possible for coremedia analytics to detect a multi site installation when connecting to live servers  so that the tracking cae must complain if this property is not configured   detecting source pages without javascript  so that the tracking component can determine the source of page views even if the visitor disabled javascript  you must configure the url parser  to this end  set the property tracking page data extractor pattern in the file tracking properties to a java regular expression that is matched against the referrer url without the query part  if the regular expression matches  its first capturing group determines the numeric content id of the content bean being displayed  for example  a pattern like  tracking page data extractor pattern  http   www mydomain com myapp servlet content           could be used in a very simple setup  however  most content applications attempt to create more user friendly urls  which are often much more difficult to parse  in that case  it might be necessary to implement the interface pagedataextractor as described in the analytics developer manual   configuring external search engine detection  the tracking component tries to extract search term submitted to search engines from the http referer header  if the browser transmits it  we can find the url that contained a link to the current page in that header  the url of many  but not all  search engines contains the search terms in clear text  there is a default parser configuration that works correctly for significant number of search engines  almost all of which use a query parameter q or query to indicate the search terms  the default configuration also takes care of a small number of popular search engine that use other pattern   however  for some of the more rarely used search engines that are of particular importance to your site  you may need to configure additional rules in the file tracking properties  all properties used for this purpose start with a prefix of tracking search engine detection  the remainder of the property name after the prefix and a separating dot is a domain name or a host name suffix  where domain names or host names with that suffix belong to a certain search engine  for example the suffix google com matches all of google com  www google com  and images google com    the suffix may contain the wildcard   arbitrarily often  for example you can specify google    which matches google de as well as www google de and google fr  wildcards may only be adjacent to dots  for example it is not permitted to specify the pattern  oogle com  when matching  longer patterns are preferred over shorter pattern and patterns without wildcards are preferred over pattern with wildcards  the property tracking search engine detection   specifies the default that is used when no other pattern matches   the property value for any pattern is either a number prefixed with the character   or a comma separated list of attribute names  if an   prefix can be found  the trailing number is indicated as the number of the path component of the uri  for example the value    parses urls generated by metacrawler com  which look like  http   www metacrawler com info metac search web searchterm      where     indicates a long chain of additional path components  as you can see  the search term is located in the fourth position after the host name  therefore the following default configuration is provided   tracking search engine detection metacrawler com     if a comma separated list of attribute names is given  the first url parameter in the query part of the url is used as the search term  for example  yahoo com uses the p parameter for the search term  generating urls like this   http   search yahoo com search p searchterm      this is handled by the following declaration   tracking search engine detection yahoo com p  tracking the size of http responses  the analytics engine can be configured to track the size of the delivered content for each page view  the size is not currently used in any of the standard reports  but it might be interesting for custom reports  in order to determine the size  it is necessary to configure the file web xml directly  because this functionality cannot be achieved by means of a spring configuration alone  you have to add the lines   filter     filter name analytics size filter  filter name     filter class com coremedia analytics util sizefilter     filter class    filter   filter mapping     filter name analytics size filter  filter name     url pattern  servlet    url pattern    filter mapping   to the web xml  this causes each response object to be wrapped with an object that counts the number of bytes transferred  this information will then automatically be extracted from the wrapper when the page view is logged   please note that it is not possible to determine the delivered size of the response if you use tracking images  in particular  it is not possible to track the size of http responses when using the http cache extensions  which rely on tracking images   
  the object analyzer is installed as a standalone application that draws its configuration from files stored below the directory config objectanalyzer spring  most of these files belong to the proactive engine framework and need not to be changed   the file proactiveengine properties defines a database connection that is also reused for the storage of analysis results  in other words  the configured database must be the analytics database  in order to simply the creation of consistent backups  it is advisable not to split the functionality across two database instances  this file also indicates the content server that should be used   the spring bean definition file objectanalyzer trigger xml contains the definition of the content evaluator and the content selector  adapt these bean definitions as needed   normally  the object analyzer should be attached to the content management server  when attaching it to a live server  you must update the property multisitemode in the file custom trigger xml to true or false  depending on your installation   to reduce operation overhead you may want to run the analytics data aggregator and the object analyzer in a single jvm  to achieve this add the following lines to the file workflowserver properties   workflow server managers objectanalyzer class    com coremedia workflow common util springcontextmanager workflow server managers objectanalyzer order    workflow server managers objectanalyzer configurations    resourcecontainer config objectanalyzer framework   config jar     framework spring      xml config objectanalyzer spring   xml   additionally  the following line must be added to the file workflowserver jpif   java vm args   java vm args  dplaceholder config locations   resourcecontainer file    install dir config objectanalyzer   framework   config jar  framework spring      properties file      install dir config objectanalyzer spring      properties   this will establish a second spring application context in the workflow server  because this manager is given a positive order value  it is initialized after the aggregator manager  thereby ensuring that all database table are already generated when the object analyzer is started for the first time  
  coremedia analytics dashboard features role based views and implements role based access control based on groups defined in the cms  configuration of dashboard profiles and views is described in the analytics developer manual  chapter customizing and extending the dashboard    restricted access per install  for security reasons  no view profile is enabled for unauthenticated users in the dashboard configuration  per install two profiles  adminprofile and editorprofile  for cms user groups administratoren and editor have been enabled  these profiles require user authentication via single sign on  sso    authentication via single sign on  sso   analytics dashboard does not provide an authentication mechanism on its own but relies on a single sign on mechanism like e g  cas  when enabling sso authentication  unauthenticated dashboard users will be directed to the single sign on authentication mechanism  e g  the cas login page   users already authenticated at the sso authentication provider  e g  after being authenticated at the cms system  need not re authenticate   configuring cas as single sign on  sso  authentication provider  please refer to the demo developer manual  section installation  single sign on for instructions on how to install and customize cas  more information on cas customization will be added  
  in a content application engine with either in site analytics or click tracking enabled  the file web inf spring analytics tracking base properties controls the basic behavior of the analytics tag library  with most of the properties referring to the delivery of tracking images  
  in a content application engine with enabled click tracking  the following configuration options can be set in the file web inf spring analytics tracking properties  
  in a content application engine with enabled in site analytics  you can configure the following properties in the file web inf spring analytics overlay properties  
  in an analytics dashboard web application  you can configure the following properties in the file web inf spring analytics analyticsdashboard properties  
  in an object analyzer you can configure the same properties in the file config objectanalyzer spring proactiveengine properties that are configurable in config proactiveengine spring proactiveengine properties for a proactive engine  see section for details    note that the proactive engine s value cache is not used by the object analyzer  in the config proactiveengine spring proactiveengine properties  set the boolean property valuecache enabled to false and set the property valuecache store directory to    var valuecache   default value   
  a workflow server that acts as an analytics data aggregator supports a number of additional configuration options in the file properties corem workflowserver properties   options that contain a time specification are configured with values as described in section  
   version cms      cms      cms      end of life                         os non editor    solaris     c solaris    c c solaris    sparc c          bit java  c          bit java  c solaris    x   c     bit java  c     bit java  c     linux red hat advanced server       c linux red hat advanced server      c     bit java  s linux red hat advanced server       c     bit java   s     bit java    linux suse linux enterprise server     c linux suse linux enterprise server      c     bit java   s     bit java  c     bit java       hp ux        c     bit java  c     ibm aix       d ibm aix     c     bit java    c     bit java  c     windows server      sp    c windows server      c     bit java  c     bit java  c windows server      c     bit java  c     bit java   os coremedia editor    windows nt     sp     windows      sp    c windows xp c c c windows vista with java   update    c s  office editor webdav    microsoft office        s microsoft office xp   c microsoft office       c s microsoft office      c s  coremedia webeditor    internet explorer     c c c internet explorer    windows xp c s  internet explorer    windows vista c s      firefox        windows xp  c s firefox      windows xp c s  firefox      windows vista c s  firefox      linux c s  firefox      windows xp s   firefox      windows vista s   firefox      linux s   editing services for jsf    internet explorer      c  internet explorer     c s      firefox        c  firefox     c s  firefox      s   analytics    internet explorer      c  internet explorer     c s      firefox     c s  firefox     s   java               c        c hp             c s           s       update     s      update    c   database    oracle         c oracle  i    c oracle  i  s s c oracle   g r   c c oracle   g r  c c s oracle   g s       db             c db        c c s db          s s      ms sql      server sp    c ms sql      express   s ms sql      server c c s ms sql      server s       postgresql       c s  postgresql       s   servlet container    tomcat      c c tomcat      s  no parallel usage of cm web applications   tomcat     c s      resin          c resin    c      bea wl      sp      c bea wl      beta   s bea wl      c  bea wl    c       atg dynamo       s atg dynamo      c  only ads  s     ibm websphere       c ibm websphere      c c ibm websphere     c c      sun application server       c sun application server      c      portal    ibm websphere portal server           d ibm websphere portal server      c s ibm websphere portal server     c s      sap enterprise portal      sp    s sap enterprise portal      sp    c  sap netweaver portal   c   search engine    fast       c fast     s c s fast     c    
  most of the strategies discussed in the previous section can be configured in the spring configurations of a content application engine  but some beans have to be configured in the data aggregator or in the analytics dashboard web application   this section discusses those strategies that support the default functionality of coremedia analytics  for extension options that add fundamentally new behavior  the appropriate sections are indicated   click tracking  the bean analyticslog as configured in the file spring analytics tracking xml provides a number of strategy parameters of which any or all can be replaced by custom beans    bean id  analyticslog  parent  abstractanalyticslog      property name  sessionextractor  ref            property name  usernameextractor  ref            property name  browserextractor  ref            property name  sizeextractor  ref            property name  siteextractor  ref            property name  pagedataextractor  ref            property name  referrerdataextractor  ref            property name  robotdetector  ref            property name  logfilter  ref           bean   simply define your own beans by instantiating the classes you implemented and enter a reference to your bean into the definition of the analyticslog bean  by default  the set of overwritten properties is empty and the default implementations are used   of course you may configure additional properties of your beans as required   click tracking and in site analytics  being shared between click tracking and in site analytics  the bean localeextractor is configured in the shared file spring analytics analytics pageresolution xml  the default strategy can be redefined by overriding the definition of the bean    bean id  localeextractor  parent  abstractlocaleextractor     this bean is retrieved by name from the application context  so that the name must be kept   only in site analytics  the file spring analytics analytics overlay example xml contains a definition of the bean targetpageresolver in a comment  you can either remove the comment markers in the file analytics overlay example xml or define a bean of that name in any other place  if you have to specify a targetpageresolver object  your definition would look like this    bean id  targetpageresolver  class          because the target page resolver is only used by in site analytics for resolving link targets  such a bean is ignored if in site analytics is not installed   data aggregator  in the file config dataggregator spring dataaggregator plugins example xml in a data aggregator installation you can find an example for adding objectidanalyzer instances    customize append bean  objectidanalyzers      list       bean class             list    customize append   add any number of such definitions if you need to analyze one or more custom object id formats   in section and especially in section you can find information on how to add fundamentally new steps to the aggregation process  this is beyond the scope of this section   object analyzer  in the file config objectanalyzer custom spring objectanalyzer trigger xml you can find a number of bean definitions  of which the following section will likely be changed by you    bean class  com coremedia analytics objectanalyzer defaultobjectstatecontentevaluator      property name  contentsiteextractor        bean class  com coremedia analytics plugin defaultcontentsiteextractor          property name  connection  ref  connection               set this property to true or false when connecting to a live server             property name  multisite  value  auto          bean      property    bean   typically  the defaultobjectstatecontentevaluator has to be replaced by a custom subclass and the defaultcontentsiteextractor might also be inappropriate in some cases   analytics dashboard  the file spring analytics analytics config xml contains an example for configuring a pagenameformatter object in the form of the bean analyticsexamplepagenameformattercustomizer  you can remove the comment characters or you can repeat a similar bean definition with a different name any number of times in other files    customize append bean  pagenameformatters      list       bean class             list    customize append   further information on the configuration of the analytics dashboard can be found in section  that section goes beyond simple customization and deals also with adapating the set of reports  
  the analytics dashboard provides access to reports in different mime types  currently  these are html  used by the analytics dashboard application   pdf  microsoft excel and a generic xml report data export format   while reports are accessible via the html interface  the dashboard application additionally provides direct report access via rest conform urls  direct report access aims at providing access to reports in different mime types with a customized parameter sets  report variable settings   a rest based service interface has been chosen to allow humans as well as services to access reports    envisioned use case are  human users may directly access html  pdf or excel reports with a given parameter set  pre selected site  time range  etc    services may fetch xml data  for analytics data integration  visualization or post processing  or pdf and excel documents  example  automated email newsletter service    the same security measures as for the web based report access applies to direct report access  any access to reports need to be authenticated  in case authentication is configured   automated services will typically use http basic authentication to retrieve xml  pdf or excel data  if necessary  the transport can be secured by means of https   any client accessing reports via the direct report access interface is mapped to a dashboard user profile  see the section above on profiles and views   hence  clients can only access reports which are accessible via the dashboard user interface as well  direct report access is thus not to be compared with direct analytics database access  since the latter is per se not enforcing role based data filtering   report identification  naming scheme  reports are identified by a combination of view name and view specific report identifier  you find the names in the file analytics profiles and views xml  report view names are unique per dashboard configuration  and a view may be included in more than one user profile  the view name is not user profile specific  the report identifier is view specific  hence it identifies a  potentially generic  report definition customized for the given view   example  the report identifier   dashboardviewdefinition defaultview dashboardviewdefinition defaultview performance  will be mapped to the view named  dashboardviewdefinition defaultview  and the report identified as  dashboardviewdefinition defaultview performance  within that specific view   implications    as user profiles are not used for report identification  all user profiles containing the given view may access the view and its reports  views typically define customized reports  e g  reports which are restricted to a single site or which have fixed  predefined report parameters  these restrictions customizations of course apply to the direct report access   direct report access url format  reports are accessed using http get requests  per default configuration  the direct report access base url is  http    server   port  analytics dashboard report  viewname   reportidentifier   followed by further parameters  e g  mime type parameters  report variable values  which will be explained later   the url follows a segment scheme   single segments for  predefined  identifiers view name and report identifier  examples    dashboardviewdefinition defaultview dashboardviewdefinition defaultview performance dashboardviewdefinition defaultview dashboardviewdefinition defaultview performance   and double segments to denote non predefined parameters     name   value     report variable names must be prepended with a dot        example     timerange r m    while control  formatting and layout parameters have no dot prepended   example    format xml     the order of the direct report identifiers view name and report identifier is fixed  while all other parameters  name   value pairs  may technically be specified in any order  in canonical form control  formatting and layout parameters go first  with parameter names given in alphabetical name order   followed by the report variables  again with variable names in alphabetical order    example url  http    server   port  analytics dashboard report dashboardviewdefinition defaultview dashboardviewdefinition defaultview performance format xml  timerange r m  this url points to the report identified by view  dashboardviewdefinition defaultview  and report identifier  dashboardviewdefinition defaultview performance   rendered in xml and configured to show the recent   month  symbolic value  r m     additional information  please note that clients must be able to handle http redirects  
  the previous section introduced dashboard view profiles and views  this sections explains how to configure them   define custom profiles and view definitions in file  web inf spring analytics analytics profiles and views xml    for security reasons  no profiles and views are defined in the framework configurations  the basic installation comes with one pre defined profile  requiring the user to be member of the cms  administrator  group  in the  web inf spring analytics analytics profiles and views xml file   defining a profile  we recommend that you copy an existing profile definition and adapt its properties   
  after defining profiles and views and connecting them  publish your newly created profile s  to the analytics dashboard configuration in file  web inf spring analytics analytics config xml  add your profiles to the  dashboardviewprofiles  property  make sure to use the profile s spring bean id in the reference  not the profile s name    property name  dashboardviewprofiles      list           ref bean  dashboardviewprofile myprofile         list    property   securing your profiles  views and report definitions  upon first access to the dashboard  a profile is selected for the user  if one or more profiles specify a role that the user assumes  the first profile of these is chosen  if no specific profile could be found  the first generic profile is chosen  a profile is said to be generic if it does not specify any roles via its  associatedrole  property   before any report definition is instantiated for a given user  access to the definition is checked twice  first an access control check is performed on the dashboard view  evaluating the dashboard view definition s  requiredrole  property   then an access control check is performed on the report  checking  requiredrolecsv     we recommend that you set the  associatedrolecsv  property in each profile  thus effectively disallowing any generic profile  leaving the  associatedrolecsv  property unset effectively associates the profile with any user who is not matched by any role specific profile   additionally  we highly recommend that you secure each dashboard view definition by setting its  requiredrolecsv  to the  comma separated list of  roles that you grant access to it  as an alternative to securing your view definitions you may secure each report definition by setting its  requiredrolecsv  property  in most cases  a dashboard view based access restriction makes more sense   if you secure your views and or report definitions  make sure to configure analytics authentication  i e   specify an interceptor configuration commented out in file  web inf spring analytics analytics authentication xml   forgetting to do so authentication will fail and hence no user will be able to see reports defined in the views  
       maintain your custom report definitions in the spring analytics analytics reportdefinitions xml file  the coremedia analytics dashboard comes with a set of predefined report definitions  see the framework file analytics reportdefinitions xml in the cap analytics config jar file  and an empty yet prepared report definition file for your custom report definitions  file spring analytics analytics reportdefinitions xml   if you do not have a custom analytics reportdefinitions xml file yet  create a new file  then copy the prologue  the xml document type definition and the opening root tag  beans   as well as the epilog  the closing root tag   beans    from the predefined report definition configuration file into the newly created custom reports definitions file   note  the configuration file is a xml file containing spring bean configurations corresponding to report definitions  open the file with an xml editor  even better is an editing tool that is spring bean definition aware       copy and modify a suitable report definition from the predefined or existing custom report definitions  copy a single predefined report definition from the framework report configuration file into the custom reports definitions file  path shall be spring analytics analytics reportdefinitions xml    rename the copied report definition  change the name given in the id attribute of the topmost  bean  tag  see the example of the performance report definition  rename the existing definition   bean id  reportdefinition performance                 bean   to a new name  e g    bean id  reportdefinition mynewreport                 bean   the resulting custom configuration should then read something like     doctype beans public     spring  dtd bean  en    http   www springframework org dtd spring beans dtd     beans          new report definition  mynewreport          bean id  reportdefinition mynewreport                  bean      bean id  reportdefinition someotherreportdefinition                  bean     beans  
  after defining the state and data model  queries and query result consolidator  finally the report view  i e  its visualization  must be configured  the view is mainly configured in a section of the report definition  additionally localization of variable values  report sentence must be defined  optionally  chart customizer classes can be programmed which control the appearance of the report chart   report localization  to configure localized report title  sentence and explanation  do the following       specify tile  sentence and explanation message keys in the view configuration  below you find a configuration example for the pre defined top viewed pages  report     property name  view      bean class  com coremedia analytics dashboard mvc view     reportviewconfiguration             report title  descriptive sentence  explanation          property name  titlekey  value  reportdefinition        topviewedpages title         property name  sentencetemplatekey  value  reportdefinition        topviewedpages sentencetemplate         property name  explanationkey  value  reportdefinition        topviewedpages explanation                bean    property   next provide localized textual messages in the custom dashboard property file s   the custom dashboard property file is located at  web inf classes com coremedia analytics custom dashboard  two letter localedcode  properties  below find an example for the report s english localizations    reportdefinition topviewedpages title top viewed pages     reportdefinition topviewedpages sentencetemplate display      top  entries  viewed pages  of site  site  of  range       reportdefinition topviewedpages explanation  h  explanation  h       p this chart displays the top        p     the report sentence text contains placeholders for the state model s variables  additionally square brackets can be used to mark a text as bold  furthermore  you may add markup tags to format the message    example  the state model variable  timerange  can be included in the sentence with the placeholder  timerange   marking it   timerange   will turn it bold  you do not have to specify how to map the variable to its user interface representation  the report renderer will automatically create a variable representation suitable for the selected render format   selection of the report view template  report and chart customization  additional to the report texts  the view configuration specifies a report view template to render the report chart  and optionally a report customizer to pass report instance variables to the report template as well as a chart customizer class that allow programmatic beautification of the report chart     a report view template is a standard jasperreport http   jasperforge org sf projects jasperreports xml based report template which contains a few coremedia analytics specific placeholders  named cmreport       please consult the jasperreport documentation on how to create templates  please note that report charts are usually placed in the template s page footer section and not in the detail section  it is recommended style to place charts there as this avoids a generation of large amounts of undesired report pages with partial chart data     a report customizer passes report instance values  such as the user name and the generation time as parameters to the report template  if no report customizer is provided  a default report customizer is used  which passes the following data to the report template   
  fore publishing a newly created report  validate the report definition  bear in mind that reports that show incorrect data will severely impair user s trust in any of your reports  furthermore  you may want to check that the report yields expected results for all or a selected subset of variable values   automated testing for model and query verification  the spring bean configuration framework allows you to very easily setup a report test environment  the test should be run in a test installation of the analytics application  follow these steps   add your newly created report definition to the custom report definition configuration file  web inf spring analytics analytics reportdefinitions xml  create a new junit test class or test suite  consult the junit test framework reference   upon test initialization  request a detached reportingusersession that is httpsession less  has no association with a httpsession  by invoking reportingusermanager createdetachedreportingsession     retrieve the reporting configuration from the reporting user session and request the report definition from the reporting configuration by invoking reportingusersession getreportingconfiguration   getreportdefiniton    create an instance of the report definition by invoking getcreatereportinstance   on the reportinstancefactory singleton  the reportingusersession and report definition must be passed in as parameters   once you have a report instance at hand  you may create round trip tests   access the instance s statemodel via getstatemodel    cast it to variablebasedstatemodel in order to access its variables via statemodel getvariables   and their values via variable values    you may want to create new values  see the variable s class create method s  and set the current value selection via setselection    finally invoke statemodel modelupdated   on the state model to propagate update and to pre fetch data  now request the report data via statemodel asdatamodelbasedstatemodel   getdata    the resulting data is wrapped in a jrdatasource  which is jasperreport s report data structure  validate the jrdatasource by iterating through the jrdatasource and access each entry s field values  the following code snippet gives a hint on how to iterate over data entries and access each entry s  x value  field   jrdesignfield xvaluefield   new jrdesignfield    xvaluefield setname  x value    xvaluefield setvalueclass  comparable class     while  ds next        comparable xvalue    comparable  ds getfieldvalue xvaluefield      please note that automated test cannot verify the correct rendering of data  this currently must be done using manual test   manual testing for visualization verification  manual tests should be done after automated tests have succeeded  these shall be used for verifying the visualization  template and chart customization  and the report s over all appearance  running manual tests is very simple  publish your newly created report definition in the report configuration of the test system  see next sections   access the reports via the dashboard view and verify the visualization   
   type template attributes int int jsp  all  string string jsp  all  date date jsp  all  xml richtext jsp grammar  coremedia richtext      xml xml jsp all other values for grammar blob blobimage jsp mimetype starting with image blob blobtext jsp mime type starting with text blob blob jsp all other values for mime types linklist main template  no sub views   
  for example  the definition of the property ingredients of the document type dish in properties corem menudoctype xml is    doctype name  dish  parent  document        stringproperty name  ingredients  length               doctype   the generated dish jsp file will contain   f subview id  dish           include file  document jsp              inclusion of parent jsp file               f subview id  ingredients          es variable value  ingredients  var  propertyname               include file  propertyeditors string jsp            es variable        f subview                all other subviews for other properties       f subview   editing services for jsf allows you to create custom forms that fit the specific view of the targeted user group such a casual editors  by modifying sub views under editforms propertyeditors or adjusting the document type templates directly for example   while this is not an  out of the box  solution  it has the following advantages   the configuration level is more fine grained  each property model and property editor component is configurable  not the form as a whole  there are no restrictions concerning the overall form structure  it may contain property editors and any other components  toolbars  preview areas  navigation        in any layout and any order  forms to edit properties from business objects can be assembled   to support this approach  an important group of building blocks are property editors  property editors are not available as one building block  but are again assembled from more fine grained components  converters  and models  this allows to apply standard jsf approaches in many cases  and only few editing services specific features   jsf supports property editing through input components like  h inputtext    h selectonemenu   etc   that closely resemble available html form elements  what jsf adds is infrastructure to  do value binding  bind the value presented by the ui component to a property of a backing bean  apply a converter  convert a property value to a human readable format  basically a string  and from that format back to its typed format  string  integer  date  arbitrary object  in the backing bean  this step may raise conversion errors that are reported to the user  by the  h message  component   apply a validator to check the typed property value  this step may raise validation errors that are reported to the user  only then  the component s submitted value is actually stored in the backing bean   the following subsections explain how buttons affecting a property editor on the client side are defined  clientsidebuttons   give a reference how to assemble property editors for all available content property types  propertyeditors   and finally provide guidelines for handling input errors  
  in the file framework spring analytics analytics overlay xml located in the cap analytics overlay config jar you can find definitions for the session scoped beans overlayconfiguration and overlayconfiguration direct  these beans are instances of class com coremedia analytics overlay overlayconfiguration  which controls the display of overlay reports  the beans both refer to the same definition  but are provided for different lookup mechanisms   you can fetch an instance of the bean by calling a static method of overlayconfiguration   overlayconfiguration overlayconfiguration     overlayconfiguration getconfiguration httpservletrequest    this will access the bean overlayconfiguration direct  note that you have to provide a reference to the current request object when calling this method   please note that this is a session scoped bean  which means that it exists once per user session  writing to the bean only changes the behavior of in site analytics for a single session   the bean contains three properties  the boolean property visible determines whether overlays are visible at all  the property reportinterval contains the string representation of the duration of the displayed reports in seconds  typical values would be        or         indicating half an hour and two hours  respectively   the property overlaymode determines which overlays are displayed for links  the permissible values for the overlay mode are constants defined in the class com coremedia analytics overlay overlaymode   click  formerly click through  selects the number of clicks on the given link  this is interesting for optimizing individual pages  sourceless click selects the number of clicks on links to the same page and in the same context  but regardless of the source page  this is important for optimizing links that appear on many pages like imprint links  loyalty selects the loyalty for clicks on the given link  this is useful for optimizing teasers  which might or might not shape the viewer s expectations correctly  views selects the total number of page views for the linked page  regardless of the origin  this helps in deciding whether enough high profile pages are linked from the current page   the properties are not completely independent  in particular  a report interval of    minutes does not make any sense for the loyalty mode if sessions only time out after half an hour of inactivity   after setting the bean properties  the preview page must be reloaded to show the updated statistics  if possible  try to reload the page automatically   by default  there are actions defined in the package com coremedia analytics editing actions that enable  disable or toggle the status of the property visible  namely turninsiteanalyticsonaction  turninsiteanalyticsoffaction  turnanalyticssatelliteonaction  and turnanalyticssatelliteoffaction  typically  you would use these actions in a preview based editing menu as described in section   in the package com coremedia analytics editing you can find some classes that are used to control the overlay parameters  if you want to embed the in site analytics configuration in a more comprehensive configuration interface  using these classes may simplify the integration of in site analytics into a jsf based preview application  the class localizedreportingintervallabelfactory simplifies rendering the stringified report interval  the class localizedreportingmodelabelfactory takes care of rendering the report modes  finally  the class overlaymodeconverter converts converting overlay modes to their string representation and vice versa  
  if you use tomcat  it is recommended to configure each servlet context to log into a separate file  a cae based applications s web inf log j properties file could look like this   log j rootlogger warn  file log j logger com coremedia info  file log j additivity com coremedia false  log j appender file org apache log j rollingfileappender log j appender file file   catalina home  logs webapp xxx log log j appender file maxfilesize   mb log j appender file maxbackupindex    log j appender file layout org apache log j patternlayout log j appender file layout conversionpattern  p  t  c    m n  
  now you are prompted for the destination directory etc  as described in the  general installation information  chapter  afterwards  you can configure the editor extensions engine     if you want to configure the editor extensions engine now  click  yes   if you want to configure later manually  click  no       if you choose  no   make sure to do the basic configuration in the corresponding property file  webapps editor extensions web inf spring objectserver properties later     if you decide to configure right now  some dialog boxes will appear  if you install tomcat the next dialog will configure the server xml file   
  the apache web server checks if a cached response exists for each incoming request  if so  it delivers this response  if no cached response exists  the web server redirects the request to the http cache which processes the request  writes the response to the file system and delivers the response to the apache web server   the apache web server delivers the responses in two different modes   apache standard mode  the web server delivers the files from the file system and adds http status and  header following a specific heuristic  apache mod asis mode  mod asis is a standard modul of the apache web server  it enables apache to deliver files which already contain the http meta information   in both cases  the files are stored in a structure which serves the needs of the apache web server but which is not optimized for the http cache  as a result  the http cache  has some drawbacks if connected with the apache web server   the http cache is not able to deliver different responses for different request parameters or request header information  such as  view pdf or accept language  de respectively the http cache is not able to differentiate between different request methods  such as get and post  get is used by default   synchronization problems might occur which show an http error code such as       or        this is due to the fact  that a file might be invalidated and deleted by the http cache after the apache web server has checked for the existence of the cached file but before delivery  files are stored in the file system due to the uri of the request  depending on the specific file system problems with special characters or the length or the uri might occur which prevent the reading or writing of the file   depending on the used modus there are additional limitations   standard modus  conditional requests  if modified since  can not be answered by the http cache        not modified  but only by the apache web server  in order to determine the mime type of a cached response  all links created with the cae need to have the appropriate file extension   html for example   be aware that the calculation of links might be an expensive task depending on the link scheme  so it might be better to use the mod asis modus if you have a lot of links on a page with an expensive calculation  the http headers set by the cae  content disposition for example  are not delivered for a cached response  the status codes set by the cae        temporarily moved for example  are not delivered for a cached response  instead  the status code       ok is always delivered   apache mod asis modus  conditional requests   if modified since  can not be answered by mod asis   it is not always possible to combine mod asis with other modules  mod ssi for example    configuration  in order to couple the http cache with apache web server you have to do some configurations   configure the http cache  be sure to do the following configuration with an empty http cache in order to avoid inconsistencies  adjust the property httpcache storage mode in the web inf spring httpcache httpcache properties file to the used mode  set apache for the apache standard modus and apache modasis for the mod asis modus   httpcache storage mode apache  or  httpcache storage mode apache modasis         clear the complete cache after changing the mode  configure the apache web server  if you want to use the http cache with the apache web server  make sure that all http requests are handled by the apache web server  you can connect the apache web server with the http cache using the mod proxy or mod jk module  the mod jk module is preferable because it transmits more information to the http cache   using the mod proxy module  for both modes you have to do the following configurations in the conf httpd conf file   enable the mod alias  mod rewrite and mod proxy modules   loadmodule alias module modules mod alias so    loadmodule proxy module modules mod proxy so    loadmodule proxy http module modules mod proxy http so  loadmodule rewrite module modules mod rewrite so        define an alias for your web application  the url path    my cae in the example   matches the name of your cae web application  the directory path has to match the path for the cached items already configured in the property valuecache store directory of the web inf spring httpcache httpcache properties file     alias  my cae c  jakarta tomcat var valuecache           add a  location  entry containing a rewrite rule which delegates requests to your cae web application  the host and port have to match the configuration of your servlet container  hosting the cae       location  my cae         rewriteengine on             rewritecond   request filename    f  or          rewritecond   the request    get             rewriterule   http   localhost       request uri   p      allow from localhost       location     if you want to use the standard modus you are done  otherwise you have to add the following entries to the httpd conf file  enable the mod asis module with   loadmodule asis module modules mod asis so     add the mod asis handler to the configuration file    location  my cae     sethandler send as is          location   where  my cae matches the name of the cae s web application   using the mod jk module  for both modes you have to do the following configurations in the conf httpd conf file   load the necessary modules   loadmodule alias module modules mod alias so    loadmodule rewrite module modules mod rewrite so    loadmodule jk module modules mod jk so    add a location entry which delegates incoming requests to the cae   my cae matches the name of the cae web application  this location is for internal processing only    location  my cae         set the configured jk worker s name       setenv jk worker name myworker       sethandler jakarta servlet      location             add another location which either delivers the response from the file system or delegates the request to the location configured in step    be sure that the uri  my cae with fs delivery is the entry point for all incoming requests     alias  my cae with fs delivery c  jakarta tomcat var valuecache      location  my cae with fs delivery         rewriteengine on             rewritecond   request filename    f  or          rewritecond   the request    get             rewriterule  c  jakarta tomcat var valuecache       my cae    pt      allow from localhost      location     if you want to use the standard modus  you are done  otherwise you have to add the following entries to the httpd conf file  enable the mod asis module with   loadmodule asis module modules mod asis so    add the mod asis handler to the configuration file    location  my cae with fs delivery     sethandler send as is          location    
  in order to activate the contextmenurenderer  or the toolbarrenderer  in this section now called render  please change the file web inf spring editing jsf dispatcher servlet pbe properties of your web application  add the following property for the contextmenurenderer   pbe rendername pbeinlinecontextmenurenderer  and for the toolbarrenderer   pbe rendername pbetoolbarrenderer  usually these properties are already available in the property file  you only need to uncomment the entries    setting the uri pointing to the actionexecutioncontroller  if you are using one of the above mentioned renderer  you need to configure at least one property  the commanduriprefix  it contains the uri which points to the actionexecutioncontroller  to change that uri customize the property  pbe renderer commanduriprefix in the file pbe properties  the uri is relative to the context path  the following line configures this property   pbe renderer commanduriprefix  servlet command   for a detailed list of properties which may be altered  please have a look at the framework beans  pbeabstracttoolbarrenderer  and pbeinlinecontextmenurenderer and the corresponding javadoc of the bean classes   configuring of the actionexecutioncontroller  the bean configuration for the actionexecutioncontroller is located at  framework spring editing jsf dispatcher servlet editing jsf controllers xml  the bean property  executableactions is a list of action bean names which are allowed to be executed by that controller    the actionexecutioncontroller is mapped under in the dispatcher servlet under   command   as defined by the bean definition named  actionexecutioncontrollermapping in framework spring editing jsf dispatcher servlet editing jsf controllers xml   keep the configured actionexecutioncontrollermapping    command    in sync with the property commanduriprefix of the renderer  
  in the editing services web application you need to alter the file web inf spring editing jsf dispatcher servlet editing jsf controllers xml and add the following bean to the file  or if it already exists just add the reference to the bean portalsetbaseuriinterceptor to the list of interceptors    bean class   com coremedia objectserver util listpropertycustomizer        property name  customizedbeanname       value  facescontrollermapping         property name  customizedproperty       value  interceptors         property name  mode  value  replace         property name  items          list           ref bean  jsfeditingsessioninterceptor             ref bean  jsfeditingcontextinterceptor             ref bean  editingsessioninterceptor             ref bean  portalsetbaseuriinterceptor            list        property    bean  
   property name description name the type name that is stored in the bean repository and which is used as display name in the bean query editor  you should not prefix it with  contentbeanfactory    description a textual description of the bean type  supertype optional  a reference to the supertype definition  as no information is derived from the bean class  the type hierarchy must be explicitly specified  beanclassname the name of the java class implementing the bean  this should correspond to the implementation class given in spring cae contentbeans example xml  please note that no information is derived from the java class  properties   a list of bean properties  may be empty  following property types are supported   booleanproperty integerproperty stringproperty dateproperty  
   bean name  beantype mobilephone  parent  beantype      property name  beanclassname     value  com coremedia example shopping mobilephoneimpl       property name  supertype  ref  beantype product       property name  properties        list         bean parent  stringproperty            property name  name  value  name            bean         bean parent  stringproperty            property name  name  value  description            bean         bean parent  integerproperty            property name  name  value  onboardmemoryinmb            bean         bean parent  integerproperty            property name  name  value  weightingrams            bean         bean parent  booleanproperty            property name  name  value  wlansupported            bean         bean parent  dateproperty            property name  name  value  releasedate            bean         bean parent  dateproperty            property name  name  value  newuntil            bean        list      property    bean  
  as known from orm  mapping information must be provided to define how the bean type model is represented in a given storage  this information is separated from the bean type model definition to allow mappings of one bean model to different storages    currently  only fast search engine collections are supported as content bean repositories for content rules  the fast mapping definition is stored in the configuration file beanqueryeditor beantype storagemapping fast xml   the storage mapping consists of two steps  defining storage implied properties  defining properties implied by the bean repository  e g  creation date information  adding property features  specifying additional query operators suitable for a few properties  features can be assigned on a per property basis  hence two string properties may have different feature sets      defining storage implied properties  a repository may provide additional properties that are not defined by the bean classes themselves  typically  such implied properties are metadata properties denoting e g  id  revision number  creation time  etc   storage implied properties  can be used in used in queries  run against the specific storage  must conform to the property types given above are implicitly available  not necessarily set  for all bean types and all bean instances and hence  cannot be associated or restricted to a specific bean type  below you find an example of a storage implied properties definition  please note that the spring bean identifier  here   impliedbeanproperties   is relevant   
  this section explains how to integrate and execute content rules into a cae application  integrating content rules into a cae application is very simple  define a content bean type representing a dynamic content collection and register it with the cae spring configuration  please refer to the cae content rules example code for further details      define a dynamic content collection bean type  define a cae content bean type representing a dynamic content collection  the bean class will contain a content rule query string and code to execute the rule  still the bean type should be called after what it represents and not refer to its implementation  hence we recommend that you name it  dynamiccontentcollection    public interface dynamiccontentcollection extends         public list getcontentcollection         public class dynamiccontentcollectionimpl extends  dynamiccontentcollectionbase implements  dynamiccontentcollection               add a content rule query string getter method  add a string property  query  that will hold the rule query expression  fetch the query string property from the respective content repository type              return the value of the query expression          public string getquery         return getcontent   getstring  query            add a queryservice property  together with getter and setter methods   private queryservice queryservice   public void setqueryservice  queryservice qs       queryservice   qs     public queryservice getqueryservice       return queryservice        wrap the rule execution in a property getter method  implement a method which executes the rule query and returns the list of content  we recommend that you name it like a getter method  to allow accessing retrieving the content list like a normal bean property   public list getcontentcollection       return getqueryservice   posequery  getquery             register the dynamic content collection type with the cae application     define a spring configuration bean  beanqueryservice     the query service bean must be a fast query service  configure the queryservice to run against the fast collection selected to be the bean repository      bean id  beanqueryservice   class  com coremedia amaro beans query fast  fastqueryservicefactory      property name  idscheme      ref  queryservicecontentbeanidscheme       property name  configserverhttpurl      value    search qrserver        property name  collection  value    search collection         bean        register the content bean type with the cae content bean factory    add the content bean type definition to the configuration file  spring cae contentbeans example xml   add the query service dependency      bean name  contentbeanfactory dynamiccontentcollection   singleton  false   class  com coremedia examples dynamiccontentcollectionimpl        property name  queryservice  ref  beanqueryservice        bean        adapt cae templates  you have now successfully integrated content rules into your cae application  now adapt your cae templates to deliver dynamic content web pages         optimize performance  you may want to add caching to the content bean  see the cae content rules example code for this    
  this manual is intended for all users who deal with coremedia cms for the first time  it describes the principles of coremedia cms  that lay the basis for fully understanding the system   
  sometimes an action needs additional input from the user  e g  if you provide an action for renaming a resource  the user has to provide the new name via some form  these forms can be provided as jsps  a mapping from actions to form jsps can be stored in the file  web inf jsf faces navigation xml  the following listing displays this file for the coremedia demo     faces config     navigation rule       from view id  pbe menu jsp  from view id       navigation case         from outcome navi new  from outcome         to view id  pbe forms newpage jsp  to view id        navigation case       navigation case         from outcome navi rename  from outcome         to view id  pbe forms renamepage jsp  to view id        navigation case       navigation case         from outcome page new language de  from outcome    to view id  pbe forms newpagelanguage jsp  to view id        navigation case       navigation case         from outcome page new language en  from outcome    to view id  pbe forms newpagelanguage jsp  to view id        navigation case       navigation case         from outcome style change  from outcome        to view id  pbe forms changestyle jsp  to view id        navigation case       navigation case         from outcome fragment new  from outcome        to view id  pbe forms newfragment jsp  to view id        navigation case           navigation case         from outcome subcontent picture new  from outcome   to view id  pbe forms newsubcontentpicture jsp  to view id        navigation case       navigation case         from outcome subcontent fragment new  from outcome   to view id  pbe forms newsubcontentfragment jsp  to view id        navigation case       navigation case         from outcome workflow start  from outcome   to view id  pbe forms startworkflow jsp  to view id        navigation case      navigation rule    faces config   let us now take a look at the renamepageaction  id  with the name navi rename action  the user can choose this action from the context menu on beans of type structure  a form pops up querying the new name of this structure element  the user provides a name  clicks okay and the structure element is renamed   in the code above we saw  that the action is mapped from its name navi rename to the template  pbe forms renamepage jsp  this template renders the input form for a user provided new name of the structure bean  take a look at the template       page contenttype  text html charset utf    language  java        taglib uri  http   java sun com jsf core  prefix  f        taglib uri  http   java sun com jsf html  prefix  h        taglib prefix  c  uri  http   java sun com jsp jstl core     f view   f loadbundle basename  com coremedia demo     pbe pbemessages    var  bundle     html lang   h outputtext        value    facescontext viewroot locale language          head       title  h outputtext value    bundle  renamepage title             title       link rel  stylesheet  href   c url value   pbe pbe css jsp                 media  screen projection  type  text css          script        dom parent dom        com parent com        com coremedia ui frame getinstance window          dialog   com coremedia ui internalframe                     getinstance window parent         script      head     body       h form         h panelgrid styleclass  outside  columns                         columnclasses  inside                     headerclass  title                      rowclasses  description middle                      footerclass  buttons              f facet name  header                h panelgroup                h graphicimage                url   icons hox corem editor icons   x   rename png                   h outputtext value     bundle  renamepage title                     h panelgroup              f facet             h outputtext value    bundle  renamepage description                  h panelgrid columns     columnclasses   label                  h graphicimage width      height                  url   images   bundle  renamepage property labelicon                     h outputlabel for  newlabel                  value    bundle  renamepage property labellabel                      h inputtext id  newlabel  styleclass  text                value    renamepageaction command label                  h panelgrid             f facet name  footer                h panelgroup                 h commandbutton value    bundle  form save                     action    renamepageaction execute                     h commandbutton value    bundle  form cancel                     type  reset  onclick  dialog hide                     h panelgroup              f facet          h panelgrid        h form      body    html    f view    as you may have noticed the template uses java server faces  jsf   please refer to jsf documentation  if you need more detailed information for creating your own input forms  the form rendered by the template looks like the following in the coremedia demo  
  the editingcontext interceptor provides an editingcontext  which is required for those requests which addresses editing property editors or pages renderer by the contextmenurenderer  or the toolbarrenderer    configuration  the following configuration might be used to define an editingcontext interceptor     bean id  editingcontextinterceptor   class  com coremedia editing context     editingcontextinterceptor      property name  editingcontextfactory      bean class     com coremedia editing context portaleditingcontextfactory      property   the interceptor must be set at the urlhandlermapping in the spring cae controllers example xml as shown below     bean class  org springframework web servlet handler                simpleurlhandlermapping        property name  interceptors          list           bean class  com coremedia editing context                        editingcontextinterceptor              property name  editingcontextfactory                bean class  com coremedia editing context                            portaleditingcontextfactory                property            bean          list        property       property name  mappings          value           content   contentviewcontroller          contentblob      contentblobviewcontroller          propertyblob     propertyblobviewcontroller                      map your controllers to an uri here  e g  like          uri prefix   beannameofcontroller                     value        property    bean  
  this manual is intended as the starting point of your journey into coremedia cms  so you need not to read any other manuals before  if you have finished this book you might continue with the coremedia starter kit manual in order to set up your first application  the administration and operation manual would also be a good next milestone  because it describes some more technical basics of coremedia cms   
  a content management system is used to organize content  that sounds quite simple  but when you dive deeper into the sea of content management you will find different meanings  for some people content management means the management of documents  scanned bills and the like  for others  it is the management of whole web pages  
  the next two steps describes how to enable single sign on with editingservices in the portal context       introduce the portaleditingsessioninterceptor in the file  spring editing jsf dispatcher servlet editing jsf controllers xml    bean id  editingsessioninterceptor  class   com coremedia portal backend cae portaleditingsessioninterceptor      property name  capconnection  ref  connection       property name  capsessionattributename  value  usercontext      bean      add the above defined bean to the interceptor list of the facescontrollermapping    customize replace bean  facescontrollermapping  property  interceptors          list           ref bean  jsfeditingsessioninterceptor             ref bean  jsfeditingcontextinterceptor             ref bean  editingsessioninterceptor            list    customize replace  
  the following section serves as a short example on how to enable the storing of the entry url and the configuration of a command for return to the entry page   prerequisites  an installed contentserver  an installed editing services  web application pointing to the installed contentserver an installed coremedia portal webapplication template  contentapplicationengine portal template   step by step instruction   copy the files cap portal   from web inf lib directory of the portal integration template to the web inf lib directory of the editing services web application      replace spring cae linkschemes example xml of the editing webapplication with the portal integration version  add these linkschemes to the cae linkschemes example xml file     
      make jsf prefix all form keys  place a bean customizer like the following in one of your spring configuration files under the directory spring editing jsf dispatcher servlet      
      configure editing services for jsf so that it produces the correct  portal conform   doctype  definition  add the following line to the file editing jsf properties located in the directory spring editing jsf dispatcher servlet    editing jsf html doctype   doctype html             public     w c  dtd xhtml     strict  en               http   www w  org tr xhtml  dtd xhtml  strict dtd    
    the action is of class noopcommandaction  and refers to a special navigationhandler  redirecttoentryurlnavigationhandler  which takes care of redirecting to the entry page  this navigation handler already exists  you only need to refer to it     you may create a file  spring editing jsf dispatcher servlet editing jsf actions xml  where you add the above action definition           in order to save the entry url editing services needs to be customized  overwrite the entryreferer pageflow by place the following bean definition in the file  spring editing jsf dispatcher servlet editing jsf actions xml   
  the renderpagename jsp uses plain jsf so far  now it s time to start using some of the editing services for jsf components  the first step is to import the es taglib by adding the following line to the jsp s prologue       taglib     uri  http   www coremedia com jsf editing services       prefix  es     the next step is to set up an additional resource bundle for localization  this requires to write some properties files and to do some configuration  the easiest way is to put your properties files in the web inf classes directory and to modify the global message source s basename property by defining a bean of type com coremedia objectserver util listpropertycustomizer and to customize the basenames property of the global messagesource bean  this is done in the web inf spring editing customizations xml spring beans file of the cae editing example   in order to display some localized information such as a greeting and the current document s content type the  es label  tag can be used as shown below  the localizer attribute must be a valid jsf el expression that evaluates to a bean of type  com coremedia editing localization localizedlabelfactory  the value attribute defines the value to be localized and rendered      es panelgroup element  div  styleclass  cmcontentpane        h panelgroup         es label localizer    keylocalizer          value  editing example greeting  mode  text           es label styleclass  cmlabel  value    currentuser            es label localizer    keylocalizer          value  editing example doctype  mode  text           es label styleclass  cmlabel  value    foodoftheday type           h panelgroup       h panelgroup         es label styleclass  cmlabel         value    foodoftheday type descriptorsbyname name            h outputtext value    foodoftheday properties name         styleclass  cmlabel          h panelgroup      es panelgroup  
  a blob property editor contains of a simple property toolbar  a preview area  a file upload control  and an optional mime type chooser   the property toolbar consists of a single button that empties the blob property  sets it to null    the preview area is wrapped by a  h outputlink  that opens the blob in a new browser window  this should result in starting a program that can handle the blob  some mime types are handled by the browser itself or by a browser plug in  in the first meta template for any blob property  the link text contains the content type  mime type  and size of the blob  the preview area is suppressed when the blob is empty   since jsf does not have a standard component for file upload  the es jsf component  es inputfile  is used for uploading a blob from a file  the component is only shown if the document is checked out by the current user and the blob property is empty  the second condition simplifies the user interface for already filled blob properties  replacing an existing blob can simply be achieved by removing the existing blob using the  only  property toolbar button  then  the blob preview is replaced by the file upload control   the mime type chooser has to be used when you want to allow the user to override the content type of the file  which is by default determined by the browser  who usually delegates this task to the operating system   some browsers derive awkward mime types even for standard file types  e g  the mime type derived for jpeg files by internet explorer is  image pjpeg   which seems to stand for  progressive jpeg    while for some file types like ms office documents  there are multiple mime types is use  in these situations  the user can replace the option to let the browser guess the mime type by the option to let the application determine the mime type or specify an explicit mime type  that of course must be compatible with the mime type pattern defined for the blob property in  doctypes xml   the application determines the mime type using the file web inf mime properties  see the comments in that file on how to define custom extension to mime type mappings  
  to define the converter used by a property editor  you have two options   specify the converter explicitly at the jsf  input     component  using the converter attribute or a  f convert     or  es convert     direction  use the following expression for the converter attribute  where   property name  is the name of the property to edit  converter    converterfor document type descriptorsbyname   property name      using the first option  the converter can be changed and configured directly in the jsp  while this is convenient for testing and experimenting  the second option allows a central configuration and thus makes property conversion easier to maintain and keep consistent   the application scope bean converterfor is a com coremedia editing kits jsf cap converters capconverterfactory  it allows to configure a powerful mapping from coremedia document property declaration to jsf converter  you can find the predefined mapping in framework spring editing jsf dispatcher servlet editing jsf xml in the cap editing jsf config jar and an example of customizing it in web inf spring editing jsf dispatcher servlet editing jsf views xml  either open the files or browse the html bean documentation    the mapping of converterfor allows to define converters on different levels   to configure a default converter for a simple property type  intproperty  stringproperty  dateproperty    set the corresponding configuration property that uses the terminology of the unified api  integerconverter  stringconverter  calendarconverter     to configure converters for xmlpropertys  use the configuration property markupconverters of type map string converter    to configure a default converter for a specific xmlgrammar as defined in   doctypes xml  use its symbolic name as key and the desired converter as value  to configure the default converter of all other grammars  use an asterisk       as the key and the desired converter  as value    to configure converters for blobpropertys  use the configuration property blobconverters  of type map string converter    to configure a default converter for a specific mime type  use   primarytype   subtype   as the key  e g   text xml   and the desired converter as value  to configure a default converter for a specific primary type of a mime type  use   primarytype     as the key  e g   text     and the desired converter  as value  to configure a default converter for all blobs  use       as the key  e g   text     and the desired converter  as value  to configure converters for specific properties  use the configuration property propertydescriptorconverters  of type map string map string converter    the first key is the name of a document content type  and the second key is the name of the property  as defined in   doctypes xml  and the value is the desired converter   
  as stated by the jsf javax faces factoryfinder api class comment  jsf searches for factories as follows  look for a factory declaration in a jsf configuration file in the webapp s web inf directory  look for a factory declaration in one of the jsf configuration files named by the javax faces config files init parameter of the jsf servlet  search the meta inf directory of any jars on the jsf servlet s resource paths for factory declarations with the last one taking precedence  search the meta inf services directories for resources named after one of the jsf factory classes and assume the first line of it to contain the name of the factory implementation class to use   editing services for jsf provide implementations for jsf renderkitfactory and applicationfactory in cap editing jsf jar by defining factories following step     meta inf services javax faces render renderkitfactory  meta inf services javax faces application applicationfactory  both implementations try to locate the servlet context s spring application context in order to find or configure a jsf renderkit or a jsf application respectively  if they cannot access a spring application context  they delegate to the jsf implementations default factories  this allows to use plain jsf configuration in conjunction with spring s bean factory capabilities to set up jsf uicomponents  renderers  converters and the like  lets have a look at these factory implementations   while the springrenderkitfactory simply returns the first renderkit found by spring  the springapplicationfactory returns an instance of the springapplication class that has to be post configured by spring  the post configuration of the springapplication instance is done using the following spring bean definition that resides in web inf spring editing jsf dispatcher servlet editing jsf xml    bean id  springapplicationconfiguration  abstract  true        class  com coremedia editing kits jsf util spring                springapplication            your configuration      bean  
  to make things easier let us start with an action  that does not depend on additional user information  take a look at the movetopaction    bean id  movetopaction  parent  action  singleton  false      property name  name  value  move top       property name  command        bean class  com coremedia easyedit commands movelinkcommand             parent  capcommand  singleton  false          property name  direction  value  top          bean      property    bean   like moveupaction  movedownaction and movebottomaction this action is responsible for moving the current document in a linklist  you may know these options from the linklist menus of the coremedia editors  the movetopaction moves the document to the topmost position in the linklist  if it is not already on top  all move actions rely on the common command class com coremedia easyedit commands movelinkcommand    the action bean usually is an implementation of com coremedia easyedit editing command actionimpl  as defined by the parent bean which is configured in framework spring editing editing services xml  if you want to use your own implementation you can set the class attribute  as it is done for the logoutaction for instance    the name provided for the action is used for accessing localized information like labels  tooltips or icons  e g  configured in editing properties   an action holds a command which provides business logic  thus it is possible to reuse a command for different actions   like all preview based editing commands the movelinkcommand inherits from com coremedia easyedit commands contextinfocommand which provides access to the contextinfo bean and determines the behaviour of the command as a menu item  the following table provides information about the beans you will get from the contextinfo bean  instead of handling ids like in the taglib you get real objects here  
  the differencing engine is an out of the box building block for a web ui based on es  it displays the differences of two document versions on a single web page  the page is built with the following jsf jsp files   differences jsp  the main jsf jsp file for the application  diffcontainer jsp  included by differences jsp it displays the two document versions and the toolbars   there exists a third file differencesshort jsp which does the same as differences jsp  but without displaying the header  both main files include diffcontainer jsp which actually does the work to display the differences  the jsf tags used  refer to general es and specific differencing engine components and backing beans  the latter are defined in the following spring xml configuration files in the jar  cap editing diff config jar   framework spring differencing xml framework spring editor extensions dispatcher servlet differencing xml  the second xml file defines jsf related beans and the first file does not  the following subsections describe the jsp tags and backing beans from diffcontainer jsp in detail  
   abbreviation component ads coremedia active delivery server cae coremedia content application engine pads coremedia proactive delivery server sct coremedia smart content technology sse social software extension ugc user generated content wage web application generator extensions  
   attribute description host the computer on which the active delivery server or content application engine runs  port the port via which the ads or cae is accessed  uripath  the uri prefix for accessing the preview ads or cae  default is coremedia generator goto  pattern   you might configure individual urls via a custom pattern  the following strings are replaced within the pattern     p the protocol to use  h the host with the preview server  n the port on the host with the preview server  u the uri prefix of the resource locator uri  i the numeric id of the resource locator uri  v the version of the resource locator uri  f combines  u and  id  i version  v  s combines  u and  id  i  i returns the url encoded string id of the previewed resource  default setting is   p    h  n  f    
  this element of the xml file is used to configure the active delivery server or content application engine used for preview  the request to the generator then occurs via the url  if no user defined pattern has be defined    http    host   port   uripath  
   property value default description feeder executorretrydelay milliseconds       the delay in milliseconds to wait before the cae feeder retries to access the source data after failures to do so  feeder maxbatchbytes bytes            mb  the maximum size of a batch in bytes  the cae feeder sends a batch to the search engine if its maximum size would be exceeded when adding more entries  note  that byte computation is a rough estimate only  feeder maxbatchsize int     the maximum number of entries in a batch  if the maximum number is reached the cae feeder sends the batch to the search engine  feeder maxopenbatches int   the maximum number of batches that are sent by the cae feeder and not yet persisted by the search engine  the cae feeder does not send more batches to the search engine if the maximum number has been reached until it receives callbacks about the persistence of batches from the search engine  feeder maxprocessedbatches int   the maximum number of batches that are sent by the cae feeder and not yet processed by the document processor of the search engine  the cae feeder does not send more batches to the search engine if the maximum number has been reached until it receives callbacks about completed processing from the search engine  this property should match the number of available fast document processor servers  feeder reconnectretrydelay milliseconds        the delay in milliseconds to wait before the cae feeder tries to reconnect to the search engine after failures  feeder retrysendidledelay milliseconds       the cae feeder sends a batch which only contains retried entries and is not full with regard to the feeder maxbatchsize and feeder maxbatchbytes properties after the cae feeder was idle for the time configured in this property  a retried entry is an entry which was sent to the search engine before but could not be indexed successfully  if the batch contains entries which are not retried  the value of property feeder sendidledelay is used instead  feeder retrysendmaxdelay milliseconds        the maximum time in milliseconds between the time the cae feeder received an error from the search engine and the time  the cae feeder tries to send the failed entry as part of a batch to the search engine again  the time is exceeded if feeder maxopenbatches or feeder maxprocessedbatches is reached or an error occurs while contacting the search engine  if the batch contains entries which are not retried  the value of property feeder sendmaxdelay is used instead  feeder beanpropertymaxbytes bytes    the maximum size in bytes for indexed bean properties  set it to avoid feeding very large blob properties which might cause memory problems in the feeder  the default is unlimited      for backwards compatibility  feeder fast collection collection name none  required  the name of an existing collection of the search engine to use  feeder fast corba url url none  required  the url to connect to the corba interface of the fast config server   for example  http   localhost       rpc  feeder fast http url url none  required  the url to connect to the http interface of the fast config server   for example  http   localhost       feeder fast naming host host name none  required  the host name of the fast naming service  for example  localhost feeder fast naming port port none  required  the port of the fast naming service  for example        feeder fast orbserverhost ip or host name  the host of the orb used by the cae feeder for the connection to fast  fast connects to the specified host to notify the cae feeder about the progress of feeding  feeder fast orbserverport port  the port of the orb used by the cae feeder for the connection to fast  fast connects to the specified port to notify the cae feeder about the progress of feeding  feeder sendidledelay milliseconds       the cae feeder sends a batch which is not full with regard to the feeder maxbatchsize and feeder maxbatchbytes properties after the cae feeder was idle for the configured time in milliseconds  a cae feeder is idle when it is not processing a request from clients such as the proactive engine  feeder sendmaxdelay milliseconds        the maximum time in milliseconds between the cae feeder receives a request from a client and it sends this request as part of a batch to the search engine  the time is exceeded if feeder maxopenbatches or feeder maxprocessedbatches is reached or an error occurs while contacting the search engine  feeder sendretrydelay milliseconds       the delay in milliseconds to wait before sending a batch to the search engine again after sending failed with an error such as a timeout caused by high load in the search engine  jdbc dbname oracle  mssql  db   postgresql none  required for setup with proactive engine  the name of the database  jdbc driver driver class none  required for setup with proactive engine  the class of the database driver  for example  oracle jdbc driver oracledriver jdbc url url none  required for setup with proactive engine  the url to connect to the database  jdbc user user name none  required for setup with proactive engine  the name of the user to connect to the database  jdbc password password none  required for setup with proactive engine  the password of the user to connect to the database  dependencystore maxtransactionweight number             unlimited    the maximum number of keys to change in a single database transaction  this can be used to reduce the maximum size of database transactions   for example  a change of a single dependency can lead to lots of invalidated keys in the database  by default  all invalidated keys and their dependency entries will be deleted in the database in one database transaction  such a large transaction may lead to database problems like full transaction logs  to prevent such problems  you can use this option to limit the number of keys changed in the database  for example  if the option is set to      only     keys plus their dependency entries will be deleted in one transaction  further keys will be deleted in additional transactions  logging configuration file path none  required  the path to the apache log j configuration file  the path is relative to  installroot   for example    config caefeeder log j properties management jmxremote url url none  required  the url under which the component registers a jmx connector server for management  for example  service jmx jmxmp   localhost       repository user user name none  required for setup with proactive engine  the name of the user to connect to the coremedia content server  repository password password none  required for setup with proactive engine  the password of the user to connect to the coremedia content server  repository domain domain none  required for setup with proactive engine  the domain of the user to connect to the coremedia content server  empty string for a built in user  repository url url none  required for setup with proactive engine  the url to the ior of the coremedia content server   
  defining the report state model  the report state model defines the high level report model  it specifies the following properties  follow the  performance  report definition in file  framework spring analytics analytics reportdefinitions xml in the file cap analytics config jar for example    a set of report variables   which correspond to the report parameters  each variable defines a set of static and or dynamic values  values can be localized   additionally a state model specifies either a data model  per default state models are data model based  or a data source feeder  the data source feeder based state model variant is for simple reports featuring fixed sql query statements and fixed data sources    
  a state model definition names a set of variables  the variables represent report parameters which users can manipulate in order to change the rendered report data subsection   variable definitions have a name and a type  the name identifies the variable within the scope of the report definition  the variable type is determined by the java class  some variables might require properties to be set to be initialized correctly   the following state model variable types are predefined  see also the spring bean definition for each variable type in the framework configuration file analytics config beantypes xml in cap analytics config jar    
  it is possible to change the look of pdf and excel reports generated by coremedia analytics by adapting their jasperreports report templates   typical use cases would be   change the report look to reflect the enterprise s ci  corporate identity   set the background color  add images  change the text s font style and size  change the layout  create newsletters from standard pdf reports  add additional report parameters   in order to be able to change the templates  we first explain where the templates must be stored  second  we briefly explain the graphical template editor that is provided by jasperreports  last  we explain at a few configuration options that help in a fast validation of report templates        report templates and report image location  report templates are looked up in the classpath under the path  reporttemplates    if a template cannot be found there  it is next looked up in the  web inf reporttemplates  directory    report templates follow a name convention and location   html report templates  those used by the dashboard reports  are stored in the classpath inside cap analytics jar  they should not be changed    pdf and excel report templates are stored in the web inf reporttemplates  directory  these may be adapted    the report templates for pdf export have a   pdfchart  filename suffix  hence  the pdf report template with the name  rankedcategoryreport asbarchart  is mapped to the file  rankedcategoryreport asbarchart pdfchart  the report templates for excel have a   xls  filename suffix  please note that the excel report generator does not include images  no report templates are used for xml output  instead  a xml report data exporter is used   additionally  all report template images must be placed in the directory  web inf reporttemplates reportimages   this is so in order to allow the graphical report template editor ireport  see next sections  to correctly find and visualize the images         the graphical report template tool  ireport   jasperreports provides a graphical editor ireport  product url  http   jasperforge org sf projects ireport  download url  http   sourceforge net project showfiles php group id        to manipulate report templates  please consult the ireport online documentation for more information   when you open the ireport editor and load a report template  the ireport editor will display a structured view of the report template    a report template consists of so called bands which define nested  horizontal sections of a report  a report template consists of the following bands   background   the entire report background  can be used to colorize the report background  title   printed once for each report at the top of the report  typically used to print the header  including images  pageheader   printed once for each page  columnheader   printed once on each page before the detail section  for tabular reports used to print the table headers  detail   holds the report detail information  i e  the chart or the table information  in tabular reports  the detail section specifies a single report entry only which is used once per report entry  columnfooter   printed after the detail section pagefooter   printed at the end of each page summary   printed at the end of each report   coremedia templates make use of the bands in the following way   for non tabular reports  i e  all pdf reports  which contain a chart image    the title band contains the report title the pageheader band contains the report sentence the detail band contains the chart image the columnfooter band contains additional informational messages  e g  information if the selected report is empty the pagefooter contains the footer image and the footer text   tabular reports are a little different  as jasperreports uses the columnheader band to print table headers and the detail band to print table entries  hence   the title band contains the report title the pageheader band contains the report sentence the columnheader band contains the tabular data headers the detail band contains a single table entry definition the columnfooter band contains additional informational messages and the footer information   note  the footer information had to be placed in the columnfooter band or else jasperreports would inverse the order of messages and footer   report parameters and values  report data are passed into the reports as report variables  which are denoted as  f varname  in the template  each report template makes use of the following variables plus additional ones   x value  the x or category value  which  depending on the report type  is given as a comparable  typically string or numeric value  x value displayname  the displayname of the category value  given as a string y    the y value given as a double any numeric value that has been read by a generic query will be passed into the report template as double values  e g  y   y   percentage  rank       any attributes  string and boolean values  that have been read by a generic query will be passed into the report template annotations will be passed into the report template by name  annotations    the default report customizer provides four parameters  which are referenced as  p parametername   in the template   aus name  the user name  if the current user is authenticated  else an empty string   it is given as a string  generation time  the generation time  given as a localized date and time string  instance title  the report title  given as a localized string  instance sentence  the report sentence  given as a localized string  emptyreport  a flag indicating whether the report is empty  does not contain data   given as a java lang boolean object  emptyreport sentence  a localized message explaining that the report is empty  given as a string   as the report template render mechanism does not provide means to lookup information dynamically from the analytics user session or report instance  the localized and stringified information are passed into the template  this may change in future version in order to provide more flexibility   image location re mapping  while ireport allows images to be included as string  absolute filename   by url or by inputstreeam  only filenames given as strings are supported by coremedia s rendering mechanism  as ireport stores the image s absolute path as a string in the report template  the following precautions have been taken to map absolute image paths to relative paths   when a report template is loaded  all image references that contain the template     reportimages file separator  imagename   are on the fly being remapped to   web inf reporttemplates reportimages  imagename    see the section below to disable this remapping   hence  absolute images paths like  c   myfolder  reportimages  image  png  and   opt reportimages image  png  are automatically remapped  if you put all your images into the reporttemplate reportimages directory  you can be sure that the path mapping is handled correctly        report template definition  for report template definition  we suggest that you setup the dashboard web application in a development environment where you disable report template caching  see below  and modify report templates deployed in the web inf reporttemplates directory   some configuration options prove useful when designing and testing report templates as well as for troubleshooting   in framework spring analytics foundation xml which is located in the file cap analytics config jar  you may change parameters of the defaultreportrenderfactory   set the parameter  viewtemplatecachingenabled  to false  default value is  true   in order to disable template caching  set the parameter  reportimageslocationreplaced  to false  default value is  true   in order to prevent the image location remapping  this might prove helpful for troubleshooting   see the configuration file fragment below for the given details        the analytics user session manager      bean name  analyticsusersessionmanager   class  com coremedia analytics dashboard session user  analyticsusersessionmanager   singleton  true  depends on  log jconfigurator               property name  reportrendererfactory        bean id  defaultreportrendererfactory       class  com coremedia analytics dashboard mvc view      defaultreportrendererfactory          property name  viewtemplatecachingenabled  value  false           property name  reportimageslocationreplaced  value  false          bean      property            bean   
  in order to obtain information about the state of the objects that are stored persistently for later delivery by a content application engine  an object analyzer must be installed  among other properties  the object analyzer computes and stores a category and a display name for every document and folder   the object analyzer is an instance of a proactive engine  please refer to the content applications developer manual for a complete introduction this technology   all classes that are specific to the object analyzer as described in this section are located in package com coremedia analytics objectanalyzer  further classes are from the api of the proactive engine   analyzing content  if the only source of data for delivery is a content server  the configuration of the object analyzer is very simple  because the content trigger framework can be used  this framework takes care of tasks like registration of listeners or the creation of cache keys    because the object analyzer is typically configured to generate information about all content items  also the contentselector interface of that framework is easy to implement  the predefined class allcontentselector will take care of efficiently including all documents and folders in the analysis  if you decide to limit the set of resources  you can do so by using the pathandtypecontentselector of the persistent cache or by implementing a custom contentselector   but usually the only interface that you have to implement is the contentevaluator  this is an unspecific interface of the proactive engine with a single method     object evaluate string id  content content  throws exception   although the method returns an object by definition  the only permissible values in the context of the object analyzer are instances of objectstate    you may also choose to subclass defaultobjectstatecontentevaluator  which already provides sensible defaults for the type  the deletion status and some other fields  you will probably have to override at least the following methods     protected string getdisplayname content content  list patharcs     protected list getcategory content content  list patharcs    for customizing the site computation  you can configure the contentsiteextractor property in the config objectanalyzer spring objectanalyzer trigger xml file as follows    bean class  com coremedia analytics objectanalyzer  defaultobjectstatecontentevaluator      property name  contentsiteextractor              ref  customcontentsiteextractor      bean    note that because your code is running inside a proactive engine  you can perform arbitrary repository operations to determine the properties of the content  while the path of the content is given as a method argument for your convenience  you might decide to use a more elaborate categorization scheme instead  for example  you could link category documents whose path is then evaluated  or you could store the display name in a custom property of the document   if more complex customizations are required  consider extending the abstractobjectstatecontentevaluator  the single abstract method you have to implement fills a pregenerated state object using the properties of the content     protected abstract void fillinobjectstate objectstate state   content content    when implementing the contentevaluator interface directly  simply create an instance of objectstate and populate the fields one by one  make sure to throw an invalidpersistentcachekeyexception if the content under examination is destroyed   in any case  the generated object state is forwarded to an objectstatereceiver  which uploads the state to the database  when you install an object analyzer  the entire wiring is already prepared and you simply have to configure the database and your content evaluator   analyzing other objects  when using the proactive engine to compute the object state of objects that are not based on content objects  you must start with a generic proactive engine and use the objectstatereceiver as the receiver  your cache keys must output objectstate objects  please refer to the content applications developer manual for more details   choose the ids recorded in the object states in a way that does not conflict with the ids generated by the object analyzer for content   if the system you are integrating does not support the concepts of  deleted  and  published  objects  use false as the default for the deletion state and true as the default of the publication state  
  there are two views for managing user generated content  the approval view is used to check and approve user generated content before this content is shown on the publicly accessible area of the site  the user content view is used to browse through available user generated content    both views are described in detail in the following sections  
  the users tab is used for carrying out actions related to the users of your social software application   the following actions are covered in this section   viewing user profiles controlling user access  blocking and deleting users  managing group membership for users 
  updating non web applications  to update the spring configuration files of non web applications  such as the proactive engine and the cae feeder  according to the new modular configuration  apply the following tasks   move the files from the framework directory to an config jar file and place them below  framework spring in this jar file  move the spring configuration files from properties corem  componentname  into the config  componentname  spring directory  replace the example files with your custom configuration files   
   property value default description cap server http port port  this property defines the port of the server s internal web server  the web server returns the server ior for connecting clients and delivers configuration and jar files for webstart  cap server http host string  this property defines the hostname or ip of the server s internal web server  cap server http bindallinterfaces true false true this property defines if all interfaces are bound to the port defined in cap server http port  if set to false  only the interface from cap server http host is bound  note that localhost is usually bound to the separate loopback interface  cap server orbserverhost string  the host of the orb which the content server uses  cap server orbserverport int  the port of the orb which the content server uses  cap server orb keepalive port int     the port to use for the orb keepalive mechanism  use this mechanism if you experience occasional hang ups of the server that last for about a minute   set to a positive number to specify a fixed port  when set to    an arbitrary port will be used for keepalive  when set to     the keepalive mechanism is not activated    cap server orb keepalive interval int      the interval between two keepalive requests in milliseconds  if keepalive is activated  cap client repository home path  home using this property  you can define the folder which will be used to store the home folders of the users  the whole folder hierarchy of the home folders is only visible to the administrator  each  non administrator  user will only see one home folder with the path defined in cap client repository home containing his personal files  e g  the preferences  the default folder is  home which will be automatically created by the system  if you define another folder  you need to create this folder by your own  cap client repository system path  system using this property  you can define the system folder  it contains for example the public dictionary of the spell checker  the default folder is  system which will be automatically created by the system  if you define another folder you need to create this folder by your own  cap server multipleliveservers true false false this property defines whether the server publishes to multiple live servers  note that this flag cannot be easily changed after the first start of the content management server  cap server documenttypes url path   resourcecontainer config contentserver framework   config jar  framework doctypes   xml   config contentserver doctypes   xml   config contentserver doctypes     xml   this property defines where the server finds the xml file s  containing the document type definitions  you can specify multiple files as a comma separated list or use ant style patterns with wildcards like          and         example   config contentserver doctypes doctypes  xml matches all files with a suffix xml and a prefix doctypes in the config contentserver doctypes directory   config contentserver   doctypes xml matches  all files with a suffix xml and a prefix doctypes in all directories below config contentserver  cap server documenttypes xmlschema enable  true false  this property defines whether the doctypes definition can be defined according to the coremedia doctypes dtd dtd definition  false  or the coremedia doctypes xsd xml schema definition  true   cap server resourcecache size int       this property defines the resource cache size  i e   the number of resources the server holds in memory  this value should sometimes be adapted to the increasing number of resources in the actual working set  if the value is too small  the server does not perform well  one resource needs about  kb of heap space  cap server license url path properties corem license zip this property defines where the server finds the license file  cap server login bouncers url path  this property points to the optional login bouncer configuration  a login bouncer can grant or deny access to the content server based on the characteristics of the user and the set of currently logged in users  cap server workflow server url url  this property defines the ior url of the workflow server  clients of the content management server access this property before connection to the workflow server  cap server usestrictworkflow true false  this property enforces the strict workflow mode  that is  the approver of a resource must be different from the editor  this is checked independently of the workflow engine  and should only be used in cases where a custom workflow definition is not an option  cap server checkuniquedbaccess true false false this property determines whether to check for another server that is running concurrently on the same database on server startup  for compatibility  this property defaults to false  but it is recommended to set it to true in order to prevent data corruption  cap server uniquedbaccesswriteinterval int   if unique db access is checked and if this property is positive  this property determines the number of seconds between two writes of the current timestamp to the database to indicate the liveness of the server  if   or negative the server neither writes a timestamp regularly nor expects a timestamp to be written  this value defaults to    cap server usercache size int     this property defines the size of the user cache  it limits the maximum number of users which can be found in one search for users in the user window of the coremedia editor  set the property to the size of the largest user search you want to perform  or the number of concurrently working users  whichever is greater  cap server groupcache size int     this property defines the size of the group cache  it limits the maximum number of groups which can be found in one search for groups in the user window of the coremedia editor  set the property so that all groups connected to rights can be cached in memory  cap server rightscache size int      this property defines the size of the rights cache  this cache stores the results of right calculations per resource  document type and member  if you have lots of different resources  document types and users you might need to adapt the value of the property  check the proper size of the cache by examining the cache misses and faults in the log  to activate the log output of the rights cache set the cap server rightscache status interval property to a value larger than zero   cap server rightscache status interval int   this property defines the interval  in seconds  at which log output of the rights cache is written      means  that no log output is written  cap server blob channel timeout int    this property sets the timeout for streaming blobs to and from the database in seconds  in general  you don t have to change the default value  it is provided for exceptional cases  when the connection to the database is unreliable  cap server management jmxremote url url service jmx jmxmp   localhost      if the property is set  the mbeans of the content server are made available via jmx  providing access to selected configuration properties and some runtime states and statistics  by default  the property is disabled   properties for ssl connection   property value default description cap server https port int  the ssl port of the internal web server of the content server  that will be used for the connection  cap server https keystore path  the path to the keystore file which contains the certificate for the connection  cap server https password string  the password of the keystore  cap server https keypassword string  the key to the certificate     properties for the integration of the coremedia search engine  property value default description cap server search enable true or false false enables the full text search   true    cap server search corba url url http    hostname        rpc  this property defines the url to connect to the coremedia search engine by means of corba  this is the url of the corba interface of the fast config server  cap server search http url url http    hostname        this property defines the url to connect to the coremedia search engine by means of http  this is the url of the http interface of the fast config server  cap server search naming host string  this property defines the name of the host of the naming service of the coremedia search engine  this is the name of the host of the fast naming service  cap server search naming port port       this property defines the port of the naming service of the coremedia search engine  this is the port of the fast naming service  cap server search qrserver  n  url    optional property to configure the content server to use fast qr servers for full text searches  replace  n  with different numbers for multiple qr servers  if set  the content server will connect directly to the qr servers for searches  this can be used to implement failover with a fast multi node installation  the content server transparently switches to the next configured qr server after search failures  for example   cap server search qrserver   http   host         cap server search qrserver   http   host         cap server search collection string collection this property defines the collection of the coremedia search engine to use  cap server search usefolderids true or false false use folder ids when searching in sub folders  the default is false for backward compatibility with existing search engine installations  it s recommended to set it to true to apply the bugfix for bungsberg       make sure the fast index profile contains the field  folderpath  before enabling this  cap server feeder enable true or false false enables the feeder   true    cap server feeder config url properties corem feeder xml the xml file with the configuration of the coremedia search engine feeder  cap server feeder fast orbserverhost hostname or ip  the host of the orb used by the search engine feeder  the search engine connects to the specified host to notify the search engine feeder about the progress of feeding  cap server feeder fast orbserverport port  the port of the orb used by the search engine feeder  the search engine connects to this port to notify the search engine feeder about the progress of feeding   
  rendering hints  you might send  rendering hints  to the portal server which causes the backend resources  e g  a page or a binary  to rendered in a specific way  rendering hints are represented as special response headers which can be set using httpservletresponse addheader  hint name   hint value      
   rendering hint name value description x coremedia portal text true false all portal links which are contained inside this binary resource will be rewritten  this might be useful for css files containing references to other resources   sap ep only   
   coremedia cms      old versions coremedia content application engine new component  coremedia social software extension new component  coremedia search engine new component  coremedia analytics engine new component  coremedia differencing engine new component  coremedia editing services for jsf new part of the content application engine  coremedia web editing server   new component  partly covers old preview generator functionality too   coremedia authoring server   coremedia web editing server  webdav support   webdav  coremedia file system view coremedia active delivery server generator coremedia cms        replaces content application platform  extended feature range and functionality    coremedia smart content infrastructure jms receiver coremedia delivery satellite coremedia content management server   production server  coremedia content server master live server live master server replication live server   live slave server  slave live server content server new naming  covers the content management server and the live servers  live server new naming  covers the master live server and the replication live servers   
  from an administrator s perspective  there are two important configuration files   config proactiveengine log j properties config proactiveengine spring proactiveengine properties  log j properties  this is the configuration for the apache log j based logging  as a default  the logging output will be written to a file var logs proactiveengine log  see http   logging apache org log j docs documentation html  for a documentation of log j and its configuration options   proactiveengine properties  this file configures the proactive engine s internal and external components  these components are  repository  the coremedia cms repository connection is specified in the usual  see above  way and looks as follows  repository url http   localhost       coremedia ior repository user webserver repository password webserver repository domain   database  a database for the proactive engine s internal components needs to be specified  before entering the database parameters  you have to create a new database user as described above  alternatively  due to the use of different tables you may reuse the same database user which you are still using for the cms repository    
  first the spring application context is created  beanfactory and its implementation filesystemxmlapplicationcontext are part of the spring framework in the java packages org springframework beans factory and org springframework context support  the next statements retrieve feeder and feedablefactory implementations from the application context  you can use them to send data to the search engine as described in the api documentation of the java package com coremedia cap feeder  
  in earlier versions of preview based editing  if you wanted to use the coremedia editor instead of the webeditor  you had to change the file  web inf framework jsf editing jsf forms xml  due to the newly introduced pbe property  menuactions   this is no longer neccessary  simply change the property as described in the table above  
  as supplied  the management views application can be accessed using the url given in the following listing   http    servername   port  sse editor servlet console   replace  servername  and  port  to suit your individual system setup  if the url is invalid  contact your system administrator for your customized login url   on accessing the url  an authentication dialog will open up  as shown in the screenshot given below  
  the user management overview  shown in the screenshot below  contains a list of the users on the system    the list is paged  meaning that not all users may be shown on one screen  to navigate to another page  use the page navigation provided at the bottom right of the overview page   alternatively  a user can be actively searched for using the available full text search  enter your search term into the text field and click search  search results are then shown in the same way as the standard unfiltered overview  
  to control user access  two basic methods are available  blocking and terminating the user s account  both methods require that you are viewing the user data in the detailed view mode   blocking a user results in the following   the user can no longer log into the website the user s data is  however  retained in the database  to block a user  click the block button  to unblock a user  click the unblock button   deleting a user removes all of the user s data   including any linked ratings  comments or other content   from the system   to delete a user  click the corresponding icon  
  a user can be a member of one or more groups    the right part of the screenshot shown in the section on  viewing user profiles  shows the groups for this sample user   group actions are as follows    check a box to add the user to the group uncheck a box to remove the user from the group 
  a number of profile fields are shown in this overview  including the status field  for example  which shows if a user is banned  no login is currently possible for this user    to access a detailed view of the user s profile data  click on the user s  name  field or click onto the selected table row   the detailed view contains two main parts  the user profile details and also the group membership for the selected user   the detailed view shows some details of the user s history and the data from his profile    a sample screenshot of this view is shown below  
  to search for user generated content items  go to the user content tab  this presents you with a view similar to the screenshot shown below  to limit your search  add a search term to the text field and press  return    you can select the approval status of the user generated content you are searching for in the drop down on the right of the search text field  e g   you can restrict your search to user generated content items currently not having any approval status   not processed  in the screenshot below    you can further select the order in which the results should be displayed   oldest first  or  newest first    if all the results of your search for user generated content items cannot be displayed on the same page  you can navigate to other result pages using the page navigation under the search menu  
  the approval process has three possible outcomes   a comment may be approved  meaning that it can be viewed on the publicly accessible section of your site a comment may be rejected  meaning that it is not shown a comment may be marked as undecided  meaning that it is then offered to other editors for consideration  note  any comment shown in your approval view is  as standard  locked for    seconds  after this time  other users are free to approve the item  if you cannot access an item you are currently searching for  it may happen because it is already locked for    seconds for another editor  in this case  you will see a message advising you to try accessing the resource later   to complete the approval process for an item  click the appropriate approve  reject or undecided button to execute the corresponding action    in addition  a comment can also be added to explain the action you have selected via the comment field  this is then shown to other users of the approval view  
  this chapter describes the general parts of a graphical coremedia starter kit installation  in order to install the starter kit proceed as follows  if you want to install the starter kit on a windows vista system  use the cap starterkit installer  rel no   js script for installation  this script asks for administrator privileges before starting the installer  these privileges are required for installation into the program files folder  simply  double click the cap starterkit installer  rel no  js file or open an administrator command line prompt and enter java  jar  path  cap starterkit installer  rel no   jar   otherwise  run the install by either   double clicking the file cap starterkit installer      currentversion  jar   executing the command java  jar cap starterkit installer      currentversion  jar    a welcome window opens up   
  the coremedia starter kit scope of delivery contains the following files    cap starterkit installer  vers no   jar cap starterkit installer  vers no   js 
  you can select one of three installation options   starter kit standard installation installs a complete cms with a starter kit   starter kit custom installation installs the cms and starter kit components you have chosen   starter kit files only installs the files of the starter kit without any cms components      select the option you want to use and click  next    continue reading in the chapter which describes the installation of your selected option   section for the standard and custom installation  section for the files only installation  
  this chapter describes  how you install and configure a coremedia cms with a runnable starter kit  a standard installation comprises all components which are included in the starter kit  if you choose the custom option you can select the components you want to install  in both cases  you can configure the components during installation  but the custom installation comes with more details    the complete content management environment comprises the following components   content management server workflow server coremedia editor as a stand alone installation and via java web start coremedia webeditor analytics dashboard analytics object analyzer jakarta tomcat for the web applications content application engine web application cae feeder css importer  the complete content delivery environment comprises the following components   master live server jakarta tomcat for the web applications content application engine web application cae feeder    install as follows  select the starter kit standard installation option or the starter kit custom installation option and click next   the following window opens up  
  this chapter describes how to install the starter kit files only  without any cms components  the following files are installed     install as follows  select the starter kit files only option and click next   the following window opens up  you only have to enter the destination directory where the files should be installed  
    enter the destination directory and click next   the installer installs the files and you you are finished with the installation  
   strategy  bean property name  description default initializationstrategy   a strategy to custom initialize the consolidator  run after the pre mordial  basic  consolidator initialization   used in timeseriesreport genericqueryconsolidator to pregenerate empty  zero valued  entries    per default  set to null   in timeseriesreport genericqueryconsolidator  set to timeseriesinitializationstrategy mappingstrategies   one optional mappingstrategy per query instance  the structure maps the query name to the mapping strategy  a mapping strategy allows to redefine value names  this allows different queries to report values as  y   without name clash  example  a mapping strategy defined for a query named   q   remaps value key  y   to  y   in the consolidator   any mapping strategy is applied before the values are normalized and folded  see strategies below   default  set to null  empty list  no strategy defined   normalizationstrategy converts and normalizes x values to consolidator entry keys  the purpose is to normalize ranges of x values to one single key  according to x value resolution  example  report with several queries  each returns time series data with numerous data points inside each month  if the report parameters are set to a  per month  resolution  the normalization strategy should map all points in time to the single one point in time representing  january   e g  jan    midnight    default  entry key   x value   in timeseriesreport genericqueryconsolidator  set to timeseriesnormalizationstrategy  foldingstrategy the central strategy used to fold   consolidate more than one query results into one consolidator entry    default  sumstrategy  for all entries with the same x value  all y values of same key are summed up  sum of y   sum of y     if more than one x value displayname are given  the data aggregated latest  wins   overwrite semantics   if attributes with same key are given  data aggregated latest  wins   java map putall semantics   annotations are enlisted  java list add semantics   queryresultpostprocessingstrategies post processors can be used to process the consolidator data entries and adding derived information or metadata  typical use cases are  calculating relative values  percentages   rankings  indicators  reached thresholds   value interpretation and classification   red  yellow  green       default  set to null  empty list  no strategy defined    in rankingcategoryreport genericqueryconsolidator   two strategies are predefined   the rankvaluesconsolidatorpostprocessingstrategy ranks entries by their y  value  default   the value key can be customized  assigns attributes  rank   shared by same values  and position  unique  to entries  the calculatepercentagesconsolidatorpostprocessingstrategycalculates the percentage of y s  customizable key  and assigns the attribute percentage to entries  the value is computed as y            total  the total value is fetched from the plugged in totalcalculationstrategy  the default strategy assumes that the total value has been fetched by a preconsolidateddata singlevaluequery and stored in the consolidator as the consolidator parameter  yvaluetotal   resultliststrategy   converts the result entries  values  annotations and attributes to the format required by the dashboard analytics render framework and jasperreports  namely  an ordered list of simple name value maps  with the maps representing entries     additionally this strategy is used to a  filter out intermediate   temporary fields that are not to be accessible in the resulting report data and b  to convert y values from double to integer representation    default  set to defaultresultliststrategy  this strategy converts x value  x value displayname  y values  any custom defined attributes and annotations  highest to lowest precedence  higher precendence will replace lower precendence field with same key   additionally   optionally filters out fields by interpreting the consolidator s property  resultremovefieldsexcept   if property is set  all fields except the given are filtered out  optionally converts values from double to long  interprets the consolidator s property  resultvaluesaslong   if property is set  values of the given keys are converted to long   
      click next  a license window opens up    
    confirm the license agreement by clicking  accept    the following window opens up  
  here  you configure basic settings for the installation    the properties have the following meaning    property description destination directory where to install the starter kit  path to cms     installer where to find the cms      installer jar file  hostname the hostname of the computer where you install the starter kit the installer tries to detect the correct name  windows startmenu folder the windows start menu folder where the starter kit should be installed  this is only used if you install on a windows system  windows service name prefix the windows service name prefix for the starter kit components  this is only used if you install on a windows system   
    enter the properties and click next   if you have chosen the custom installation  the following window opens up  select the components you want to install  if you install no tomcat servlet container you have to move the web applications to a supported servlet container  the web applications are   web editor cae web application analytics dashboard  
    check the boxes of the components you want to install and click next to continue   if you have chosen the standard configuration  the following window opens up instead of the window above  you can select the content management environment for content production  the content delivery environment for content delivery or both   
    check the boxes of the environments you want to install and click next   now  you have to configure the components you want to install  if you have chosen the custom configuration without all components  you will not see all windows described below  at first  configure the content management environment  
  the properties have the following meaning    property description license file the path and name of the license file for the content management server  content server search engine host the name of the server where the coremedia search engine used by the content management server runs  the port of the search engine has to be        content server search engine collection the name of the collection  see the coremedia administration manual for details  to use for the content server  cae search engine host the name of the server where the coremedia search engine used by the cae feeder the runs  the port of the search engine has to be        you can use the same search engine as for the content management server  cae search engine collection the name of the collection  see the coremedia administration manual for details  to use for the cae feeder  you have to use a collection different than the content management server collection  install analytics click tracking click tracking is used to track clicks of your customers in your content delivery environment  for demo purposes  it can be useful to install a content management environment only and track user clicks on a preview cae  the installer automatically configures the data aggregator according to this setting  install the analytics feedback plug in the analytics feedback plug in is used to generate dynamic content based on reports of the analytics engine  see section for details   
    enter the properties and click next to continue   a window opens up which allows you to configure the ports of the content management environment  
  the ports have the following meaning    port description content management server port the port where other components reach the server  workflow server port the port of the workflow server  jakarta tomcat http port the http port of the tomcat servlet container for the installed web applications  jakarta tomcat https port the https port of the tomcat servlet container for the installed web applications  jakarta tomcat shutdown port the shutdown port of the tomcat servlet container for the installed web applications  cae jmx port the port of the cae web application used for jmx management  analytics object analyzer jmx port the port of the analytics object analyzer used for jmx management  cae feeder port port the port of the cae feeder used for jmx management   
    enter free ports and click next to continue   the next window allows you to configure the database used by the content management server  
  the content management server needs a supported database for operation  please see the coremedia administration and operation manual for supported databases and for details of the configuration  the properties have the following meanings  
   property description database driver jar the path and name of the jar file of the database driver  the driver will be copied to the management lib directory of the content management server  database driver class the class of the database driver  database url the url of the database  database type the type of the database  possible entries are  oracle    db     mssql  and  postgresql   database user the database user to use by the content management server  database password the password of the database user   
    enter the database properties and click next to proceed with the installation   the cae feeder of the content management environment needs also a database  the properties are the same as for the content management server database  
    enter the database properties and click next to proceed with the installation   coremedia analytics also needs a database for operation  the properties have the same meaning as for the content management server database  the database driver is copied to the following directories   management lib management jakarta tomcat webapps analytics web inf lib management jakarta tomcat webapps starterkit web inf lib 
    enter the database properties and click next to proceed with the installation   if you have chosen to install a content delivery environment you can configure it with the following installer windows  the database driver will be copied to the delivery lib directory     
  the properties have the following meaning    property description master live server license file the path and name of the license file for the  master live server  cae search engine host the name of the server where the coremedia search engine used by the cae feeder the runs  the port of the search engine has to be        you can use the same search engine as for the content management server  cae search engine collection the name of the collection  see the coremedia administration manual for details  to use for the cae feeder  you have to use a collection different than the content management server collection  install analytics click tracking click tracking is used to track clicks of your customers in your content delivery environment  the installer automatically configures the data aggregator according to this setting  install the analytics feedback plug in the analytics feedback plug in is used to generate dynamic content based on reports of the analytics engine  see section for details  master live server port the port where other components reach the server  the value must be the same as set during the content management server installation  the installer automatically uses this value  so you do not have to change it  jakarta tomcat http port the http port of the tomcat servlet container for the installed web applications  jakarta tomcat shutdown port the shutdown port of the tomcat servlet container for the installed web applications  cae jmx port the port of the cae web application used for jmx management   
    enter the properties and click next to proceed with the installation   the content delivery environment needs an own database user for operation  the properties have the same meaning as for the content management server database  
     enter the properties and click next to proceed   as a last step  configure the database of the cae feeder used in your content delivery environment for full text search  the cae feeder needs its own database user but the properties have the same meaning as for the content management server s database configuration described above  
     enter the properties and click next to start with the installation   the next window starts the actual installation  click show details to view the output of the ant installer which is used internally  open the errors tab for error messages  the ant installer uses the coremedia cms installer for installation  you find the log files of the cms installer in the management  and delivery  directory  named coremediacms installer log    
  the starter kit installs a complete coremedia cms system with nearly all components  this chapter shows in a nutshell how you start and initialize these components  please refer to the coremedia administration and operation manual for a thoroughly description of starting and stopping coremedia components  
  the basis for your documents in a coremedia cms system is the xml file config contentserver doctypes sample doctypes xml  it contains the root element  documenttypemodel  which serves as a container for the  doctype    xmlgrammar   and  xmlschema  elements  it imports the grammar for coremedia rich text from the required doctypes xml file which is located in the cap server config jar in the config contentserver framework directory  the required doctypes xml contains the definitions which are essential for the coremedia cms system  the next example shows a simple document type definition  
  if you have used document type names which exceeded the recommended length of    characters  which are longer than    characters to be exact  and you switch to another database you might exceed database limitations  this is especially true for ibm db  and derby databases  in order to circumvent this problems there exists three attributes for the documenttype element   pkname  this attribute defines a name for the primary key constraint of the document type table  resourcefkname  this attribute defines a name for the foreign key constraint from the document type specific tables  indexname  this attribute defines the index name for columns of document type specific tables   example   your document type name is  productattributs    documenttype name  productattributes     this name contains    characters  the coremedia server will extend this name by up to three characters to obtain unique database identifiers  unfortunately  the db  database has a limitation of    characters which will be exceeded by these names  in order to use your document type name furthermore you define unique names for the database using the attributes described above  your new document type definition will look similar to the following example   documenttype name  productattributes  pkname  pk prodattr  resourcefkname  fk prodattr  indexname  i prodattr    three document types  dictionary  query and preferences   are already defined in the required doctypes xnl file  all types are essential for some components of coremedia and must therefore neither be renamed nor deleted   defining the grammar  the  xmlgrammar  element with the attributes name  root  parent and systemid is used to refer to dtds from xmlproperty elements  the following example defines the coremedia rich text grammar    xmlgrammar name  coremedia richtext                     root  div                 systemid  lib xml coremedia richtext     dtd     name  the grammar name which you can use to reference the dtd root  the name of the xml root element systemid  a path that is either absolute or relative to  corem home which specifies the location of the xml grammar in the cap server s file system  the systemid can also be a url from where the cap server loads the xml grammar on startup  parent  coremedia cap has an inheritance concept for xml grammars  if this attribute is set to the name of another xml grammar  the xml grammar may be used when overriding a property with the other xml grammar   the  xmlgrammar  elements coremedia richtext      coremedia dictionary  coremedia query and coremedia preferences are predefined  the latter three belong to the dictionary  query and preferences document types respectively   if you want to use xml schemas instead of dtds you can specify the  xmlschema  element with the attributes name  schemalocation  language and parent  the following example defines the grammar custom schema with a schema file custom xsd located in  corem home    xmlschema name  custom schema               schemalocation  custom xsd              language  http   www w  org      xmlschema    name  the name which you can use to reference the schema schemalocation  references to the xml schema  separated by white spaces  the namespace is taken from the xsd file s  language  for example http   www w  org      xmlschema parent  coremedia cms has an inheritance concept for xml schemas  if this attribute is set to the name of another xml schema  the xml schema may be used when overriding a property with the other xml schema   you specify a dtd grammar or xml schema once in the doctype declaration and can refer to it with the attribute grammar in the xmlproperty element    doctype name  article        stringproperty name  headline  length              xmlproperty    name  text           grammar  coremedia richtext             xmlproperty    name  summary        grammar  coremedia richtext             xmlproperty    name  comment        grammar  custom schema      doctype   importing grammars and document types  you can import a grammar or schema into your document type file using the  importgrammar  element  the following example imports the  coremedia richtext      grammar defined in the required doctypes xml file    importgrammar name  coremedia richtext       from  required doctypes     name  the name of the grammar or schema you want to import  from  the name of the xml file  where the grammar or schema is defined  without the file extension    you can also import document types that are defined in different document type files  this is necessary  if you want to use this document type as a parent or as a target of a linklist property  the following example would import the type article from the editorial types xml file    importdoctype name  article  from  editorial types     the attributes have the same meaning as for the importgrammar element  
  values of other classes map to string elements with the value of their tostring method   you can configure a propertyconverter to convert the value to one of the supported types  a propertyconverter implements the interface com coremedia cap feeder bean propertyconverter and can be configured with the propertyconverter property of the beanpropertyfeedableelementmapping  propertyconverters are especially useful to create a string representation when indexing collection properties  the propertyconverter implementation com coremedia cap feeder bean collectiontostringpropertyconverter can be used for exactly this purpose  please see the javadoc for details   furthermore it s possible to configure a default value which should be indexed if a bean property is null or a configured propertyconverter returns null  a default value can be configured with the defaultvalue property of the beanpropertyfeedableelementmapping  again  please see the javadoc for details   if a bean property s get method throws an exception  the beanfeedablepopulator will index a so called error document in the index as placeholder  error documents can be recognized by the value error in the index field feederstate  the stacktrace of the exception is stored in the index field feederinfo  as stated in section  you must always add a feederstate success clause to your queries to find successfully indexed documents  bean feeding will be automatically retried after    minutes  default  can be changed or disabled with beanfeedablepopulator seterrorcachetime  or if a dependency is invalidated that was accessed before the exception was thrown   
   option description  o defines a specific output file for the installation settings   p defines a specific input file from which the installer reads the default values  text starts an interactive text mode installation  text auto starts a script installation without interaction   
  the active delivery server is a component for the delivery of content  
  web applications can execute an arbitrary number of filters before and after a servlet  thus  acegi makes a decision on a request before spring notices it  when necessary  acegi sends a redirect  for example  to a login form or secure channel and in this case the spring servlet is never called   but what happens during the filter execution and how do the latter called components consider a successful authentication  in order to answer these questions  you should take a closer look at the particular parts of the filter  the object filter is the entry point provided by acegi  which contains components with different tasks  the httpsessionintegrationfilter is almost in every configuration the first filter object  except a secure channel is needed  it retrieves the authentication data  when they already exist  from the current http session and puts them into the securecontext  this place contains thread local data  whereby all components have access to it  after the request is processed this data will be removed by the framework  if no authentication data is stored in the session nothing happens and the next object authenticationprocessingfilter will be executed   this component analysis the http request and looks for user name and password  a successful retrieval of the required parameters continues with an authentication attempt by calling the declared authentication backend  the returned data is stored in the securecontext  due to the potential complexity of this process it is recommended to use a cache storing the data of already authenticated users  if no authentication attempt could be detected the next object will be called   the anonyousprocessingfilter adds an anonymous authentication object to securecontext when the previous components failed to do it  this allows the explicit distinction between anonymous and known users  the last object securityenforcementfilter in the filter chain guarantees the protection of your application  it takes the authentication object and checks the credentials  in case of sufficient access rights the filter chain is closed and the servlet is executed  otherwise  the request is rejected   all filter objects are configured in the spring application context  this demo uses a separate file named acegi security xml that you can find in the folder src spring  a first look may discourage you because of the large number of beans and their properties  but it is not as complicated as it seems  two object diagrams shall clarify the more complex relations  the first one is depicted in the next figure and shows the authenticationprocessingfilter with its involved beans   
  this method looks for an authentication object of type caeuser  a class extending the standard acegi user by a cms session  and closes the actual session  thereafter it invalidates the http session to log out the current user  in contrast to the login command  this controller redirects to a predefined logout page   you might wonder how the templates can render additional data because the actual user is not part of your content model and thus  cannot be accessed by the variable self  there are two ways to integrate additional data with little effort  either you implement a new tag library  which access the securecontext object  or you use view classes  due to the many documents on tag libraries  this example will concentrate on the latter solution   view classes allow you to implement the rendering of content by hand and are defined in a separate file menusite views xml  in this example the access to the current logged in user object is needed  following code snippet is taken from documentview  placed in package com coremedia examples cae view  and shows the needed steps   
  the datasource represents the connection to a database and is set up in the file menusite rating xml  the central configuration for all rating beans  each time your application is reloaded this method is called  the exception clause is an easy solution to deal with failed table creations for existing tables   the next thing you need is a bean representing one rating  its name is rating and is very simple structured because it only contains three attributes  user id  content id and rating value  another bean  a jdbc dao  called ratingdao is responsible for the loading and saving of the values  for this task the dao contains specialized database operation classes encapsulating the sql commands  following source code is a representative example for these kind of beans  
  this content rules example is based on the new menu site example and on the search example  which you are supposed to be familiar with   in the new menu site example you have seen a menu card ordered by categories which correspond to the folder structure of the repository   we will now provide more flexible categories which make use of so called content rules   content rules are posted to a queryservice and allow structured queries for java beans    see com coremedia cap beans query queryservice in our api documentation for details    this example makes use of the fastqueryservicefactory which comes with the coremedia cms   we will look at two aspects of content rules   usage in a content application preview from an editor  furthermore this example makes use of dataviews  the caching facilities of the cae   as mentioned in the readme file  we don t start from scratch but augment the new menu site example and reuse the fast collection created with the search example   just follow the steps described there  and start over with http   localhost      contentrules servlet    if you already explored the content you have imported for the new menusite example  you might have noticed the document type contentrule  which extends the well known category  and the two documents cheap and expensive in the advanced folder   the documents contain content rules for dishes with prices over    and and under     respectively   type   dish   price       order by  price  descending type   dish   price        order by  price  ascending  note that the available properties  here  price  are not related to the cms document types but depend on the queryservice   for the fastqueryservice used in this example all indexed properties but the textbody aggregation can be used in bean queries   since our fastqueryservice is backed by the fast collection we created in the search example  price is in fact the only indexed property of dishes  see trigger xml in the search example   so we cannot query ingredients  calories etc here    the two contentrule documents are linked as categories in the new start page   click on the premium or the value button  and see some more or less delicious and expensive meals  how does this work   the webapp  since our new contentrule doctype extends category  we do not need to change or add any templates or controllers in the new menu site example   all we have to do is to override getdishes   in contentruleimpl and configure the new class along with the other content beans in contentbeans xml   contentruleimpl needs a queryservice which we provide by spring configuration    bean name  contentbeanfactory contentrule  scope  prototype         class  com coremedia examples cae beans contentruleimpl      property name  queryservice  ref  beanqueryservice      bean   the beanqueryservice referenced here is declared in beanqueryservice xml   the implementing class fastqueryservicefactory is included in coremedia cms  but it is not public api   you are simply supposed to use it exactly this way  so we do not go into further details   just notice the usage of the fast server parameters you configured in local properties   of course  contentruleimpl would also work with any other queryservice   contentruleimpl getdishes   fetches the value of the beanquery property from the underlying document and poses this query to the queryservice   the result is a collection of content beans  which we assume to consist of dishes only    the content rules in the sample content meet this constraint    apart from some type casting and exception handling you see an invocation of cache cachefor  which leads us to the next aspect   caching  depending on the actual queryservice implementation  queries may be expensive  and we want to cache the results   the cae supports caching on a sophisticated level by the concept of dataviews   we want to cache both  the single dishes and the whole query result   the according dataviews are declared in dataviews xml   see the cae developer manual for the details of data view declarations  esp  the meaning of associationtypes   we chose the standard static policy   the cae cache creates dependencies on the underlying documents themselves automatically  e g  a contentrule bean is invalidated when the beanquery property changes  however  the result of a query depends not only on the query but on the content of the whole repository  or more precise  on the queryservice    we cannot model this in terms of explicit dependencies  so we simply let it invalidate by a timeout of    minutes   preview  now let s change the perspective and look at things from the editor point of view  when you compose a bean query  you want to see the result immediately in order to check if the query meets your intention   so we integrated another controller into the example which handles urls with a query parameter   the editor invokes the application via such urls   you find the configuration in menusite controllers xml    bean id  contentrulepreviewcontroller   class  com coremedia         examples cae beans contentrulepreviewcontroller      property name  dataviewfactory  ref  dataviewfactory       property name  queryservice  ref  beanqueryservice      bean         add mappings to the central mapping bean      customize append bean  controllermappings      map       entry key   contentrulepreview        value ref  contentrulepreviewcontroller         entry key     value ref    rootcontroller        map    customize append     the contentrulepreviewcontroller processes urls like  http   localhost      contentrules servlet contentrulepreview   query type   d dish  a    price      e  d    order by     price    descending  the url contains the bean query as parameter  it is not related to any cms resource  the contentrulepreviewcontroller simply extends spring s abstractcontroller and overrides handlerequestinternal   it provides dishlist beans  whose caching policy is dynamic  see dataviews xml    typically the preview queries are different each time  once the editor is happy  he stops previewing   so caching the query result would make no sense   however  the cached dish beans are used this way   dishlist is a limited kind of category  with nothing but a getdishes method   the corresponding dishlist jsp simply renders the dishes with their teaser views  without any page decoration like picture or navigation   editor  you can use the swing editor to change the content rules and preview the results   install the editor extensions and configure the beanquery editor with the beantypes xml and the beantype storagemapping fast xml in the misc directory of this example   in case you just installed the editor extensions  you can simply replace the files in the web inf custom directory  otherwise you have to merge them    now configure the editor extensions in the editor xml of the swing editor  unless you have not done so yet  editor extensions also serves differencing and extended queries    last thing to do is to configure the propertyeditor for the beanquery        document type  contentrule          property name  beanquery          editorclass  hox corem editor toolkit         property beanquerystringpropertyeditor            webcontext host  localhost  port                 context  contentrules               webextension                name  beanquerypreview                            class  hox corem editor toolkit property                beanquerystringpropertyeditor previewextension                 path  servlet contentrulepreview                  view  preview                pattern browser  firefox               pattern   p    h  n  c u query  q                webextension            webcontext          property        document   now you can start the editor  open a contentrule document  and set the focus to the bean query   two additional toolbar buttons appear which allow editing and previewing the bean query   you can also edit the query string directly  but you should know what you are doing   
  this chapter gives you an overview of how to write your own proactive engine application  although the api is mentioned  it is not described at a detailed level here  consult the api documentation of the package com coremedia cap persistentcache proactive for further details   writing a proactive engine applications includes  implementing one or more triggers or alternatively  implementing the content trigger framework s artifacts   implementing one or more receivers  registering these implementations in a runtime environment   implementing a receiver  as already mentioned  a receiver is a component which receives key value based events in order to do further processing on them such as handing the values over  to another system  in order to write a receiver  you have to implement the interface com coremedia cap persistentcache proactive receiver  most of the interface s methods represent an event which may be processed asynchronously  the event should be answered using the provided com coremedia cap persistentcache processingcallback when processing is complete    implementing a trigger   a trigger is a component which accesses the proactive engine via the interface com coremedia cap persistentcache proactive keymanager  telling the proactive engine which persistentcachekeys to compute proactively  when writing your own trigger  you have to make sure that a keymanager can be configured from outside the component  e g  by providing a method setkeymanager keymanager   in addition  you have to provide a persistentcachekeyfactory which is able to reconstruct the trigger s cache keys   keep in mind that any changes to the keymanager s state  for instance the addition of a new key  are stored persistently  for this reason you should make your trigger resume its work after a restart rather than starting from the beginning  all modifications to the keymanager s state which have been successfully answered by the keymanager must not be repeated    as a starting point for implementing a trigger  the abstract class com coremedia cap persistentcache proactive triggerbase may be useful  when using the higher level content trigger framework  you don t have to deal with these trigger related issues by yourself  instead  you only have to implement the interface com coremedia cap persistentcache proactive contentevaluator and optionally the interface com coremedia cap persistentcache proactive contentselector   using the proactive engine application template  coremedia provides a proactive engine application template  which is a runtime environment for bringing together your trigger and receiver implementations in an application  before running your proactive engine application  you have to adapt the template  first of all  copy a jar containing your trigger and receiver implementations into the directory lib   after that  you have to register your custom implementations in a number of configuration files  the application template s configuration is mostly based on the spring framework s bean configuration concept  http   www springframework org   it is assumed that you are already familiar with the spring framework s configuration concepts    the most important configuration files are proactiveengine triggers example xml and proactiveengine receivers example xml which are located below config proactiveengine spring  as the names suggest  the first file is the place to register your trigger implementations  while your receiver implementations are registered in the second one  the configuration files proactiveengine properties and log j properties consist of administration related configuration entries such as database and logging related issues  the details are described in the administration and operation manual    proactiveengine receivers example xml  in order to register your receivers  for each receiver you simply need to add a bean entry below the enclosing  list   such as the following   bean name  myreceiver   class  com mycompany myreceiverimplementation          bean   as an default  two instances of a loggingreceiver are registered  this type of receiver does nothing except log and acknowledge all incoming events   proactiveengine triggers example xml  the configuration of the triggers is a bit more complex  from an abstract point of view  this configuration consists of the following elements   one or more trigger bean declarations which reference a bean keymanager of type com coremedia cap persistentcache proactive keymanager  the key manager bean is defined in the framework part of the configuration   for each trigger  an adequate persistentcachekeyfactory   a composite persistentcachekeyfactory bean called  triggerpersistentcachekeyfactory   which aggregates all trigger s factories  this bean is used by the framework   the concrete default configuration consists of a contenttrigger bean  called  trigger    and its persistentcachekeyfactory  called  trigger persistentcachekeyfactory    a pathandtypecontentselector bean is used as the contentselector while the implementation pathcontentevaluator is used as the contentevaluator  latter should be understood as a very simple example which computes the path of a content   register your own triggers and their persistentcachekeyfactory implementations by adding entries like   bean name  mytrigger     class  com mycompany mytriggerimplementation       property name  keymanager  ref  keymanager            bean       bean name  mytriggerpersistentcachekeyfactory  class   com mycompany mypersistentcachekeyfactoryimplementation           bean   and reference the persistentcachekeyfactories from inside bean triggerpersistentcachekeyfactory like   bean name  triggerpersistentcachekeyfactory  class   com coremedia cap persistentcache  compositepersistentcachekeyfactory      property name  keyfactories      list           ref bean  mytriggerpersistentcachekeyfactory        list     property    bean  
   tag name attributes description examples include self  object  required   view  string  optional  render the object passed as  self  in the given view at this position in the jsp output  requires a template view to be defined for such an object   cm include self    self navigation        cm include self    self   view  frame    link target  object  required   view  string  optional   var  string  optional  create a link to the object passed as  target  in the given view  if var is set  the link is set as a page scope attribute with that name  otherwise it is directly written to the page  requires a link scheme to be defined for such an object   cm link target    article       cm link target    article   var  link    param name  string  required   value  object  required    can only be used in the body of an include or link tag  sets a request attribute with the given name to the given value  for the duration of the enclosing tag only  the included view or the called link scheme may use this parameter while creating its output   link   if used in the body of a link tag  the called linkscheme can retrieve a map with all parameters by calling viewutils getparameters     cm include        cm param name  verbose  value  true      cm include     cm link target    article      cm param name  parameter  value          cm link  id self  object  required   var  string  optional  determine this object s id through the idprovider  if var is set  create a page scope attribute with that name that holds the id  otherwise  write the id directly to the page output   input name  teaser  type  hidden  value   cm id self    teaser         
  the coremedia editor is configured with xml files  it is possible to define special configuration files for distinct groups or users of the coremedia system  to configure the usage of special configuration files you may adopt the following properties in the editor properties file  see chapter  defining xml files for configuration  in the administration and operation manual for details    editor startup configuration editor configuration group configuration user configuration  if you only use group configuration  you can define one specific configuration file for each group  to have multiple configuration files for one group  you may configure the set of files and in which order they are parsed in editor startup xml  default  or in the file configured by editor startup configuration  mind that group configuration in editor startup xml overrides the mechanism one configuration file per group which especially means  if users are not member of any group configured in  configgroups  no group configurations are applied to these users   in both cases  that is either with one configuration file per group or with multiple configuration files per group you have to set the property group configuration to point to configuration files with a path relative to  coremediahome  or to the url where to find the files  the path url defined has to contain a wildcard     which will be replaced either by the group name or by the names as defined in the  configuration  element  see below    example   group configuration properties corem editor     xml  the content server will look in the properties corem directory for a file called editor  placeholder  xml where  placeholder  will be replaced by the values of the name attribute of the  configuration  element described below or by the group name if no  configgroups  element is used   if a user is member of more than one group the exact behavior reading group configuration files is undetermined  if multiple matching  configgroup  exist one of them is chosen by random  if  configgroups  configuration is not used but direct mapping groups to configuration files all matching configuration files are read but in an undetermined order  to determine the exact behavior you have to implement your own selection scheme  proceed as follows  extend genericeditor override the getconfigurationgroupnames usermodel user  method which is inherited from abstracteditor with your own selection scheme  the default implementation of the method either returns the configuration file names as configured in the  configuration  element  first case  and if no  configgroups  element is used the unordered list of groups a user is member of  you might want to use the convenience method getuserconfiggroups usermodel user  to create your own implementation  for further reference see the javadoc  add your class to the class attribute of the  editor  element in the editor startup xml file    configgroups   child elements   configgroup   parent elements   editor    editor     configgroups                     configgroups    editor   this element combines the elements for the group configuration    the element has no attributes  if  configgoups  is not used but group configuration is set  only the general editor configuration file  default  editor xml  and the matching group specific configuration files will be applied  see the coremedia editor chapter in the administration and operations manual for details    configgroup   child elements   configuration   parent elements   configgroup    configgroups      configgroup name  editor  domain  main                      configgroup    configgroups   this element defines for which group and domain the configuration should be used  it groups the  configuration  elements  
  the coremedia editor is configured with xml files  it is possible to define special configuration files for distinct groups or users of the coremedia system  to configure the usage of special configuration files you may adopt the following properties in the editor properties file  see chapter for details    editor startup configuration editor configuration group configuration user configuration  if you only use group configuration  you can define one specific configuration file for each group  to have multiple configuration files for one group  you may configure the set of files and in which order they are parsed in editor startup xml  default  or in the file configured by editor startup configuration  mind that group configuration in editor startup xml overrides the mechanism one configuration file per group which especially means  if users are not member of any group configured in  configgroups  no group configurations are applied to these users   in both cases  that is either with one configuration file per group or with multiple configuration files per group you have to set the property group configuration to point to configuration files with a path relative to  coremediahome  or to the url where to find the files  the path url defined has to contain a wildcard     which will be replaced either by the group name or by the names as defined in the  configuration  element  see below    example   group configuration properties corem editor     xml  the content server will look in the properties corem directory for a file called editor  placeholder  xml where  placeholder  will be replaced by the values of the name attribute of the  configuration  element described below or by the group name if no  configgroups  element is used   if a user is member of more than one group the exact behavior reading group configuration files is undetermined  if multiple matching  configgroup  exist one of them is chosen by random  if  configgroups  configuration is not used but direct mapping groups to configuration files all matching configuration files are read but in an undetermined order  to determine the exact behavior you have to implement your own selection scheme  proceed as follows  extend genericeditor override the getconfigurationgroupnames usermodel user  method which is inherited from abstracteditor with your own selection scheme  the default implementation of the method either returns the configuration file names as configured in the  configuration  element  first case  and if no  configgroups  element is used the unordered list of groups a user is member of  you might want to use the convenience method getuserconfiggroups usermodel user  to create your own implementation  for further reference see the javadoc  add your class to the class attribute of the  editor  element in the editor startup xml file    configgroups   child elements   configgroup   parent elements   editor    editor     configgroups                     configgroups    editor   this element combines the elements for the group configuration    the element has no attributes  if  configgoups  is not used but group configuration is set  only the general editor configuration file  default  editor xml  and the matching group specific configuration files will be applied  see the coremedia editor chapter in the administration and operations manual for details    configgroup   child elements   configuration   parent elements   configgroup    configgroups      configgroup name  editor  domain  main                      configgroup    configgroups   this element defines for which group and domain the configuration should be used  it groups the  configuration  elements  
  in the following  meta templates are used to define jsf views for your custom document types  if you are familiar with apache velocity  you will recognize the notation  but even if not  it is very simple to read and the short introduction that follows should suffice   meta template  means that they have to be instantiated for a concrete document type or document property to result in a valid jsf jsp fragment   meta expressions are surrounded by curly brackets  prefixed by a dollar sign    meta expression    the most common simple meta expressions used here consist of a meta variable followed by a dot and a property name    meta variable property name    there are meta directives that start with a hash sign     at the beginning of a line   one meta variable used in the following meta templates is doctype  which stands for some  custom  document type  it has the following properties  as defined in your custom document type model   name   the name of the document type  parent   the parent or super type of the document type  if any   another meta variable property is used for the current property descriptor  in the same meta template  doctype always stands for the document type defining the current property  the most common case is the name of the document property  denoted as   property name   property has the following  meta  properties  as defined in your custom document type model   name   the name of the property  length   the maximum length in characters of a string property  grammar   the xml grammar identifier of an xml property  mimetype   the mime type pattern of a blob property  linktype   the  minimal  content type of linked documents of a linklist property   defining a document edit view  a document edit view  also called document form  consists of a list of property editors  one for each property that the user should edit  to define a custom document view to be used in the content explorer that comes with the es jsf application template  create a jsf jsp named   doctype name  jsp in the directory web inf jsp editforms  of your web application   you can find templates for the predefined document types dictionary  preferences  and query in that directory   this jsp is automatically used by the content explorer when a document of the corresponding type should be offered for editing  by including it in the generic jsf view views document jsp  your jsf jsp must declare a subview and can be based on the following template  into which the jsf jsp fragments for the property editors described in the following sections have to be included         page contenttype  text html charset utf    language  java        taglib uri  http   java sun com jsf core  prefix  f        taglib uri  http   java sun com jsf html  prefix  h        taglib     uri  http   www coremedia com jsf editing services      prefix  es     f subview id    doctype name      if   doctype parent        include file    doctype parent  jsp      end      place property editors defined  not inherited        by this document type here         f subview     jsf requires a subview to be used in included jsps  the subview is a jsf  naming container   so it defines a name space for all contained components  the document edit view meta template suggests to give the subview the document name as its id   to reuse the property editors of the parent  or super  document type  the corresponding jsf jsp is included  the  if meta directive takes care of top level document types that do not have a parent  
     the next window asks you to finish the installation     click  finish  to finish the installation of the coremedia workflow server   
  if you want to install the coremedia cms portal integration proceed as follows  see the content applications developer manual for details   select the coremedia cms portal integration option and click  next    the next window opens up where you can select the portlets for the supported portal server  portlet for      and a development tool  portletemulation development tool   
    enter the url of the content server  into the appropriate fields   now the files of the wes will be copied to the installation directory    the last window opens up and asks you to finish the installation     click  finish  to finish the installation of the wes  if you have installed the webdav web application on a windows vista system  move it to the root web application  rename  tomcatinstalldir  webapps root e g  to  tomcatinstalldir  webapps root old and rename  tomcatinstalldir  webapps webdav to  tomcatinstalldir  webapps root   
    enter the database values for the database of the http cache and click next   if you have chosen to install in site analytics you will be asked for the configuration of the overlay properties file   
    enter the appropriate data into the fields and click  next    if you have chosen to install the http cache extension you will be asked for the configuration of the httpcache properties file  
     enter the appropriate values and click  next    now the files of the content application engine will be copied to the installation directory   the last window opens up and asks you to finish the installation      click  finish  to finish the installation of the content application engine   
  if you want to install the coremedia content application engine with or without extensions  the proactive engine application template  the cae feeder template  editing services for jsf and or the coremedia web services engine proceed as follows  select the coremedia content application engine option and click  next    the next window opens up and shows the components of the content application engine which you can install    
    select the components you want to install and click  next    if you have selected the cae web application template and extensions  then the next window opens up  you can choose to install the cae template alone or together with one or many of the extensions  the extensions do not interfere with each other   
    fill in all properties as required and click  next  to continue   the last window opens up and asks you to finish the installation     click  finish  to finish the installation of the object analyzer     installing the analytics dashboard  if you want to install the analytics dashboard proceed as follows  select the  coremedia analytics option and press  next     the window shown below opens up for selecting the analytics components  
  adjust the configuration of the database connection  the parameters are   com coremedia generator jdbc driver  this parameter references the jdbc driver of the selected database   com coremedia generator jdbc driverurl  this parameter contains the url to connect to the database  com coremedia generator jdbc dbuser  name of the database user  com coremedia generator jdbc dbpassword  password of the database user  the following properties only appear  when you has chosen to install the database message service  they configure the database connection used by the service   dbmsgservicedriver  the driver class to connect to the database  dbmsgservicedriverurl  the url used to connect to the database  msgdbuser  the user used to connect to the database  msgdbpassword  the password used to connect to the database     continue by clicking  next   click  finish  to finish the installation of the coremedia proactive delivery server     
  configure an uploader for the dbmessageservicereceiver  you need to configure an uploader which is used by the dbmessageservicereceiver  the configuration of the uploader is done via the appropriate uploader element inside the dbmessageservicereceiver element  the configuration is similar to the configuration of the uploaders of pads  see section     
  the database message service is installed together with the proactive delivery server  as an optional subcomponent    the graphical and the script based installers will install the database message service and configure its properties  the configuration information can be found in the following files     properties corem pads xml  this file contains the configuration of the proactive delivery server and its uploaders  in order to use the database message service the dbmessageuploader needs to be configured correctly as described in section    properties corem dbmessageserviceconfig xml  this file contains a spring configuration for the servlet which forms the interface for any client that wants to use the database message service  the only configuration element that may be changed is the bean definition for the defaultdatasource     properties corem dbmessageservicecleanup xml  this file contains a spring configuration for a cleanup utility for the messages stored in the database message service   it is important that the configuration of the database to be used is consistent in all of the three configuration files  
  the database message service uses a servlet as an interface through which any client can access the service  while the servlet is configured in the web xml file of the proactive delivery server  pads  web application  the information about the database to be used by the service is stored in a separate configuration file  the location and name of the file is specified by the context parameter com coremedia generator pads dbmessageservice config for the pads context  the default value is  web inf properties corem dbmessageserviceconfig xml   it consists of four bean definitions for the defaultdatasource  the mydefaultlobhandler  the subscriptionservice  and the dbmessageservice  only the bean definition for the defaultdatasource should be changed  the definition is  similar to the one for the dbmessageuploader   see section    
  before enabling the database message service some prerequisites need to be fulfilled   the database message service needs to be installed together with the proactive delivery server  pads   the dbmessageuploader needs to be configured in the pads as described in section  the configuration must have been done during the installation or as described in the previous section   in order to enable the database message service the comments around the servlet and servlet mapping definition for the dbmessageserviceservlet need to be removed in the web xml of the pads server web application  note that you may  have to restart the tomcat after doing so   the resulting part of the web xml file should  look like in the example shown below  
  the database message service provides a utility called dbmsgservicecleanup that removes messages from the database that are not needed anymore  these ones are already received and acknowledged by all the subscribers of the database message service  in addition the utility also removes all subscribers that haven t used the service for a configurable period of time   configuring  the dbmsgservicecleanup utility  the utility is configured in the spring configuration file  properties corem dbmessageservicecleanup xml  the configuration is similar to the one for the dbmessageserviceservlet  it consists of five bean definitions of which two need to be changed  if not done automatically by the installation      the definition of the bean with the id defaultdatasource  this can be configured as described in section   the definition of the bean with the id subscriptionservice   this bean contains a property timebeforeremovalinterval which describes the number of days of inactivity after which the utility would automatically unsubscribe a user  the default value is    days   running the dbmsgservicecleanup utility  you have to start the cleanup utility from the command line prompt  in a command console  change to the root directory of your content server installation and type the following command   bin cm dbmsgservicecleanup  the utility only runs one time  in order to run it regularly you have to integrate it manually into an external scheduling mechanism  e g  a cron job in a unix environment   
  log in with your cms editor credentials of username  password  and optional domain   after logging in you are automatically directed to the content approval view  see section    you can navigate to other views by selecting the corresponding tab   the standard set of supplied tabs for views is shown in the screenshot given below  
  the starter kit contains a customized ready to go importer  based on the generic xml importer  which imports css files into starter kit cmcss documents  you can use this importer to add your own ci compliant css files to the starter kit    configuration  you have to configure the paths where the importer finds the css files and where to put the files in the coremedia repository     
    enter the appropriate values into the fields and click  next       now the editor extensions engine will be installed to the installation directory  then the last window opens up and asks you to finish the installation     click  finish  to finish the installation   in order to use the editor extensions you need to create a keystore file  see section for details  
  the editor extensions are web applications  that can be used from both the coremedia editor and the coremedia webeditor  three extensions can be used   coremedia differencing advanced query editor bean query editor 
  coremedia cms contains the editor extensions  web applications  that can be used from the coremedia editor and the coremedia webeditor  
  a new feature of coremedia cms      is the coremedia differencing service  a web application that computes the difference of two document versions  a user who displays a document in a coremedia editor can start a web browser to show the differences between two document versions  the following subsections describe differencing in more detail  
  because the coremedia editors connect to the editor extensions web application via https  you need to generate a certificate for your host computer  here  diff example com   use the  keytool program provided with each jdk to generate the certificate   keytool  genkeypair  v  alias tomcat  dname       cn editor example com  ou computerengineering  o example ag        l   s hamburg  c de        keyalg rsa  keypass changeit  storepass changeit        keystore server keystore  now  put the file server keystore into the tomcat root folder and edit the tomcat server xml configuration file to define a ssl connector with the keystore file        define a ssl coyote http     connector on port           connector port        protocol  http      sslenabled  true      maxthreads       enablelookups  false       disableuploadtimeout  true  acceptcount       debug          scheme  https  secure  true  keystorefile  server keystore       keystorepass  changeit  clientauth  false  sslprotocol  tls        
  you can use the advanced query editor to create queries  that are more advanced than the ones you get from the standard query  see the user manual for details  the configuration of the advanced query editor contains the following steps  install the editor extensions engine as described in section  create a certificate as described in section  define a document with a string property  that will store the query as described in section  add the querystringpropertyeditor to the property you have defined before  see chapter       and chapter         of the editor developer manual for details  configuring the advanced query editor as described in section   now you can open the advanced query editor from a document containing a string property with the querystringpropertyeditor as described in the user manual   
  you can use the bean query editor to create queries  that are used with content rules  see the content applications developer manual for details  the configuration of the bean query editor contains the following steps  install the editor extensions engine as described in section  create a certificate as described in section  define a document with a string property  that will store the query as described in section  add the beanquerystringpropertyeditor to the property you have defined before  see chapter       and chapter         of the editor developer manual for details  configuring the advanced query editor as described in section   now you can open the bean query editor from a document containing a string property with the beanquerystringpropertyeditor similar to the description of the advanced query editor as described in the user manual  
  configure in the following file   css import properties in the management properties corem directory  
  configure the source paths  use the following property to define the source paths of your css and image files   import multiresultgeneratorfactory property inbox  simply separate different paths with semicolons  the importer processes the directories recursively and imports all files with the extensions  css   png   jpg and  gif   configure the target paths  use the following two properties to define the target paths in the coremedia repository   import transformer    property sourcepath import transformer    property targetpath  define the base directory in the coremedia repository with the targetpath property  the importer creates a folder structure below this base directory that reflect the directory structure of the source path  if all source paths have a common prefix  you might get a bulky and deep folder hierarchy  use the sourcepath property to define a prefix common to all source directories that should be omitted from the folder hierarchy   example  your directory structure of the source files looks like this    home myuser work web css mystylesheet css  home myuser work web pics layout background jpg  home myuser work web pics navigation arrow gif  home myuser work web html      you have configured the following settings   import multiresultgeneratorfactory property inbox   home myuser work web css  home myuser work web pics import transformer    property sourcepath  home myuser work web import transformer    property targetpath  sites thesite layout  the importer creates the following repository structure    sites thesite layout css mystylesheet css  sites thesite layout pics layout background jpg  sites thesite layout pics navigation arrow gif  start the importer  start the importer with   bin cm css import start  verify the import  after the import has finished  you should verify the result  open the editor and explore the target path  all your style sheets should appear in documents of type cmcss with the names of their source files  open a style sheet which includes other style sheets and images with the url   syntax  the arguments of the url  s should be internal links  if an argument is only plain text  the referenced file was probably not found in the configured inbox paths  check the file var logs css import log for details in case of problems   
  since hardware requirements are as specific as project requirements  such as e g  the number of pages of a website  third party services  high availability etc   they can only be determined individually  planning of expected system demands  such as the number of computers and internal network topology  should be performed really carefully   coremedia systems can operate on a single computer or in a distributed environment  project specific demands can have a strong impact on hardware requirements  the listings below are just rough estimates and or the very basic equipment needs  this chapter does not replace coremedia expert consulting by any means    basic production system    to run a coremedia system in production  the basic hardware equipment should at least consist of   one cpu for content server and preview active delivery server  ads  one cpu for the fast search engine with at least  gb ram  please see the fast installation guide for details of the required hardware  one cpu for n importers one cpu for master live server  n cpus for n live adss caes and slave live server external db server s   equipment according to the recommendations of the database manufacturer  each cpu at least equivalent to   sun  sparc      mhz allocating     mb main memory     gb hard disk space     or pc  xeon   opteron with min    ghz allocating     mb main memory     gb hard disk space     editor installation   generally  coremedia editors  are installed on separate windows computers with access to the content server  a computer for the cm editor should not fall short of the following recommendation   pc  pentium iv  athlon min    ghz      mb main memory    gb hard disk space    cms development and test system   for a development or test system all coremedia components can be installed on one computer     cm servers  content   live    optional    cm importer   cm adss   preview   online   if possible  the database should be installed on a separate computer in the test system as well   minimum requirements for a development system   sun  sparc        mhz    gb main memory     gb hard disk     or   pc  xeon   opteron   ghz    gb main memory     gb hard disk     
  coremedia search engine  the coremedia search engine uses the fast     search engine  fast     supports following operating systems     red hat  ws  es  as      enterprise linux     taroon  update      enterprise linux     nahant  release      enterprise linux       bit    nahant  update       suse linux enterprise server              sun solaris        sparc        sparc        x      microsoft windows server          std  edition        std  edition  please refer to the  installation requirements and concepts  chapter of the fast installation guide for further informations  you can download the guide from our download page http   download coremedia com release coremedia     searchengine   
   operating system fast version archive file sun solaris sparc instream     cm searchengine fast    oem sunos zip sun solaris sparc esp       cm searchengine fast      sunos zip sun solaris x   esp       cm searchengine fast      sunos x   zip ibm aix instream     cm searchengine fast    oem aix tar gz hp ux instream     cm searchengine fast    oem hp ux tar gz linux instream     cm searchengine fast    oem linux tar gz linux esp       cm searchengine fast      linux tar gz windows instream     cm searchengine fast    oem win zip windows esp       cm searchengine fast      win zip  
  please read the  installation requirements and concepts  chapter of the fast installation guide before installing the search engine  you can download the guide from our download page  
  error during graphical installation  the coremedia cms installer configures and starts the fast installer to install the search engine  the configuration file named coremediaconfig xml is located in the directory oeminstaller  for fast instream      or fastinstaller  for fast esp         the coremedia cms installer invokes the scripts cminstall sh and cminstall bat resp  to start the fast installer  if the graphical installation fails the following error window appears  
  possible solution   to resolve the error  proceed as follows   open the coremedia cms installer log file named coremediacms installer log  date time  txt file and look at the last lines of log messages to find some errors  if  the log does not help  open the fast installer log file named install log in the directory oeminstaller  for fast instream      or directory fastinstaller  for fast esp        and look at the last log messages  if the file install log does not exist  do the following depending on your os     on unix os  open a shell  change to the directory oeminstaller bin  for fast instream      or fastinstaller coremedia bin  for fast esp        and execute cminstall sh   on windows os for instream      open a command window  change to the directory oeminstaller bin and execute   oeminstaller exe  f     coremediaconfig xml   o  u  windows user name   p  windows user password    where you have to replace the user name and password  this command is invoked in cminstall bat    on windows os for esp        open a command window  change to the directory fastinstaller updates bin and execute  install exe     coremediaconfig xml   o  u  windows user name   p  windows user password    if the command succeeds you can start the search engine  if you get an error message  consult the fast instream oem installer guide  for fast instream      or the fast esp installation guide  for fast esp         maybe you have to re execute the command with different options  you will find a list of possible options in the installer guide    wrong user password combination  if you have installed the search engine with a wrong user password combination on a windows platform  the start will fail  you will see no error message  if you try to start the search engine via the program menu    possible solutions  try to start the search engine in the windows services window  there you can also correct the user name and password for the two fastsearch services  to do this open the service properties and select the login tab   xml getinputcontext not found  during installation of fast you get the error message  der prozedureinsprungpunkt  xml getinputcontext wurde in der dll expat dll nicht gefunden   possible solutions  if you have installed e g  cygwin you will find an existing expat dll file in the windows system   directory  this version of the dll is in conflict with the version delivered with fast instream  rename the existing expat dll file in windows system   and the installation should work  
   field description domain user the name of the windows user to run the coremedia search engine service as  this user must have  log on as service  permissions   only used when installing under windows   enter   user for local users  password the password of the above user  note  that the password will appear on the screen when typing  installpath the destination directory to install the coremedia search engine into  this is the directory searchengine in the destination directory  baseport base port for the range fast will use  from baseport to baseport        spellchecklanguages the languages you want fast to have spellchecking for  defaultspellchecklanguage the default spellchecking language  lemmatizationlanguages the languages used for lemmatization   
    configure the fields and click  next  afterwards  you have to enter a user and password otherwise an error message pops up   next  the following message appears which notifies you that the fast installer which is needed to install the coremedia search engine will be invoked now      
  deinstallation of the coremedia search engine  the coremedia search engine is based on fast and you must use the fast uninstall script for deinstallation  the uninstall script uninstall bat or uninstall sh is located in the installation directory of the coremedia search engine  under windows  you can also use the software administration in the system control panel for deinstallation  
  read the fast operations guide on how to start the search engine in a unix or windows os  if you have configured the search engine with the default ports and invoked the search engine start command  open a web browser with the url http    search engine host  admin       to access the search engine administration pages  for fast esp these pages are password protected  default login is user admin with empty password   select logs from the main menu to see the log entries and possible startup problems  select search view to test if search is available  at the first start this can take from   to    minutes and maybe more depending on the performance of the host machine  if searching on the search view is possible and no errors were logged  you can start the coremedia cms content server or cae feeder and start feeding content    if this does not work  look for error messages in the log  select system overview and system management from the main menu in the administration panel to see the status of each search engine module and server process  each module  except datasource  must be in state responding and each search engine server process must be in state running  if you can t access the administration panel  open the file all log and look for error messages  the file is contained in the directory  search engine dir  var log for fast instream     or  search engine dir  var log syslog for fast esp  
  it is possible to send search requests from custom clients directly to the coremedia search engine using the api of fast  
  you can find a list of supported binary formats in the fast product overview guide  chapter  supported document formats   
  configure additional fields  the search engine feeder supports the configuration of additional fields to be indexed along with the documents  you can search for content in these fields if you add them to the index profile of the coremedia search engine  the index profile specifies the structure of the indexed documents  please refer to the fast configuration guide for more information about index profiles   consider using the coremedia cae feeder if you want to index content beans  see the coremedia content applications developer manual  section  cae feeder   
  the search engine feeder supports one type of additional fields  the xpathfield  a more flexible solution is to develop a custom indexdocumentfilter to add and remove fields programmatically   configure an xpathfield  an xpathfield contains the text of a fragment of an xml property  the fragment is specified with an xpath expression  if you configure such a field in the index profile  you can search for text in that specific field  note  that searching in specific fields is not possible in the coremedia editor and coremedia webeditor but only in custom search applications using coremedia or fast apis   configure additional fields inside the element fields which is inside the element fastindex  the element fields supports multiple xpathfield elements  xpathfields have a required attribute name which is equal to the name of the field in the index profile   each xpathfield has at least one subelement property that specifies the source xml property and a subelement xpath with the expression to select the xml fragment for indexing  the search engine feeder checks for each indexed document and each xpathfield if there is a property subelement whose doctype attribute matches the type of the document and whose name attribute matches the name of a xml property of the document  if so  the xpath expression is used to select a fragment of that property  which is then sent to the coremedia search engine for indexing  the field stays empty for documents without such a property  note  that the order of the property subelements is important  property elements behind a matching one are ignored   the following example configures one additonal field named fragment which contains the plaintext below the first table element of the xml property text of the document type article  note  that namespaces for the xpath expression are configured explicitly    fastindex               fields       xpathfield name  fragment          xpath expression   r div r table            namespace             prefix  r             uri  http   www coremedia com      richtext                xpath         property doctype  article  name  text          xpathfield      fields          fastindex   the following example adds a field with the same name to the index profile  for a description of adding fields to the index profile  see the fast configuration guide    field list           field name  fragment  type  string      field list   configure an indexdocumentfilter  an indexdocumentfilter is an implementation of the interface com coremedia cap server feeder indexdocumentfilter  it can add and remove elements that are sent to the search engine for indexing  please see the api documentation for details    indexdocumentfilters are configured with the element indexdocumentfilter below the element fastindex  the element takes the name of the implementing class as attribute  for example    fastindex               indexdocumentfilter       class  com customer myindexdocumentfilter      fastindex  
  configuration not mandatory  change the index profile if you want to search in specific document properties using coremedia or fast apis  
  by default  search is performed on the full text content of all indexed document properties  extend the index profile of the coremedia search engine with fields for specific document properties if you want to search only in some document properties and do not want to find documents containing the search term in other properties  you can use the coremedia or fast apis to implement search functionality in specific index fields  see the coremedia unified developer manual  section  search service  of the chapter  the content repository  for details  note  that the coremedia editor and coremedia webeditor do not support search in specific document properties   add a field to the index profile of the coremedia search engine for each property to be searched for  see the fast configuration guide for more information about the customization of the index profile   the name of the index field starts with cm followed by the name of the property in lower case  note  that you can not use this feature with properties whose names only differ in case  the following example adds a field for a property headline to the index profile    field list           field name  cmheadline  type  string      field list  
  the administration page shows the current status  statistic information and configuration of the search engine feeder  at the top of the page is a link to start or stop the search engine feeder   furthermore there is a link to show error documents  they represent documents that were not processed successfully by the search engine feeder or the coremedia search engine  the page contains links to manually retry indexing of error documents  if not used  the search engine feeder retries indexing of error documents the next time the document changes   error documents can also be found with a fast query for all documents with the value error in the index field feederstate  the field feederinfo contains an error description   
   attribute value default description maxopen number   the maximum number of open batches  maxprocessed number   the maximum number of batches that can be processed concurrently by fast document processors  this should match the number of available document processors  the default matches a single node installation of fast with one document processor  note that the value must be smaller than the value of the attribute maxopen  maxbytes size in byte         the maximum batch size in byte  maxsize size in documents     the maximum number of documents in a batch   
  this chapter describes  how you can integrate the apache httpd with the coremedia starter kit in order to get short urls in the user s browser  these urls apply for all top level page requests but not for images  css  javascript and the like   
  this section describes operational tasks specific to the integration of fast in the coremedia cms  for general operation and administration  see the documentation of fast  
  create a collection  open the fast administration pages to create a new collection  if the installation uses the default ports  the administration pages are available at http    hostname        admin  click the link create collection on the collection overview page to create a new collection   enter the name of the new collection in the next dialog  in the pipeline configuration dialog  select the pipeline coremedia webcluster   the coremedia pipeline   
  backup  before performing a backup  stop all connected feeding applications such as search engine feeders and cae feeders  see the fast operations guide for backup instructions   reducing the latency of indexing  by default  a change applied to a document appears in the search after     s  as described in the fast operations guide  section  reducing indexing latency   you can reduce this time in the file searchengine etc config data rtsearch webcluster rtsearchrc xml   for fast instream       set the property flushtodiskinterval to a minimum value of       thereby  documents are persisted as fixml after    seconds at the latest  this might lead to a fragmented fixml file containing only a few documents  but this is no problem if you have less than        documents    set the property desiredfreshness to a minimum value of      thereby  the indexer starts indexing after    seconds at the latest   keep in mind  that both values are minimum settings  in the worst case  indexing will start after    seconds  assuming  that the generation of the first index partition also takes    seconds  you are left with a latency of    seconds    for fast esp      set the property latency to the value low   you have to add the latency of the feeder to the fast latency  you can configure the search engine feeder latency which defaults to    seconds in the file properties corem feeder xml using the attribute documentdelay of the element  feeder   
  this instruction does not work for a preview web application with enabled preview based editing  login and the like  it only applies to a delivery environment cae  
  prerequisites  apache httpd needs three optional modules    mod proxy and mod proxy http to forward http requests to the servlet container  mod rewrite to rewrite the urls as requested by the clients into the format required by the servlet container    please refer to the apache modules documentation for further details on these modules   loadmodule proxy module       libexec apache  mod proxy so loadmodule proxy http module  libexec apache  mod proxy http so  by loading these two modules  proxy functionality is made available in the server  but no proxying will occur unless additional directives enable it   the url rewriting module allows for modifying a requests  url before it is being acted upon by the server  the optional module needs to be compiled and loaded into the server   loadmodule rewrite module     libexec apache  mod rewrite so  the module makes url rewriting available to the server  but actual rewriting rules need to be defined per virtual host  and the engine needs to be activated per virtual host   virtual host configuration  the following virtual host declaration is a complete example for a site with the home page url http   coremedia example com   in this example  the servlet container running the starter kit is configured to run on the same host as the web server  on port       the web application has the standard starter kit prefix  starterkit  and the site document for this site has a uri segment of coremedia  
  the rewriteengine on directive enables url rewriting for this virtual host  the first rewriterule creates a mapping for the analytics tracking requests   the   p l   flag for the rewriterules modifies the request so it will be served by the proxy module  instead of as an internal request or a redirect  the  l  denotes that the request should not be further rewritten   configuring the starter kit web application  in order to work behind a rewriting apache httpd as described above  you have to configure the starter kit cae web application to generate appropriate links between different pages  proceed as follows  in web inf spring starterkit starterkit properties make the following changes   set the properties starterkit appendbaseuri and starterkit appendsite to false   starterkit appendbaseuri false starterkit appendsite false  set the starterkit segmentlinkscheme prefix property to an empty string   starterkit segmentlinkscheme prefix   if you have links between different sites within the same starter kit installation  you can map the root segment of the linktarget to an absolute hostname  therefore please add a mapping as described in the web inf spring starterkit starterkit properties file                                                                 site mapping  mapping from a root segment to an absolute    url prefix   example    starterkit site mapping test  http   www test  com   maps  test  to http   www test  com when formatting    cross site links                                                               starterkit site mapping coremedia http   coremedia example com  
  the database configuration specified during the installation is written into multiple configuration files  if you want to change  or fix  the database configuration in the installation you have to change it in the following files  
   file description management properties corem sql properties  properties for the content management server and the workflow server management properties corem workflowserver properties properties for the analytics data aggregator management config objectanalyzer spring proactiveengine properties  properties for the analytics object analyzer management jakarta tomcat webapps analytics web inf spring analytics analyticsdashboard properties  properties for the analytics dashboard management jakarta tomcat webapps starterkit web inf spring analytics overlay properties  properties for in site analytics management config caefeeder spring caefeeder properties  properties for the content management cae feeder delivery properties corem sql properties  properties for the master live content server delivery config caefeeder spring caefeeder properties  properties for the content delivery cae feeder  
  the sql properties file contains example configurations for various database types  you can copy and adapt most these example values  the type of the database is specified in different properties in the various files  
   file property example values sql properties sql store dbproperties   corem oracle  corem postgresql workflowserver properties workflow server managers aggregator database   oracle  postgresql proactiveengine properties jdbc dbname   oracle  postgresql caefeeder properties jdbc dbname   oracle  postgresql analyticsdashboard properties analyticsdashboard db database   oracle  postgresql overlay properties overlay db database   oracle  postgresql  
  the database driver that you specify during installation is copied to multiple directories  if you switch to another database or driver  you have to copy it in the following directories   management lib management jakarta tomcat webapps starterkit web inf lib management jakarta tomcat webapps analytics web inf lib delivery lib 
  the cae feeder sends data to the indexing component of the coremedia search engine  which is based on fast  for more information about fast  see the documentation of fast  the fast product overview guide is a good starting point   the search engine maintains the index and provides search functionality  the index contains documents  which carry unique string identifiers  a search returns the documents that match a given query  the term document in this context refers to a fast document  do not confuse it with coremedia documents from the content server   a fast document consists of several fields that are configured in the index profile of fast  the coremedia search engine comes with a default index profile which can be used for both the search engine feeder of the coremedia content server and for the cae feeder    the fast configuration guide describes how to customize the index profile for your needs  note that some fields of the index profile are required for the operation of the cae feeder  see the comments in the default index profile for a description of required fields   the process of sending data to the search engine is also called feeding the search engine  a piece of data used to add a new or update an existing document is called a feedable  for efficiency reasons  the cae feeder sends batches of multiple feedables to add or update documents and batches of multiple string identifiers to remove documents in the index  the search engine processes these batches asynchronously and notifies the cae feeder with a callback mechanism when a batch is persisted  requests to add  update and remove documents originate from the proactive engine or custom code  for the proactive engine a special receiver called feedingreceiver is registered  which passes feedables and document identifiers to the cae feeder  the use of the proactive engine ensures that the index is kept up to date after changes in the data of the underlying content beans  furthermore the proactive engine keeps track of the current feeding state to continue seamlessly after restarts of the application  the cae feeder sends callbacks about completed requests to the feedingreceiver  which in turn notifies the proactive engine   alternatively to the proactive engine  you can develop a custom client to control the cae feeder with public api   the following figure shows the overall architecture with proactive engine  
  the cae feeder supports string  number  date  xml and binary element values  the search engine extracts and indexes the plain text from xml and binary elements  text extraction is part of the document processing phase which runs before the actual indexing takes place  fast supports text extraction for a large number of binary formats  see the fast product overview guide  chapter  supported document formats  for a list of supported formats    if the search engine or some of its components is unavailable or unable to process indexing requests  the cae feeder retries feeding until it succeeds  this includes reconnecting to a restarted search engine  for indexing errors that were caused by the data in a feedable  an error document is indexed as placeholder for the original document  an example for such an error is a feedable which contains binary data of an unsupported format  the error document replaces the original document  error documents contain the value error in the field feederstate and a description of the error in the field feederinfo  the next successful update or remove of the document removes the error document again  you can search for error documents with the query string feederstate error   note  that there are more possible values for the field feederstate but only the value success denotes a successfully indexed document  a query for successfully indexed documents must include the condition feederstate success  see the comment for the field feederstate in the default index profile or the api documentation of com coremedia cap feeder feedableelement for possible values  
  the searchservice provides full text search capabilities  you can use its methods to quickly find documents based on their current property values and some of their implied properties  e g  document creator    searches are routed through the coremedia content server to the coremedia search engine  the coremedia search engine is a fast installation with coremedia specific adaptations  the query language of the searchservice is defined by fast and explained below  in most cases the search functionality of the searchservice should be sufficient  otherwise you may contact the fast server directly using fast apis  
  the searchservice has the following methods   search methods to perform a search for non archived documents using the simple query language searchfast to perform a generic search with the fast query language  getfastconnectioninfo to get information to contact the fast server using fast apis  
  sort search results  you can use method parameters of the search and searchfast methods to specify the sorting of the returned results  each field with an attribute fullsort  yes  in the index profile of the coremedia search engine can be used for sorting  the search methods take the name of this field and whether sorting should be ascending or descending as parameters and return the results sorted accordingly  sorting is handled by fast which is much more efficient than client side sorting could be  
 configure the assembly mode you want to use in the property httpcache assembly mode in the file web inf spring httpcache httpcache properties   clear the complete cache after changing the assembly mode  
   mode description off disables the http cache assembly functionality  in this case  the  httpcache include  tag acts like the  cm include  tag   embedded enables the embedded assembly mode of the http cache  apache ssi enables the apache ssi assembly mode of the http cache  that is external server side assembly  ahah enables the ahah assembly mode  that is external client side assembly   
  combine load balancing with external http cache assembly  if you combine load balancing with external http cache assembly  e g  ahah   ensure that all fragments of a page are delivered by the same cae node  otherwise inconsistencies might occur due to different states in the single nodes caused by latencies while replication for example   
  the use of the coremedia cms covers a range from sites maintained by a single editor to very large portals edited by many users in different roles  the more users are involved in editing  approving and publishing documents  the more difficult it becomes to coordinate tasks and schedules  computer support can greatly enhance productivity because the users do not have to deal with organizational issues too much    this goal can be achieved by introducing workflows  these workflows do not precisely prescribe how tasks have to be performed  but coordinate and support the timely execution of different tasks by different users with as much flexibility as possible and as necessary  the coremedia workflow has a non restrictive  supportive approach   coremedia users are given access to the right resources at the right time via tasks  in contrast to restrictively controlling users  coremedia workflow focuses on progress of the overall business processes   the coremedia cms is delivered with some standard workflows which control content publication  they are based on the inherent state model of coremedia cms resources  see the user manual  basic knowledge   while the simplest workflow publishes a set of resources immediately  the most complex one ensures that composing the set of resources  approving those resources and the actual publication are executed explicitly by different users    if these workflows do not fit your needs  you can define your own workflows  a workflow basically consists of a set of tasks which are processed in a specific order  usually linear  but also circles and branches are possible  and a set of variables which represent the state of the workflow  there are automated tasks which are processed automatically at their turn  like publishing some resources  and user tasks which have to be handled explicitly by a user  e g  composing a set of resources to be published     the tasks and variables of a workflow are defined in xml  the coremedia cms provides some content related standard actions you can choose from to inspire your tasks  but you can also implement your own actions  you can specify performer policies to prevent or enforce users to process a task   from the technical point of view  processing a task means executing some actions but also changing workflow variables  for user tasks the coremedia editor and the coremedia webeditor support this in a fashion similar to editing the properties of a resource  and just alike  you might want to use special editing components for restrictions or convenience  thus introducing custom workflows usually includes some editor customizing   see the workflow developer manual for details   
  the predefined flop pages report  see screenshot  displays a ranking of the published pages which have been requested least often by visitors during the specified time interval  additionally  coremedia provides a report which displays the flop pages for a given category and all of its subcategories  the later report is called  flop pages per category   
   component options to choose coremedia content server   content management server  single site   no search features  no ldap installation     coremedia workflow server analytics data aggregator coremedia editor  tomcat  select in script installer   automatically selected in ui installer   coremedia unified api java libraries   coremedia content application engine    webapp and plug ins    cae web application template   tracking analytics extension  insite analytics extension will be installed later  coremedia analytics   analytics dashboard  object analyzer  
  the diagram follows a tabular structure    the leftmost column displays the page rank  pages with an identical number of requests will display the same rank   the name column shows the page display name or  if no display name is available  the page technical id  to the right of the name column the number of total absolute requests of the object is shown  additionally  this number is visualized with a horizontal bar displayed behind the name column  the rightmost column indicates the relative proportion of all page requests during the selected time interval for the given site  
  when extending the data aggregator  it may happen that you actually want to create some tables specifically for the data you are importing or for the reports you are trying to generate  traditionally  this is done by providing sql scripts that must be run by the database administrator while a component is installed  however  it is more convenient if a component detects the need for modifications to the database schema automatically  running the necessary statements automatically   you can request an automatic update of the analytics database for your own extension by placing a script file with the file name extension  sql in the directory config dataaggregator sql of the data aggregator installation  this custom database update script consists of a number of batches  each of which consists of a number of sql statements and possibly control statements  such a script might look like this      foobar db extension     c       foobar inc       batch foobar     create table foo  foo varchar           endbatch      batch foobar     create table bar  bar varchar       insert into bar values           endbatch  while lines prefixed with    are generally treated as pure comments  lines starting with a     marker actually indicate the start of a control statement  in this case  they delimit two batches that ensure that the tables foo and bar are properly set up  the keyword batch is followed by three argument  an aspect name  a source version and a target version   aspects group multiple batches that logically belong together and that build upon each other  an aspect for which no batch has ever run is assigned the version    batches normally increase the version number by    in the example the first batch advances the version of aspect foobar from   to   and the seconds batch from   to    the fact that two batches exist reflects the history of the database schema where at some point of time only the table foo was used  but later on the need for table bar became obvious   batches are processed in a sequential fashion  executing only those batches for which the specified source version matches the current version of the specified aspect  after the batch has been executed successfully  the version of the aspect is advanced to the target version and the next batch is processed  the versions of all aspects are stored persistently in the database  so that future runs of the update algorithm can detect that the database schema is already present in the correct version  in the example the old version of the aspect foobar may be either       or   and in any case the new version will be    executing both batches  the second batch  or no batch  respectively   while custom update scripts may refer to more than one aspect  it is generally a good practice to keep the number of aspects as low as possible   updates in one custom update script may not depend on the changes performed by other custom update scripts  this means that you must not refer to one aspect in more than one update script  the update scripts for the standard database schema of coremedia analytics are executed before all other update scripts  coremedia analytics uses the aspect base to manage its version   we will now look at the constructs allowed within a batch definition   statements  the individual statements in a batch must be terminated with a semicolon      empty lines may separate one statement from another  statements may contain placeholders delimited by at signs      before execution such placeholders are converted in a database specific way  often  this allows to write update scripts that abstract from the exact database product used  the following placeholders are predefined  
  clickable drill down  click on an item in the bar chart to open a dashboard view for the selected page  
  clickable drill down  click on an item in the pie chart to show detailed information of the selected item  selectable items are marked with a     sign   
  clickable drill down  click on an item in the bar chart to open a dashboard view for the selected page   
  clickable drill down  click on an item in the pie chart to show detailed information of the selected item  selectable items are marked with a     sign  
   token replacement  long  an sql type that can contain at least signed    bit integers  integer  an sql type that can contain at least signed    bit integers  varchar  an sql type that  when suffixed by a number in parentheses  can contain strings with the given number of characters  timestamp  an sql type that can contain timestamps consisting of a date and a time  preferably with millisecond precision  bit  an sql type that can contain at least the numbers   and    blob  an sql type that can contain binary data  sysdate  an sql expression for the current date and time  addcolumn    an sql fragment that allows to add columns to existing tables in the following way   alter table  tablename   addcolumn   columnname   typename    
  therefore you could rewrite the first statement of the above example   create table foo  foo  varchar         for oracle this will resolve to the modern type varchar  and for other databases to the standard type varchar   additional placeholders can be introduced by the means of loop statements   loops  coremedia analytics encourages the storage of statistics for different time granularities in different tables as described in section  this will speed up table accesses  but it means that many tables with identical structures have to be defined  in order to simplify the creation of such table sets  a loop structure was added to the update script syntax       for interval in hh dh dd wd bd md ww mm ym qq ff yy create table baz  interval      baz  long     eventintervalstart  timestamp  not null    eventcount  long         endfor  the previous example shows how    distinct tables named baz hh  baz dd  and so on are generated with a single statement  note how the replacement token  interval  is used in the sql statements and how it can be mixed with other replacement tokens   the general syntax is that the keyword for is followed by the replacement token  without the delimiting at signs  and the keyword in  before all allowed values are listed  separated by spaces  the replacement token takes on all listed values successively as the statement get reexecuted  it is allowed to specify multiple statements between the for and endfor markers  it is allowed to use nested loops  but this is not normally necessary  all loops must be enclosed in batches   conditions  some database specific statements cannot be obtained by simple token replacement  for these cases  conditional execution of statements is supported in update scripts  note that you normally do not have to worry about conditional execution unless you develop for multiple database products at once  a typical use of a condition looks as follows       if sequences create sequence bazids cache           endif  here the condition used is sequences  which is defined for all databases that support sql sequences  conditions may be negated by prefixing them with an exclamation mark           if  sequences create table maxbazid  maxid  long    insert into maxbazid values          endif  there is no else statement  you must use two ifs instead  boolean expressions other than negation are not supported   the following table lists all conditions and their meaning  
   condition definition sequences whether the database product supports sql sequences  true for oracle  db   postgresql oracle whether an oracle database is used db  whether a db  database is used mssql whether a sql server database is used  
  you may use nested conditions  you may nest conditions and loops  all conditions must be embedded in batches  
  this section describes how to feedback the  top   viewed pages  and similar analytics data to the live web site   the coremedia analytics product provides web site operators  administrators  controllers  managers and content editors  with information like the  top   viewed pages on site s in category c during time interval t   traditionally  this information is provided as so called analytics aggregated data  aad  to administrators  controllers  managers  content editors  and software agents by means of analytics dashboard reports  the reports are role specific  they are rendered as html pages with chart images  as pdf  excel or xml documents    the analytics product encompasses the analytics feedback cae extension which allows report to be integrated and customized for live cae pages  this way  report results like the top    viewed pages of a selected category can be placed in cae delivered pages  it is important here to understand that the report results   given e g  as a sorted list of content beans   will be integrated and can be visualized using custom cae templates  this analytics feedback extension will be described in the first part of this section   an alternative is to read analytics data directly from the analytics database in live caes  the database schema is open and documented in the analytics developer manual  this will be described in the later part of this section   adding analytics reports to the live cae s  the easiest way to integrate analytics feedback data into the web site is by integrating reports into the live cae application  the reports are encapsulated as beans of type analyticsreportdataprovider  each configures an analytics report with report parameters and provides the report results as a list of string keys id or content beans  depending on the report   the latter can be used in the web site templates just like editorial content  the report parameters  time range  rank range  site  category  etc   can be configured in the report data provider bean via spring property settings or via structs  see the cae developer manual for the latter   the report data providers can be added to   injected into content beans to enhance them with analytics report result content   in order to use analytics reports on the live side  the following conditions must be met and steps taken   preliminary  the analytics database should reside on the publication side  i e  the same side as the live caes  this is required since the live caes need to access the analytics database directly  in almost all cases a firewall is set up to inhibit this access direction  from the publication to the production side   if the analytics database does not reside on the publication side  access from the live caes to the analytics database must be allowed       
   product certified version supported version solaris    bit sparc       sparc with installed sunwceuos package  solaris  x         x    sunos      generic i  pc i   pc  opteron  with    bit java   red hat enterprise linux as   red hat enterprise linux as    with    bit java    red hat enterprise linux as    with    bit java  suse linux enterprise server   suse linux enterprise server     with    bit java    suse linux enterprise server     with    bit java  ibm aix    bit powerpc        for    bit  with   bit jdk   from ibm   microsoft windows        server standard edition with latest patches        server standard edition with latest patches  
  the approved java versions for coremedia cms are  product certified version supported version solaris sparc       update                  solaris x            update                aix       update     linux       update                windows       update                 
   product certified version supported version oracle     g r     i    g  with patched jdbc driver   oracle            production     microsoft sql server beginning with standard edition                ibm db           for ibm aix  solaris  linux and windows             for ibm aix  postgresql                  
  coremedia portal server integration product certified version supported version ibm websphere portal server      sap netweaver portal       
  cm editor  cm webdav support  product certified version supported version microsoft windows   xp professional edition  sp   vista  with java   update    only   
  microsoft word for spellchecker   product certified version supported version microsoft word        
  cm webeditor   product certified version supported version internet explorer        with latest patch level on windows xp professional      with  latest patch level on windows xp professional      on vista windows vista  mozilla firefox        with windows xp      with windows vista      with approved linux platforms        with windows xp      with windows vista      with approved linux platforms  
  cm editing services for jsf  differencing   product certified version supported version internet explorer      mozilla firefox          
  in site analytics   product certified version supported version internet explorer      mozilla firefox          
   product certified version supported version tomcat        bea weblogic application server       ibm websphere application server         
  see the figure above for a suitable analytics deployment  the analytics database and the live caes are deployed on the live site  the cae s can thus retrieve the report data from the analytics database  
  the simplest way to add analytics report data to your live cae is by re using reports definitions from the analytics dashboard  throughout this section  the  top viewed pages  report will be used as the example  steps  
  add the analytics feedback add on to your cae application  by selecting this option when installing the cae template  this will add a few jars to the web inf lib directory and a custom configuration directory web inf spring analytics feedback   setup the analytics database configuration in analytics feedback properties  please note that the entries are the same as in the analytics dashboard analyticsdashboard properties and may simply copy them  if necessary copy the database drivers to the cae lib directory  select the report and suitable parameters  time range  rank range  site  category  in the analytics dashboard  in our example  this is the  top viewed pages  report with time range  last    hours   rank range  top     and site  core   please refer to the user manual for existing analytics dashboard reports    lookup the corresponding technical report definition identifier and the values  symbolic names  refer to the analytics developer manual  in our example  the report is defined in  analytics feedback config jar  analytics reportdefinitions xml  its technical identifier is  reportdefinition topviewedpages   we do select as variable values     timerange  value r dbyh  this symbolizes the last    hours   rankrange  top    the top    entries   site  core  the site identified by the symbolic name  core  as given in the analytics database  sitedimension     define and configure a spring bean  scope singleton   the given example is using spring xml schema and not dtd  if you use the spring dtd  replace scope  singleton  with singleton  true    bean name  topviewedpagesreportdataprovider         parent  analyticsreportdataprovider  scope  singleton           the report definition to be used         all standard report definitions are specified in             analytics reportdefinitions xml        property name  reportdefinition               ref  reportdefinition topviewedpages            the variable value settings  maps reportdefinition         variable name to value symbolic name  read the         analytics dev manual  section  state model         variables  for standard variables and         symbolic names         property name  initialvariablevalues        map         entry key  site  value  core           entry key  timerange  value  r dbyh           entry key  rankrange  value  top            map      property     bean       inject the analytics report data provider bean into a given live cae content bean type   in the content bean implementation class  add a property for the analytics data provider  and a business method that accesses the analytics data provider        private analyticsreportdataprovider dynamiccontentprovider      public analyticsreportdataprovider getdynamiccontentprovider            return dynamiccontentprovider          public void setdynamiccontentprovider                          analyticsreportdataprovider                         dynamiccontentprovider        this dynamiccontentprovider   dynamiccontentprovider         public list gettopviews         cache cachefor          l       cache for   minutes                                      if dataviews is configured      return dynamiccontentprovider getbeans             in the spring configuration  inject the analytics data provider        bean name  contentbeanfactory mycontenttype          property name  dynamiccontentprovider              ref  topviewedpagesreportdataprovider      bean         access the content beans returned by the business method in a jsp template     c foreach items    self topviews   var  page      page    page title     c foreach       validate the results  the analytics report in the dashboard and in the cae live site must return the same information    finally  configure a data view that makes sure the report query is not executed on every request  but only executed when the  cachefor  time dependency has expired    dataview appliesto  com customer mycontenttypeimpl      property name  topviews      dataview   you re done  congratulations   the above business method is the simplest possible example  it uses the   getbeans   getter method to obtain the list of content beans  in your business method  use the  getkeys   method to retrieve the raw keys   ids only  the report result field defined by the keyfieldname will be used as the key   id field  the method  getresultmapwithbeans   will return the report data as a list of map  with each representing a result entry  this is useful if you need to access report result fields other than the keys or content beans  e g  the absolute number of views etc  the entries will be enriched  for keys that can be mapped to beans  the bean will be inserted into the result entry under the name given by the beanfieldname   application logic can be used to extend and combine the information delivered by the report  however  further filtering of the list of beans  e g  by content bean type  is difficult if a fixed rank is required  e g  top      
  if you need to run your custom sql queries  the following steps can be taken  note  if the functionality provided by the analyticsreportdataprovider helper classes is sufficient  these steps are not needed  it is recommended to try sql statements with a database tool like sqlsquirrel   explanation  any analytics database report query is determined by its parameters  in order to report e g  on the  top n viewed pages on site s in category c during time interval t   following analytics parameters must be set    the base table name  it determines which analytics database table is used to lookup the core data  the time interval to be used  the time interval to be used determines a  table name suffix and b  the time interval upper bound and lower bound  first  according to the analytics database schema  different tables  determined by their suffix  hold data for different time interval granularities  second  the analytics database requires that timestamps must be given in utc and full hours  additionally  the database table  permanentlyaggregatedbefore  must be queried in order to know until which point in time report data has been acquired   the site  optionally the category  the number of result entries  the projected value to be returned  content bean id   the ordering of result entries  determine the parameter values   choose the base table name  if you want to report on top viewed pages  the base table name will be  pageviews   the analytics database documentation explains what data is held in what base table    select the time interval  the data in the analytics database is pre consolidated  hence no data consolidation should be done in your java code  note that this limits the intervals you can choose from  the following options are available and imply the following parameter values  
   chosen time interval parameter  base table name suffix parameter  lowerbound parameter  upperbound last full hour  technically  one timeslot in the  hh table      hour  which started at  lowerbound      hh   alignment slot    resolution hour     span hour   last full hour before or at the value indicated by permanently aggregated  before  pab    alignment      hour   lowerbound   in utc   lowerbound      hour   slot resolution    last    hours   technically  one timeslot in the  dh table      hour   which started at  lowerbound     last    hours   technically  one timeslot in the  dh table      hour   which started at  lowerbound     last full hour before or at pab    day  alignment      day   lowerbound   in utc   lowerbound      hour   slot resolution    last   days   technically  one timeslot in the  wd table      day  which started at  lowerbound      wd   alignment slot    resolution   day     span   days    recent midnight before or at pab   alignment      days   lowerbound   in utc   lowerbound      day   slot resolution   
    select the site  determine the site s technical identifier  integer  in the analytics database the projected value  typically the number of events that occurred in the given interval  for viewed pages  this is typically the column  eventcount  the ordering of values  expressed by the sql order by clause  sorting order desc  top values first   the number of result entries is expressed by the sql limit clause  since the data is pre consolidated  no result entries need to be merged and hence the limit can be expressed in sql  
  create the sql statement  example  top    viewed pages of site  core com  in last    hours  step    write the sql statement   select stats pageid as x value  stats eventcount as y           odim objectid as objectid  from pagedimension dim  objectdimension odim  pageviews dh stats where   stats site     siteid  and   eventintervalstart      lowerbound  and   eventintervalstart     upperbound  and   dim id   stats pageid and dim pageobject   odim id order by y  desc limit     explanation of parameters and return values     time of execution                       met  berlin  paris  rome  parameter   siteid    in the example  siteid is    since   is the site core com s id in table sitedimension parameter   upperbound   in the example  this is                            utc time  parameter   lowerbound   in the example  this is                            utc time  result column  x value   technical page id result column  objectid  the content bean id result column  y    number of event counts per object  need not be consolidated since the data is pre consolidated in the database   step    test the sql statement using a tool like sqlsquirrel  step    wrap the sql statement in a content bean type  create a content type that allows to position a  top viewed pages  list layout element on the page  create a content bean java class for this document type with a getter method  public list contentbean  gettopviews          executes the sql statement  fetches    the ids and creates contentbeans from them    jdbctemplate     createbeansfor       cacheutil cachefor       return beans           configure the content bean template in your contentbeans xml with a jdbc connection to your analytics database      bean id  contentbeanfactory topviewedpages  singleton  false     class   com customer topviewedpagesimpl      property name  jdbctemplate  ref  jdbctemplate      bean     verify and test your setup  finally  configure a data view that makes sure the sql statement is not executed on every request  but only executed when the  cachefor  time dependency has expired    dataview appliesto  com customer topviewedpagesimpl      property name  topviews      dataview   you re done  
  if access from the live side to the analytics database is administratively prohibited  you can still publish analytics information to the live side  to do so  create a workflow that regularly retrieves the selected reports using the xml rest interfaces  stores the xml data in some documents  xml property  and publishes these documents  the matching content beans for this document type then parse the xml and return the reported objects as a list of content beans  as in the previous solution  you will not need time dependencies or sql connection configuration  because the caching and replication features of the cms take care of these issues    you will still want to use data views  as for all other content types  
  in coremedia cms it is possible to define multiple document type definitions in separate files  see section   at startup time the content server merges these files to create the complete document type hierarchy  you can use these files to alter an existing document type definition without changing the base definition file in three ways   add new document types  see section   inherit from existing document types  see section   attach new properties to existing document type definitions   the first two ways are described in section and section  in this section you will learn how to add properties to an existing document type   in order to add properties to an existing document type a  doctypeaspect  element has been introduced  that allows to attach properties to a document type specified by the  targettype attribute  there can be many doctypeaspects attaching properties to the same target doctype  but you have to take care that no property name clashes occur  the relationship between target and aspect is therefore of the cardinality   n  as a limitation to ensure consistent behavior in subtypes  it is neither allowed to alter existing or inherited properties nor attach properties that are already defined in subtypes of the targettype  to define doctypeaspects the definition file must be valid against the coremedia doctypes      xsd schema  
  example  an abstract document type cmmedia is defined in file a  cmmedia is an abstract document type and is the root of a media document type hierarchy     doctype abstract  true  name  cmmedia  parent  cmteasable        linklistproperty name  master  max     linktype  cmmedia        override  true         xmlproperty name  caption        grammar  coremedia richtext             stringproperty name  alt  length            doctype    the document type cmmedia is extended with a stringproperty named copyright in file b  if you want to change a document type via doctypeaspect  you have to import the document type before  using the  importdoctype  element  because of the doctypeaspect semantics the copyright property is inherited by all subtypes of cmmedia without changing their definitions     importdoctype name  cmmedia      doctypeaspect targettype  cmmedia        stringproperty name  copyright  length            doctypeaspect    
  please note  the analytics dashboard will only start displaying information after an hour shift  dashboard time resolution  and two minutes  the configured session timeout   you should then see your clicks in the performance  top viewed pages and entry and exit pages in the dashboard view  when selecting last    hours as time interval   
  setting custom the base table names and time column names  while in general the base table name  
  adding custom base table names and time column names placeholders  one base table name and the implicit time column name  which is mapped to the column name  eventintervalstart   work for most cases  it may happen that you want to have more base table names  and have all suffixed with the respective time model suffix   that would be the case if you needed to access pageviews    and totalviews    within the same query   also  when using more than one base table  the time column name may become ambiguous  since more than one table will have an eventintervalstart column   you can set more than one base table names   using the the query property  basetablenamemappings    and have more than one time interval condition clause   using the property  timecolumnnames   example    bean parent     query       property name  basetablenamemappings        map         entry key  singleviews  value  pageviews           entry key  totalviews  value  totalviews          map      property      property name  timecolumnnames        list         value sv eventintervalstart  value         value tv eventintervalstart  value        list      property                sql statement        property name  sqlstatement       value  select                  from  singleviews  sv   totalviews  tv  cond          the two base table name placeholders singleviews and totalviews will be replaced with pageviews    and totalviews     additionally  two time interval conditions will be generated  for columns sv eventintervalstart and tv eventintervalstart  note that the default basetablename and timecolumnnames placeholder values are not available when you specify custom values  
  at the bottom of the overlay you can find a link to the single page dashboard  this provides a number of long term reports for the current page  for example a graph describing the number of page views during the previous week  a description of the single page dashboard can be found in section  
  plugging in new functionality by simply dropping jar   spring  and jsp files into the starter kit web application and document type definition files into the content server is the main goal of the pluggable architecture of the coremedia starter kit  with this approach  the starter kit web application can be extended without modifying existing content bean classes and existing document type definition files  using the new modular configuration of the content application engine several plug ins can be combined independently    to achieve this goal  the following functionality is used or has been added on server  and web application side    content server  properties can be attached to document types without using inheritance and without modifying existing files  a new xml tag is introduced to define an attachment called doctypeaspect  see coremedia cms      administration manual for details    starter kit web application  properties attached to a document type by a single plug in are represented by means of a separate content bean  the so called aspect content bean  there can be many aspect content beans from different plug in s extending one content bean  the so called aspect aggregator   aspects and their aggregator can access each other through the plug in api  see starter kit api javadoc for details      
  in coremedia cms it is possible to define multiple document type definitions in separate files  see the administration manual   at startup time the content server merges these files to create the complete document type hierarchy  you can use these files to alter an existing document type definition without changing the base definition file in three ways   add new document types  inherit from existing document types  attach new properties to existing document type definitions   these procedures are described in the administration and operation manual  in this section you will learn how to attach properties to an existing document type  the advantage of this approach is the possibility to introduce a new property in the middle of an existing type hierarchy and let all subtypes inherit this new property  because an extendable doctype has no idea of any property that will be attached to it  there is only a navigation from the attachment to the doctype  at startup time a doctype is merged with its attachments and the content server updates the persistence schema    at runtime it will look like there has never been more than one definition file  it is even possible to access the new property from within the content bean instance of the extended type but as this type does not know about its new property there has to be another content bean written that represents the attachment and a navigation added to access its values   because the attachment is not a doctype it is called a doctypeaspect  there can be many doctypeaspects attaching properties to the same target doctype  but the developer has to take care of name clashes  the relationship between document type and aspect is therefore of the cardinality   n  as a limitation to ensure consistent behavior in subtypes  it is neither allowed to alter existing or inherited properties nor attach properties that are already defined in subtypes of the targettype  aspects also have to define an index attribute for every property they want to be indexed  aspects can not rely on the default index attribute value from the targettype  to define doctypeaspects the definition file must be valid against the coremedia doctypes      xsd schema    
  unlike the merging of doctypeaspects with their target doctypes at startup time  contentbean and aspect classes as well as their instances are always separated from each other  due to distinct plug in identifiers  name clashes between different plug in providers are avoided  for every two plug ins with the same identifier it is therefore not allowed to attach aspects to the same contentbean   while all contentbeans implement aspectaggregator via cmobject all aspects implement the aspect interface or respectively extend abstractaspectcontentbean  by doing that  aspects are provided with a back link to their aggregator  the aggregating contentbean itself  provides the navigation methods getaspectbyname and getaspects   
  example  this example  builds on the example from section   it transfers the property attachment for the cmmedia document type into the servlet container context  in the figure below   you see the well known pattern of base classes and their interfaces  corresponding to the doctypeaspect there is the interface cmmediaaspect on the plug in side declaring the access method to the attached stringproperty  copyright   on the plug in host side there is the cmmedia interface declaring only the getters to the properties its document type was designed for   
  the spring configuration of a plug in consist of three parts   a plug in bean  a bean defining the plug in s content bean factory  aspect content bean definitions    at the latter one the plug in has to register all of its aspect beans to their corresponding aggregator beans  the plug in bean serves as a marker bean in the sense  that the plug in registry is able to find all plug ins and register them with all aggregator beans at initialization time  the registration of aspects is similar to the registration of content beans with the difference  that it must use the plug in specific content bean factory  this is necessary to have a link from the aggregating content bean to its aspects    similar to content beans  aspect content beans declare an inheritance relationship to the common aspect content bean abstractaspectcontentbean starterkit  this inheritance ensures the backlink navigation  since this bean defines a property where the starter kit content bean factory for all content beans is injected    
  at rendering time you can call the aspect access methods of its corresponding content bean from all templates  by including the aspect content bean the normal template dispatching of the cae is applied  within the template of the aspect it is then possible to access all attached properties   example   c foreach var  aspect  items    self aspects           cm include self    aspect   view  asdetail          c foreach      with the pattern shown above all aspects that are registered for the current content bean  self  are included  the following pattern instead  would only include aspects from a specific plug in  but only if an aspect exist    c if test    not empty self aspectbyname acme          cm include self    self aspectbyname acme          c if    
  the coremedia analytics engine extends an existing coremedia content management environment and content delivery environment with capabilities to analyze visitor activity on produced sites and to report on the management environment s status  it targets business  editorial and technical audience likewise  business reports provide cms operating figures and help identifying trends  while technical reports help identifying bottlenecks in the management and delivery environments   out of the box  the analytics engine offers a set of customizable site activity reports on page impressions  link usage  visits  entries  exits  users  searches  referrals  and the content repository state   the analytics engine consists of the analytics dashboard for long term  drillable compilations of site visitor activity and repository status overviews and in site analytics for fine grained and prompt compilations of current site visitor activity  the analytics dashboard is itself organized into two parts  one set of reports dealing with entire sites and one set of reports considering only a single page  these three distinct forms of statistics provide users with a broad overview of site activities  they will be described in the following sections  
  the single page dashboard is a collection of reports that refer to statistics of a single page  in contrast to in site analytics  which will be described in section  the information is not displayed in the context of the actual page  but in a format similar to the other reports of the analytics dashboard as described in section   open the single page dashboard  the single page dashboard for a certain page can be opened through a link in the page overlay of in site analytics as described in section   content of the single page dashboard  the standard single page dashboard is organized like the dashboard described in section  but it is not organized into multiple views that are reachable through tabs  it contains five different reports on the following statistics   page impressions  page impressions as a percentage of the site s page impressions  the percentage of page views of the page that are entries  the percentage of page views of the page that are exits  the top external referrers for the page   for each of the reports it is possible to open a detail report for the same page  the detail report allows to select the time range for which the report is shown  
  logging out  in order to log out from the dashboard and to terminate your session  use the  logout  link in the upper right corner next the user s login name   opening the analyzed page  using the symbol  eye   you can open the page for which reports are shown in a separate window  this option is only available if configured appropriately by the administrator   open the dashboard  using the symbol  pie chart   you can open the full analytics dashboard in a separate window   report descriptions  in the following the predefined reports of the single page dashboard will be described in detail  
  most company websites and intranets are produced in several languages for several countries  the coremedia cms      starter kit provides support for this use case   when considering  multi language support   one has to be aware that  in many cases  producing the same content in several languages does not suffice  most websites are truly internationalized  meaning that for each country  the content is not simply translated  but the whole site is adapted to that country s market  in the following  we use the term locale for a combination of language and country   documents are not only produced once and then translated  but after changes to the original document  the translation has to be updated accordingly  in contrast to natural language content that has to be translated  language independent meta data is often reused in internationalized variants of the site  in many cases  a site starts with a single locale and decides to produce internationalized variants later  then  translation and maintenance of the original content are parallel tasks  within the editorial staff  there are in most cases dedicated positions   roles for creation and translation of content and responsibilities  influencing access rights  not only by resort  but also by locale   the starter kit features built in support for documents in different locales and models localized variants of the same content explicitly  the following concepts are used by the starter kit   every localizable document can be assigned a locale  not only text documents  but also structural documents like navigation are localizable  thus  localization becomes internationalization  since structural documents change the way the website presents its content for to a target market  if a localizable document is derived from another localized document  e g  through translation  a link can be set from the localized variant to the original document  making it the other document s master  a master document and its derived localized variants form a group of documents that represent the same content for different locales  each version of a localized variant can refer to a specific version of its master  so that changes to the master document can be integrated into the localized variants   
  this report shows the development of the number of page impressions for a fixed page over time  
  the starter kit internationalization approach is backed with specific document types  all localized content types inherit from the content type cmlocalized  shown in figure  
  interactive report drill down  this report allows you to set the following parameters   the time interval parameter allows a user to select the time interval  see section for a description of this parameter and for screenshots  the time resolution parameter determines the discretization of the time axis  the values available as valid time resolutions will change according to the time interval selected  this parameter  too is describe in section  
  this report shows the development of the percentage of page impressions for a fixed page relative to all page impressions of the site  
  locale property  each localizable document has a locale  as defined by java util locale  that consists of language  country  and variants  in the starter kit  locales are represented by three string properties  not for example as a linklist to some language symbol document  for the following reasons   it is expected  that a document has at most one locale or one  locale pattern   where the latter would be a language without a country  or language and country without variants  a linklist would be better suited if we needed multiple locales  since there are no string lists and strings have a maximum length  the set of locales is finite and well known  there is no need to create documents and localizations of the locales themselves   if multi site publishing is used  the symbol documents would even have to be copied for every base folder  string is far more efficient compared to linking to a locale document that contains the actual locale string  join   this is true on reading and on update  look ups on locales are expected to happen very frequently    queries regarding the locale are only possible when it is contained directly in the document itself  for queries  splitting the locale into language  country and variant s  is important  so that you can search e g  for all documents where lang  de  easily     this leads to the following properties of cmlocalized    stringproperty name  lang  length        stringproperty name  country  length        stringproperty name  variants  length         the length of the variants property      should be sufficient for typical usage   link to the master document  a localized document that is a variant of another localized document can link to this master document  the link to the master document needs special treatment  since it should be a versioned link  normally  links between documents in the coremedia cms do not have information on the version of the linked document  but in case of the master link  for each localized variant you need to know exactly from which version of the master it was derived  this version information can be used to compute a list of documents which have been translated formerly and where the master document has changed  i e  the localized document s master version is lower than the latest master document version  these localized documents may require an update then  too   since there is no dedicated property type for versioned links in the coremedia cms  the starter kit models the link to the master document as a pair of link list and integer property    linklistproperty name  master  linktype   same   max        intproperty name  masterversion     max     means that there is at most one master link  note that in the document type model  simple links can only be defined as link lists of maximum cardinality one  and that this cardinality is not enforced by the server  but only through coremedia editor customization   the   same   link type means that the linked document is of exactly the same type as the linking one  as this cannot be expressed in the document type definition language  the master linklistproperty needs to be overridden in every subtype of cmlocalized  with this solution it is still possible to link other subtypes as master but it reduces possible inconsistencies by not allowing parent types to be linked as master   please note  if you create document types that are subtypes of cmlocalized  either directly or indirectly by extending another subtype  you should also define and therefore override the master linklistproperty and define a linktype equal to your new document type name    doctype name  mynewdoctype  parent  cmlocalized    abstract  false      linklistproperty name  master  linktype  mynewdoctype      max     override  true            doctype    note that modeling the localization relation as a link does not imply any constraints on the folder in which the different localized variant documents are placed  the advantage is that the folder structure can be chosen to ease defining access rights for different roles  e g  an editor can create and write master documents  but only read derived variants  while a translator only reads master documents  but creates and writes derived variants   the direction of the link from derived document to master was chosen  so that the master can be published while the derived variant is already created  but not yet ready for publication  note that if the master would reference the variants  coremedia cms would not allow publishing the master without publishing all variants  because it checks for dead links  performance is not an issue  as the coremedia cms handles reverse navigation of links very efficiently and is able to cache them   
  in the cae  document types are transformed to java classes  so that all documents are accessible as typed content beans  the document type cmlocalized results in the interface com coremedia starterkit common contentbeans base cmlocalized  the interface has the following methods for the direct access to document properties     import java util locale   public interface cmlocalized     locale getlocale      cmlocalized getmaster      int getmasterversion               since cae content beans always represent the current document state  the getmaster   method cannot return the exact corresponding master document version  however  this is usually what you want when using localized variants for the website  only for the editor  the exact version matters  still  the version number can be retrieved separately by calling getmasterversion    this can be used for example to check whether a localized document is up to date    public boolean isuptodate cmlocalized localized      contentbean masterbean    contentbean localized getmaster      if  masterbean  null        content master   masterbean getcontent        version latestmasterversion   master ischeckedin           master getcheckedinversion     master getcheckedoutversion        int latestmasterversionid         idhelper parseversionid latestmasterversion getid        return latestmasterversionid    localized getmasterversion          return true      for more details on how to handle localization and versioning  see section  the cmlocalized content bean contains two more methods to conveniently access localized variants    import java util locale  import java util map  import java util map   public interface cmlocalized           collection   extends cmlocalized  getlocalizations      map locale   extends cmlocalized  getvariantsbylocale        the method getlocalizations   returns a collection of all cmlocalized content beans that represent the same content as the cmlocalized itself  that is a master and all its localized variants  if this cmlocalized is a master  the document itself and all its variants are returned  if this cmlocalized has a master  the master and all its variants are returned  more formally  compute the set of all localizations of a given document d as follows  let localizations       add all documents to localizations for which  unified api query syntax with meta variables  type  d type   id  d  or  isinproduction and master references  d   let d   d master  if d    null and d isinproduction  go to      return localizations      the algorithm takes care of the case that you model multiple levels of master relations  e g  one locale independent master  empty locale   localized variants for en and de  and localized variants of master en for locales en us and en gb and localized variants of master de for locales de de and de at   in this scenario  the method getlocalizations   returns all five documents  
  if you want to query and modify master and variant versions  you can use the interface com coremedia starterkit common localization  localizedcontentservice and its default implementation defaultlocalizedcontentservice  in the same package   in contrast to the content bean api  this interface is based directly on unified api objects such as content  version  and their super type contentobject  since  content  beans are not suited to handle document versions  the advantage is that you can retrieve the exact version of a master or a variant  and that there are convenience methods to query whether a variant is up to date and to create and update a localized variant  the service hides the integer masterversion property and the calls to idhelper  see the isuptodate   example in section   since many methods come in two flavors  content and version  java   generics have been used to keep the interface concise  for example  the method signature     co extends contentobject  co getmaster co variant    means   the master of a content is a content  and the master of a version is a version   for further details on method semantics  see the javadoc of localizedcontentservice and the starter kit api javadoc  
  the main goal of the starter kit s internationalization solution is to provide the web application programmer with a data model and an api to implement internationalization websites  additionally  there is support for the editor in the coremedia webeditor  there are several property editors that are configured in the webeditor s config bsh file  in this section  these property editors are described shortly from a developer s perspective  for a complete description of how the editor uses these features and creates internationalized content  please consult section  in the coremedia editor  all editing and browsing required for localized content editing has to be done manually  using the generic features for link lists  integer entry  and queries   locale entry property editor  the starter kit webeditor has a preconfigured property editor for the locale property of a cmlocalized document  this property editor unites the three string properties for language  country  and variants into one drop down selection box  where any locale predefined in java can be chosen  all locales are shown in their localization in the language chosen by the editor   master link property editor  the master and masterversion property of a cmlocalized document is edited through a single link property editor combined with a version chooser  the version chooser only allows selecting a checked in version of the master document  when the master link property editor is selected  the master document version can be opened in a document view or in an explorer view   note that it should be best practice to only use published versions of the master document  or at least approved versions  since intermediate versions may be destroyed during publication  to avoid dead version links  we recommend that you switch off destroying intermediate versions  see coremedia cms administration manual    localized variants navigation  to navigate all available localized variants of the current document  there is a new menu item in the  navigation  menu of the explorer window and the document window  as for all navigation menu items  a query result window is opened  it shows the set of all localized variants to which the current document belongs  
  starting and initializing the content management environment comprises the following steps  start the content management server  start the workflow server  start the analytics object analyzer  upload and start the analytics data aggregator workflow and if you need a publication workflow  upload the appropriate workflow  start the content management cae feeder  import the starter kit content  start the tomcat servlet container      start the content management server  unix use the command line to start the server with  management bin cm contentserver start  windows if you want to run the server as a service you have to install it as a service before the first start with  management bin cm contentserver install   start the server as a service with  management bin cm contentserver start or start the server not as a service with  management bin cm contentserver run       start the workflow server  unix use the command line to start the workflow server with  management bin cm workflowserver start  windows if you want to run the server as a service you have to install it as a service before the first start with  management bin cm workflowserver install start the server as a service with  management bin cm workflowserver start or start the server not as a service with  management bin cm workflowserver run  do not shutdown the workflow server until the aggregatormanager  an component of the data aggregator working in the workflow server  and the workflow server are completely started  see the log file management var logs workflowserver log for  workflow server  server  started  main     otherwise your database schema will be corrupted        start the analytics object analyzer  unix use the command line to start the object analyzer with  management bin cm objectanalyzer start  windows if you want to run the object analyzer as a service you have to install it as a service before the first start with  management bin cm objectanalyzer install start the object analyzer as a service with  management bin cm objectanalyzer start or start the object analyzer not as a service with  management bin cm objectanalyzer run     upload and start the analytics data aggregator workflow  upload the workflow with  management bin cm dataaggregator  u admin  p admin init  start the workflow with  management bin cm dataaggregator  u admin  p admin start  in case you need a publication workflow you can upload it now with  management bin upload  u admin  p admin  n  nameofworkflow   see the administrator manual for details      start the content management cae feeder  unix use the command line to start the cae feeder with  management bin cm caefeeder start  windows if you want to run the cae feeder as a service you have to install it as a service before the first start with  management bin cm caefeeder install   start the cae feeder as a service with  management bin cm caefeeder start or start the cae feeder not as a service with  management bin cm caefeeder run       import the starter kit content  the starter kit is delivered with example content  that demonstrates the features of the starter kit  you find the content in the directory management content  import the content with the serverimport tool from the command line   management bin cm serverimport  u admin  p admin  r management content      start the tomcat servlet container  unix use the command line to start tomcat with the web applications  management jakarta tomcat bin cm httpd start  windows if you want to run tomcat as a service you have to install it as a service before the first start with  management jakarta tomcat bin cm httpd install start tomcat as a service with  management jakarta tomcat bin cm httpd start or start tomcat not as a service with  management jakarta tomcat bin cm httpd run  you can access the web applications using the following urls   
   component url preview cae http   localhost      starterkit servlet segment english tutorial webeditor http   localhost      editor analytics dashboard http   localhost      analytics dashboard view  
  starting the content delivery environment comprises the following steps  start the master live server  publish all resources below the  sites folder  start the content delivery cae feeder  start the tomcat servlet container      start and initialize the master live server  unix use the command line to start the server with  delivery bin cm contentserver start  windows if you want to run the server as a service you have to install it as a service before the first start with  delivery bin cm contentserver install   start the server as a service with  delivery bin cm contentserver start or start the server not as a service with  delivery bin cm contentserver run       publish resources  publish all resources below the folder  sites of the content management server using the coremedia editor tool  start the coremedia editor with  management bin cm editor  or open the editor via java web start using a browser   http    content management server host   content management server port  coremedia editor login as admin admin  start a query for all documents below  sites  select all documents  approve all documents   publish all documents        start the content delivery cae feeder  unix use the command line to start the cae feeder with  delivery bin cm caefeeder start  windows if you want to run the cae feeder as a service you have to install it as a service before the first start with  management bin cm caefeeder install   start the cae feeder as a service with  delivery bin cm caefeeder start or start the cae feeder not as a service with  delivery bin cm caefeeder run       start the tomcat servlet container  unix use the command line to start tomcat with the web applications  delivery jakarta tomcat bin cm httpd start  windows if you want to run tomcat as a service you have to install it as a service before the first start with  delivery jakarta tomcat bin cm httpd install start tomcat as a service with  delivery jakarta tomcat bin cm httpd start or start tomcat not as a service with  delivery jakarta tomcat bin cm httpd run  you can access the cae web application using the following urls   http   localhost      starterkit servlet segment english tutorial http   localhost      starterkit servlet segment deutsches tutorial    
  this report shows the development of the percentage of entries for a given page  entries are page views that are the first page view in a session  for the percentage  the number of entries is divided by the total number of page views of the given page during the same time span   a value of      indicates that the page is always viewed as the first page of a session and that visitors never navigate to this page from other pages of the site  a value of    indicates that the page is only viewed as a successor page and that sessions always start on other pages  
  this report shows the development of the percentage of exits for a given page  exits are page views that are the first page view in a session  for the percentage  the number of exits is divided by the total number of page views of the given page during the same time span   a value of      indicates that sessions that reach this page are never continued by viewing additional pages  a value of    indicates that sessions that reach this page are always continued  for example by clicking on link on this page  
  this report shows those external pages or websites that most frequently led to an entry on a given page  additional  the percentage of entries relative to all entries on the given page is shown  
  make sure to open the preview and live caes in different browser instances to avoid lost sessions in the preview cae  this would occur because the session cookie does not contain the port  
  interactive report drill down  this report allows you to set the following parameters   the number of entries parameter determines the number of top entries to display   the time interval parameter allows a user to select the time interval  see section for a description of this parameter and for screenshots  
  figure shows the standard document types of the starter kit  the document types drawn in blue  belong to the base document types  shown in figure  they are used by the standard document types in order to use the functionality of the starter kit  cmmedia drawn in grey is a special case  because it belongs to the base document types but is extended by the standard document types with the copyright property  
  this section describes the ready to go sample jsps of the starter kit  in order to fully benefit from the chapter you should be familiar with the following topics   coremedia cae concepts of content beans and view dispatching  the starter kit doctypes    the starter kit focuses on typical websites with hierarchical navigation structures which are viewed with the well established browsers  that s what the starter kit jsps are designed for    however  the starter kit reveals the full flexibility of the cae  so if you want to support other user agents like mobile devices or even an output format other than html in a later project phase  it is still a good idea to start over with the starter kit  you do not lose any options  it is just not subject of this section   page   layout   content   context  think of a typical web site  a single page usually consists of the actual content placed in the center  surrounded by some decoration or context  e g  the company logo on top  a navigation tree on the left  advertising on the right and some legal links in the footer  this requirement raises two questions   how to implement such a layout with html and css  how to model the relation between content and context  
  controllers handle requests and parse the requested url into model and view  link schemes create a url for a linked model and view  typically  there are corresponding controller and link scheme implementations for different model types  i e the controller can parse the url which was formatted by the corresponding link scheme  controller implementations define the accepted urls while link schemes define the formatted urls in general  accepted and formatted urls are the same   in fact these urls may differ  for example if incoming urls were rewritten by an apache webserver  see section    the following table summarizes the corresponding link schemes and controllers of the starter kit as defined in framework spring starterkit linkschemes xml and framework spring starterkit controllers xml  respectively  see the javadoc of the respective classes for further details  
  content blobs  except cmlinkable blobs      linkscheme contentblobextensionlinkscheme controller contentblobextensioncontroller url     contentblob contentid contentname propertyname ext example starterkit servlet contentblob      big logo data jpg for a css background image description similar to the default cae contentbloblinkscheme and  viewcontroller but adds content name and an extension derived from the blob s mime type     cmlinkable blobs     linkscheme linkableblobextensionlinkscheme controller linkableblobextensioncontroller url     linkableblob rootsegment contentid propertyname linkablesegment  propertyname   ext example  starterkit servlet linkableblob core      thumbnail irchannel thumbnail jpg for a thumbnail image of cmarticle description adds the segment of the root navigation of this cmlinkable  or its content id if not set  to the url  the controller validates that the cmlinkable of the requested blob is below the requested root navigation  if set  the segment property of the cmlinkable is used to create a nice file name  e g  for download   if the cmlinkable has multiple blob properties  the property name is added to the file name  too  the extension is derived from the blob s mime type   cmabstractcode     linkscheme codelinkscheme controller codecontroller url     code rootsegment contentid contentname ext example  starterkit servlet code core      style css for css cmcss document description adds the segment of the root navigation of this cmlinkable  or its content id if not set  to the url  the controller validates that the cmlinkable of the requested blob is below the requested root navigation  the content name is appended  additionally to the id  for better readability  e g  for css debugging  the extension is derived from the mime type of the concrete cmabstractcode implementation   cmlinkable  cmsite and page     linkscheme segmentlinkscheme controller segmentviewcontroller url     segment rootsegment  channel segment     channelnsegment   contentid linkablesegment ext  example  starterkit servlet segment core press pressreleases      deloitte html for a cmarticle in the cmnavigation pressreleases  starterkit servlet segment core investor relations  for a cmnavigation below the root navigation core description formats urls from the segments of the cmnavigations in the navigation path  or their content ids if not set  up to the root navigation  if the requested cmlinkable is not itself a cmnavigation  its content id and   if set   its segment are appended  too  the controller validates that the navigation path is valid for the requested cmlinkable  no extension is used for cmnavigation  otherwise the default extension is html  it is possible to configure different extensions based on the requested view using com coremedia starterkit cae web viewuriextensions  see the javadoc and the default configuration in custom contentbeans base xml for details  the linkscheme can format links for page  cmlinkable  and cmsite beans  for the latter  the link is the same as for cmnavigation bean returned by cmsite getroot   

  although html and css are open standards  it is difficult to write pages which look the same on all relevant browsers  in order to provide a proven solution for this problem  the starter kit sample sites use yaml for the layout    yaml  yet another multicolumn layout  http   www yaml de en home html  is an  x html css framework which provides a flexible html css page layout structure proven to work with most browsers  up to three columns can be arranged according to your needs  even  subcolumns   i e  columns within a column  are possible and are used for two column teaser lists in the starter kit example   in the starter kit css files are maintained as ordinary coremedia cms documents of type cmcss and cmimage for images  these files are located in the  sites css  folder  the substructure corresponds to the project structure suggested in the yaml documentation  when starting with your own layout  you should copy at least the folder  sites css css  the original yaml css documents should never be edited  but only imported  the starter kit sample content contains the current yaml style sheets  and you can easily adopt the style sheets of later yaml versions with the css importer  see css importer for details  which is also part of the starter kit   a yaml style sheet always consists of a browser independent part and an internet explorer patch part  to use the yaml examples contained in the content repository  you have to link both corresponding parts or insert a link in the browser independent part s  include  link list that refers to its patch part  so that you can include just the browser independent part   example   in your root channel document  add links to the following  cascading style sheet  documents in the  css  property    sites css examples    layouts styling css  layout  col faux columns css  sites css examples    layouts styling css patches  patch  col faux columns css  the field  ieexpression  in the cmcss documents automatically takes care of patch csss only being applied in internet explorer  note that the flag only works when a css is linked in a css property  not when the css is imported by another css using  import with an internal link    please refer to the yaml documentation or book for details about its css and xhtml structure and how to create custom designs based on yaml   reuse of existing stylesheets  of course  the starter kit does not limit you to yaml   if you already have a set of stylesheets which have been carefully designed to match your corporate identity  you can reuse them with the starter kit   simply use the css importer to import them into cmcss documents and include them in templates just like our yaml stylesheets   however  you will have to spend some more effort on writing templates  because the starter kit sample templates are closely related to yaml  i e  css class names   
  the starter kit works with separate coremedia documents to part content  cmhascontext  and context  cmcontext   and you can render any content in any context  the general concepts behind this approach are explained in section   the controller passes a page object to the view dispatcher  so page generation starts over with a page jsp  possibly with a specified view  the page implementation determines the content and the appropriate context from the request url and provides getters to make them available in the jsps  
  there are three main page jsp files to start with   page  renders ordinary content   page assitemap  renders the content s navigation context as a partial sitemap   page assearchresult  renders a search result which is not backed by a content bean but executes a query with the search terms provided in the url parameter  q     these pages are only necessary to match the view dispatcher naming conventions  they all delegate to page yaml  passing their view as request attribute  mainview   page yaml provides the  html  frame with the yaml class attributes and includes page yamlheader  page yamlmain and page yamlfooter to render the subsections  these yaml section jsp files render further yaml annotated structures  especially page yamlmain creates the three column layout  and finally include the content  or navigation specific jsp files which work on ordinary content beans   normally the content bean backed jsp files should not need to know about their context  however  in case you need any page data even in those very depths  you can access the page object by the request attribute cmpage  segmentviewcontroller attr name page    there are two page jsp files not yet mentioned  page head jsp renders the  head  data like keywords  css inclusions and the like  it is not a top level structural template  but it needs data from both  content and navigation beans and is therefore implemented as a page jsp  page asdata jsp is another entry jsp file which however does not delegate to page yaml like the others  but ignores the context and only includes the content with view  asdata   a usecase for page asdata is the rendering of a cmhtml document  cmhtml jsp   the html blob of the document is rendered in an  iframe   and for the src attribute we need a url  and thus a top level entry jsp  which serves exactly the html blob from the document without any wrapping generated by the standard page mechanism   views  the jsp files which are backed by ordinary content beans follow the usual cae naming pattern  beaninterface view jsp  which is supported by the view dispatcher  for the view part the starter kit introduces some more detailed naming conventions    jsp files without a view name  e g  cmarticle jsp  render their objects full sized and detailed  there are jsps for nearly each concrete document type from the starterkit standard doctypes declaration    asteaser  jsps render a small view of their content bean  omitting the details allows for a generic jsp cmteasable asteaser jsp which renders only properties of the abstract cmteasable interface  there are special asteaser jsps only for cmdownload and cmexternallink which are rendered yet more compact than default teasers     aslink  jsps render a link to their particular content  there is a generic cmlinkable aslink jsp and some special variants  cmteasable aslink jsp renders a link with the cmteasable s own linktext but a reference to its target instead of itself  this makes a difference for standalone teasers  cmteaser documents   cmdownload aslink jsp references the particular blob property instead of the document itself  cmexternallink aslink jsp renders an ordinary  a  instead of an analytics link  links to the specified url and sets the  blank target value to open in a new tab or window    asfooter    asheader  and  astopnavigation  are invoked by page yamlfooter and page yamlheader  respectively  since our sample page jsps only render the navigation as header and footer  there are only implementations for cmchannel  if you change the page templates and put content into the header or footer  you will have to write additional jsps    asfooteritem  and  asheaderitem  are invoked from the cmchannel templates to render content in the yaml footer or header section  the default cmlinkable templates simply delegate to the  aslink  templates    there are some more templates which are not explained  here in detail  just notice the naming convention   assomething  views render the object as a whole somehow  link  teaser  detailed        and they are often applicable for different purposes  other views like  submenu  or  sitemaprecursive  are really special and probably not useful if you change or write new jsps    viewtypes  the entry template and thus the overall layout of a page is determined by the url parameter  view   standard coremedia cae   however  you might want certain contexts or contents to be rendered in a particular manner  the starter kit sample sites make use of cmaction documents to represent sitemaps and searches  cmaction documents are quite rare in comparison to ordinary content  and rendering them  e g  as a search field  does not make use of a lot of properties in many cases   so you don t want to declare an extra doctype for each kind of action   instead  you can simply use the cmaction content type  attach a so called viewtype to each action document and provide a specialized jsp for the viewtype    the starter kit enhances the default template selection mechanism of the coremedia cae and considers the viewtypes to choose specialized templates   the page implementation determines the content and channel from the url  and since channels are hierarchical  the channel has a root channel  each of these three documents can have a viewtype assignment  the viewdispatcher uses the viewtypes to construct the filename of the potential template  the viewtype triplet is appended to the view name in square brackets  with the root  channel  and content viewtypes separated by commas  if a template should apply to more than one combination of viewtypes  it is possible to replace the viewtype name with     as a wildcard   esp  the wildcard matches if the root  channel or content has no viewtype   the viewtypes are searched in the following order      means that the document has a viewtype   
   site channel content viewtype specification       view root channel content        view root channel        view root   content        view root        view   channel content        view   channel        view     content        view  
  note that it is not allowed to use trailing wildcards  like view root       such jsps will be ignored completely    the type resolution mechanism remains unmodified  if there is no view for the type itself  the search is repeated for the object s super type  in particular  this means that any matching view for the type itself is preferred over any other view in the object s super type  for example  for a request for an article with viewtypes   example sports formula     the template  cmarticle asteaser   sports  jsp  will be used  even if a less specific type but more specific view  cmteasable asteaser example sports formula   jsp  exists   css  styling a document with css is a highly project specific matter  and in projects most jsps will be customized anyway  therefore the templates are not cluttered with class attributes at each and every tag but only class attributes are set where they are needed for the sample layout   all class and id values we introduced for the starter kit sample layout start with the prefix  sk    unfortunately yaml uses no obvious naming scheme  the starter kit preserves these names however  in order to enable an easy update to later versions of the yaml style sheets  so you will encounter ids and class values which look somewhat arbitrary in the jsps  the following image shows the page structure  
  in a starter kit based application css files are stored as ordinary content  document type cmcss  and can be attached to any cmlinkable document  since your whole site should appear in a consistent layout  you will usually attach css data only to channels  not to single documents like cmarticles  the cmchannel content bean features a fallback logic to the parent channel if no css is set explicitly  so in simple cases  like the sample content  it is sufficient to set the style sheets in the root channel  only   in order to be able to update yaml css later  you should not change the yaml stylesheets directly  rather  write your own stylesheets  or import your existing ci compliant set of stylesheets   and include or copy the yaml stylesheets as you need them   
  the starter kit pre configures and extends almost all cms components for typical scenarios  where the cms offers generic and flexible frameworks  the starter kit provides concrete solutions  in fig  you see an overview of how the starter kit plugs into various cms components  
  coremedia cms allows you to define a custom model of your website structure and url format  while this is very flexible  the starter kit provides an out of the box solution for website structure  navigation and urls that fulfills typical requirements   a concrete structure model is needed to provide the following basic website features   navigation  e g  by menu or expanding navigation tree  breadcrumb  telling you where in the website you are  sitemap  giving an overview of the overall site structure  search engine friendly and readable urls  reflecting the document s path and breadcrumb   the website structure is usually regarded to consist of hierarchical pages  where each page has an url and each url leads to a page  the relevant part of the url for the website structure is the url path  it is composed of slash separated segments  which fits the fact that pages are hierarchical  
  for example  the url http   code google com edu ajax index html has the path  edu ajax index html  composed of the segments edu  ajax  and index html  the url structure implies  but does not require   that the following urls also lead to pages  in fact  google meets this assumption    http   code google com edu ajax   http   code google com edu   and http   code google com   the home page or root page of that domain   in the example  there are multiple urls leading to the same page  the version with and without index html  while this is a trivial example  there are more advanced use cases where the segments act as categories and an article can be placed into multiple categories  this allows content to be reused or syndicated under different urls in different contexts  
  to create a common understanding of the starter kit  this section explains the basic concepts to editors as well as to application developers  
  the starter kit provides a solution for the website structure model that is a good compromise between flexibility and complexity  it features hierarchical pages described by segment based urls  as described above   single documents can be reused in different contexts  inside the same site or shared between different sites  however  you can not reuse sub structures of the site  imagine for example you run a news site and publish an article about the new formula   champion  initially you want the article to appear in the  sports  and in the  people  categories  two weeks later you do not want to promote the article any longer  it should not be reachable via a link from the  sports  page  but it should still be reachable as a search result and then be presented in the  sports  context  as you can see even in this simple example  content and context should not be bundled too tightly if you want to keep editorial effort low  
  the starter kit supports multiple websites or short sites  note that starter kit sites are not the same as the  sites  in coremedia multi site publishing  see the administration manual for details   multi site publishing allows different sites using the same content management server to be published to different master live servers  but does not allow content sharing between sites  starter kit sites may be placed in the same or in different multi site publishing sites  for any two starter kit sites  you can decide whether it is more important that the master live servers are separated  and thus content has to be separated   or that content can be shared between sites  which means you have to publish to the same live server    for any two sites  means that this is not a global decision  but you can group all starter kit sites that share content and still publish these groups to different live servers  hier w re eine grafik nett  
  the starter kit assumes that a site consists of a set of hierarchical pages that form a tree  as said above  each page on a site has a dedicated url  where the sub page adds a segment to the parent page s url  the building blocks of pages are navigation nodes and leaf nodes  both types of nodes specify a segment  each leaf node consists of a document that must allow the parent navigation node as its navigation context   like pages  navigation nodes of one site also form a tree  i e  each navigation node has exactly one or no parent navigation node  if it has a parent  it is called the  direct  child of that navigation node  if it has no parent  is it called a root navigation and represents the home page or entry page of a starter kit site   as an example of how starter kit urls are structured  consider the following imaginary demo content url  
  http   acme com      starterkit servlet    segment english tutorial manage create html  the structure behind this example url is  scheme   domain  port web app context spring servlet path    segment controller path navigation path  considering the website structure  the interesting part of the url is the navigation path  bold   it starts with the segment of a root navigation and each following segment must be the segment of a navigation node or leaf node that is a direct child of the current navigation or the segment of a document that has the current navigation as one of its contexts   if the last segment leads to a document and not to a navigation node  the extension   html  is appended   in the example  there must be a root navigation node with the segment english tutorial  which has a child navigation node with the segment manage  there must be a document whose contexts contain that child navigation node and whose segment is create  since the path leads to a document    html  is appended  the navigation editor that comes with the starter kit webeditor resembles this structure  the left pane show the navigation tree  while the upper right pane shows all documents that have the selected navigation tree node as one of their contexts  for a user documentation of the navigation editor  see section xxx  if you are a developer and interested in details about how these concepts are reflected in the document type model and apis  see section   the idea of a document specifying allowed contexts enables content reuse or content sharing  while navigation nodes  channels  cannot be reused  the starter kit allows other documents to specify several contexts in which they can be reused  while each navigation node forms exactly one page  a document forms a page for each of its contexts  
  since there are typically many documents  only the pages based on navigation nodes are shown in the navigation menu and the sitemap  to enforce showing document pages in the menu  the starter kit allows setting documents as direct children of navigation nodes  strictly speaking  this is a third way to create a page  since such a document need not have any context  but the parent navigation node takes over the role of its context  however  the starter kit content editor still requires every document to have at least one navigation context  
  hyperlinks or simply links refer from one web page to another  in coremedia cms  there are internal links between documents  when shown on a web page  internal links become normal hyperlinks   as explained in the previous section  pages and documents are not the same thing in the starter kit  a document needs a navigation context to become a page  thus  when an internal link to a document is to be shown as a hyperlink on a web page  a navigation context has to be given or derived  this is usually done automatically by the template or the business logic code that computes a page from the referring page and the referred document  the starter kit provides a default strategy to use the nearest page  where the nearest navigation node that is one of the contexts of the referred document is chosen to determine the page  the nearest node is one that has the minimum distance in the current navigation tree  the nearest page strategy also takes into account the locale of the current page and the referred document and determines a  best fit   for details on the lookup algorithm  see section  
  the website structure of the starter kit emerges from a linked document structure  not from a hierarchical folder structure  in order to enable easy navigation and editing of the content  the starter kit enhances the webeditor with the navigation explorer  
  the starter kit solution for internationalized content has been explained in section  this section gives details that are important from a developer s point of view  
  there are different scenarios of internationalizing your website with the starter kit  in a simple case  only particular documents have to be available in additional languages  then  you can simply create localized variants of these particular documents as described in section user manual  create localized variant  in figure  you can see this situation  there is an american article that has an american navigation channel as its navigation context  the american article is also the  master  for translations  there is a french translation  which shares the same navigation channel and links the american article as its master object  on the website  the american navigation context always leads to an american page  surrounding  the article  but the article itself can be switched between the american and the french version  
  the navigation explorer shows the following information       the navigation tree  here the navigation structure is defined by channel documents  all documents contained in the navigation children property of a channel document are shown inside the node of this document  you can see in     that the manage channel document contains the basics channel  content edit channel and navigation channel documents in the  navigation children  property and that these three documents are shown as subnodes in the navigation tree       in this view  you see all documents that have the document selected in the navigation tree as a linked document in their  navigation contexts  property       in the detail view  you see the document selected in the navigation tree in detail  
  if you want to create a new navigation channel in an existing site  proceed as follows  open the navigation explorer  select the parent channel or site to create the new channel in and click the toolbar button  
  a dialog box opens up where you can define the new navigation channel  
    in the left pane  select the folder where the channel should be created  enter a name for the new channel into the name field   if you want to create a  new folder for the channel below the folder selected in the left pane  then check the sub folder check box   the new channel document is created and opens up     set a title and a uri segment for the new channel  the uri segement is used to create urls for the channel and its children  see section  it must not contain the     character         
  the starter kit offers a lot of interesting features which are helpful in your project  this chapter gives a short overview of the things you can expect   easy navigation  the starter kit supports a hierarchical navigation structure based on the concept of  channels   sitemaps and breadcrumb trails are also easy to create and embed into the site pages    
  the coremedia starter kit handles navigation by means of linked documents  in this chapter  you can learn how to create the navigational structure of your website using the navigation explorer  
  the coremedia starter kit comes with predefined content document types  for standard use cases  the content can be shared between different sites and channels  
  in section conceptweb sitestructureandnavigation  you find a general introduction of how you model the web site structure with the starter kit  this section provides developer related details on this topic  
  navigation documents are modeled by the document type cmnavigation  since there may be navigation documents that should not take over the role of a context  the starter kit does not offer any  but such document types could be added   the context role is modeled by a subtype of cmnavigation called cmcontext  the document type for documents that have a context is called cmhascontext  the super type of cmnavigation and cmhascontext is called cmlinkable and defines the segment string property  all documents  subtypes  of that cmnavigation type create one or more pages and thus can be referred  linked  to by a url   the tree relation between navigation nodes is stored by the link list children in cmnavigation  the relation is stored as a link list from parent to children so that the order of children can be specified  each cmnavigation must only be used once in the resulting tree  validators and other editor extensions  see below  have to ensure the  forest  constraint on this relation   the page concept cannot be found in the document type model explicitly  it only manifests in the contexts link list  there are two reasons for storing the relation from document to context as a link list in the document  cmhascontext   the context can be published without all documents in that context having to be published  and the document can specify a preferred context because the link list provides an order  the first link in the link list represents the default context    figure xxx shows an uml diagram of the relevant part of the document type model  
  if you want to create a new article document in an existing channel  proceed as follows  open the navigation explorer select the parent channel for the new article and click the toolbar button    a dialog box opens up where you can define the article  
    in the left pane  select the folder where the article should be created  enter a name for the new article into the name field  if you want to create a new folder for the article below the folder selected in the left pane  then check the sub folder check box   the article document opens up   
  now  you can add additional information  such as text or images  to your new article   note  that this article is till now no content of the navigation channel you have selected before  that is  it will not be shown on the website in the context of the navigation channel  the new article only has a link to the navigation channel marking it as its  navigation context   if the article should appear as content of the channel  you have to link to the article from the contentlist property of the channel document   
  the concepts and the document type model are reflected by a corresponding content bean api  typically  in the cae  each document type is mapped to a content bean interface  implemented by a content bean class  see the content application developer manual for details   and document properties are mapped to getter methods  while this is a good starting point for the content bean api  the starter kit does not stop at a one to one mapping  to release some restrictions of the document type model  the starter kit content beans use additional java interfaces not manifested in document types  they are also tailored for usage by cae views implemented as jsp templates   page  the main difference between the document types and the content bean interfaces is that there is an additional interface page  as mentioned above  a starter kit page is not reflected as a document type  but of course  it needs a java api  the relevant part of the page interface for web site structure   navigation is that a page consists of a navigation node and an optional content document  and that pages are hierarchical  i e  have  at most  one parent page   page page getparent    cmnavigation getnavigation    cmlinkable getcontent     as described in the  concepts  section  a starter kit page must have a navigation  getnavigation    and may have a content document  the method getcontent   is not an exact match of this optional property  but returns the navigation if no content document has been used  not null   consistently  to create a page consisting of a navigation node only  you have to use  pageimpl getinstance navigation navigation   you can create a page object from any combination of cmnavigation and cmlinkable  but you can only format or request urls for a page where at least one of the following conditions holds  navigation   content content contexts contains navigation navigation children contains content  condition   describes an overview page  described by a navigation only   condition   is a cmhascontext content that has the given navigation as one of its contexts  i e  a usage of content document in an allowed navigation context   condition   is for the rather rare case that you want to use an article  or any other linkable that is not a cmnavigation  in the navigation tree  although the condition also matches when content is a child navigation  pages should not be created using  parent navigation  child navigation   since each navigation node has one unique parent  there is no need to specify the parent explicitly and the page should be created using  child navigation  child navigation    page getparent   returns the parent page of this page  which is defined as follows    if navigation is a root navigation  the page does not have a parent page  null     else  if navigation   content  i e  is an overview page   the parent page is based on the navigation s parent navigation    else  the parent page consists of the navigation   as you can see  a parent page is always defined by a navigation node without the optional document  this is obvious  as the optional document leads to a leaf page   cmlinkable  interface cmlinkable string getsegment    list   extends cmnavigation  getparentnavigations    list   extends cmcontext  getcontexts      a cmlinkable in the document type model only provides the segment of that linkable  in the content bean api  however  two additional relations can be accessed   parentnavigations is the reverse relation of cmnavigation children  plus  for cmhascontext  all contexts are also regarded as parent navigations  in other words  getparentnavigations   returns all navigation nodes that can appear as predecessors in a url  this is for example checked when parsing an incoming request    in the document type model  contexts are only defined for documents of type cmhascontext  the content bean api pulls up the corresponding method getcontexts   to cmlinkable  where cmnavigation getcontexts   simply returns an empty list  this is convenient if you have to handle polymorphic collections of cmnavigation and cmhascontext   cmnavigation  interface cmnavigation extends cmlinkable list   extends cmlinkable  getchildren    list   extends cmlinkable  getvisiblechildren    collection   extends cmlinkable  getlinkables    boolean ishidden    boolean ishiddeninsitemap    cmlinkable getlinkablebysegment string segment   list   extends cmnavigation  getnavigationpathlist    boolean isparentnavigationof cmnavigation navigation   boolean isroot    cmnavigation getrootnavigation    cmnavigation getparentnavigation     the java interface for the document type cmnavigation provides accessors for the properties children  hidden  and hiddeninsitemap  all other methods add functionality and need some more explanation   getvisiblechildren   simply filters the list of all child navigation nodes returned by getchildren   to the ones which are not hidden  ishidden    false   this method is for example used by templates rendering the navigation menu   the method getlinkables   returns all cmlinkables for which the following condition holds     the cmlinkable is in production  not deleted  and     the cmlinkable has this cmnavigation as one of its contexts or   the cmlinkable is contained in this cmnavigation s children    getlinkablebysegment   selects from the list returned by getlinkables   the one that has the given segment or null  in a consistent content  the result of this method is unique   getnavigationpathlist   walks up the parent navigation relation  starting at this cmnavigation  until the root navigation is reached and returns the resulting list of nodes  note that while the return type of the methods says that cmlinkables are returned  all but the last item in the list must be of type cmnavigation in order to have children or be a context  this method is for example used by templates that render a breadcrumb   getparentnavigation   is the reverse relation of children regarding navigation nodes  since a navigation node has a unique parent  a single node or null is returned  if the parent navigation is null  isroot   returns true   you can use x isparentnavigationof y  to check whether x equals y getparentnavigation      finally  getrootnavigation   returns the first element of getnavigationpathlist    for the case that the calling cmnavigation is a root navigation already  the object itself is returned   cmcontext  interface cmcontext extends cmnavigation  as in the document type model  the java interface cmcontext acts mainly as a target type for cmhascontext getcontexts     cmhascontext  interface cmhascontext extends cmlinkable list   extends cmcontext  getcontexts     the document type cmhascontext stores a list of contexts  since the accessor for contexts has already been defined in the java interface cmlinkable  the interface cmhascontext does not add any navigation related method  but only re defines the semantics of getcontexts   to return the contexts stored in the corresponding linklist property   content bean implementation classes  all content bean implementation classes     base     impl  are part of the starter kit public api  too  the only reason we made these classes public api is to allow you extending them whenever you add a custom document type to the hierarchy  note that it is not possible to change the inheritance hierarchy of existing starter kit document types  since this would lead to changes in the content bean interfaces  in this case use the starter kit plug in api as described in sections xxx   if you really have to go beyond adding functionality  i e  have to replace functionality of the starter kit content beans  the only possibility is to wrap all relevant starter kit content beans by your own  adapted interfaces and implementation classes  and replace the starter kit contentbeans   xml with your own configuration  
  if you want to create a new site  you have to use the webeditor or the coremedia editor  proceed as follows  open the editor  in the folders section select the folder  sites  and press the  toolbar button   a dialog box opens up      enter the name of the new site and press create   in the explorer window  the newly created folder is already selected     click the  toolbar button in order to create a new channel document   a new dialog box opens up     select  channel  in the type combo box and enter a name for the channel document in the name field below and click create   a document window opens up  showing the empty channel document  the title property is already initialized with the name of the channel document  the most important properties are language  segment and title  language defines the language  title defines the name shown in the website navigation and segment defines the specific part of the url      enter at least a language and title  or leave the predefined title   if you leave the segment field empty  the content of the title field will be used  click the check in button and close the document window  select the newly created channel document in the explorer window and click   this copies the document to the clipboard  you will need it later  click  the  toolbar button in order to create a new document  select  site indicator  in the type combo box and enter a name for the document in the name field  click create   a document window opens up  showing the empty  site indicator  document   
  the coremedia starter kit supports internationalization of its content using a language property and links between different language versions of the same content  
    in the  site indicator  document window  select the value of the root channel field  that reads       and click  in the toolbar   the channel document is inserted into the root channel field      click check in and close the window   now  you can open the navigation explorer with window navigation explorer and you will see your new site as a root node in the navigation tree   
  the  channel  document is the most important document for your website structure  
  the properties of the document have the following meaning    property description language the language of the channel  master object the master object of the channel in respect of the language  that is  the current channel is a localized variant of the master object  associated javascripts java script files that are associated with the channel and that are used on the website  associated css css files that are associated with the channel and that are used on the website  favorite icon the icon  shown in the address field of the browser  keywords  viewtype  contextsettings  url segment a segment of the url used for this channel  linktext text shown in links to this channel  navigation children all elements that are shown in the navigation of this channel  hidden this channel is hidden in navigation and sitemap hidden in sitemap this channel is hidden the sitemap title the title of the channel  shown in the navigation and the channel page itself  channel picture  contentlist the content of the channel  that is shown on the web page of this channel  teaser list the teasers of the channel that are shown at the right side of the page  header objects content that is shown in the header part of the page  footer objects content that is shown in the footer part of the page   
  as described in more detail in section  the coremedia starter kit contains a plug in api enabling the extension of the base application with additional functionality  one such plug in is the  user feedback plug in   which demonstrates some basic functionality of the coremedia social software in the context of the starter kit web application   in particular  the plug in adds to the starter kit application the possibility for end users to login  rate articles and submit comments  it extends the default templates with the necessary controls to submit ratings and comments and to display approved comments and average ratings  
  if you have a website in one language and you want to create a variant of this site in another language or another locale  proceed as follows   a starter kit site should always reside below a dedicated folder  consider for example the english tutorial of the example content  open the webeditor and select the main folder of the website you want to copy  then click  in the toolbar to copy the content to the clipboard  select the root folder   sites  in the example  and click  in the toolbar   this creates a  deep copy  of the folder  that is all content below the folder is copied and all links between documents below the folder are correctly translated into internal links between documents of the new  copied site       

    adapt the copied channel document right below the new site folder to the new language   set the language property to the new locale  in the example that would be  french   all child navigations and documents put into their context inherit this locale if their own locale has not been set explicitly  change the url segment property to a unique name   french tutorial  would be consistent with the example naming     you have to adapt all copied documents you want to use to the new language  start a query for all documents below the new site folder that are of type cmlocalized and have  the property language set to  en    
    change the property setting to your new language  here  french   in order to connect the localized variant of the starter kit site with the master site  you have to set the master object property of all channel and cmlocalized documents to their corresponding documents in the master website    the  manage channel  channel document of the new french site for example  has to link to the corresponding  manage channel  document below the  deutsches tutorial manage channels  folder   
  at this point you should create the log directories analyticslog incomplete and analyticslog complete in the jakarta tomcat directory  if you have selected the tracking analytics extension previously   if multiple web applications in the same web application container use the tracking analytics extension  create different directories for each application and configure the application appropriately as described in section  
    now  the actual translation can take place  all properties of copied documents that contain localized text have to be translated  note  that you can also remove a child navigation from the localized variant of a navigation node or remove a navigation context from a localized variant of a document  if the corresponding page should not be available in the new locale  of course  you can also add market specific pages to the localized web site  
  if you want to create a version of an existing document  the master  for a different language  you have two possibilities to link this document   link it as a localized variant to the navigation context of the master  link it to the appropriate navigation context of a localized version of the website    in both cases you can start the same  open the webeditor and select the document from which you want to create a variant  then click  in the toolbar to copy the content to the clipboard  select the folder  where you want to place the new document and click   in the toolbar   if you place the copied document into the same folder as the master  the system automatically creates a document with the name  copy of  olddocumentname     
 change the property language to the new language of the document  if you want to add the new document to a localized variant of the website you have to change the navigation contexts  property to the value of the appropriate channel document in the localized variant  otherwise you can leave it as it is  if you want to create a variant of the document in the same website  you have to change the url segement  property to a new value   translate the content of the document into the new language   now  you are done  
  this chapter gives a brief introduction of the installation and start of the coremedia starter kit  for a list of  the supported systems and a comprehensive description of configuration details please refer to the administration and operation manual  
  a report definition specifies the following administrative properties and models  follow the  performance  report definition in the framework configuration file analytics reportdefinitions xml in cap analytics config jar as an example    a report definition bean id  spring bean definition id   defined in the enclosing bean tag   the id used in dashboard view definitions to refer to a report definition  by convention the bean definition id has the name structure  reportdefinition name  a report name   a name which identifies a report definition in dashboard views required roles   roles of which the user is required to assume one in order to view the report a view definition   parameters controlling the report rendering  a report state model   the high level report model defining variables  data model and queries   after having copied and renamed an existing report definition  you should first adjust the report definition s id and name  next  you should define the report definition s state model and its mapping to a technical data model  explained in the next section   after that  you will define the report view rendering  you will localize variable values  the report sentence and explanation  finally you will define the report s required roles and deploy the newly created report definition to the dashboard   
  this chapter describes some specific configuration tasks for deploying the cae to ibm websphere   configuring ibm websphere application server for usage with editing services for jsf  editing services for jsf is the basis for several components of coremedia cms   advanced query editor bean query editor differencing starter kit  if you use these components with ibm websphere application server  you have to do the following configuration   before packaging you web application as   war please follow the basic procedures regarding jsf according to http   www   ibm com support docview wss uid swg            remove jsf   jar from web inf lib of your web application remove jtidy jar and xmlrpc jar  using these can lead to various xml parsing problems  also remove jstl jar as websphere provides it s own copy  remove jmxri jar and mx j  jar create a directory   was install root  optionallibraries sun jsf lib on the websphere machine copy jsf impl jar and jsf api jar to that directory   then create the   war and deploy it to your ibm websphere application server   to be able to use the jsf libraries as shared library please go to websphere s administrative console and select  environment shared libraries new add the following classpath    was install root  optionallibraries sun jsf lib jsf impl jar   was install root  optionallibraries sun jsf lib jsf api jar and enter a name  i e   sun jsf   now add the shared jsf libraries to the deployed web application  applications enterprise applications your webapp select shared library references  add the library  sun jsf  to both application and module  exit the dialogue with ok   now adapt the applications classloader  select applications enterprise applications  your webapp  class loading and update detection choose  classes loaded with application class loaders first   select the applications enterprise applications  your webapp  manage modules click on your web application s module    choose  classes loaded with application class loaders first      configuring the cae to use websphere s orb  ibm advises not to instantiate your own orb  but instead use the one provided by the application server    add the following to the file      web inf spring cae mbeans xml     customize replace bean  connection  property  otherparameters      map       entry key  orb  value ref  wsorb        map    customize replace    bean id  wsorb   class  org springframework jndi jndiobjectfactorybean      property name  jndiname  value  java comp orb       property name  expectedtype  value  org omg corba orb      bean   
  the starter kit separates content from structure  therefore you can use content documents in different channels and sites without copying and moving it  in order to use an article in different channels proceed as follows  open the navigation explorer and select the article you want to reuse  click  in the toolbar to copy the document to the clipboard  select the channel document in which you want to reuse the article  click the check out button of the document  select the contentlist property of the channel document and click  in the toolbar   the article document is inserted into the field and you are done  the content will be shown in the new context   
  you have to distinguish between the first server start after installation and all later starts   first cm server start  before you start the cm server for the first time  make sure that the document type definition file   xyz  doctypes xml  can be found at the location configured with the parameter cap server documenttypes in the file capserver properties  normally this file is placed in the directory config contentserver doctypes  you may point this parameter to multiple comma separated paths  which may contain ant style wildcards  if you want to use separate table spaces for blob data  you have to adapt the  dbname  properties file of your database before the first start of the content server  see section for details   
  permalink  when clicking the permalink icon  a box shows up containing a permalink for the current report  the url in the permalink box points to the report  
  in addition  the starter kit supports the editor with the navigation explorer  a webeditor window that reflects the structure of the website  see section    internationalization  the starter kit supports internationalization through the separation of content and structure of a website  therefore  different versions of a website may not only differ in language but also in structure  the system is able to keep track of changes in variants of a document  supporting the translation workflow   simple  search optimized urls  the starter kit supports easy  human readable and search machine optimized urls   
    if you operate a coremedia analytics engine  select tracking analytics extension when installing a delivery cae and insite analytics extension when installing a preview cae  click  next   
  integration with analytics  preview based editing and search engine  the starter kit has been integrated with analytics  preview based editing and the coremedia search engine  thus supporting analysis of the website usage  easy editing directly in the preview of the website and full text search for the editor and user of the website out of the box   user feedback plug in  the starter kit can be extended with the user feedback plug in that adds features of the coremedia social software extension to the starter kit  end users can login  rate articles and submit comments   multi site support  one starter kit installation can support the maintenance of a number of different  independent websites  all with their own navigation structures  additionally  it is also possible to directly share content between multiple websites   or just to form hyperlinks between different websites and their content  each site can have its own layout  its own css definitions and its own javascript libraries  starter kit sites can also of course be output to different   including entirely separate   master live servers via the multi site publishing features of coremedia cms  access by editing staff to these sites and their content is managed  by coremedia rights management    example content  the starter kit comes with example content that demonstrates the features of the starter kit  the content is self explanatory and allows you to easily explore all features of the website  
  it is important to use an individual content bean factory for each plug in to ensure that they can be accessed through the plug in bean s id or name   example   bean id  standard   class  com coremedia starterkit cae plugin plugin         property name  aspectcontentbeanfactory  ref  standardfactory         bean      bean id  standardfactory   class  com coremedia objectserver beans springcontentbeanfactory         bean name  standardfactory cmmedia            parent  abstractaspectcontentbean starterkit            class  com coremedia starterkit cae contentbeans standard               cmmediaaspectimpl          scope  prototype      
  installation  installing the user feedback plug in is as simple as extracting the sse archive and copy the plug in files to the starter kit web application directory  the following steps should lead you through the process of installing  additional information may be found in the readme txt provided in the root folder of the plugin zip   prerequisites    a working installation of the starter kit web application  typically  you will add the user feedback plug in to both the content management and the delivery web applications    a database schema for the sse repository exists  the default user name and password used in the configuration is  sk  sse    installation   extract the sse archive coremedia sse  version  zip to a directory of your choice    copy the contents of the extracted directory  sk userfeedback plugin to the web application s root directory  starterkit  this will add the plug in classes  additional libraries and customized jsp templates to the  starterkit web application  note  some starter kit jsp templates may be replaced during this process and some jar files may already be present in your starter kit installation    as the user feedback plug in requires database access  copy the appropriate jdbc driver to the web application s  web inf lib directory    deploy the extracted sse management views web application  sse editor to a servlet container  install the sse management views only on the content management side  consider using a separate servlet container instance for the management views  instead of installing it along with the starter kit web application    optional  in order to add user comments to the search engine index  it will be necessary to add the sse feeder extensions to the standard cae feeder  which may be installed as part of the starter kit   the process of installing the sse feeder extensions and configuring the cae feeder for this scenario is described in the  coremedia       social software extension  manual    remove the directory jakarta tomcat work from your starterkit installation if it exists  this guarantees that the changes made by the user feedback plug in are compiled properly   
  installation time configuration via configuration files  the user feedback plug in contains the standard sse configuration files in  web inf spring sse  and  web inf spring sse flows  plug in specific configuration files reside in  web inf spring userfeedback plugin  use the files for the following configuration   web inf spring sse sse properties configure the sse repository database connection parameters   web inf spring sse flows sse flows properties configure the sse repository database connection parameters  you can also choose to remove the recommendation engine from the web application by removing  web inf lib coremedia sse recommend jar and  web inf spring sse flows    see the social software extension manual for details   web inf spring userfeedback plugin dispatcher servlet userfeedback pbe properties a plug in specific action is added to the pbe menu in  web inf spring userfeedback plugin dispatcher servlet userfeedback pbe actions xml  it provides a direct link from an article to the sse management views to support the approval of comments  set property sse editor approve pbe url to the url of your sse management views installation  configure the  sse editor web application according to the description in the social software extension manual  basically  this includes configuration of the database connection parameters in  web inf spring sse sse properties    
  run time configuration via context settings  you can enable disable user feedback features provided by the plug in  ratings and comments  per site  per channel  and or per article by setting the corresponding contextsettings property in the cmsite  cmchannel  or cmarticle documents   the default installation enables user feedback features for the  socialize  channels of the german and english sites  this is achieved by adding a  structproperty name  userfeedback   element containing a  struct  with a  booleanproperty name  enabled   to the contextsettings property of the corresponding cmchannel documents  the  booleanproperty  value may be true or false to activate the user feedback plug in or disable it  respectively  
  login  the features described below will be available on article pages where the feedback plug in is enabled   after installing the user feedback plug in  the average user rating and a list of comments will be shown below the article itself  in order to submit a rating or comment  end users may use the login dialog to sign in with an arbitrary name and password combination  once logged in  the login dialog will change to show the name of the current user and a logout button   the feedback plug in also uses the recommendation engine of the sse  if recommendations are available  they are shown in the rightmost column  replacing the document teasers seen on non feedback enabled pages  
  the plug in demonstrates the basic sse features  but does not cover the user registration or profile editing use cases  the login functionality therefore does not really verify a password  any user and password combination will suffice to login  implemented by the  namepasswordverifier  bean in  web inf spring userfeedback plugin userfeedback authentication xml   
  comments and ratings  on article pages  logged in users will be presented with a form to enter a comment and the rating field will be editable  new comments will not be approved when they are first submitted  the sse management views allow editors to walk through the submitted comments and approve or reject them  end users will see all approved comments submitted by other users and all of their own comments  including the information whether it has been approved or rejected   submitted comments will be stored as sse resources of type com coremedia sse base model xhtmlusercontent  newly submitted comments must be approved before they will be visible to users other than the comment author  the comment author is informed about the pending approval or rejection of the comment in the comment s metadata line   user ratings will be stored as sse relationships of the plug in specific relationship type com coremedia sse plugin feedback model starrating  which is a subtype of com coremedia sse base model rating  each rating is represented by   to   stars  and stored with corresponding rating values of         by sse   the average shown is the arithmetic average over all submitted user ratings   only one rating is stored per user and article  but users may edit their  rating value at any time   recommendations  the recommendation engine uses a collaborative filtering approach to identify documents to recommend to the current user  an estimate of a user s rating of a document is computed by combining the ratings of the document by similar users  where a user is similar to another one if they rated similarly in the past  so for the recommendation engine to generate recommendations for a user   a  the user must have rated documents and  b  there must be other users that rated similarly and at least one document not rated by the original user   to compute recommendations based on the current ratings  you have to execute the recommendation engine by calling http    your server  starterkit servlet flow recommend method put   approving comments  as mentioned above  an editor has to approve newly submitted comments before they will become visible to end users other than the comment author   editors may use the standard sse management views web application to approve new comments  see the social software extension manual for details on this application  
  if you want to use the active delivery server with ibm websphere  you have to do some configuration   use the alternateservlet  backdoorconnector    please add the following code to the config bsh file of the ads   generator setbackdoorconnector  new hox corem generatorv  alternateservlet  backdoorconnector      please note in section       of the delivery developer manual the x coremedia dynamic content type   use the websphere orb  add the following code to the config bsh file of the ads   hox corem corba support orb setorb  new org springframework jndi jnditemplate   lookup  java comp orb     
  coremedia sci web applications such as the content application engine use a servlet container for operation  default servlet container is tomcat      but you might use one of the following ones except for the proactive delivery server which needs the default tomcat servlet container  keep in mind  that the servlet containers have only been tested in coremedia compliant operating environments and therefore are only approved on these platforms    
  you can use spring to make java beans available to your customized workflow actions and expressions  the coremedia demo for example uses this mechanism to provide e mail functionality to a customized action  the spring context is loaded at startup time and is shut down when the server is shut down  the spring xml configuration can refer to the worfklow server s unified api connection  using the same name   connection   as in the cae  an action or expression may implement the interface com coremedia cap workflow plugin capconnectionaware  if it does so  the connection is injected before the action is executed or the expression is evaluated for the first time   the spring xml file can refer to properties defined in workflowserver properties  or in any property file under config workflowserver spring   properties  using spring s property placeholder syntax    propertyname   the property s value is inserted when the application context is loaded    if you want the property to be updated when the property file changes  you can use an alternative syntax    propertyname   this causes all affected bean property setters to be invoked whenever the property file is reloaded and the value has changed   in order to use a bean in your action or expression proceed as follows  make a spring applicationcontext available to the workflow server  to do so  configure a springcontextmanager in the workflowserver properties file   workflow server managers springcontext class  com coremedia workflow common util springcontextmanager    configure the locations of the spring beans configuration files   workflow server managers springcontext configurations  classpath  framework spring   xml  config workflowserver spring   xml     configure the beans you want to use in any of the configured configuration files  when using the default configuration files locations  the file config workflowserver spring beans xml is a good place to start  let your customized actions  expressions or boolean expressions extend com coremedia workflow common util springawareaction  com coremedia workflow common util springawareexpression and com coremedia workflow common util springawarebooleanexpression respectively   get the bean inside your customized code using the getbean   method  for example use  protected actionresult execute process process    inboxfactory inboxes    inboxfactory  getbean  inboxfactory         the configured beans may implement the common spring interfaces initializingbean and disposablebean in order to receive life cycle events from the context manager  additionally  the beans may implement the interface com coremedia workflow common util workflowserverlifecycleaware  if they want to initiate asynchronous operations  such operations may start after the method workflowserverstart   is called and must be completed before the method workflowserverstop   returns  only singleton beans receive these callbacks and only if they implement the given interface  
  managers are components that are deployed in the workflow server  becoming globally available for use by other plugins  managers may encapsulate global state that is relevant for multiple processes  they may also coordinate the interaction of processes with external entities  possibly acting as a connection pool  they may react to an external event by requesting a recheck of one or more processes  during a recheck  all guards that were evaluated to false are reevaluated  so that waiting tasks may start running   managers must be registered in the file workflowserver properties by indicating at least the class of the manager in a property named workflow server managers  name  class  where  name  becomes the name of the manager  using the optional properties workflow server managers  name  order it is possible to control the startup order of the managers  additional properties with the prefix workflow server managers  name   may be given in the configuration file and retrieved by the manager during setup   all managers must implement the interface manager  typically it is simpler to base own implementations on the abstract base class abstractmanager  though  this class provides utility methods for obtaining the unified api connection and for reading manager specific configuration parameters   the life cycle of a manager starts with its creation by means of a no arg constructor  afterwards  the setters setname and setconnection are called  providing context information to the manager  afterwards init   is called  which allows the manager to set up itself based on configuration  it may not yet start asynchronous behavior  because some parts of the server might not be fully set up  that in turn is allowed after the method start   has been called    if the server detects that the file workflowserver properties has changed  it will call reload    which allows the manager to update its configuration  if it posesses this capability    the method stop   is called when the server is shut down  just before the workflow server stops to execute automatic tasks and to accept external requests  the manager should stop all asynchronous behavior before returning from this method  finally  the method dispose   is called  it provides the manager with an opportunity to release any system resources  in particular if custom workflow action were still accessing those resources   in order to react to external events  processes should register themselves with an appropriate manager  that manager reacts to events by calling recheck process       with the affected process as an argument  note that this is the only way for a manager to influence a process directly while operating asynchronously out of the scope of a call from the server  particularly  it is not allowed for the manager to update process variables itself  this must be done by the process after requesting information from the manager or in a call from the process to the server during the execution of a action   using the managerservice  which is an aspect of the workflow repository that is only available in the workflow server  other plugins may request a reference to a manager by providing the manager s name  note that one manager class may be registered multiple time using different names  if that is required  clients will have to make a cast to be able to call the business methods of the manager  
  report variables  report variables are defined in the report definition  state model  see file analytics reportdefinition xml   
  control  formatting and layout parameters   parameter name parameter value s  description format   html  default value     pdfaschart    excel   xml the report render format  comprising the report s mime type and the data   visualization format     
  the starter kit offers a jsp tag library  for short  tag lib  that complements the tag lib of the cae by some useful custom jsp functions   if you need any of the functions  the tag lib can be included in your jsp like so      taglib prefix  sk  uri  http   www coremedia com      starterkit    
   function name parameters description example page cmnavigation  cmlinkable creates a page bean for a given cmnavigation and cmlinkable  for example for creating a link to a page in a jsp     c set var  selfspage  value    sk page cmpage navigation self        analytics link object    sk page self self        nearestpage cmlinkable  pagecontext creates a page bean for a given cmlinkable using the nearest cmnavigation compared to the current page  stored in the request scope bean cmpage  for the given pagecontext  see next section for the exact algorithm     analytics link object    sk nearestpage self pagecontext          viewformimetype map string object   mimetype returns the name of the view for the given mimetype and a map that maps the string representation of mimetypes to view names    cm include self    self   view    sk viewformimetype selfspage settings mimesettings self data contenttype      navigationbeloworequals cmnavigation  cmnavigation returns whether the first cmnavigation lies below the second cmnavigation  i e  the first is the same or a direct or indirect parent of the second cmnavigation  returns true is the first argument is null and false if the second is null   c if test    sk navigationbeloworequals cmpage navigation self        cm include self    self   view  submenuchildren      c if   
  windows vista open a windows explorer window  click map network drive to connect to the network computer    a wizard opens up     click connect to a website that you can use to store your documents and pictures  click next  double click choose a custom network location  enter the base url of the webdav server and click next  enter the user name and password  
  a cmhascontext  subtype of cmlinkable  can be reused in multiple cmcontext contexts  see section and section   the direct navigation parents of a cmhascontext are linked in its contexts property  a cmhascontext with multiple navigation contexts can be reached through all the urls for the different navigation paths   note  that the navigation structure itself is a tree  i e  navigation nodes don t have multiple parents    for example  a cmhascontext with the segment property foo links to two cmcontexts where the first can be accessed with the url  starterkit servlet segment english tutorial manage  and the second with  starterkit servlet segment english tutorial   the cmhascontext itself can now be accessed via  starterkit servlet segment english tutorial manage foo html and  starterkit servlet segment english tutorial foo html   when formatting a link for a cmhascontext with multiple navigation contexts  the linkscheme has to select one of navigation contexts of the cmhascontext  therefore it uses the nearest navigation compared to the current navigation  the navigation of the link source   for the example above  if the link source is  starterkit servlet segment english tutorial manage bar html  the resulting link will be  starterkit servlet segment english tutorial manage foo html   note  that you can always create a page bean consisting of cmlinkable and cmcontext and link to that directly if you don t want to link to the nearest navigation  page beans can easily be created in a jsp with the jsp function page defined in the starter kit tag lib  see previous section    the computation of the nearest navigation follows these rules   for two candidate navigations  take the one which has more navigation nodes in common with the current navigation  from the root navigation upwards   for example  use  english tutorial manage of  english tutorial if the current is  english tutorial manage archive  if equal and both are below the current root navigation  use the shorter one  lower number of path elements  for example  use  english tutorial instead of  english tutorial integrate if the current is  english tutorial manage archive  if still equal and both are below the current root navigation  use the one with the smaller content id to have deterministic behavior  for example  use  english tutorial manage  id     instead of  english tutorial integrate  id       otherwise both candidates are below other root navigations than the current one  if the target cmhascontext has another locale than the current navigation  try to get the navigation variant  see section and section  of the current navigation for that locale and repeat steps   to   with the current navigation variant instead of the current navigation  for example  use  deutsches tutorial manage  german locale variant  instead of  playground manage  unrelated other navigation tree   if still equal  use the shorter one  lower number of path elements   for example  use  foo instead of  foo bar  last fallback  use the one with the smaller content id to have deterministic behaviour for example  use  site   id     instead of  site   id       note  that there s no current navigation available if the linkscheme is called from the previewcontroller  when previewing a cmhascontext with multiple navigation parents  only rules   and   apply  
  every cms project starts with a document type model that previously had to be build from scratch  the starter kit comes with a predefined document type model that should fit most basic needs   the document types are grouped into base and standard document types  where the base document types are needed for the core features of the starter kit  namely internationalized content  see i  n   website structure and navigation  websitestruct   and layout  they structure the document types into different use cases and concepts   most of them by means of abstract document types  the standard document types on the other hand define additional document types and properties that are mainly used by the starter kit tutorial content and the default templates  still  the standard document types are probably very useful in your project  or at least serve as a template from which to start   all document type names start with the prefix  cm   which you should not use for your custom document types  the prefix is reserved for future starter kit extensions   the document type model is illustrated by the tutorial content that can be imported into the starter kit content server  see inmport content  item     
  all examples for coremedia cms are packed in the file cap examples jar which is part of the shipment  you can extract the relevant examples from this file  please read the accompanying readme files for details about the usage of the examples  the examples build on top of each other  so  it makes sense to examine them in the order  recommended by the order of the sections of this chapter    new menusite  a very simple example acquainting you with beans and templates  login  introduces controllers and interceptors  workflow  demonstrates how to make unified api calls from your application  editing services  modification of the menusite example that integrates editing services for jsf and pbe  this example is described in section   search  modification of the menusite example that adds search functionality for dishes  search using apache lucene  use a different search engine for feeding and searching  contentrules  extension of the search example that adds rule based categories to the menu site  such as  expensive dishes   security  secure your http requests and authenticate users  personalization  extension of the the security example  adds personalized rating to the webpages  
  this example is basically the same as in the previous section  please read section before  the only difference is the used search engine  instead of using fast  instream  this example is based on the apache lucene framework  a well known open source search framework  the example uses apache lucene      the apache lucene integration is kept at a very basic level  because the main purpose of this example is to show the basic steps required for an integration with the cae feeder framework  it should not be misunderstood as best practice on how to use apache lucene  it is  for example  strongly recommended to reuse the  lucene indexsearcher component and not to open a new one for every access to the index  you can find a more sophisticated real life example on how to integrate and use apache lucene in the coremedia contributions  the example is contained in the file cap examples jar  you can find it in the directory cae search lucene after unpacking the jar file  as in the previous example  the cae feeder sends data of content beans to index them whenever beans are created or modified  read the readme file for requirements and necessary steps to start the example    you can use the provided ant build file to perform some of the tasks to get the example running  the following steps have to be performed manually before  set up a coremedia content server and import the content of the new menu site as described in section  install jakarta tomcat and a cae web application template  configure the connection to the content server for the web application template   move the web application template to a directory where it is not automatically deployed by tomcat  install a cae feeder template  configure the connection to the content server and database for the cae feeder template and copy the database driver to its lib directory  configure the path of jakarta tomcat and the parent directory of the cae web application template using the properties tomcat home and cae template dir in the file global properties  which is located in the directory examples cae etc  configure the path of the cae feeder template and the directory to use as index directory in the properties feeder search lucene indexdirectory in file local properties  which is located in the directory examples cae search lucene  add the jakarta tomcat user admin with password tomcat and role manager to the file tomcat users xml in the directory jakartatomcat conf  start jakarta tomcat    to start the example  execute ant first  it builds and deploys the new menu site web application and installs and configures the cae feeder in the directory examples cae search lucene output caefeeder  afterwards start the cae feeder by executing cm caefeeder run in the directory bin  the menu site is available at http   localhost      search lucene servlet   note that it takes a little time before the dishes have been indexed and can be found on the website   basic steps required  in order to use a different search engine for the cae feeder you need to implement a component for feeding and one for searching  the feeding part must either implement the interface directindexer if you have fast responses when writing to your index or asyncindexer  if handling takes a while and the calls should be handled asynchronously and callbacks should be used instead of waiting  you should extend one of the provided base classes asycindexerbase or directindexerbase  the part of feeding apache lucene is divided in three components  luceneindexer   implements the directindexer interface internalluceneindexer   for direct access to the index lucenedocumentfactory   for transforming feedables to apache lucene documents  the luceneindexer is used to handle incoming requests from the cae feeder and uses the lucenedocumentfactory to transform each feedable to a format which the internallucenehandler can handle   searching is implemented in the lucenesearchengine which returns content beans as search results   configuration of the lucene integration  as in the previous search example  you have only one search text field for the concatenation of the name  description and ingredients of a dish and another numeric field for its maximum price  the concatenated values are stored in apache lucene in a default field named textbody  which is handled specially by the cae feeder  apache lucene can dynamically add new field names to an index  so no further configuration is needed unlike the previous example using fast instream  all you need to configure for apache lucene is the directory used for its index   configuration of the coremedia cae feeder  the configuration of the cae feeder is basically the same as in the previous example  please read about the configuration in section  the only difference is the configuration of the feeding component  which is done in the caefeeder config caefeeder spring feeder indexer xml file  it defines an indexer based on apache lucene and replaces the default fast instream indexer  a customizer is used to replace the default fast instream indexer     customize replace bean  indexer      bean id  indexer      class  com coremedia examples cae feeder lucene luceneindexer        description sends data to lucene for indexing   description       property name  internalindexer          bean class  com coremedia examples cae feeder lucene                     internalluceneindexer            property name  indexdirectory           value    feeder search lucene indexdirectory             bean        property       property name  documentfactory          bean class  com coremedia examples cae feeder lucene        lucenedocumentfactory          property       property name  sendretrydelay  value               bean      customize replace   a property configurer is used for resolving the necessary property feeder lucene directory in a file lucene properties   implementing search in the web application  this example implements search using the apache lucene api  the necessary jar file lucene jar will be automatically copied to the lib directory of the web application  see the website http   lucene apache org for information about apache lucene and its query language  the example uses the same template and class structure as the previous search example  only the used package names differ slightly  as before  a dishsearchinterceptor  a dishfinder and the lucenesearchengines  for accessing the search index  are used  which are configured in the web inf spring menusite controllers xml file  the value of the index directory comes from the file local properties     customize append bean  controllerinterceptors        list         bean class  com coremedia examples cae search lucene                     dishsearchinterceptor                    property name  dishfinder                      bean class  com coremedia examples cae search                                 lucene dishfinder                property name  searchengine  ref  lucenesearchengine                bean                    property          bean        list      customize append      the lucenesearchengine performs the actual search using the lucene query syntax  apache lucene is more like a search framework  not a search engine itself  the lucenesearchengine provides search capability and uses the idprovider to return content beans for the found document ids  as mentioned before  this example focuses on the integration part  not on using apache lucene itself  the later is kept to a minimum and includes no optimizations necessary for real life usage whatsoever   the search query for for a dish with  rice  which costs less than    in lucene query syntax would look like this   rice and feederstate success and documenttype dish and  price    to      as you can see in the query string  the values for  feederstate  and for the restriction to a document type use capital letters  the query is passed to an analyzer  which extracts index terms from the search text and would e g  as default transform every search word to lowercase  to prevent this the used analyzer is wrapped in a perfieldanalyzerwrapper  which makes sure that search terms for the fields  feederstate  and  documenttype  are not converted to lower case  
  to offer you a ready made website  the starter kit uses the new modular configuration to plug into the cae  it provides the typical artifacts needed to implement a website with the cae  namely content beans  links schemes  controllers  templates  and utilities  the starter kit also utilizes preview based editing  pbe  to give the editorial staff direct access from the website to the content  the reoccurring features navigation  see websitestruct  and internationalization  i  n  are reflected in all these extensions  to build the website layout  html output is created through cae views  jsp templates  and css is stored in cms documents  see section jsp templates   the starter kit not only plugs into the cae  but also provides its own api that you can use to customize the content application in your project  or to build a starter kit plug in  see section plugin   
  to enrich the editorial backend for the specific needs of the starter kit  it extends the webeditor by special support for website structure   navigation editing  internationalization  and validation  while the navigation editor is a whole new window to browse and modify the website structure  internationalization and validation refers to single documents or properties  the starter kit provides and uses a more convenient way to configure custom property editors in the webeditor  which can be used for your own extensions  in contrast  the navigation editor is an extension by coremedia that goes beyond the public configuration api of the webeditor and thus cannot be customized  for information on how to use the navigation editor  see section using naveditor  
  to feed the coremedia analytics engine  the starter kit provides click tracking in its jsp templates and configures analytics to understand its website structure and page concept  see section page concept   in the jsp templates  analytics contexts are spanned for the different areas of the page  and almost all links are specified as analytics links  using pages  not documents as the objects to track  taken together  this results in analytics reports that can distinguish different starter kit sites and page areas for a detailed      degree analysis of your website  
  the coremedia cae feeder  too  has been configured to be aware of the starter kit website structure and internationalization concept  when you search on website a  no results from website b should be returned  a and b can be completely different websites or internationalized versions of the same website  but in either case  mixing search results is not desired  this means that context information has to be added to the index  so the context of a document can be used when retrieving search results  section describes the configuration of the cae feeder for the starter kit  
  the appropriate jres jdks for the different supported platforms can be obtained from the following locations     for solaris  linux and windows jre jdk can be downloaded at sun   http   java sun com or http   java sun com products archive index html     for ibm aix the jre jdk can be downloaded at ibm  http   www ibm com    
  in the following sections  the starter kit is described from an application developer s perspective  they mainly deal with the starter kit cae  as this is the central component of the content application you are implementing  the sections are grouped by topics or features  not by the technical structure of the starter kit  for example  there is no section that documents all members of a certain class  but rather when a feature is explained  excerpts of all relevant apis are given  for a technical reference  please consult appendix  the java api documentation  javadoc   and the spring bean documentation  beandoc   
  in a more advanced scenario  a whole website can be maintained in two or more languages even with a different structure in different languages  see figure and create localized navigation   in the figure  you can see that the navigation channel  too  has been duplicated to create a french variant of the american original  just as for articles  the french navigation channel variant has the original linked as its master  in contrast to the last figure  the french article is now contained in the french navigation channel variant  on the website  this leads to the american and french pages being linked vice versa  every article is shown with the page  surroundings  corresponding to its locale  
  to conclude  the starter kit supports the following features by means of a master document linked by localized variants  on the website  the user can navigate between all localized variants  for the web user  there is no visible difference between master and derived variant  as an editor  you can also navigate between localized variants  also  the master version number becomes important  you can not only see which documents belong together  but even track changes to the master document and integrate these into the translation s   automatic tools can be built that create reports about how many and which documents are translated  which documents have been updated since their translation  aggregate page views of content in different locales  and so on  
  the content bean api introduced in the previous section is mainly used by jsp templates that render html pages according to the website structure  this section shows some typical examples of this use case  for a general overview of templating with the starter kit  see section  jsp templates   
  to render the navigation tree as a nested list  the starter kit provides the cae views submenuchildren  implemented for cmnavigation  and submenuitem  implemented for cmnavigation and cmlinkable    the essential part of cmnavigation submenuchildren jsp is    c if test    not empty self visiblechildren       ul      c foreach items    self visiblechildren   var  child        cm include self    child   view  submenuitem         c foreach      ul     pbe contextinfo    c if   the template simply tests whether there are any children at all  and if so  renders a ul element and iterates over all visible children  i e  all child navigation nodes that do not have the hidden flag set   for each child  the view submenuitem is included  this is where the cae s polymorphic view dispatch comes in  the view is implemented differently for navigation sub nodes  cmnavigation  and other sub nodes  cmlinkable    here is a simplified version of cmnavigation submenuitem jsp    li     a href   cm link target    self        self linktext   a     cm include self    self   view  submenuchildren      li   the template renders a li element containing an hyperlink to the current navigation channel s page and includes its submenuchildren view  this means that for nested navigation channels  the two views include each other recursively   it may not always be desired to expand all sub nodes  to only expand the sub nodes of nodes lying on the path to the current page  you can access the request scope bean cmpage  which contains the page of the current request  and use the custom starter kit jsp function navigationbeloworequals  also see tag lib reference     jsp usebean id  cmpage  scope  request    type  com coremedia starterkit common contentbeans page     li     a href   cm link target    self        self linktext   a     c if test    sk navigationbeloworequals cmpage navigation self          cm include self    self   view  submenuchildren        c if    li   the template cmlinkable submenuitem jsp does not add any new aspects  it just leaves out including the submenuchildren view completely  
  in site analytics can display the number of clicks for each hyperlink that has been generated by means of the  analytics link  tag  in order to differentiate different links to the same page  the concept of object contexts and name contexts have been introduced  to embed a link in a context  use the  analytics objectcontext  or the  analytics namecontext  tag as described in section  contexts may be nested  links in different positions of the context hierarchy will be counted separately   clicks will only be counted when the target page view is actually recognized by the system and when the page view can be associated with correct source page and source context  source page and source context may be determined in two ways   an anchor tag generated by the  analytics link  tag includes a javascript onclick handler that sends an asynchronous callback to the server  transmitting the source page  source context  and the target page specified in the  analytics link  tag  when ultimate flexibility is required for the creation of the anchor tag  the  analytics linkattributes  tag provides a way to compute just the needed attributes that can then be affixed to the  a  element as it is generated  using the interface pagedataextractor as described in section the source page can be computed from the http referer attribute  the source context cannot be computed from this value  the root context is used instead   the system has to determine whether a javascript callback and a page view event should be consolidated into a single page transition event  this can be done based on a number of heuristics   consolidate  if the target page indicated in the link tag and the rendered page are identical  this heuristic is enabled by default through the setting  workflow server managers aggregator allow rehinting by target true  in the file workflowserver properties  it fails to work when the page identity given in the  analytics link  tag differs from the page identity given in the  analytics pagecontext  tag  consolidate  if the source page of the link and the source page computed by a pagedataextractor are identical  this heuristic can be enabled by setting  workflow server managers aggregator allow rehinting by source true  in the file workflowserver properties  this requires the creation of a pagedataextractor that can reliably parse referrer urls  but it goes beyond a pure pagedataextractor approach in being able to reconstruct the correct object and name contexts in which the link is embedded  consolidate  if the target page indicated in the link and the page indicated as the linked page are identical  to this end  the target page must identify a page identity as the linked page through additional attributes of the  analytics pagecontext  tag    analytics pagecontext   object    self   view         linkedobject          linkedview                analytics pagecontext   this requires that the controller can reconstruct the object that was passed to the link formatter when generating the url that led to the current page  the linked object must also be passed to the jsp by means of request attributes   these methods can be combined for special use cases   no in site analytics  you are not using in site analytics at all   you do not have to care about the correct computation of links between pages  it may make sense to use a customized referrerdataextractor that does not report intra site click after a session timeout as external referrers   when a source page can be determined  the referrer is automatically unset by the data aggregator    default configuration  you are operating an internet web application  you can assume that javascript is enabled by almost all visitors  your cae is set up in a straightforward way  given any target object  its id is encoded in such a way that the controller will select exactly that object for rendering   the automatically generated onclick handlers suffice   no object context or name context  the setup is as before  but you are not using object contexts or name contexts for organizing links on a page   you can add the pagedataextractor for handling requests by those users who have disabled javascript  by keeping the default setting  workflow server managers aggregator allow rehinting by target true  for the data aggregator you allow the javascript callback to take precedence if both the callback and the pagedataextractor provide a source page   simple redirection during link generation  when rendering a link to an object  the given object might not be the object that should be actually rendered  the object that should be computed instead is easily calculated    you should use the object that is actually rendered as an argument to the  analytics link  tag  if the computation to arrive at the rendered object is not immediately expressible in el in the jsp  you can either add a custom taglib function that performs this task or you add a translation method to the bean that represent the target page  it might become necessary to adapt the link formatter to the new objects that it will receive   in this case  it was previously suggested to use the interface targetobjectresolver to compute the rendered object in both the tracking webapp and in the in site analytics webapp  this has been deprecated  because a much cleaner approach is available as shown above   complex redirection during rendering  when rendering a link to an object  the given object might not be the object that should be actually rendered  the computation of the object that represents the target page is too costly to happen for each rendered link    you can use a targetpageresolver for computing the linked page in the in site analytics webapp  because the number of requests for pages with in site analytics information is typically much smaller than the total number of rendered pages  we expect this will not slow down the rendering of the preview page unduely  when the target page resolver has computed the correct target page for a link  the correct statistics will be displayed automatically   having dealt with the correct display of statistics in the in site web application  we must still make sure to generate the correct statistics  there are two approaches to ensure that the data aggregator can associate javascript callbacks and page view events   by source page  on the tracking side  you implement a pagedataextractor and you set the property  workflow server managers aggregator allow rehinting by source true  in the data aggregator  this will instruct the data aggregator to associate a page view with a javascript callback if the source page computed by the pagedataextractor matches the source page of the javascript callback   by linked target page  in the jsp you add one or more of the attributes linkedpage  linkedview and linkedlocale to the  analytics pagecontext  tag to indicate the page that was originally used in the  analytics link  tag for formatting the link that is now rendered  an example was given above and is also shown in section  the algorithm for determining the originally linked page depends highly on the chosen url format  it is likely that the linked page must be passed to the jsp by means of additional request attributes     
  when you create custom commands you have to provide labels and icons  possibly for different locales  this chapter shows which and where you have to adapt or create resource bundles for these   for every action you add to  web inf spring editing  e g  editing toolbars xml  you have to provide a name property  this property is taken to lookup the resource bundle entries for the action  if you don t provide these entries the value of the name property is displayed instead   first you have to provide a label and an icon for the menu item representing the action   
  the location of the resource bundles is defined in  web inf custom editing services xml  here you have to provide the supported locales and resource bundle names  in the following example from the coremedia demo we defined the locales en and de and the resource bundles com coremedia easyedit editing editing and com coremedia demo     pbe menu pbemenu    bean id  editingservices  parent  defaulteditingservices      property name  supportedlocales        list         value en  value         value de  value        list      property     property name  defaultlocalestring  value  en       property name  messagesource        bean class  org springframework context                   support resourcebundlemessagesource          property name  basenames            list             value com coremedia easyedit editing editing  value             value com coremedia demo     pbe menu pbemenu  value            list          property        bean      property    bean   let us take a look at the renamepageaction of the coremedia demo  the bean definition sets the name property to navi new      bean id  newpageaction  parent  action  singleton  false        property name  name  value  navi new         property name  command          bean class  com coremedia demo     editing                     commands newpagecommand               parent  contextinfocommand  singleton  false          property      bean   in the resource bundle file  com coremedia demo     pbe menu pbemenu properties included in the cap demo jar you can find a link to the menu item icon of the action   action navi new icon    com coremedia demo     icons   x   new png  the labels and tooltips for the menu item are stored in the localized resource bundles pbemenu en properties  pbemenu fr properties etc    action navi new text new page action navi new tooltip create a new page  action navi new text nouvelle page action navi new tooltip cr er une nouvelle page  the resource bundle used for the template newpage jsp rendering the jsf input form are  com coremedia demo     pbe pbemessages en properties   com coremedia demo     pbe pbemessages fr properties etc   in jsf you include a resource bundle via   f loadbundle basename  com coremedia demo     pbe pbemessages                 var  bundle     then you can get a value for the current locale via expressions like   bundle  newpage title      
   x x x x analyticsdashboard db driver string  the jdbc driver class used for connecting to the analytics database analyticsdashboard db url string  the jdbc url used for connecting to the analytics database analyticsdashboard db user string  the user name used for connecting to the analytics database analyticsdashboard db password string  the password used for connecting to the analytics database analyticsdashboard db database oracle  db   mssql  the database type for the analytics database analyticsdashboard repository url string  the url of the content management system which hosts the repository and provides user authentication  per default  the url has the following format  http    servername   port  coremedia ior analyticsdashboard repository user string  the service user name that can be used to establish a connection to the repository  per default  this is  webserver   analyticsdashboard repository password string  the service user password  analyticsdashboard repository domain string  the service user domain  analyticsdashboard timemodel country  string country of the jvm default locale the country for determining the calendar to use when accessing the analytics database  this must be the same value that is also configured for the data aggregator  analyticsdashboard timemodel language string language of the jvm default locale the language for determining the calendar to use when accessing the analytics database  this must be the same value that is also configured for the data aggregator  analyticsdashboard timemodel timezone string jvm default timezone the timezone for determining the calendar to use when accessing the analytics database  this must be the same value that is also configured for the data aggregator  analyticsdashboard caepreview prefix string  the url prefix for the preview controller of the preview cae for rendering a link from the page dashboard to the preview page  a typical value might be http    host        webapp  servlet preview with appropriate substitutions  by default  no link will be rendered  analyticsdashboard rank rangescvs comma separated integers              the possible numbers of entries for ranked   top      reports  separated by commas  values of           and up will be rendered as  all  in the dashboard  analyticsdashboard rank default integer    the default number of entries to show for ranked   top      reports  analyticsdashboard robots merge count integer   pie chart reports containing more robot entries than defined here will be merged using the percentage bound defined below analyticsdashboard robots merge percentage double      relative bound used to merge robots for better visualization in pie chart reports  all robots that have less than the defined value will be merged to one pie segment   
  the predefined robot traffic report displays the amount of  non seen traffic  caused by robot visits  
  the predefined robot percentage report displays the percentage of  non seen traffic  caused by robot visits in relation to the complete traffic for the selected site  
  the predefined robot distribution report displays all detected robots that visited the site in the selected time range  for better visualization robots with a percentage lower than     are merged  by default  to one pie segment when the report contains more than five robots  
  passing parameters as a map  when you want to pass more parameters than available to the standard login methods or when you want to determine the parameters in a more flexible way  you can pass a java util map to the login method  the keys must be chosen from a number of constants defined in the class cap  the values in the map are normally strings   map string    params   new hashmap string       params put cap content server url     http   localhost       coremedia ior    params put cap workflow server url     http   localhost       workflow ior    params put cap user   admin    params put cap domain       params put cap password   admin    capconnection connection   cap connect params    in the previous example  you can see that the initial workflow server url is passed as one parameter  normally this is not required  because the content server acts as a naming service and provides the necessary information for connecting to other servers  however  in complex setups with multiple firewalls and connection redirection  it may be necessary that different clients connect via different urls   in the following  we summarize the available properties   
  the previous diagram shows the structure of the staging tables  all staging tables start with the prefix staging   as a common feature  all tables contain an eventtime column  this is the exact time when something happened that should be considered by the coremedia analytics engine  for example a page view or a search using the fast search engine   generally  the staging tables are very short lived  sometimes a values survives two iterations of the aggregation process  but rarely more  if you can accept the loss of a certain amount of analytics data  consider putting the staging table into a table space that is faster  but less reliable compared to the other table   stagingpageviews  each row in this table signals that a rendering request was completed by a content application engine  while the generated ouptut might not always be a  page  of some sort  this is the most common use case   the httprequest denotes the path component of the request uri  the querystring denotes the query component of the request uri  the sessionid identifies the session in which the page was requested  the username identifies the user whoc requested the page  the ip column takes the ip address of the requesting client  the browser identifies the user agent used to display the page  if present  the referrer denotes the page that referred to the rendered page  the referrer is determined by inspecting the http header  the referrersearchphrase is extracted from the referrer string  if present  it represents the search phrase that made the current page come up as a result  the contentsize is the size of the generated page in bytes  the columns pageobject  pageview and pagelocale jointly identify the rendered page  the pagesite column helps in extending the object dimension if the pageobject refers to a hitherto unknown object  the column multiplier denotes the sampling multiplier in effect when this event occurred  the multiplier can be used to correct statistics for the true number of events   stagingcontextviews  each row in this table signals that a part of a page was renderer successfully  the page part is identified by its context   the columns sessionid  pageobject  pageview  pagelocale and pagesite match the identical columns from the stagingpageviews table  the pagecontext column identifies the rendered page part  the column multiplier denotes the sampling multiplier in effect when this event occurred  the multiplier can be used to correct statistics for the true number of events   stagingtransitions  when a page view results from a click on another page that is also rendered by the same content application  this is considered a transition  in some cases  the content application engine can determine the source page of a transition  this enables the content application engine to record a transition event instead of a page event   the columns pageobject  pageview  pagelocale and pageobject are replaced by the columns targetobject  targetview   targetlocale and targetobject  the columns sourceobject  sourceview  sourcelocale and sourceobject identify the page from which the transition originated  the column sourcecontext identifies the part of the page from which the transition originated  the column multiplier denotes the sampling multiplier in effect when this event occurred  the multiplier can be used to correct statistics for the true number of events   stagingtransitionhints  often  it is not possible to identify the page that caused a transition while rendering the target page  only the client can send the actual click event  in this case  the page view must be completed by a transition hint event that arrives asynchronously  later stages of the report aggregation process consolidate hints and page views into the actual transition events   the sessionid identifies the session in which the page was requested  the columns targetobject  targetview  targetlocale and targetobject identify the target page  the columns sourceobject  sourceview  sourcelocale and sourceobject identify the page from which the transition originated  the column sourcecontext identifies the part of the page from which the transition originated   staginginternalsearches  each entry in this table represents one search request to the coremedia search engine   the column searchcollection identifies the set of documents in which the search was performed  the column searchterm represents the query that was transmitted to the coremedia search engine  individual word are separated by spaces   stagingrobotaccesses  each entry in this table represents a robot site view     the column site identifies the requested site    the column robotid identifies the robot    the column eventcount represents how often the robot requested the site     
  the previous diagram marks the fact tables by the  fact  stereotype  dimension tables are easily recognized by their dimension suffix   sitedimension  the sitedimension table associates numeric ids in column id and textual ids in column siteid one to one   objectdimension  the objectdimension table associates numeric ids in column id and textual ids in column objectid one to one  it also associates each object to its site using the site column   pagedimension  the pagedimension table associates numeric ids in column id and triples of object  view and locale in columns pageobject  pageview and pagelocale one to one  it also provides a shortcut to the object s site by means of the pagesite column   contextdimension  the contextdimension table associates numeric ids in column id and context strings in column context one to one   referrerdimension  the referrerdimension table associates numeric ids in column id and referrer strings in column referrer one to one   robotdimension  the robotdimension table associates numeric ids in column id and robot string ids in column robotid one to one   userdimension  the userdimension table associates numeric ids in column id and user names in column username one to one   browserdimension  the browserdimension table associates numeric ids in column id and browser  user agent  names in column browser one to one   searchcollectiondimension  the searchcollectiodimension table associates numeric ids in column id and search collection ids in column searchcollection one to one   searchtermdimension  the searchtermdimension table associates numeric ids in column id and search terms in column searchterm one to one   sessions  each entry in the fact table sessions represents a single session that has been open at some time in the past or that is currently open   the id column contains the numeric identifier of the session  numeric identifiers are unique in the entire table  numeric identifiers are used when other tables reference the sessions table  the sessionid column contains the string identifier of the session  string identifiers are unique in the entire table  the isopen bit determines whether the session is still open     or already closed      the columns starttime and startintervalstart denote the exact start time of the session and the in site analytics time interval containing the start time  respectively  the columns lastaccesstime and lastaccessintervalstart denote the exact time and the interval containing the last request made using this session  the column currentlength denotes to total number of page views in this session so far  the column userid associates the session with a user  the column browser associates the session with a browser name  the column startpage associates the session with the first page viewed in the session  the column startsite redundantly stores the site of the first page  the column lastpage associates the session with the last page viewed in the session  the column lastsite redundantly stores the site of the last page  if non null  the column lastsourceid associates the session with the page from which the click to the last viewed page in the session originated  if non null  the column lastsourcecontext associates the session with the context of the click from lastsourceid  the column multiplier denotes the sampling multiplier in effect when this event occurred  the multiplier can be used to correct statistics for the true number of events   pageviews  each entry in the fact table pageviews represents a single page view event  if possible  additional information about the origin of the page view is also recorded   the columns eventtime and eventintervalstart denote the exact time of the page view and the in site analytics time interval containing that time  respectively  the column pageid associates the event with the viewed page  the column pagesite redundantly stores the site of the viewed page  the column sessionid associates the event with a session  the column noinsession denotes the position of the event in a sequential order of events for its session  note that due to clock synchronization issues the noinsession column does not monotonically increase with the eventtime column  the column contentsize contains the size of the delivered content in bytes  the column referrer associates the event with the referrer that was reported for this page view  if non null  the column referrersearchterm associates the event with the search term through which this page was located  if non null  the columns sourceid and sourcecontext identify the page and context from which this page view was requested  the column multiplier denotes the sampling multiplier in effect when this event occurred  the multiplier can be used to correct statistics for the true number of events   contextviews  each entry in the fact table contextviews indicates that a certain part of a page was rendered   the columns eventtime and eventintervalstart  denote the exact time of the context view and the in site analytics time interval containing that time  respectively  the column pageid associates the event with the viewed page  the column pagesite redundantly stores the site of the viewed page  the column pagecontext associates the event with the viewed context  the column sessionid associates the event with a session  the column multiplier denotes the sampling multiplier in effect when this event occurred  the multiplier can be used to correct statistics for the true number of events   internalsearches  each entry in the fact table internalsearches indicates that a search was performed using the coremedia search engine   the column eventtime denotes the exact time of the search  the column searchterm associates the event with the used search term  the column searchcollection associates the event with the used search collection   robotaccesses  each entry in the fact table robotaccesses represents a robot site access   the column eventtime denotes the exact time of the access  the column site associates the event with the requested site  the column robotid represents the robot that requested the site  the column eventcount indicates how often the robot accessed the site       
  the tables presented in this section are used for reporting robot views  so called non seen traffic  for a site  normally values that are written to these report tables will never be changed again  
  the robot dimension table shown in the previous diagram was already discussed in conjunction with the fact tables  in the following  only the actual permanent report tables are discussed  which are marked using the  permanent  stereotype   you can see that all report tables contain an xx placeholder in their name  there is one of these tables for each time interval type as described in section  in the actual table name the xx is replaced by the interval type code   robotaccesses xx  these tables store in the column eventcount the number of robots who viewed a certain site in a given interval  the robotid column represents the robots id  site and interval are identified by the columns site and eventintervalstart   totalrobotaccesses xx  these tables store in the column eventcount the total number of site views for all robots  site and interval are identified by the columns site and eventintervalstart  
  the following process describes the installation of coremedia sci on a linux or windows system for test use only  e g  all components are installed on one computer   for more details refer to the administration manual  chapter   instead   for the installation the coremedia installation file cap  releasenumber  jar and a license for using the product consisting of license zip are needed  in addition a database user on an approved database  see section     in the administration manual  is needed   install a supported java development kit  jdk            move to the directory where the file cap  releasenumber  jar is located    start the installation with the command java  jar cap  releasenumber  jar        a welcome window appears   under linux it might happen that the window is too small to read the content  this is a problem of the jdk  just resize the window with the mouse  to see the whole content            click  next  in the welcome window to continue the installation process  the license agreement window appears  if you agree  click  yes  to continue the installation process  the choose components window appears  check the coremedia content server  coremedia editor and coremedia active delivery server checkboxes in the choose components window to create a sufficient installation of coremedia sci  click  next   in the appearing choose server type window select content management server  single site  and click  next   if you have installed the coremedia search engine and you want to use it select both checkboxes in the full text search   feeder activation window and click  next   otherwise simlply click  next   in the next window the name and location of the license file has to be specified  if it is in the same directory as cap  releasenumber  jar  just click  next   otherwise choose the wanted file and click  next   the next window asks if you want to install tomcat  click  yes   in the next window you can choose your destination directory for the installation  choose your prefered directory or stick to the default and click  next   now you can choose the program folder for the sci system  select the folder you want and click  next   the appearing window displays all the previous selections  click  next   the next window asks  if the properties for the installation should be configured  click  yes  and the first edit properties window appears    in the following contentserver properties window the suggested settings can be accepted     cap server workflow server url    http   localhost       workflow ior cap server http host   localhost cap server http port                now the server xml window opens up  accept the default values   httpport         shutdownport              in the next window the default sql properties for the database connection can be configured  please read chapter      databases  for the supported databases and        sql properties  for configuration details in the administration and operation manual            in the following windows concerning the capclient properties  publisher properties  editor properties and editor xml the default values can be accepted     cap client server ior url   http   localhost       coremedia ior publisher target ior url http   localhost       coremedia ior editor configuration   properties corem editor xml editor startup configuration   properties corem editor startup xml preview webserver host  localhost preview webserver port            now you will be asked  if you want to configure ldap active directory  click  no   click  finish     now you are finished with installation  in the next chapter the document types necessary for the example will be created     
  the predefined top exit pages report displays a ranking of exit pages of the selected site for the given time interval  
  interactive report drill down  the top exit pages report model provides the following three report parameters   the site parameter determines the  sub  site  the list of sites is automatically generated during report data aggregation  the number of entries parameter determines the number of top entries to display  please note that technically this is an  entry range  parameter  thus a simple extension of the available value set would allow entries like  top       or blocks like                  etc  see the analytics developer manual on how to extend report variables  the time interval parameter allows a user to select the time interval  see the performance report for time interval description and screenshots   as the top exit pages report is not a time series report  no time resolution parameter is provided  
  the previous section explained how the workflow definition for the data aggregator can be adapted to specific needs  often the full expressiveness of the workflow definition is not needed  especially when it is only desired to add a few automatic actions at the standard extension points  to this end  the data aggregator can include add on actions that are defined as spring beans in bean definition files in the directory config dataaggregator spring  note that this is not the configuration path for the common spring context in the workflow server  these contexts have been separated to simplify future migrations   all implementations of longaction are usable in these contexts  if they can be configured by means of the spring framework  in the bean definition  the actions must be wrapped in a special bean that introduces the actions to a special registry  an example bean definition might look like the following    bean id  mylongactionbean        class  com coremedia workflow common util  registeringlongaction      property name  collection  value  import       property name  action        bean class  mypackage mylongaction          property name       value                         bean      property    bean   here the action is registered for the phase import  the other phases are extend  dimensions   consolidation  snapshot  and aggregation   the actions configured by means of spring are executed just before the corresponding custom section in the workflow definition is reached    the registry is a framework bean that is automatically found by the registering bean under the name longactionregistry  the spring context used here recognizes the interface capconnectionaware  injecting the default connection of the workflow server into beans as needed   in order to ensure that some action definitely run before other actions  it is possible to specify predecessors for actions  in fact  the order is specified for the registering beans    bean id  myotherlongactionbean        class  com coremedia workflow common util  registeringlongaction      property name  collection  value  import       property name  predecessors        list         ref bean  mylongactionbean          list      property     property name  action               property    bean   if no predecessor actions are specified  actions may or may not be executed in parallel  predecessor actions must belong to the same collection  that is  to the same phase of the data aggregator workflow   the file config dataaggregator spring dataaggreator actions example xml contains a number of spring xml snippets that can be copied and adapted when defining own action   
  the definition for the aggregation process in the file data aggregator xml conforms to the ordinary syntax for process definitions  it uses a number of specially designed actions that perform most of the actual work  the process definition is still very important  because it defines the overall control flow and provides a means to customize the process easily   roughly  the standard aggregation process consists of the following parts  check for concurrently running processes  controlling the timing of the loop  importing logs  determining timing parameters for consolidation and aggregation  extending the dimension tables  consolidating and compressing log data  aggregating overlay reports  creating snapshots  aggregating permanent reports   normally  you do not need to rewrite the concurrency check or the loop control  however  all other process parts may have to be extended  if you want to implement own reports  to this end  a few explicit custom sections are provided in the workflow definition  if you stick to these sections when changing the process definition  it will be easier for you to merge changes as the default process receives bug fixes or extensions  the start and the end of each custom section are marked with comments containing the pattern start custom section and end custom section  respectively   the individual sections will be described in the following  
  it may be necessary to add actions to a certain phase of the aggregation process  predefined tasks in custom sections are available to that end  for example  the section for adding custom imports looks similar to the following fragment        start custom section  custom import      automatedtask name  customimportstart                     successor  customimportend      action class  log  info  true          automatedtask       end custom section  custom import      you can see that the single task customimportstart simply logs a message and exits from the custom section  it is very simple to add more actions or to split the task into a potentially large number of tasks and control flow nodes  the only important requirement is that your replacement code exits to the task customimportend in any case after synching all spawned concurrent execution branches   while the custom sections execute  there will be no other activity in the process  strictly speaking  the task notifyrunning is also running  but this task simply waits for the process to end without making changes of any kind  there will not be concurrent write problems  if you decide to update not only the custom sections  but rather the entire workflow  this does not necessarily hold   besides customimportstart  also the tasks customconsolidationstart  customsnapshotstart and customaggregationstart are defined using a similar pattern  so that you can define imports  consolidations  snapshots and aggregations for your own data  you may maintain the dimension tables immediately after importing or immediately before consolidating  whichever is more convenient   you can assume that certain variables are set when entering the custom sections  the following table gives details  
  by default  the aggregation process parses search engine logs in such a way that it recognizes log entries that arise out of requests to the search engine that were performed using the full text search coremedia api and that were routed through the content server  however  it is possible to perform own searches directly by means of the fast apis and such queries may result in substantially different log entries  unless you adapt the data aggregator  such searches may have to be omitted   in order to analyze even such queries  parsing strategies must be provided  you can parameterize the existing defaultsearchdataextractor in a different way or you can write your own implementation of the searchdataextractor interface as described in section   the strategies can be configured by means of the custom section of the task importsearchlogs  by default  this section is empty  which is equivalent to a single default extractor        start custom section  search data extractors      extractor class     com coremedia analytics plugin defaultsearchdataextractor         end custom section  search data extractors      note that the default extractor is only added automatically if the list is empty  if you provide an extractor of your own  you have to list the default extractor explicitly  if you want it to run        start custom section  search data extractors      extractor class     com company mysearchdataextractor     extractor class     com coremedia analytics plugin defaultsearchdataextractor         end custom section  search data extractors      the extractors are arranged in a sequence  any extractor can return a null value to indicate that it cannot parse the given query  in that case  the subsequent extractors are also invoked until one is successful  of course  you need only one extractor if you are sure that your own extractor handles all cases   often it will not be necessary to write a custom class  the default extractor might might be reusable  it is possible to configure the regular expressions that the default extractor uses when analyzing the log files  for the search term  the regular expression is sought anywhere inside the query attribute  if the regular expression is found  the match for the first capturing group is used as the search term    for example  assume that custom queries are made using the syntax  feederstate success and term  when searching for a given term   you can now configure the data aggregator as follows        start custom section  search data extractors      extractor class     com coremedia analytics plugin defaultsearchdataextractor     extractor class     com coremedia analytics plugin defaultsearchdataextractor    searchtermpattern  feederstate success and              end custom section  search data extractors      this allows the aggregator to use the remainder of the query string after a  feederstate success and   prefix  if the default extractor is unsuccessful  for a detailed description of regular expressions in general and capturing groups in particular  please the javadoc of the class java util regex  
  a special custom section exists in the task importlogs  this task fetches logs from a number of log providers configured in the workflowserver properties  typically  the log providers are content application engines that track viewed pages in a fileanalyticslog  the interface analyticslog provides the method  void logcustomevent int type  list parameters  long timemillis   which you can call in order to add your own events to the log  for example  you might add a purchase event that informs about the number of items bought and the price paid  or you might record information about site entries through special campaign urls   in any case  all type codes that you introduce must be matched  an  eventtype  element in this custom section in the custom section of task evaluateaggregationstrategy  for example  you might write       start custom section  event types      eventtype   code          table  stagingpurchaseevent    timecolumn  eventtime    datacolumns  itemcount long prize long department         end custom section  event types      in order to feed purchase events into the table stagingpurchaseevents  when creating the table  you would have to introduce the timestamp column eventtime  the numeric columns itemcount and prize and the varchar column department  the event time is automatically subjected to the clock synchronization protocol  you may introduce multiple types of events  using the type codes      to      at your discretion   note that you must purge your own staging tables  typically immediately after the events have been postprocessed into fact tables  the import process will take some precautions so that events are not entered twice into the staging tables  but if you do not erase the events  the events will remain in the staging tables forever   the file config dataaggregator spring dataaggreator events example xml contains an example that shows how to configure a custom event type in spring xml without the need to adapt the process definition  
  this class allows you to execute sql statements  the statements are specified through nested  statement  elements as follows    action class  com coremedia analytics wf sqlaction      statement name  purge staging transitions      action   this is the typical form in the predefined workflow  which indiates the statement by the name attribute  the name is internally resolved by means to the reportingmanager  in order to select the actual statement depending on the database used  assuming that your own extensions are targeted at a single database  you should probably insert the sql statements directly into the definition    action class  com coremedia analytics wf sqlaction      statement sql  delete from stagingpurchaseevent      action   if you provide multiple  statement  elements  the statements will be executed in the given order in a single transaction   you may add parameters to your queries  parameters are specified as nested expressions in the  statement  element  the sql query must provide an appropriate number of question marks to accept the value    action class  com coremedia analytics wf sqlaction      statement    sql  delete from stagingpurchaseevent where eventtime            get variable  purchaseconsolidationlimit        statement    action   the file config dataaggregator spring dataaggreator actions example xml contains an example that shows how to configure as an sql statement in spring xml  it is not possible at this time to pass parameters into statements defined in a spring xml file  
  typically  the staging tables contain at least some fields with values that are repeated very often at different times  this is good  because it makes it possible to aggregate the data for analysis  it also means that the amount of memory required can be reduced by replacing complex repeated values by numbers that represent the values  for example the browser identification can be more than a hundred characters long  but there are really only very few different browsers  so that a two digit number might suffice to differentiate between all possible values the reduction in storage size also increases the performance of the application  which is typically limited by disk write performance   to this end  the dimension table are maintained  they consist of one column that contains the artificial primary key and one or more columns that describe the uncompressed value  normally  the primary key column is called id  when new values must be encoded  the automated action com coremedia analytics wf extenddimensionaction can be used  that action scans an arbitrary number of source tables and makes sure that all occurring values are properly encoded in the dimension table  new values for the primary key column are either drawn from a sequence object  if the database supports that  or they are assumed to be assigned automatically during an insert into the dimension tables   as an example  the brower identification dimension is maintained by the following action    action class  com coremedia analytics wf extenddimensionaction       dimensiontablename  browserdimension       dimensioncolumnnames  browser       sequencename    browserids      source tablename  stagingpageviews       source tablename  stagingtransitions      action   this action definition indicates that the dimension table is named browserdimension and that the single value column is called browser  new values for the numeric primary key column are drawn from the sequence named browserid  the tables stagingpageviews and stagingtransitions are scanned for new values  because no column names are given in the  source  elements  it is assumed that the name from the dimension column is carried over  therefore  the column browser is looked up in both source tables   a more complex example would be a hypothetical dimension table for products  if we assume that a product is identified by a vendor and a vendor specific id    action class  com coremedia analytics wf extenddimensionaction    dimensiontablename  productdimension    dimensioncolumnnames  vendor specificid    idname  globalid    sequencename    productids      source tablename  stagingshippingevents     columnnames  vendor product      action   in this case  the numeric primary key is stored in the column globalid and the two columns vendor and specificid contain the actual data  the input data table stagingshippingevent follows a different naming scheme using the column names vendor and product   your own dimension tables should define a primary key on the numeric primary key column and an index on the identifying value columns  this allows the database to look up the values in both directions   when you look into the definition of the standard report aggregation process  you will find additional configuration parameters  these parameters are undocumented and should not be used in custom extensions  if you must maintain more complex dimension tables that are denormalized or that refer to other dimensions  you should use an sqlaction to execute an appropriate sql statement   the file config dataaggregator spring dataaggreator actions example xml contains an example that shows how to configure as a dimension extension action in spring xml  
  this action is employed for generating long term reports at multiple time granularities  it is assumed that the source data is available in a single table and that each row is associated with a certain point of time  source rows are accessed by a range query that limits the values for the time column  so that the source table should be indexed on the time column in a way that supports range queries  besides the time column  the source table may define additional columns that provide details about the event that happened at the indicated time   the action fills a group of tables of identical structure with a common name schema  each table name starts with a common prefix and ends with an interval type code as described in section  the different tables contain data that is aggregated at different granularities  the tables must contain a column that defines the start time of the interval for which statistics are gathered  there may be additional key columns that provide details about the summed events  only events that provide the same values for all key columns are integrated into one data point  key columns must not be null   events can either be counted  or numeric attributes of events can be added up  or both  by adding the property targetcountcolumn  you can indicate that rows from the source table should be counted  by adding the properties sourcesumcolumnnames  and targetsumcolumnnames  you can request that one or more columns are summed and that the result is stored in the target table  the number of source and target column names must match  individual names are separated by commas   as an example  we examine how internal search events are aggregated    action class  com coremedia analytics wf aggregateintervalsaction    endnotbeforevariable  aggregatedpermanentlybefore    endbeforevariable  aggregatepermanentlybefore    sourcetablename  internalsearches    sourceintervalcolumnname  eventtime    sourcekeycolumnnames  searchterm    targettableprefix  intsearches     targetintervalcolumnname  eventintervalstart    targetkeycolumnnames  searchterm    targetcountcolumnname  eventcount     the start and end dates for the aggregation are stored in two process variables  whose names are configured in the definition  the intervals to be aggregated must end before aggregatepermanentlybefore  but not before aggregatedpermanentlybefore   the target tables  names start with intsearches   the time interval is indicated in the eventintervalsstart column and events are processed jointly if they match in the key column searchterm that is stored in the target tables  the number of events for each search term in each interval is counted  the count is stored in the column eventcount   the events are stored in the table internalsearches  the time of the event is stored in the column eventtime in the source table  the value for the key column is taken from the column searchterm of the source table  if there were multiple key columns  the column names would have to be separated by commas    the file config dataaggregator spring dataaggreator actions example xml contains an example that shows how to configure an aggregation action in spring xml  
  the chunkingimportaction is an action that supports the import of log files in a simple and reliable way  it takes care of importing log files in the right order  chunking long log files to limit transaction sizes  persistently recording the already imported parts of each log file to avoid duplicate import  scheduling concurrent writes to the database  and updating the workflow variables according to the progress of the import    the use of this importer class requires that each line of the input log files can be parsed individually  it is assumed that within each log file the lines are chronologically ordered  multiple log files may cover the same time period  though   the parsing of lines and the updates of the database are encapsulated in the interface importerstrategy  a type variable t specifies the type of the intermediate result from the parse stage that is passed to the storing stage  you must supply an implementation of importerstrategy from package com coremedia analytics wf plugin for using the chunkingimportaction  the method  t parseline aggregatormanager manager  string line   parses the given line  if the line could not be parsed  the method may return null  the method  long gettimeof t object   must return for every parsed object the time in milliseconds of when the event happened  so that the importer can import the earliest events first  finally  void store aggregatormanager manager  t object   persists the given object  the aggregatormanager that is passed into the method along with the parsed object provides the method getjdbctemplate    which may be used to use spring jdbc to access the database  when the method is called  a transaction has already been started   this action is best configured as a spring bean in the collection import  where it is invoked after the standard imports have run  a typical spring configuration might look like    bean class   com coremedia workflow common util registeringlongaction      property name  collection  value  import       property name  action        bean      class  com coremedia analytics wf chunkingimporteraction          property name  importerid  value  myimport           property name  iterationstartvariable           value  iterationstart           property name  importendvariable  value  customimportend           property name  duration  value                 property name  offset  value                property name  iterationsize  value                    property name  chunksize  value                 property name  streams  value               property name  script  value  bin logmovescripts sh           property name  scriptoutputencoding  value  utf             property name  encoding  value  utf             property name  directory  value  myimport inbox           property name  archive  value  myimport archive           property name  strategy            bean class  mypackage myimporterstrategy            property        bean      property    bean   the bean properties importid  iterationstartvariable  importendvariable  and strategy must be given in the bean definition  if another property with the name name is not present for an import with importerid equal to id  the property is instead loaded from the file workflowserver properties using the property name  workflow server managers aggregator import id suffix  where suffix is determined according to the following table  
   variable explanation available in section iterationstart the exact time when the current iteration started everywhere customimportend the time before which there are no more events waiting to be imported  where the imported events require the passing of the session timeout before they can be aggregated  null  if arbitrarily old events might still await import  individual custom importers may only lower this value or set it to null import customadditionalimportend the time before which there are no more events waiting to be imported  where the imported events can be aggregated immediately  null  if arbitrarily old events might still await import  individual custom importers may only lower this value or set it to null import consolidationend the time up to which page view data has been consolidated  a point of time slightly before the import start  so that all data up to that point of time is assumed to be accessible custom consolidation snapshottimestamp the logical time for the requested snapshot custom snapshots aggregatedpermanentlybefore the time before which event aggregation has already been done and should not be repeated custom aggregation aggregatepermanentlybefore the time before which event aggregation should be completed after the current iteration custom aggregation  
   bean property property file suffix description duration duration the normal duration between two invocations of the move script  in seconds offset offset the delay after midnight before the first invocation of the move script  in seconds iterationsize iteration size the maximum number of lines that is imported during a single iteration of the aggregation process chunksize chunk size the maximum number of line that is imported in a single transaction streams streams the maximum number of concurrently open streams when importing from multiple files at once script script the move script that is invoked by the importer for ensuring that logs are available in the input directory scriptoutputencoding script output encoding the name of the character set that must be used when parsing the output of the move script encoding encoding the name of the character set that must be used when parsing the log files directory directory the input directory where the move scripts deposits log files archive archive the archive directory where the importer puts processed log files  the move script should move the files in this directory to a more permanent location  
  the script parameter identifies an external shell script that is called when the importer determines that new files must be processed  the script is called and fetches the logs in a deployment specific way into the directory specified by the directory parameter  the script may fetch any number of log files into the given directory  it is guaranteed that the directory is empty before the script is invoked  the script may also move or remove the files in the archive directory   the encoding parameter specifies the character encoding in which the log files are parsed  only character encodings that encode line ends as bytes    or    are permitted  all common   bit encodings and utf   fall into this category   the advantage of configuring the properties in the spring bean definition is that all definitions are in one place  the advantage of retrieving the properties from the file workflowserver properties is that the properties are dynamically reloaded even while the data aggregator is running   the property iterationstartvariable should almost always be set to iterationstart  the property importendvariable should be set to customimportend  if the imported data relates to page views  and to customadditionalimportend otherwise   the property importerid must be unique for every importer that you deploy  this identifier is used when storing the state of the importer persistently in the database  two importer mixing their state would reliably result in inconsistent data   a number of implementations of importerstrategy are already delivered with coremedia cms  you can find them in the package com coremedia analytics wf plugin  in the file config dataaggregator spring dataaggregator importers example xml you can find examples for all strategies presented here   accesslogimporterstrategy  this class is a generic importer for line based log files that describe page view events  it assumes that the lines can be parsed by means of a regular expression as implemented by the standard java class java util regex pattern  the regular expression must contain so called capturing groups  that is subexpressions that are delimited by parentheses  the importer can then be instructed which aspect of a request  the requested uri  the date  the browser and so on  is to be found in which group  groups are numbered starting from    a typical definition for this importer strategy might look like    bean class  com coremedia analytics wf plugin  accesslogimporterstrategy      property name  linepattern     value                        quot     quot     quot          property name  dategroup  value          property name  sessiongroup  value          property name  ipgroup  value          property name  urigroup  value          property name  rawpagedataextractor        bean class  my package my raw page data extractor        property    bean   only the content of the property strategy of the chunkingimporteraction is shown here  please see the previous section for details on how to set up the other properties  this definition parses lines like       jan                                  app servlet content      the pattern defines three capturing groups containing the bracket delimited date  the requestor s ip address and the request uri path  respectively  the ip address is reused as a session identifier  which is a plausible technique in the absense of a real session identifier   your log file format will likely be different  but you can adapt the line pattern as needed  the javadoc of the class accesslogimporterstrategy gives hints on additional groups that can be defined and on additional strategies that can be set   before the given xml snippet can be used  you must create an implementation of the interface rawpagedataextractor  an implementation must provide the method  rawpagedata getrawpagedata uri uri   whose return object encapsulates string identifiers for object  view  locale  and site of the viewed page  often view  locale  and site will be constant  but the object identifier is always variable  for content beans  the object identifier is the numeric content id prefixed with  contentbean     the method should return null  if the uri could not be parsed and also if it denotes an object for which accesses are not supposed to be tracked  for example  an image or a javascript file   additional properties are defined in accesslogimporterstrategy for parsing the time field  especially  it is possible to set the format string of a simpledateformat and the locale used for parsing   ivwimporterstrategy  the ivw  informationsgemeinschaft zur feststellung der verbreitung von werbetr gern e v   is an independent german provider of usage statistics for various media  in particular  a standardized tracking plattform can produce log files that reflect the accesses to a web site   coremedia analytics can import ivw log files using the ivwimporterstrategy which can be plugged into a chunkingimportaction  coremedia analytics does not include means to generate ivw image elements at the moment  therefore no specific format of the requested image uris is expected  client code is required to parse the reported uris  similar to the accesslogimporterstrategy described above   the bean definition looks like    bean  class  com coremedia analytics wf plugin ivwimporterstrategy      property name  rawrequestdataextractor        bean class  my package my raw request data extractor        property     property name  robotprovider        bean      class  com coremedia analytics plugin defaultrobotprovider          property name  robotsdblocation         value  config dataaggregator analytics robots db           property name  providedrobotscsv  value              property name  providedwildcardscsv  value              property name  providedbrowserscsv  value             bean      property    bean   the line pattern and the group numbers are already preconfigured  because ivw logs contain information about the browser that retrieves a tracking image  it is possible to filter robots and spiders based on this information  to this end  a robot provider is configured that reads the file analytics robots db as installed with the data aggregator   for the extractor  you must implement the interface rawrequestdataextractor  preferably by subclassing ivwrawrequestdataextractorbase  when subclassing ivwrawrequestdataextractorbase  you must implement the method  rawpagedata getpagedata uri uri   as described for the rawpagedataextractor in the previous section on the accesslogimporterstrategy  additionally  you may overwrite the method   rawpagedata getsourcepagedata uri referrer   for identifying the referrer of the current page  the argument of this method is the referrer uri as passed through the r attribute of the original request  this method is only invoked when a referrer could be detected  the result is again a rawpagedata object as in the previous method   commonlogimporterstrategy  another specialized importer strategy derived from the accesslogimporterstrategy is the commonlogimporterstrategy  which parses the apache common log format  the line pattern and the available groups are preconfigured by the strategy  you must only provide a rawpagedataextractor for parsing the uri    bean class   com coremedia analytics wf plugin commonlogimporterstrategy      property name  rawpagedataextractor        bean class  my package my raw page data extractor        property    bean   combinedlogimporterstrategy  the apache combined log format also includes information about the referring page and the browser  the combinedlogimporterstrategy can use this information to compute the source page and to detect robot accesses    bean class   com coremedia analytics wf plugin combinedlogimporterstrategy      property name  rawpagedataextractor        bean class  my package my raw page data extractor        property     property name  referrerrawpagedataextractor        bean class  my package my referrer raw page data extractor        property     property name  robotprovider        bean class        com coremedia analytics plugin defaultrobotprovider          property name  robotsdblocation         value  config dataaggregator analytics robots db           property name  providedrobotscsv  value              property name  providedwildcardscsv  value              property name  providedbrowserscsv  value             bean      property    bean   to make full use of the combined log format  you have to configure two rawpagedataextractor objects and a robotprovider  for the robot provider it is possible to use the default implementation  but the extractors must be developed specifically for your project  
  the coremediasmartcontentinfrastructure is a content management system for easy and convenient creation and administration of up to date content  interactive features and personalized web pages    this manual describes functionality and handling of the coremedia editor  coremedia webeditor and coremedia analytics and focuses editorial staff   customization and project specific modifications are not part of this manual  they require additional documentation  
  the struct editor is a property editor provided by the starter kit  that allows easy editing of struct fields  a struct field resembles the richtext field but with specialized functionality  technically speaking  it is an xml property of coremedia struct      grammar  the contextsettings property of a channel document is an example   
  usage  cm runlevel  u  user   other options   r  runlevel                   g  grace     w  timeout             runlevel  u  user   other options   a           runlevel  u  user   other options   a available options    g   grace  grace           grace period in seconds                                default                                    use jointly with the option  r   w   wait  wait             wait time in seconds  default is                              not to wait for runlevel change                                use jointly with the option  r   a   abort                  abort pending runlevel switch   d   domain  domain name    domain for login  default  builtin     p   password  password     password for login   r   runlevel  runlevel     desired runlevel  one of offline                               maintenance  administration  online    u   user  user name        user for login  required    url  ior url               url to connect to 
  the predefined hour of day report  see screenshot  is similar to the performance report  see performance report   it displays the number of page impressions and visits for a given  sub  site in the selected time interval by hour of day  
  the predefined day of week report  see screenshot  displays the number of page impressions and visits for a given  sub  site in the selected time interval aggregated by day of week  
  using the dataaggregator tool you can control the lifecycle of the data aggregator process inside a workflow server  content server and workflow server must be running before the tool is invoked  the following subcommands are possible   the command init uploads the process definition as stored in the file properties corem data aggregator xml to the workflow server  invoke this command after the workflow server has been started for the first time and after every update  at your option  you may also use the upload tool  the command start starts a data aggregator process or complains if one is already running  the command restart stops an already running data aggregator  if such a process already exists  afterwards  a new data aggregator is started  the command shutdown performs a soft shutdown of an already running data aggregator and waits until the process is terminated  the current iteration will be completed first  the command stop performs a quick shutdown of an already running data aggregator  this is not recommended  but may be required if the running data aggregator hangs due to escalated tasks  the command once starts a data aggregator process and makes sure that it stops immediately after a single iteration  this is useful for test purposes in order to analyze the system state after an iteration  if another process is already running  no action is taken at all  the command status prints information about the state of the aggregation process  for example about the current settings of variables and about running and escalated tasks  
  if you do not want to create all the content  document types and templates by yourself  you will find ready made repositories  cap examples jar  in the distribution  this jar file also contains the other examples delivered with coremedia  proceed as follows  create a temp directory and unpack the file cap examples jar which holds the example data into this directory with jar xvf cap examples jar   move to the newly created menusite install directory  copy the file menu doctypes xml and all the templates to the right directories with  cp  r    capinstalldirectory  replace  capinstalldirectory  with the install directory of the coremedia system  change the property cap server documenttypes in the file  properties corem capserver properties to  properties corem menu doctypes xml so that coremedia sci can find the doctypes file  enter the bin directory of the coremedia installation and start the content server with   cm capserver start import the data to the database by entering the bin directory of the coremedia installation and execute        cm serverimport  u admin  p admin  r  tempdirectory  menusite data  please make sure that the right place is specified for the  tempdirectory  directory  
   x x x x workflow server allow live boolean false whether it is permissible to attach the workflow server  analytics data aggregator  to a master live server workflow server managers aggregator driver string  the jdbc driver class used for connecting to the analytics database workflow server managers aggregator url string  the jdbc url used for connecting to the analytics database workflow server managers aggregator user string  the user name used for connecting to the analytics database workflow server managers aggregator password string  the password used for connecting to the analytics database workflow server managers aggregator db scripts string config dataaggregator sql   sql a comma separated list of pattern for locating sql create scripts for custom database schema extensions workflow server managers aggregator database oracle  the database type for the analytics database  which must be oracle indicating an oracle database  workflow server managers aggregator loop duration time specification  should divide      seconds evenly     s the minimum duration for one loop of the aggregation process in seconds  if the loop completes faster than this value  an appropriate delay is added workflow server managers aggregator loop offset time specification   s the offset for the loop aggregation process  in seconds  the first loop of a day after midnight is started after this duration workflow server managers aggregator minimum age time specification   s the minimum age of a page view event before it is attempted to consolidate this event  in seconds  set high enough for all events in a single session to arrive before this time has elapsed workflow server managers aggregator hint delay time specification   s the maximum expected delay between a page request and the arrival of the asynchronous link tracking event  in seconds workflow server managers aggregator allow rehinting by target boolean true whether a javascript based transition hint can override the source page and the source context specified in a transition event if the target page matches workflow server managers aggregator allow rehinting by source boolean false whether a javascript based transition hint can override the source context specified in a transition event if the source page matches workflow server managers aggregator interval duration time specification  should divide      seconds evenly    s the duration of one interval for aggregating overlay statistics  in seconds  because hourly statistics are derived from the overlay statistics  the value should divide   hour evenly workflow server managers aggregator maximum aggregation duration time specification  d the maximum time interval for which to aggregate data after a long downtime  in seconds workflow server managers aggregator maximum aggregation delay time specification  d the maximum delay before aggregating imported data when some log providers are down  in seconds  this value should be significantly below the maximum aggregation duration workflow server managers aggregator session timeout time specification   m the number of seconds after which a session without new events is considered closed workflow server managers aggregator snapshot offset time specification  s the delay from midnight in the configured time zone until snapshot reports are prepared  in seconds  this value should be close to midnight  but the snapshot should also be taken when the traffic is low workflow server managers aggregator thread pool size int   the number of concurrent threads that is used when accessing the database concurrently  for example when importing raw log data  choose this value high enough to put full load on the database and or the local machine  but low enough to stay clear of jvm and os limits workflow server managers aggregator session batch size int     the number of sessions that should be consolidated in a single transaction  choose this value low enough so that the database transactions do not get too large  but keep in mind that low values will reduce performance workflow server managers aggregator max logs per iteration int     the maximum number of logs that may be fetched from log providers during one iteration of the data aggregator workflow server managers aggregator timezone workflow server managers aggregator language workflow server managers aggregator country  string  the name of a time zone  a language and a locale for computing days  weeks and longer intervals when generating reports  use a value accepted by java util timezone  the timezone may support daylight saving time workflow server managers aggregator search log import duration time specification  h the number of seconds between two imports of the search logs workflow server managers aggregator search log import offset time specification   m the offset for the search log import  in seconds  the first import of a day should occur this duration after midnight  workflow server managers aggregator search log script path  the path to an external executable that is invoked to make logs of the search engine accessible to the jvm  if not given  this indicates  that search engine logs are not processed workflow server managers aggregator search log directory path  the path of the directory that will contain the search logs after the search log script has been called workflow server managers aggregator search log archive directory path  the path of the directory into which the completely processed search logs should be moved workflow server managers aggregator search log temp directory path  the path of the directory into which the currently being processed search logs should be moved workflow server managers aggregator search log language string en the search log language  determining among others the month string format workflow server managers aggregator archive delay time specification  h  s the number of seconds during which fact information may not be moved to the archive  settings lower than the default value will be ignored workflow server managers aggregator archive duration time specification   m the maximum time span for which fact information may be moved to the archive in one transaction   workflow server managers aggregator index rebuild threshold int       the minimum number of rows in staging tables such that indices are kept during the log import  below this number  indices are disabled and completely rebuilt after the import  if    indicates that indices should never be disabled and rebuilt  if     indicates that indices should always be disabled and rebuilt  currently only supported on oracle workflow server managers aggregator logprovider  n  url url  this property can be given as often as desired for different values of n  each row indicates the base url for managing and retrieving urls from a content application engine with enabled tracking  typically  these urls are of the form http    host   port   webapp  servlet analyticslog workflow server managers aggregator unique users enable  boolean true whether the aggregation of unique user statistics is enabled workflow server managers aggregator unique users approximate boolean  true whether an efficient  but approximating method should be used for counting unique users workflow server managers aggregator archive purge delay time specification   the time for which processed data is kept archive tables  if    indicates that archive tables are never purged workflow server managers aggregator archive purge duration time specification   m the time for which data from archive tables is purged in a single transaction workflow server managers aggregator archive purge interval time specification  w the approximate time between two purges of an archive table workflow server managers aggregator insite purge delay time specification   the time for which processed data is kept in in site analytics tables  if    indicates that archive tables are never purged workflow server managers aggregator insite purge duration time specification   m the time for which data from in site analytics tables is purged in a single transaction workflow server managers aggregator insite purge interval time specification  w the approximate time between two purges of an in site analytics table workflow server managers aggregator snapshot purge delay time specification   the time for which processed data is kept in snapshot tables  if    indicates that archive tables are never purged workflow server managers aggregator snapshot purge duration time specification   h the time for which data from snapshot tables is purged in a single transaction workflow server managers aggregator snapshot purge interval time specification  w the approximate time between two purges of a snapshot table workflow server managers aggregator dashboard  xx  purge delay time specification   for any time interval type  xx   one of hh  dh  dd  wd  bd  md  dd  ww  mm  ym  qq  ff  yy   the time for which processed data for the given time interval type is kept in analytics dashboard tables  if    indicates that such tables are never purged workflow server managers aggregator dashboard  table  purge delay time specification the value configured for the time interval type of the table for any specific analytics dashboard table  table   the time for which processed data is kept in that table  if    indicates that the table is never purged workflow server managers aggregator dashboard purge duration time specification  d the time for which data from analytics dashboard tables is purged in a single transaction workflow server managers aggregator dashboard purge interval time specification  w the approximate time between two purges of an analytics dashboard table  
  after a cm server has been started  a set of standard groups with standard users exist  these groups and users are necessary for operation of the coremedia cms components  e g  the user workflow is used by the workflow server to connect to the content management server  when uploading default workflow definitions workflow groups are created  
  to install further slave live server proceed as follows  run the installer to install additional slave live servers with slave live server licenses  if the size of the master live server database is huge  then restore the database with the last database backup of the first slave live server  if the size is quite small  you do not need the backup and go to step    note that replication of huge databases takes longer than restoring a database backup  configure the document types equally to the types of the master live server  configure the replicator in properties corem replicator properties  with the ior url of the master live server  not to go online and not to perform eventstream checks during the initial replication respectively      replicator publicationiorurl http    masterliveservercomputername   port  coremedia ior    replicator enable false    replicator checkstream false    start the slave live server  with the command  cm capserver  start  the slave live server  will switch to the run level administration     configure the replicator in properties corem replicator properties  to go online      replicator enable true  the slave live server  will start with the replication of the content     when the replication has succeeded  the server does not switch automatically to the run level online  switch to the run level online  with the command   cm runlevel  r online  g   configure the replicator in properties corem replicator properties  to perform eventstream checks during replication      replicator checkstream true  when you start the slave live server  the changes between the time of the database backup and the current state of the master live server database are automatically replicated  
  to install the first slave live server proceed as follows  install the slave live server with a slave live server license  configure the document types equally to the types on the master live server  configure the replicator in properties corem replicator properties with the ior url of the master live server  not to go online and not to perform eventstream checks during the initial replication respectively      replicator publicationiorurl http    masterliveservercomputername   port  coremedia ior    replicator enable false    replicator checkstream false    start the slave live server with the command  cm capserver start  the slave live server will switch to the run level administration     configure the replicator in properties corem replicator properties to go online      replicator enable true    the slave live server will start with the replication of the content       when the replication has succeeded  the server does not switch automatically to the run level online  switch to the run level online with the command   cm runlevel  r online  g   configure the replicator in properties corem replicator properties to perform eventstream checks during replication        replicator checkstream true  
   type description example integer a property that contains an integer value  see     string a property that contains a string  a string property is not written with quotes  see     boolean a property that contains a boolean value  see     link a property that links to another document  see     struct a property that contains a struct  see      
  question    how can i access arbitrary resources    answer   get the root folder of the repository    foldermodel rootfolder editor geteditor   getresourcefactory getrootfolder     this returns a foldermodel which can be used for further processing      get the resource you are looking for      resourcemodel myresource rootfolder pathlookup new string      myfoldername    mydocumentname        or   resourcemodel myresource rootfolder pathlookup new string  myfoldername mydocumentname      this will return a resourcemodel of the searched resource or null if the resource does not exists   
  all properties can be used as single values or as lists  selected with the cardinality combo box   type guessing  the best way to define the type of a property  is to explicitly type this property with the help of the type combo box  on the one hand  you have to do it for lists anyway on the other hand it provides you with the type icons known from the coremedia editors  nevertheless  the struct editor is also able to  guess  the type of a property for your convenience   numberoflines    would give you an integer property numberoflines ten would give you a string property numberoflines true would give you a boolean property numberoflines  textmarkedasinternallink  would give you a link property  if you use type guessing  you will see no type icons before you check in the document  if the tabbed variant of the struct editor is enabled in your system  you can switch to the xml tab in order to check the created xml  the type guessing has some implications for empty properties used for a template as shown table  
   format guessed type name  default type string  cardinality single name without following list or blockquote default type struct  cardinality single  
  for the ease of editing  the struct editor allows you to enter text  that might violate the proper format of a struct property  this would result in an error message  if you try to save your document   
  be careful  if you do not have the unlimited  but the single workflow edition of the coremedia workflow server  you may execute the upload only once for a publication workflow  the workflow you have chosen cannot be changed without support of coremedia  please make sure to select the workflow you wish to use during the initialization  
  the following section describes the configuration of the included tomcat servlet container as required for setting up the coremedia ads and gives some hints for the integration with other servlet containers  for further documentation please consult the manufacturers   if you install several active delivery server contexts in one servlet container  for each context a separate active delivery server license is needed   the directory layout of the jakarta tomcat servlet container is as follows  
  if you want to install the coremedia content management server as a single site or multi site system  proceed as follows  
  add a string property  if you want to add a string property to your struct field  proceed as follows  check out the document and click in the struct field  enter the name of the property and the string value  coloroffield red for instance   if a number or boolean value appears after the equal sign  select string from the type combo box     add a boolean property  if you want to add a boolean property to your struct field  proceed as follows  check out the document and click in the struct field  enter the name of the property and the boolean value  showcomments true for instance   if you want   select boolean from the type combo box   add a link property  if you want to add a link property to your struct field  proceed as follows  check out the document and click in the struct field  enter the name of the property and a dummy value  relatedcontents foo for instance   mark the dummy value as an internal link to the document you want to reference  the dummy text will not be saved and replaced by the path of the linked document after you checked in and checked out the document    the editor sets the link type of the property to the resource type of the target document  if you want to allow a more general link type  assign it with the type combobox     add a struct property  if you want to add a struct property to your struct field  proceed as follows  check out the document and click in the struct field  enter the name of the struct property  select struct from the type combo box   enter the properties of the struct property below the name     mark the properties as blockquote with the  icon     create a list of properties  all property types can be used in a single variant or as a list  if you want to add a list property to your struct field  proceed as follows  check out the document and click in the struct field  enter the name of the list in the first line   select the type of the list elements from the type combo box  select list from the cardinality combo box    create an ordered list from the list elements below the title using the   icon     create a template  a template is a struct property that contains no values  simply add empty keys and empty name lines of lists or structs to the field  use table as a guideline  the following table shows some rule of thumbs    
  coremedia cms is the future proof standard software solution for production  administration and distribution of multimedia content for digital services   content applications such as high volume web sites and device independent multi channel services are implemented cost effectively in minimal time using coremedia cms   this content applications developer manual is written for developers  people who set up and tune  who integrate and implement coremedia cms  it describes how to make all the features work well and deliver content in the most effective way to the customer   out of the box functions for complete editing processes in the easily used coremedia editor  rapid prototyping features  an acclaimed architecture and a matching  proven process for content application projects guarantee excellent results and high  sustained customer satisfaction  
  the coremedia content application engine applies the object oriented concept of method dispatch to templating   the process of selecting the rendering template to be used for a content bean  it is possible to register templates for content beans on any level of the inheritance hierarchy  a template registered to a content bean is automatically also applied to the content bean s subclasses   unless another template is registered for a more specific subclass  like in object oriented programming  the run time type of a content bean determines the template to apply  the system first tries to retrieve a template that is registered for the content bean s class  and if unsuccessful  it walks up the inheritance hierarchy and returns the first template found  in this behavior  it is similar to a polymorphic method call    however  there is a difference to a java method call  as it is possible to register templates both for content bean classes and for interfaces  parent interfaces are also inspected whether a template has been registered for them  when the lookup for a template to a class is performed  the system first looks for a template registered under the class itself  then checks the implemented interfaces  and then continues the lookup with the superclass  this lookup style in the fashion of a breadth first search ensures that the most specific template is retrieved    it is possible to register templates with the same name for different classes  also  the object that the template is supposed to render is available in the template under the identifier  self   by default  the coremedia content application engine uses jsp as its templating technology  
  caching is conceptually separated from the business objects  the business objects are beans for contents in the repository and should not contain any additional fields   they are designed to simply provide read  and write through access to their content objects in the database  caching is configured in a declarative manner without direct modifications to the business objects  you can define properties on individual content beans that are to be cached  as well as aggregations and other forms of associations with other business objects  these caching definitions are coined data views  from this declaration  the coremedia content application engine will generate classes that are equivalent to your business objects but additionally have cached state  the generation process is almost transparent and the generated classes comply with the same public interface s  as your original classes  
  the content application engine comes with a source code generator that reads your document type definition file and generates beans for each document type  the bean interfaces mirror the document properties  and the class hierarchy mirrors the document type hierarchy  after generating the code  you can modify and adapt it to your application s needs   the code generator can be invoked as follows from within the web inf directory of the coremedia content application engine   java  jar lib beangenerator jar   this gives you all available options of the generator as shown in table  you need to pass the location of your document type definition file s   a package for the generated classes as well as a target directory for the source code  by default  the generator creates code with generics for link lists as comments    
  you are free to modify the generated code  for example  you can  add a new method to both the public interface and the  impl  class remove a method from the public interface of a bean  it will still be available for the implementation classes but not for clients  combine both to implement a derived property based on the now hidden content property  possibly with a different result type implement additional interfaces that may cross cut the document type hierarchy  when extending  you should not declare any fields in a content bean except for read only  immutable service references   usage of doctypeaspects and the beangenerator  if you intend to use the concept of doctypeaspects to attach properties to an existing doctype definition from a separate definition file  you have to consider two things   see administration operation manual  section        attaching properties to existing document types   and starter kit manual  section      extending document type definitions       doctypeaspects were introduced to support the concept of plug ins of the coremedia starter kit plug in api at document type level  but the use of doctypeaspects also enables you to separate different concerns in separate doctype definition files generally    similar to the startup of a content server the beangenerator merges properties defined in a doctypeaspect  with the ones defined in the targettype before it generates the bean code of the targettype  the generated code of the targettype bean then contains also the methods for the attached properties  it is therefore currently not possible to generate starter kit aspectbeans with the beangenerator  
  a few important patterns are used by the generated content beans  keep them in mind when you extend these classes    construction  content beans are both used to denote content as well as references  links  to content  a content bean used as a link must be cheap to construct  thus  at construction time  a content bean should only set the information required to identify itself  its contentbeanfactory and content object  and maybe other required services like a dao or a jdbc datasource   no content should be retrieved  the source code generator fulfils this requirement by generating a default constructor and the two getters defined in the contentbean interface  when extending  you should not modify the default constructor in the generated beans  identity  equality  two content beans originating from the same factory for the same content object must be equal  they identify the same business identity  generated content beans fulfil this requirement by inheriting  equals and  hashcode from abstractcontentbean which is defined in terms of the corresponding content methods  when extending  you should not override equals or hashcode  mutable state  a content bean must not store mutable information  caching of mutable state is performed in other layers  all methods of a content bean should always modify the content object directly  this way  a content bean can never be invalid when the repository contents change  when extending  you should not declare any fields in a content bean except for read only  immutable service references   these patterns apply to any object that you design as a representative for data stored in an external data source and that you want to use within the dataview caching framework  they ensure that the object is lightweight  interchangeable and always valid  we will deal with efficient data retrieval at a later stage  other designs are also possible  e g   stateful business objects directly loaded from a dao  but they require a more complicated interaction with the caching framework that is not covered in this manual  
  in order to  bootstrap  yourself into the world of content beans from the coremedia unified api  you need to use the content bean factory programmatically  for example from within a controller  the factory api is simple  the most relevant method is contentbeanfactory createbeanfor content   for example   content content          for example through a query article article      article contentbeanfactory createbeanfor content    the controller needs access to the content bean factory  since the controller itself typically is a bean defined in the application context  you can inject the factory reference into the controller object    bean id  mycontroller  class           property     name  contentbeanfactory       ref  contentbeanfactory            bean   this fragment will invoke  setcontentbeanfactory on the controller supplying an instance of the referenced factory  
  we learned that the business objects should not store any of the information they receive from their data source  this task is performed by a dedicated caching layer  several questions arise  what is cached  how is the cache accessed  how is the cache invalidated   caching in the content application engine has a number of important properties   caching is defined outside the business objects  caching is achieved by building a subclass of a business class  materializing properties into actual fields and storing an instance of this subclass  cached objects have the same interface as the non caching business objects so that one can develop against non cached versions first and does not need to change the code later  a set of public bean properties of the business object is subject to caching  cached objects can be aggregated  one cached object can store a direct object reference to another cached object  once retrieved from the cache  this association can be navigated without further synchronization or cache lookups  this is important for fast rendering  it is possible to cache different sets of properties of the same business object   more  or  different  properties of this object can be used in different contexts  often it is not sensible to cache all properties of an object for two reasons  if one property set is significantly smaller than another or faster to compute  e g   only the metadata   it may be worth the overhead of caching two objects  the second   more important   reason is dependencies  if one representation acquires less dependencies than another and provides all properties needed in a certain context it should be cached separately  e g    uses only content properties from the cms but not the database    especially different amounts of aggregation are a concern here  e g   when the object cached in the parent property in turn depends on a different content object   cache invalidation is dependency driven  i e   a cache value has associated dependencies on external values and is invalidated if one of these changes  this happens automatically for dependencies to the content repository   the content application engine caching layer gives you the option to define several cached representations for one business object  it is possible to distinguish  which properties of the business object are cached and  for properties that refer to other business objects  which cached representation  if any  should be aggregated  such a definition is called a data view of an object   
  do not confuse this term with the term view used in rendering  a data view is an object that extracts and aggregates source data in the cache  a view is a method of rendering an object  of course  data views and views are related  in order to render a view efficiently  the displayed object should provide its data sufficiently fast  possibly using a data view from the cache  
  for example  you can define   fully cached  for display  for a data view that contains a page s description  its content and its parent page  for linking   for linking   a data view of a page that only contains its description  
  data views are defined declaratively using xml  behind the scenes  subclasses of the application classes are generated  this process is transparent  as the remainder of the application should be written to the application class interfaces  looking at a data view object s class  however  it becomes obvious that it is actually an instance of a subclass of the original business class  we will describe later how these classes behave   a sample xml data view definition using the example from above looks as follows    dataview appliesto  com company pageimpl      property name  name       property name  description       property name  content       property name  parent  associationtype  composition        dataview appliesto  com company pageimpl  name  forlinking          property name  name          dataview      property    dataview   this definition says  the default  no name  data view of a pageimpl materializes the properties name  description  content  and parent as fields where the latter is itself a bean of type pageimpl with data view forlinking  which is defined inline  applied  the association between the two data views is a composition  that means  the outer object embeds its private parent instance which is not shared with other beans  i e   the outer element owns the inner element exclusively  specifically  no cache lookup is performed to retrieve the inner element  but it is always created when the outer element is created  the various association types will be described later   this data view defines a view on page documents that makes the following properties cached and quickly accessible   page  name description content parent  page parent name  all other properties are inherited from your  impl classes and are therefore accessed dynamically  that does not mean that they are necessarily slow  there is a document cache after all    to use the defined data views  the data view factory dynamically constructs two subclasses of pageimpl  one for each data view definition  when the default data view is loaded  the data view factory will look into the cache with a key  page content bean  null  default    remember that the page content bean s equality is defined in terms of its content id   if the key is not in the cache  the factory will create an instance of the first subclass and load the properties description  content and name by invoking the business methods and storing the results  furthermore  it will load parent  another lightweight pageimpl  and construct data view forlinking for it  to do so  it will not do a cache lookup but instantiate the corresponding second subclass of pageimpl directly  the result is stored as the materialized parent property of the result   the generated code for the definition from above is roughly equivalent to the following   class pageimpl   extends pageimpl     string name   super getname            pageimpl parent       pageimpl dataviewfactory lookupuncached          super getparent     forlinking             page getparent         return this parent               it is possible to define dataviews with the same name for different classes  during the lookup for that name  the class of the object determines which data view definition is chosen   a dynamic dispatch very much like for content bean creation or the templates  this way  it is possible to apply a dataview to a property value with a varying runtime class   the default data view has a special meaning  it is the data view that is loaded at the beginning of a request when rendering the bean referenced by the uri  so this data view should correspond to the properties that the default jsp and its included fragment templates require  
  there are a number of design tradeoffs for data views  consider the forlinking data view of the page  which is a composition and thus creates a private instance for each child  this design avoids a cache lookup  caching has an overhead and allocating a cache entry for a parent object with only one string property would cost more than it saves   on the other hand  since we just defined a cacheable default data view of a page anyway  we could consider reusing the parent s default data view for the child    dataview appliesto  com company pageimpl      property name  name       property name  description       property name  content       property name  parent  associationtype  aggregation      dataview   an aggregation is different from a composition in that a cache lookup is performed for this property  all children would therefore share the same parent instance  provided it is not evicted from the cache   in this definition  a pageimpl would aggregate its parent which would again recursively aggregate its parent     until null is reached  any data view for null is null   since we expect parents to be frequently accessed anyway  it is ok to have them pulled into the cache by their children  the generated code is basically equivalent to the following   class pageimpl   extends pageimpl        null is the default dataview   pageimpl parent       page dataviewfactory lookupcached super getparent    null      public page getparent         return this parent               however  you also have to take the cache s dependency tracking into consideration  when a data view reads a content object  a dependency is recorded  when a data view does a cache lookup for another data view  a dependency is recorded as well  given the page definition above  a child page will therefore depend on its content object and onto its parent which itself has a dependency on its content object and so on  thus  if you change the name of the root page  all page objects will be invalidated since they have transitively aggregated it   there is an alternative solution  instead of embedding the default data view of our parent  we can do the cache lookup on every access to the parent property  we avoid the dependency  instead we always read the latest version from the cache  this lazy lookup is achieved as follows    dataview appliesto  com company pageimpl      property name  name       property name  description       property name  content       property name  parent  associationtype  static      dataview   defining a static association will make the caching system store which parent a page is associated with  the lightweight pageimpl instance that basically only holds the parent id   in place of its default data view  which contains the parent s state   instead  a cache lookup is done for the default dataview whenever the parent property is retrieved  in java code  this behavior looks like this   class pageimpl   extends pageimpl     pageimpl parent   super getparent            page getparent         return  page dataviewfactory lookupcached         this parent  null                a cache lookup is reasonably efficient to make this definition possible  you should  however  keep an eye on the number of lookups  a cache lookup requires thread synchronization  and too many synchronization requests might lead to contention   one last thing needs mentioning  properties that should not be cached are simply omitted from the data view definition  but what if we still want to apply a dataview to the property value  for this case  a  dynamic  association can be defined    property name  randompage  associationtype  dynamic     with this definition   getrandompage   will be generated as follows   class pageimpl   extends pageimpl          page getrandompage            invoke original impl  don t cache     page p   super getrandompage           cache lookup     return  page dataviewfactory lookupcached        p  null                to recapitulate  if a property is an association to another bean  it is possible to apply a dataview to that bean as well  there are four ways to do that  
  types of dependencies  you may use any object as a dependency which is suitable as a key in a hashmap  typically by implementing the methods equals object  and hashcode   properly or by using the very same object as a dependency and for invalidation     the class com coremedia cache cache already provides support for timed dependencies that invalidate automatically at a certain point in time  you may define these dependencies by invoking cache cacheuntil date  or cache cachefor long  during the evaluation of the cached property method  have a look at com coremedia cache cache s javadoc for further details     dependency tracking and contentbeans  when using contentbeans or  more generally  the unified api s content repository as the data source for your beans  you don t need to take care on the content s dependencies and invalidations  any access on the content repository s content objects causes appropriate dependencies to be tracked automatically  further on  changes on the content objects leads to automatic invalidations  the only prerequisite  which is fulfilled by the default cae configuration  is that the dataviewfactory and the unified api share the same cache instance   
  the coremedia cms      is a powerful and flexible platform for sophisticated high end content applications like high volume websites or device independent multi channel services  its multifaceted possibilities of customization empower you to design content applications with maximum performance and convenience for such different domains as news portals  technical manuals or mobile services   the developer manual series shows you how to customize the coremedia cms      for your specific needs  this covers several aspects which can be roughly divided into three areas   content modeling content management  possibly workflow driven  content delivery  in order to benefit from this manual you should be familiar with the general coremedia cms concepts  especially with the component architecture as described in the administration manual and the basic knowledge as described in the user manual   coremedia cms clients have very different tasks which range from gui editing to html generation  also the necessary extent of customization differs widely  while the editors are fairly well usable even without any customizing  the cae is rather a framework which provides basic features like content access and caching  such differences require specialized apis which are covered in detail by the continuative manuals of this series     the following sections give an overview of customizing particular coremedia cms clients and developing new clients from scratch  its purpose is to give you an idea of what is possible  where to start and which continuative manual you should consult for details   
  according to the underlying content model the coremedia editor generates forms for resource editing  the default forms provide editing facilities for each property of a document  so called property editors   general editing functionality like copy and paste and coremedia cms version control features  see user manual  basic knowledge   you can control the layout and behavior of these forms concerning the following aspects   use special property editors  e g  a string editor which automatically converts to upper case  coremedia provides some alternative property editors to use  but you can also implement your own   initialize and validate input  e g  make sure that an integer value is greater than     provide complex commands  e g  create a new document and link it into some navigational structure   furthermore you can control   localization language specific spell checking rich text formatting filters to hide some objects from the users  e g  document types they are not supposed to instantiate or folders that do not concern them  renderers to display objects  e g  the fields in the document table   many editor features can be achieved or controlled simply by configuration  without writing a single line of code  however  understanding all the possibilities requires some knowledge of java    see the editor developer manual for details  
  after you set some approval status onto the current content item displayed in the approval view you are offered the next user generated content item   which has not yet been approved or rejected  i e   new or marked as unclear by other editors   according to the parameters you choose in the search toolbar of the approval tab  to select new parameters click onto the  change  link  you can enter a text you are looking for in the user generated content items and the order in which the items should be presented  to accept new parameters click onto  accept   
  you can approve any user generated content item you have found in the user content tab  click on it and you will see a single approval view similar to that in the screenshot above  in the approval area to the left  the information about the current approval status of the content item is presented together with the details about the date and the name of the approver  if the approval status has been changed previously  approval history details are shown below   you can change the approval status of the chosen user generated content item  comment your decision in the comment field  or return back to the user content list view by clicking onto the  to list  button without changing anything  
  dynamic content are lists of content items or pages that are dynamically computed  the top viewed items calculated by the analytics engine are an example  you will not place these items directly on a page  but use placeholder content  which you add to the page like any other content  the properties of the placeholder content exactly determine the content to display   all placeholders for dynamic content are sub types of the abstract document type cmdynamiclist  it has a property maxlength that defines the maximum number of items in the list  depending on the data source that generates the dynamic content  fewer items may be displayed  in particular  if the data source returns no items at all  the list will not be shown on the page  how a list is configured to display a certain set of content depends on the actual data source   the starter kit comes with the analytics feedback plug in that generates dynamic content with the analytics engine but other starter kit plug ins may add own data sources   adding analytics report results to a page  
  prerequisite  in order to use reports from the analytics engine as a data source  the analytics feedback plug in must be installed  see section for details  
  if you want to add dynamic content based on reports of the analytics engine to a page  use documents of type cmnameddynamiclist  you can use this document just like articles or other cmteasable document types  it might be useful to define cmnameddynamiclist documents as templates for common scenarios  then  you can simply copy the documents or link to them  to create a document  proceed as follows  create a new cmnameddynamiclist document   enter the name of the plug in  analyticsfeedback  into the plugin property of the document  set the maxlength property to the maximum number of items you want show in the resulting list  do the remaining configuration in the struct property contextsettings as described below   save your changes  add the cmnameddynamiclist document to the appropriate document that should include the dynamic content   now  the dynamic content should appear on the page   configuring the report settings  the following example shows the structure of a configuration of the contextsettings property  many of these variables are deployment specific and are likely to be prepared by the system integrator  for instance  the available report names  default variable values and default refresh interval depend on the web application configuration in  web inf spring analytics feedback plugin analytics feedback plugin xml  the only available report in the default configuration is  topviewedpages   that will return the most visited cmteasable and cmchannel pages  
  a dynamic content data source delivers content lists that can be used as dynamic content  see section   if you want to add your own data source  you have two options   define your own subtype of cmdynamiclist  add your own custom properties for the configuration of the dynamic content list and implement the necessary content bean classes  in particular the getitems   method  use the existing content type cmnameddynamiclist  which delegates the computation of the dynamic content list items to a starter kit plug in  in this case  the entire configuration of the dynamic content list is typically performed by editing the contextsettings property of the cmnameddynamiclist content   the second option will be described in the the remainder of the section   use cmnameddynamiclist for the data source implementation  using the existing cmnameddynamiclist document type for the data source implementation means that you have to create or extend a starter kit plug in  it consists of the following steps  create a class that implements the dynamiclistaspect interface with two type parameters   t  and  a extends aspectaggregator    t  is the type of items to return  usually page  and  a extends aspectaggregator  is the aggregator type of this aspect  usually cmnameddynamiclist    your aspect implementation may look as follows  
  keep in mind  that your aspect properties  getitems    might be cached by dataviews  if your implementation depends on content properties  such as aggregator getmaxlength    the dataview will automatically be invalidated whenever those property values change  however  if the dynamic content list is supposed to change over time  you should consider using a timed dependency or any other com coremedia cache cache dependency mechanism to allow the dataview to be invalidated and the dynamic content list to be refreshed periodically  if dataviews are not in use  cache cachefor will have no effect     register your class in your plug in configuration file as an aspect of the cmnameddynamiclist content type  
  to make use of your new data source  deploy your plug in  create a document instance of cmnameddynamiclist in the repository  using the coremedia editor or web editor   in the document set the plugin property to the name of your plug in and perform your implementation specific configuration in contextsettings  
  the webeditor offers different windows for different editing tasks   explorer window the explorer window is the main window  made of a folder view  a document view and a detail view  see section   workflow window for creation  processing and surveying workflows  see section  query window for assembling  modifying and managing queries  see section  publisher window to monitor progress and results of publication processes  see section  user manager window to change the password  see section   
  three roles are defined for the predefined workflows  see section for more information on these   for each role a respective group exists    approver role  a member of this group can approve resources in a change set   composer role  a member of this group can start a workflow and create a change set   publisher role  a member of this group can publish resources in a change set    a user must be a member of these groups  so that he can execute the appropriate task  a user must also be a member of a group which has the appropriate rights on the resource which should be approved or published     example  if a user shall be able to approve a document a  he must be a member of two groups    the approver role group  in order to be able to accept the approve task in the workflow  and  a group which has approve rights on the resource a    it is possible to merge these two groups in one   
  the unified api is the preferred api for interfacing with the coremedia cms when writing custom tools and agents and when writing content delivery applications  in particular  it is tightly integrated with the coremedia content application engine and it replaces the scripting api  moreover  it is available in the workflow server for modifying content and for implementing plugin classes   the unified api allows you to access both the content server and the workflow server from custom code  it presents the properties of documents  versions  folders  users  groups  processes  and tasks in a uniform and object oriented way   while the unified api is comprehensive  care has been taken to isolate various aspects of the api  so that each individual aspect remains of moderate size  to this end  a connection mediates between multiple repositories  in turn  each repository is augmented by services and provides access to stateful objects  stateful objects share a common meta model and are identified in a common name space  this style is applied throughout the api and promotes uniformity   typical applications of the unified api are   content delivery through a servlet engine  form driven web applications for content modifications  administrative command line tools  background processes whose actions are triggered by events  periodically scheduled processes that carry out custom actions  workflow actions  expressions  performers policies  and rights policies   
   name value default description content server url url string  determined heuristically  the ior url of the content server  workflow server url url string  fetched from the content server  the ior url of the workflow server user string n a the name of the user to log in domain string    the domain of the user to log in password string n a the password of the user to log in use workflow  true    false         whether the workflow server should be connected  if  true   the connection is required  if     the connection is optional  if  false   no connection attempt is made orb a org omg corba orb object  created automatically  the orb for setting up the corba connection connection factory class string  builtin factory  the name of a class implementing the interface capconnection connectionfactory  
   property value default description heapcachesize int          the number of bytes to use by the main memory cache blobcachesize int          the number of bytes to use by the disk cache blobcachepath string n a the location of the disk cache in the file system  this property maps directly to the system property java io tmpdir maxcachedblobsize int unlimited the maximum size of a blob that can be cached blobstreamingsizethreshold int        the threshold for blob sizes above which blobs are streamed instead of being completely downloaded first blobstreamingthreads int   the maximum number of threads that is used for streaming large blobs eventchunksize int      the maximum number of events that is fetched at once from the content server when attaching a listener with a historic time stamp  
  add an integer property  if you want to add an integer property to your struct field  proceed as follows  check out the document and click in the struct field  enter the name of the property and the integer value  numberofcomments    for instance   
  you can use these fields to enter  properties used by the starter kit  the properties can have different types as shown in the next table   
  the struct editor offers a convenient way to edit struct properties  see section   the struct editor comes in two flavours  one with tabs to switch between an xml view and a formatted view and the default editor only offering the formatted view    you have to configure the editors in the editor xml file  in order to configure the editors  simply add the appropriate class to the editorclass attribute of the  property  element  
   editor class default struct editor hox corem editor toolkit property structrichtextpane tabbed struct editor hox corem editor toolkit property tabbedstructpropertyeditor  
  if you use the microsoft sql server as a database for analytics with the starter kit  you have to apply a change in the analytics web application  this is due to the fact  that the web application uses an sql statement containing the      operator for string concatenation following ansi sql  the microsoft sql server does not support this operator    simply replace the      operator from the web inf spring analytics analytics reportdefinitions properties file of the analytics web application with the     operator  
  documents are made up upon different fields of specified order and number  this is defined in the document type definition  in addition  the fields can also be edited in the group or user specific editor xml file  therefore  different editors might see  for example  different fields in the same document  except for system required document types such as query  for queries  see section   or preferences  these can be modeled after project requirements   the following table lists field types  
  string properties and utf   encoded database  in an utf   encoded database  up to three bytes are required to store a single character  ascii characters are stored in one byte and non ascii latin   characters  e g  german umlauts  in two bytes  asian characters need three bytes for representation   the attribute length in the element stringproperty defines the maximum length of allowed characters  the actual byte size of the generated varchar table column in the utf   encoded relational database is a product of the value of length with an additional factor   to avoid representation problems and to store even asian characters the simplest but wasteful way would be to multiply the string length defined in the stringproperty element with a factor of three to compute the length of the generated varchar table column that holds the string values  in addition to the waste of storage  this could lead to database problems because database boundaries are reached when many string properties with big length values are specified in one document type or within a document type inheritance hierachy  to be more flexible  every stringproperty element can have an attribute utf length to specify the maximum number of bytes to hold a string property value  the value must be at least equal and at most three times greater than the value of the length attribute  if for nearly all string properties in the document type schema the ratio of maximum character length to byte length is the same  one can simply add an attribute utf weight to the documenttypemodel element  the value must be between     and     and  when divided by      defines the ratio between character and byte length for all string properties in the type schema where the attribute utf length is not explicitly set  the default value for the utf weight attribute  if omitted  is       for example the value of the attribute utf weight can be set to      if a string property with a given length attribute value of    and without utf length attribute is specified  then the maximum byte length is                    this may be enough for german text strings  because a string with a character length of    could contain    two byte encoded characters  e g  german umlauts   if the length of a string is less than    characters  than even more non ascii characters are allowed    
  you can also link from one document type file to document types and grammars defined in other files   example   the base doctypes xml file    documenttypemodel xmlns  http   www coremedia com      documenttypes    name  base doctypes      xmlgrammar name  mycompany richtext  root  company      publicid     mycompany  dtd richtext      en      systemid  lib xml mycompany richtext dtd       doctype name  basedocument  abstract  true      stringproperty name  titel  length            doctype     documenttypemodel   the specific doctypes xml file    documenttypemodel xmlns  http   www coremedia com      documenttypes      importdoctype name  basedocument  from  base doctypes      importgrammar name  mycompany richtext  from  base doctypes       doctype name  text  parent  basedocument      xmlproperty name  text  grammar  mycompany richtext       doctype     documenttypemodel   in this example  the doc type basedocument and the grammar mycompany richtext are defined in the base doctypes xml file and are also used in the specific doctypes xml file  to this end  both are imported using the  importdoctype  and  importgrammar  elements  
  used struct properties  table shows the struct properties that you can use in the contextsettings field of cmlinkable documents  these properties are mostly used by the starter kit  reference  website in combination with the default jsp templates  
     parent struct   struct name type description example teasertargetlinktext string the text to be displayed as link text at the end of teasers  interpreted as a java text messageformat pattern which is formatted using the following parameters   self title  self target linktext  self target title more    search result previous string text that is used for the link to the previous search result page back search result next string text that is used for the link to the next search result page next search result hitsperpage int number of search result per page   breadcrumbs label string text to be written in front of the breadcrumb navigation you are here  navigation struct sub struct for grouping navigation related settings    navigation   startlevel int the navigation depth where navigation rendering should be started  e g  when set to    navigation items of the first level are not shown     navigation   expandall boolean indicates whether all sub navigation items shall be expanded  true  or only those of the currently active node  false  false locales struct a sub struct used as a map from the locale to a human readable name for the locale  e g  de de should be printed as  german  on a english website  while it must read  deutsch  when rendered on a german site  used for rendering the locale switching links   structproperty name  locales      struct       stringproperty name  de de  german  stringproperty       stringproperty name  en us  english  stringproperty      struct    structproperty  mimesettings struct a sub struct that maps from a mimetype to the jsp view name for generic inclusion of multimedia data  cmmedia jsp   structproperty name  mimesettings      struct       stringproperty name  application x shockwave flash  asflash  stringproperty       stringproperty name  video quicktime  asquicktime  stringproperty      struct    structproperty  flashsettings struct a sub struct used for grouping flash movie relevant properties used in asflash jsp when embedding adobe flash movies  the struct properties within this struct are rendered as  param name   structname   value   structvalue     tags within the  object  element of the html output  structproperty name  flashsettings      struct       stringproperty name  base  http   webtv coremedia com site   stringproperty       stringproperty name  wmode  transparent  stringproperty      struct    structproperty  analyticsfeedback struct sub struct for grouping analytics feedback plug in related settings  structproperty name  analyticsfeedback      struct       intproperty name  refreshinterval      intproperty         structproperty name  report            struct             stringproperty name  name  toppages  stringproperty             structproperty name  variables              struct               stringproperty name  rankrange  top    stringproperty               stringproperty name  category  sports  stringproperty               struct             structproperty           struct         structproperty       struct     structproperty    struct    analyticsfeedback   refreshinterval int defines the number of seconds to cache the resulting list for  overriding the default value   see above    analyticsfeedback   report struct sub struct for grouping analytics feedback plug in report related settings  see above    analyticsfeedback report   name string defines the symbolic name of the report provider to use  see above    analyticsfeedback report   variables struct defines the values for report variables  the name and type of available variables depend on the report  see the report documentation for details  contents of the variables struct property will be converted to a map and passed to the analyticsreportdataprovider setvariablevalues java util map  method   see above   
  the coremedia richtext component provides   extended text formatting    superscript  subscript  strike through in addition to bold  italic and normal formatting    the assignment of styles such as font  font color and background color wysiwig list editing    bulleted and numbered lists  also nested lists  blockquotes wysiwyg table editing convenient ways to insert and locate images  spellchecking internal and external links  
  the directory jakarta tomcat contains the tomcat   installation and the coremedia web applications active delivery server  the web editing server  the proactive delivery server  the content application engine  the differencing engine   the web services engine  if installed   the individual subdirectories contain the following  the standard directories of the tomcat installation will only be explained in short    bin  start and stop scripts conf  configuration files conf server xml  server configuration file doc  documentation common lib  runtime resources var logs  log files webapps  auto deployed web applications  the coremedia active delivery server   webapps coremedia  ads web application context webapps coremedia images  icons and images for the ads webapps coremedia pbe  resources for preview based editing  webapps coremedia templates  web application templates webapps coremedia web inf  private directory  webapps coremedia web inf admin  administration templates webapps coremedia web inf develop  development templates webapps coremedia web inf lib  runtime resources like java jar files and dtds webapps coremedia web inf lib xml  xml dtds webapps coremedia web inf properties corem  configuration files webapps coremedia xsl  xsl stylesheets   the coremedia proactive delivery server   webapps pads  proactive delivery server web application context webapps pads images  images webapps pads templates  templates webapps pads web inf  private directory webapps pads xsl  xsl stylesheets  the coremedia web editor   webapps editor  webeditor web application context webapps editor images  images  webapps editor libjs  javascript programs for the web editor  webapps editor lib  libraries for the web editor  webapps editor templates  web application templates webapps editor wftemplates  templates for the workflow window webapps editor web inf  private directory webapps editor web inf admin  administration templates webapps editor web inf lib  runtime resources like java jar files and dtds webapps editor web inf lib xml  xml dtds webapps editor web inf properties corem  configuration files  webapps editor xsl  xsl stylesheets  the coremedia webdav support   webapps webdav  webdav server web application context webapps webdav web inf  private directory webapps webdav web inf lib  runtime resources like java jar files and dtds webapps webdav web inf lib xml  xml dtds webapps webdav web inf properties corem  configuration files   the web editing server   webapps wage  authoring server web application context webapps wage css  the cascading stylesheets webapps wage images  images webapps wage lib  necessary libraries webapps wage libjs  the javascript library webapps wage skins  coremedia skin for browser webapps wage templates  jsp templates webapps wage web inf  private directory webapps wage wftemplates  jsp templates for the workflow support webapps wage xsl  xsl stylesheets  the web services engine   webapps wse app  contains the administration console for the web services engine  webapps wse conf  contains the configuration files for the web services engine  webapps wse web inf  contains all jars for the web services engine   the template for the content application engine with editing services extension   webapps contentapplicationengine template pbe  resources for preview based editing  webapps contentapplicationengine template css  css files for the application   webapps contentapplicationengine template libjs  javascript library   webapps contentapplicationengine template pbe  jsp files for pbe  webapps contentapplicationengine template views  jsp files for editing services  webapps contentapplicationengine template web inf spring  spring configuration files   
  the starter kit comes with a preconfigured cae feeder  which sends some data returned by the starter kit s content beans to the search engine in order to enable search on the website  this includes a special index field with context information  the index field is used to restrict searches to the content of the current site   this section describes the default configuration of the cae feeder for the starter kit  please see the content applications developer manual for a general description on how to configure the cae feeder   first of all  the cae feeder is configured to index content beans for documents of type cmteasable  and subtypes  which are located in the folder  site  this is configured in the file config caefeeder spring caefeeder properties   feeder contentselector basepath  sites feeder contentselector contenttypes cmteasable  the indexed content bean properties are configured in the files starterkit base caefeeder mappings properties for base and starterkit standard caefeeder mappings properties for standard document types of the starter kit  both files are located in the directory config caefeeder spring starterkit  all configured properties will be indexed in the index field textbody  for example  the following line configures the cae feeder to index the properties subject and text of all cmarticle beans  therefore the indexer will call the corresponding methods getsubject   and gettext     feeder beanmapping com coremedia starterkit common contentbeans   standard cmarticle subject  text  the cae feeder sets the special index field navigationpaths to the list of contexts the bean can be displayed in  each context is represented by a path of numeric content ids from the root navigation up to the parent navigation of the content bean  the ids are separated by slashes  multiple contexts are separated by the   character  the starter kit website search uses this field to restrict the search results to the content beans which can be displayed on the current site  feeding the field navigationpaths is configured in the spring xml file starterkit base caefeeder mappings xml in the directory config caefeeder spring starterkit  the configuration is a bit more complicated  it defines that an element navigationpaths is sent to the search engine for each cmlinkable  its value is computed from the content ids of the beans returned by cmnavigation getnavigationpathlist   for all cmnavigation beans that were returned as parent navigation of the indexed cmlinkable  the configuration uses the cae feeder s propertyconverter interface to create a string representation from a collection of values  you might want to have a look at the javadoc of the classes used in configuration file   all used content bean classes must be available in the class path of the cae feeder  the spring configuration files which register the content bean classes at the content bean factory are installed in the classpath or below the spring configuration directory config caefeeder spring  the starter kit cae feeder already contains these files for the starter kit content beans  
  the persistent cache is a general purpose component for computing and persistently storing values  from an abstract point of view   computing values  is meant as transforming any source data  such like a coremedia cms content  by applying some business logic on it   when computing a value  dependencies of this value on other objects are tracked by the persistent cache  a modification on any dependent object will lead to the value s  invalidation  and therefore to its removal from the cache   example   a pdf document is computed from several coremedia cms contents  during computation  all contents which are taken into account for this value are tracked as dependencies  a change to any of these contents will lead to the pdf document s invalidation   a client may use the cache to avoid unnecessary repeated computation of values which have not changed since their latest computation  due to the persistent cache s dependency tracking feature  a re computation will be performed only in case that the value s dependencies have changed   the computation results are made persistent  so they are able to endure a restart or a crash  furthermore  any invalidations that have occurred during downtime are  detected and processed after a restart   the persistent cache is the base for other components  such as the proactive engine  the cae feeder and the http cache  this chapter aims to give you a basic understanding of the things which are happening behind the scenes  rather than describing how to use the cache directly in your application  
  before using the persistent cache  you have to implement one or more cache keys and appropriate factories  this chapter shows how to implement respective classes and how to use them  for a detailed understanding  you are asked to read the api documentation as well    implementing a persistentcachekey  writing a persistentcachekey means implementing the interface com coremedia persistentcache persistentcachekey  by  for example  extending com coremedia persistentcache persistentcachekeybase  a persistentcachekey consists of the methods evaluate   and getserialized     evaluate    the method evaluate   is the above mentioned function for computing a value  represented as a java object   this method does not have any parameters for specifying the source data the computation should be applied to  such parameters should be part of the concrete persistentcachekey instance and therefore should be passed at its construction time    dependencies may be triggered as a side effect during computation  this is done by calling the static methods from inside the evaluate   method   com coremedia cache cache dependencyon object dependent   triggers an explicit dependency on a certain object  currently  only dependencies on java lang string objects are supported    com coremedia cache cache cachefor long millis   triggers a relative time dependency making the value become invalid when the time is reached com coremedia cache cache cacheuntil date date   triggers an absolute time dependency again making the value become invalid when the time is reached   in addition  an implicit dependency tracking takes place when the persistent cache share the unified api memory cache s instance  see above   operations on com coremedia cap content content objects will implicitly trigger all relevant dependencies  on the other hand  the modification of dependent contents objects will result in appropriate invalidations  example  if there is a persistentcachekey which accesses a content object during its value computation  the value becomes invalid when the content is changed    anyway  there may be situations where such an implicit tracking is not desired  to deal with this  you may use the following functions  com coremedia cache cache disabledependencies    temporarily disables any dependency tracking for the current computation   com coremedia cache cache enabledependencies    enables the dependency tracking again for the current computation    the evaluate   method is allowed to throw an exception if it encounters a serious problem  the persistent cache ensures that no information related to this key  such as dependencies  will remain in the cache  typically  a persistentcachekey s value is based on one or more  external  resources  such as a coremedia cms content object  there may be situations where this resource disappears  e g  due to deletion  while a persistentcachekey for this resource still exists  in a similar way  it might happen that a persistentcachekey is asked to be reconstructed from its serialized form although this resource has vanished  in any of these cases  the persistentcachekey should throw a com coremedia persistentcache invalidpersistentcachekeyexception when evaluate   is called   getserializedkey    as mentioned above  there is the need to deal with serialized instances of the cache keys  the method getserializedkey   provides this key s serialized form  it needs to contain all information  such as parameters  which are needed to reconstruct the persistentcachekey object from it  it is good practice to prefix the serialized key with a namespace like namespace key  this is useful when implementing the associated method createkey string of the persistentcachekeyfactory   keep in mind  that the persistentcachekey s serialized key is stored in the database when making the dependencies persistent  thus  using short keys   or short namespaces  respectively  will result in less database s disk space usage than using long keys and long namespaces    implementing a persistentcachekeyfactory  it s the com coremedia persistentcache persistentcachekeyfactory s responsibility to construct persistentcachekey instances based on the keys  serialized representations  this factory offers the method createkey string  which is the inverse function for the persistentcachekey s method getserializedkey      in an environment where several persistentcachekey instances and therefore several persistentcachekeyfactories are used  a mechanism for selecting the right factory needs to be provided  as a convention  a persistentcachekeyfactory may answer null to signal that it is not responsible for the given persistentcachekey  if the persistent cache wants to reconstruct a persistentcachekey  it sequentially asks all known persistentcachekeyfactories until a factory answers with a non null result    in case that the persistentcachekeyfactory is asked to reconstruct a persistentcachekey whose resources are no longer available  see above   it nevertheless must return a persistentcachekey  this persistentcachekey should throw invalidpersistentcachekeyexception when its evaluate   method is called  you may use the static method invalidpersistentcachekeyexception wrap string serializedkey  for creating such a persistentcachekey instance    implementing an invalidationlistener  as already stated  the invalidationlistener is an optional mechanism for a client to be notified about the invalidations  the interface s only method invalidated invalidationevent  passes a com coremedia persistentcache invalidationevent containing a persistentcachekey  the listener may either indicate that it is not responsible for this key by returning false  or   in case it returns true   it has to acknowledge the event by invoking its acknowledged   method after it has processed the event  this mechanism ensures that no invalidation is missed by the client   don t expect invalidation events to be sent immediately after the invalidation takes place  due to the interaction of several systems and the systems  general latency  an invalidation may take several seconds to take effect     accessing the persistent cache  accessing a com coremedia persistentcache persistentcache instance is simple  just pass a persistentcachekey instance to the cache s method   get persistentcachekey    in order to obtain the key s computed value  all computation  dependency tracking and storage is done by the cache  if you explicitly want to remove a key  in contrast to an invalidation   its values and its dependencies from the cache  you have to call the cache s method  remove persistentcachekey    invalidating cached items  as mentioned above  each cached entry in the persistent cache consists of a key  the serialized persistentcachekey  and a set of dependencies  whenever an invalidation of a single dependency takes place  the corresponding keys are removed from the cache  time dependencies as well as dependencies related to the unified api s content objects are invalidated automatically  either when a special time has been reached or when modifications on the contents have occurred  other dependencies such as a string dependency  see above  need to be invalidated programmatically by invoking invalidate object  of an instance of com coremedia cap persistentcache dependencycache persistentdependencycachemanagement     example  the following example demonstrates the code of a persistentcachekey and a corresponding persistentcachekeyfactory  the persistentcachekey computes a message like  hello   name   the current time is  time   which becomes invalid one hour after it s computation  
  the spring application framework is the frame that holds the coremedia content application engine together  much of the application s architecture is described in a spring xml application context definition  application specific extensions are easily plugged into the coremedia content application engine  profiting from spring s dependency injection features  furthermore  the coremedia content application engine makes use of the spring mvc framework for its web request processing   the spring framework offers excellent documentation at http   www springframework org documentation  to start off  you might take a quick look at http   static springframework org spring docs     x reference beans html beans basics in order to get an understanding of the xml bean definitions   
   property type  java type  conversion  intproperty int simply the value from the underlying content object stringproperty string simply the value from the underlying content object dateproperty calendar simply the value from the underlying content object xmlproperty markup the markup is transformed  every internal xlink to a document or blob is transformed into the corresponding content bean id or blob id  blobproperty capblobref this is the result of  getblobref of the underlying content object linklistproperty list every content object in the link list is converted to a bean through the content bean factory  
  the main goal of a content management system is to deliver the right content  to the right customer in the right time  important requirements are   support of high traffic delivery support of different delivery formats  such as html  wap  pdf support of personalized content support of search integration of data from third party systems integration with an existing portal solution  integration with delivery platforms such as akamai analysis of usage integration of user generated content  to meet all these requirements  coremedia cms contains the following components   the content application engine  cae  with its components http cache  cae feeder and proactive engine to deliver and search the content  content rules to deliver content  based on rules not on manual selection  the coremedia portal integration to integrate with portals  the analytics engine to analyze the usage of the content  the social software extension to integrate user generated content   all these components have a framework character  and you can easily adapt them to your needs   see the content application developer manual for details of the cae  content rules and the portal integration  the analytics developer manual for details of the analytics engine and use the social software extension manual to learn more about the integration of user generated content into your applications  
  if the analysis algorithm used by the object analyzer has changed or when the analysis results in the analytics database are possibly corrupt  it is possible to rerun the object analyzer on the entire content repository by executing the following steps    edit the file proactiveengine properties in the object analyzer configuration  set  proactiveengine clear true   restart the object analyzer with following command  cm objectanalyzer restart   set  poactiveengine clear false  a failure to reset the property file during the last step will lead to a situation where repository will be completely analyzed after each restart of the object analyzer  which is typically not desired  
  the query tool can be used to start a synchronous  structured query against the content repository  it s analogous to the query used within the editors but you can create more sophisticated queries with the query tool   you can also transform old queries from query documents into the new syntax and execute them  
   parameter description  l  limit  limit the number of results to the given value   q  query  the query string   e if set  the query searches for all versions of the documents   m with the  m option you can transform legacy queries  according to coremedia query dtd  into uapi queries  according to the syntax below    you can specify the legacy query with the  q option or as id or path of a query document   do not use the  m option if you specify a uapi query in the first place   x like  m  additionally executes the transformed query   t  paths    ids  paths or ids of query documents to be transformed and executed   if you make use of query documents  you must also set the  m or  x option   
  the following example transforms the default query of user johndoe into a uapi query   cm query  u admin  p admin  m  t   home johndoe my query   note  that the name of the default query document is locale specific   for german editors it is  meine recherche    the result shows the transformed query without executing it  
  this section illustrates the process of defining a dataview configuration  for this example  a simple site with three pages is used  the first page consists of a brief overview of two articles that are completely shown on two separate pages  these article instances are shared between the overview page and the detail pages    
  the entities are represented as beans and properties where the properties are assumed to have different costs  some are expensive to compute while others are cheap  
   bean property description expensive pagebean title the page s title  no  content the page content as a linked overviewbean or articlebean  no  navigation all pagebeans to be rendered as navigation   yes contentbean page the pagebean which embeds this bean   yes overviewbean teasers a list of articlebeans to be rendered as teasers   no articlebean headline the article s headline   no  text the article s text   yes  abstract the article s abstract which is extracted from property  text  automatically   yes   image an optional link to an image   no imagebean mimetype the image data s mime type  yes  data the binary data   no  
  the jsp templates for rendering the beans are modeled as follows   pagebean jsp   html   head     title  c out value    self title      title    head   body     div class  content   cm include self    self content          div     div class  navigation        ul         c foreach items    self navigation   var  page            li  a href   cm link target    page                 c out value    page title      a   li          c foreach        ul      div    body    html   articlebean jsp   h   c out value    self headline      h    div  c out value    self text      div   c if test     empty self image       img src   cm link target    self image      alt  image      c if   overviewbean jsp   c foreach items    self teasers   var  article      h   c out value    article headline      h      p       c out value    article abstract           a href   cm link target    article page      more  a       p    c foreach   considering the above mentioned settings  the following dataviews xml file can be derived     xml version          dataviews xmlns   http   www coremedia com      objectserver dataviewfactory      dataview appliesto  com mycompany pagebean      property name  content  associationtype  dynamic       property name  navigation  associationtype  static       dataview     dataview appliesto  com mycompany articlebean      property name  page  associationtype  static       property name  text       dataview     dataview appliesto  com mycompany overviewbean      property name  teasers  associationtype  dynamic       dataview     dataview appliesto  com mycompany imagebean      property name  mimetype       dataview     dataviews   all expensive associations  pagebean navigation and articlebean page  are declared to be dataviewed using the default association type  static   please note  that overviewbean page is not marked here since this is not accessed by the templates  pagebean content and overviewbean teasers are marked with the association type  dynamic  although they are not expensive  instead they are used to make articlebean recursively reachable from the pagebean  finally  the non associating but expensive properties articlebean text and imagebean mimetype are marked for caching as well  articlebean abstract is not marked here because it benefits from the already cached articlebean text   keep in mind that a perfect dataview configuration depends on a lot of circumstances  let s say that the underlying contents are updated very rarely on the one hand but accessed very often on the other hand  in order to reduce the number of cache read operations  some of the property associations might be switched to  composition   an additional  teaser  dataview might be introduced in order to cache the articlebean s different views  overview and detail  with separate objects     dataviews xmlns   http   www coremedia com      objectserver dataviewfactory      dataview appliesto    com coremedia objectserver dataviews examples pagebean      property name  content  associationtype  composition       property name  navigation  associationtype  static       dataview      dataview appliesto    com coremedia objectserver dataviews examples articlebean      property name  text       dataview     dataview appliesto    com coremedia objectserver dataviews examples articlebean   name  teaser      property name  abstract       property name  page  associationtype  static       dataview     dataview appliesto    com coremedia objectserver dataviews examples overviewbean      property name  teasers  associationtype  composition      dataview  teaser       dataview     dataview appliesto   com coremedia objectserver dataviews examples imagebean      property name  mimetype       dataview     dataviews  
  this section contains some guidelines or rules of thumb for the proper definition of dataviews   define the property configuration recursively  you have to ensure that a bean s dataview configuration is recursively reachable from the root bean s dataview configuration  for every property returning this bean  a  bridging  dataview configuration entry needs to be added  in order to prevent the cache to be filled with unecessary  bridge  properties  the association type  dynamic  might be used  e g     dataview appliesto  com mycompany pagebean      property name  content  associationtype  dynamic      dataview   why is this important   from a dataview s point of view  the process of rendering nested bean takes place as follows  the controller computes the root bean  containing nested beans  from an incoming request the controller invokes dataviewfactory loadcached bean  name  for this bean in order to a apply a dataview the controller passes the bean to the rendering engine  and therefore to the jsps  where the bean s properties are accessed and rendered when accessing a bean property which is returning further beans  a dataview will be applied automatically to these sub beans  in other words  the initial appliance of a dataview to the root bean leads to a recursive appliance of dataviews to all sub beans  unfortunately  this is true in case that there is a dataview configuration  dataviews xml  for every relevant bean property only  let s say there is no such configuration for the root bean  then no dataviews will be applied to the sub beans automatically and these beans will be returned as they are  as a consequence  the sub beans wouldn t be cached even if there is a dataview configuration available for them   example  there is a pagebean having a jsp template  public interface pagebean     articlebean getcontent       cm include target    self content      which includes the rendering of an articlebean  public interface articlebean     string getheadline      c out value    self headline      if there is a dataview configuration for the  supposed  expensive   property  headline    dataview appliesto  com mycompany article      property name  headline  associationtype  static      dataview   without defining a configuration for the root bean    dataview appliesto  com mycompany pagebean      property name  content  associationtype  static      dataview   then there won t be any caching of the  headline  property   
  let the controller apply a dataview to its beans  a controller s contract is to compute a modelandview which contains one or more model beans to be passed to the rendering engine  in order to make the model beans cacheable  it s important to apply a dataview to this beans within the controller   example  this example demonstrates a simple controller implementation snippet   modelandview handlerequest httpservletrequest request   httpservletresponse response          compute the model bean from the request   mybean modelbean   computebean request        apply a dataview to this bean   mybean cachedmodelbean    mybean     getdataviewfactory   loadcached modelbean  null        construct the controller s result   modelandview result   controllerutils viewof cachedmodelbean     return result     use caching only when it is reasonable  caching with dataviews is for improving an application s performance  the results of property computations are stored in the heap memory in order to prevent a repeated computation when accessing the property the next time  the values are removed from the cache when they are becoming invalid or due to evictions   the process of caching itself is not for free  each cached entry consumes a bit of the  limited  heap space on the one hand  on the other hand  each cache read or write operation is synchronized by the cache which might lead to decreased concurrency  for this reason dataview caching of a single property should be used purposeful  that is when it results in a better performance  here are some situations where dataview caching might not be worthwhile  the computation of a property is cheap  the property value is already cached elsewhere  for instance  the unified api is already caching its content properties  when simply delegating the content bean s property access to the content objects  the content beans need not to be cached again  another example is a property which accesses another already cached property  e g  a property  firstsentence  which performs a cheap string operation on a cached property  text   a cached dataview will be generally invalidated or evicted immediately after it is put into the cache without or rarely being accessed in the mean time   make sure that it is worthwhile from a performance point of view before enabling a property to be cached by a dataview   avoid caching of large objects  caching with dataviews is especially suited for properties that consume moderate memory  in opposite  large objects  such as binary objects  shouldn t be cached by dataviews since the heap memory is used disproportionately  instead you might use the httpcache where the resources are stored on the hard disk   choose the right association type  properties can be separated into two groups from the dataview s point of view  associating properties  properties which values are beans or collections of beans where dataviews can be applied on again  simple properties  all other properties with return values such as string  int or other objects  you do not need to define an association type for a simple property  instead  a dataview configuration such as  property name  propertyname     is sufficient  for an associating property you have to choose between the following association types which differ in terms of memory consumption  synchronization behavior and invalidation eviction behavior   static composition aggregation  dynamic  despite this different behavior  these aspects doesn t need to be considered primarily when starting to create the dataview configuration  for the beginning it is sufficient to choose  static  for a cacheable property and  dynamic  for a non cacheable property in order to make another property recursively reachable   see above   as soon as you have finished your initial dataview configuration  you can do some optimizations by replacing specific association types with  aggregation  or  composition  in second step   do not implement property methods that use context data  in order to make a bean property cacheable you have to implement a public  non static and non final  getter method without parameters  make sure that the method s implementation doesn t use any context data such as  current user    current session  or similar stateful data  otherwise a property value is related to an arbitrary context when putting it into the cache  when reading it from the cache then  it might not fit to the reader s context   the following example demonstrates a bad implementation where a list of content objects is filtered according to the current user s rights    public list contentbean  getlinks        list content  contents   getcontent   getlinks  links      list contentbean  result   new arraylist contentbean       for  content content   contents        if  mayread content  getcurrentuser                 bad use of context data       result add createbeanfor content                 return result      assume the property  links  to be cached when accessing it the first time  the cached result depends on the right of the user which accesses this property for the first time  another user accessing this property afterwards will obtain a value which is not appropriate to his rights and he might have access to more or less contents than required   
  the coremedia cae web application and the taglib are shipped in a version that supports the servlet     jsp     standard  this standard is supported by tomcat   and other containers and introduced a number of improvements  especially el evaluation in jsp body content  so  it is recommended to use this version    if you need to use cae web applications that support the old servlet     jsp     standard  you have to convert the web application as described below   converting the cae web application template to jsp     coremedia ships a taglib that supports the old jsp      standard  but you need to download the jstl     distribution and adapt the templates manually    download the jstl     distribution from http   jakarta apache org site downloads downloads taglibs standard     cgi and replace both jstl jar and standard jar in the web inf lib directory of the cae web application template   change the deployment descriptor web inf web xml from    web app   xmlns  http   java sun com xml ns j ee    version             to    doctype web app public     sun microsystems  inc   dtd web application      en    http   java sun com dtd web app     dtd    web app             in each jsp  change the taglib uris from        taglib      prefix  c       uri  http   java sun com jsp jstl core         taglib      prefix  cm       uri  http   www coremedia com      objectserver              to      taglib      prefix  c       uri  http   java sun com jstl core         taglib      prefix  cm       uri  http   www coremedia com      objectserver              
   type java type cappropertydescriptor type blob n a  blob boolean java lang boolean boolean date java util calendar date integer java lang integer integer string java lang string string content com coremedia cap content content n a  version com coremedia cap content version n a  content list n a  link list markup com coremedia xml markup markup user com coremedia cap user user n a   
  the type of an implied property clause depends on the return type of the corresponding getter method  for example  the return type of content getname   is java lang string  so the type of the expression name is string  there are three exceptions  for id  the type is content  for version  the type is version  for containswidelink  the type is boolean   an identifier in a property clause is resolved as a property of the content type in the closest surrounding type clause  the property type is then mapped to a query expression type using the table above  for example  assuming a string property called headline in a content type article  the subexpression headline in the query  type article  headline contains  foo   would have type string  if there is no surrounding type clause  the content type content is assumed  which does not define any properties  if the type clause lists multiple content types  the type of the property with the given name has to be same in all listed content types   a property name in an order entry clause is resolved as a property of the most specific type that can fulfill the query  only properties of type boolean  date  integer  or string are allowed   in a references clause  the property  if given  must be a markup or link list property   in a comparison expression  the types of both subexpressions must be the same  and must be one of boolean  date  integer  or string  or one subexpression must be of type integer and the other type must be integer compatible  user  version and content are integer compatible  by using the user id  content id  or version number for comparison   the property in a contains expression must be a string or markup property  the literal must be a string   the expression type of an input parameter depends on the class of the java object passed as a parameter  the mapping from java type to expression type is given in the table above  for example  when passing in an instance of java lang string  the corresponding parameter expression will have the type string   where a content  version  or contentorversion clause is used in the grammar above  the literal expression must have the respective type   interpretation  so far  you have seen when a query is syntactically correct  and when its types are correct  this section describes what the query expression actually means  where it was not explained before    the following description is geared towards content queries  queryservice posecontentquery   in a version query  where the following description refers to a  content   the version s content is understood  where the description refers to a  content object   the version itself is understood   a  type    condition is true for a content iff the content s type is one of the types listed  and the content fulfills the condition on the right hand  if given   this form does not take type inheritance into account   a  type  condition  without      is true iff the content is a  direct or indirect  instance of at least one of the types listed  and the content fulfills the condition on the right hand  if given   this form takes type inheritance into account   a  below folder  condition is true for a content iff the content is a child of the given folder  for the purpose of this condition  a folder is a child of itself   a  references target  condition is true for a content object iff the content object contains a link to the given target in any markup or link list property   a  property references target  condition is true for a content object iff the named property of the content object contains a link to the given target  the property must be a markup or link list property   a  referenced  condition is true for a content iff it has at least one referrer  i e  a content containing a link to this content in any markup or link list property   a  referenced by contentorversion  condition is true for a content iff the given content or version has a reference to this content in any markup or link list property   a  property contains literal  condition is true for a content object for a string property  iff the literal s string value is a substring of the content object s property s string value  for a markup property  all xml markup is discarded  and the string is searched for in the concatenated cdata elements   contains exact  prefix  and stem are reserved and not currently supported   in an order by clause  the first order entry takes priority  if contents compare equal according to the first order entry  the next order entry is considered  etc  the ordering of string values is database dependent  the ordering of date values ignores the time zone  the boolean value false is considered less than true   the limit clause limits the number of results that will be returned  and may improve performance  especially if only one result is required  and if sorting is not requested  it is equivalent to passing a limit argument to the query service method   examples  as a simple example  consider that you are searching for all documents that were lastly edited by the user admin  given that the variable qs  holds a reference to the query service  you could issue the following statement   collection content  result     qs posecontentquery  type document   editor   user  admin     the next statement retrieves arbitrary published content that is stored in the folder  home  at most    results are returned   collection content  result     qs posecontentquery  ispublished and below path   home         finally  a parameterized query is shown that retrieves all documents of the type article that have a priority  property whose value is greater than a given limit and that are marked for deletion or withdrawal   collection content  result     qs posecontentquery  type article  priority      and        istobedeleted or istobewithdrawn      new object   new integer limitpriority     
   x x x x hrefvar string  the name of the request scope variable that receives the href attribute for the generation of the link element  if unset  no variable will receive the href attribute idvar string  the name of the request scope variable that receives the id attribute for the generation of the link element  if unset  no variable will receive the id attribute  if no ids are required by analytics  the taglib will set the variable to null locale string the computed locale that language of the target page object object  the object that defines the target page onclickvar string  the name of the request scope variable that receives the onclick attribute for the generation of the link element  if unset  no variable will receive the onclick attribute  if no onclick handler is required by analytics  the taglib will set the variable to null showstatistics true false true whether to show an overlay report for this link view string the default view the view of the target page  
  the webeditor of the coremedia cms is able to spell check documents  the language used for the check depends on your coremedia installation  either a default language is used  or the spellchecker determines the language in dependency of properties of the document  the position of the document in the folder hierarchy for example  if a text contains parts  that are marked with the language attribute  then the spellchecker automatically checks these parts in the marked language   start the spellchecking  if the spellchecker is enabled on the server  spelling errors of checked in documents are automatically underlined with a gray  wavy line   
  the coremedia webeditor is shipped with a web service that allows spell checking   in order to enable spell checking  proceed as follows  make sure that aspell  http   aspell net  is installed on the computer where the web editing server is running  with the dictionaries for the languages you want to spell check and that aspell is reachable in the environment  set uriencoding  utf    in the  connector  element of the server xml file of the webediting server tomcat installation  set wageconfig setspellcheckeroption spellcheckeroption on   in the webapps editor web inf config bsh file  optional set wageconfig setspellcheckeroption spellcheckeroption editable only   if you want to show spell checking only in checked out documents but not in checked in documents set wageconfig setpropertylanguageresolverfactory new defaultpropertylanguageresolverfactory new locale  de   de      to the language you want to use for spell checking   if you want to use different languages for spell checking  depending on some properties of the document  such as the position in a folder hierarchy for example  you have to develop your own propertylanguageresolverfactory  see the javadoc for details  the starter kit comes with the starterkitpropertylanguageresolverfactory implementation that determines the language to check from the  lang  and  country  properties of the document  
  exit the spellchecker  in order to exit the spellchecking modus  click the  icon again   
  for optimal operation  the following settings should be made in the browser   set the memory cache to a generous value  e g        kb   in this way  the content of forms is not forgotten after error messages  the option  compare document in cache with that in network   netscape  or  search for newer version   internet explorer  must be set to  at each request   otherwise  out of date information may be obtained   
  enable cut  copy and paste for firefox  if you use the webeditor with firefox     or     and windows xp or vista you have to enable cut  copy and paste  modify the browser preferences as follows  quit firefox  if you have quick launch running  in windows  an icon in the toolbar  quit it too  find the firefox profile directory  see http   www firefox browser de wiki profilordner for details   on windows xp  it is often located in   c  documents and settings  windows login  application   data mozilla firefox profiles  profilename    on windows vista see   c  users  windows login  appdata roaming mozilla firefox  profiles  profilename     open the user js file from that directory in a text editor  if no user js file exists  create one  add these lines to user js and replace  servername  and  port  with the settings of the webeditor   user pref  capability policy policynames     allowclipboard    user pref  capability policy allowclipboard sites     http    servername   port     user pref  capability policy allowclipboard clipboard cutcopy     allaccess    user pref  capability policy allowclipboard clipboard paste     allaccess       save the file and restart firefox   now  cut  copy and paste should work  
  column classes for workflows   class description hox corem editor workflow columns worklistdetailcolumn shows some information about the wfinstance  task or process  in the workflow list  hox corem editor workflow columns worklistprocesscolumn shows some process information in the workflow list   the process is either the wfinstance itself or the parent process in case the wfinstance is a task   
  in this section you find hints on how to fix problems with coremedia analytics  in the first part  some common error situation are described together with typical causes and solutions  in the second part  a set of debugging procedures is presented that allows you to locate the source of an error by actively performing experiments with the system   typical errors  each subsection contains as its headline a concise problem description  afterwards  a list of potential problems and recommended checks is presented   dashboard shows errors for all reports  check whether the database connection is configured correctly in analytics web inf custom analytics analyticsdashboard properties  check whether the database driver jar is placed in analytics web inf lib  check whether the workflow server that hosts the data aggregator has completed its startup sequence successfully  if you have added custom reports to the dashboard  verify whether an out of the box dashboard works correctly  check whether logs analyticsdashboard log contains any error messages   in site analytics does not show overlays  ensure that sessions are enabled in the in site analytics web application  check the web application log for error messages  check whether the jsps that contain the analytics taglib are actually used by including markers in the generated page  check the property overlay default visible in the file web inf spring analytics overlay properties   in site analytics shows errors for all overlays  check whether the database is correctly configured in the file web inf spring analytics overlay properties  check whether the database driver jar is placed in web inf lib  check the web application log for error messages   page views appear nowhere  this case assumes that both the analytics dashboard and in site analytics do not reports errors  but do not show any page views  either   check whether all tracking caes are configured as log providers in the file properties corem workflowserver properties in the data aggregator installation  go through the procedure determine the data aggregator status described later in this section  go through the procedure analyze processing of page views described later in this section   page views appear in the dashboard only  go through the procedure analyze processing of page views described later in this section  during the analysis  check whether any page ids and particularly page object id differ from the ids of the objects involved in rendering  when only the link overlays are at fault  but the page overlay is correct  consider any object sustitution that might happen during rendering  in section you can find some hints on choosing an appropriate tracking method   page views appear in in site analytics only  check whether enough time has elapsed since you made the page views  you must wait until the next full hour  then wait for the session timeout  and then wait until the data aggregator has started and completed a new iteration  check whether you can select a different site in the detail reports and find the page views there  go through the procedure determine the data aggregator status described later in this section  pay particular attention to failed log providers as these might cause a delay of the aggregation for the dashboard  but not in site analytics  failed search log imports  too  might have this effect   repository statistics are empty  check whether the object analyzer has completed its initial run and is idle  because repository statistics are generated at midnight  you will have to wait until the next day for new values  even if the object analyzer has run   check whether the correct time zone is configure in the workflowserver properties  otherwise  midnight might no happen at the time when you expect it   repository statistics or display names are wrong  check whether the data from the object analyzer is correct  to this end  issue statements like  select count    from currentobjectstate  or  select   from currentobjectstate where objectid  contentbean     and check whether the generated values look plausible   when you correct the algorithm to compute the category or the display name for a content item  make sure to rerun the object analyzer with the setting  proactiveengine clear false  in the file proactiveengine properties  remember that the repository statistics will only be regenerated at next midnight   go through the procedure analyze the object analyzer described later in this section   sessions are always one page view long  if you have added a custom sessionextractor  check the implementation  going through the procedure analyze processing of page views described later in this section  pay attention to the session ids that are written  if you use the default sessionextractor  check whether session cookies or session specific urls get lost through proxies or link rewriting   many sessions are merged into one  if you have added a custom sessionextractor  check the implementation  going through the procedure analyze processing of page views described later in this section  pay attention to the session ids that are written  if you use the default sessionextractor  check whether sessions are disabled in the jsps  in that case  a synthetic session id is generated from requesting ip and browser  if the requesting ip cannot be determined any longer because of intermediate proxies  this heuristic might be too weak   debugging procedures  in some cases  the source of a problem might not be immediately obvious  in that case  the following debugging procedures might help you   determine the data aggregator status  check whether the data aggregator is running correctly by searching for error messages in the file var logs workflowserver log in the data aggregator installation  check whether the workflow server is running correctly by invoking  cm workflowserver status  on the command line   check whether the data aggregator is running correctly by invoking   cm dataaggregator  u admin status    and analyzing its output   the data aggregator should be running  if it isn t  start it  there should be no failed log providers  if there are  inspect the log provider configuration and check whether the caes are all running correctly  there should be no escalated tasks  if there are  restart the data aggregator  if that does not help  contact the coremedia support  the variable iterationstart should be set to a value close to the current time  when the iteration duration is set to   minutes  the default of workflow server managers aggregator loop duration   the iteration start should be no longer than   minutes in the future and not much longer than   minutes in the past  the variable consolidationend should be set to a value in the past  but not much longer than the iteration duration  the variable closesessionsbefore should be set to the value of consolidationend minus the session timeout  the default being    minutes as configured by workflow server managers aggregator loop duration   the variable aggregatepermanentlybefore should be the full minute before or at closesessionsbefore unless you have changed the in site analytics time granularity from its default of    seconds   if the given dates are too far in the future  consider problems with the system clock  possibly during earlier runs of the data aggregator  if the given dates are too far in the past  check whether analytics is running under overload  typically with      cpu and high i o traffic on the database machine   also check for communication problems between the system components   check whether the aggregation limit is correctly written to the database by issuing the sql command  select   from permanentlyaggregatedbefore  for a single valued output  this value should be similar to the setting of the workflow variable aggregatepermanentlybefore  with a few minutes delay   check the workflow server log for entries of the form  imported   lines with column type distribution                        the previous line would indicate that there are       events of type   and       events of type     the important event types in this context are      javascript based callbacks transporting hints that a transion between one page and another might have happened      views of page parts marked by  analytics namecontext logview  true   or  analytics objectcontext logview  true        simple page views without information about the previous page      transitions between one page and another   if you have configured a pagedataextractor  you can expect some type    events for the first events in each session and many events of type     otherwise  page views should be reported as many type    events   if you use the analytics taglib to create links  you should receive many type   events   analyze the processing of page views  this procedure allows you to follow a page view through the system  determining where it might get lost  it assumes that page views are counted during rendering or by means of tracking images  this section does not apply when processing apache logs   make sure that no pages are requested from the delivery caes by somebody other than you  run  cm dataaggregator  u admin shutdown  on the command line  the data aggregator should shut down after a few minutes without errors in the file var log workflowserver log   generate a page view event by retrieving a page from the delivery cae  if you use in site analytics with javascript callbacks  you should click on a tracked link to bring up the page  wait a little  allowing the delays workflow server managers aggregator minimum age and workflow server managers aggregator hint delay from the file workflowserver properties to pass  so that the page view events may be aggregated  normally  a minute should suffice  run  cm dataaggregator  u admin once  and check the server log for errors  verify that the data aggregator has completed its run by means of  cm dataaggregator  u admin status  until the data aggregator is down     verify that the log data has indeed been written to disk by opening the single file jakarta tomcat analyticslog complete report    where   is a string that encodes the logged time interval  note that another directory might be used if so configured in the file tracking properties   the file contains one line per event with fields that are separated by tabs    one line should start with an    or a     in the case of an     it should contain the object id  view  locale  and site for the rendered page  in the case of a     a pagedataextractor has been configured and it was able to compute the predecessor page for the page view event  the log line should identify both the source page and the target page  if you designate a linked object in the  analytics pagecontext  tag  that page should be represented in the log data  too   if there isn t such an event  check whether either the analytics taglib or the tracking interceptor are properly configured  in section you can find a description of both approaches  check the tomcat log for error or warning messages    one line should start with a    if javascript callbacks are used  the log line should identify both the source page and the target page   if there isn t such an event  check whether the analytics taglib is properly used  you need at least the tags  analytics head    analytics pagecontext   and either  analytics link  or  analytics linkattributes   check whether the javascript onclick handler was properly rendered in the visited page  you might want to activate a javascript debugger for further debugging  check the tomcat log for error or warning messages  the sites of the rendered objects must be computed correctly  because the site of an object cannot change late  you might have to restart with a fresh database after you change the computation algorithm  if that is not possible  you have to correct the already stored dimension data  execute some sql statement to ensure that the data has reached the analytics database  a log line starting with a    should appear as a result of  select   from stagingpageviews  whereas  a log line starting with a    should appear as a result of  select   from stagingtransitions  and a log line starting with a   should appear as a result of  select   from stagingtransitionhints  where the latter two also indicate a source page   execute  select exacttime from consolidatedbefore  to retrieve a time value that should be later than your request of the tracked page   the content of the staging tables should be consolidated into the fact table  execute  select   from pageviews where eventtime      select max eventtime  from pageviews   to get the most recent event  which should be your test event  you can use the table pagedimension to translate the internal ids to readable ids   select   from pagedimension where id        inserting the page id as appropriate  using oracle s outer join syntax  a combined query would look like  select eventtime    pd  pageobjectid as sourceobject    pd  pageview as sourceview    pd  pagelocale as sourcelocale    pd  pageobjectid as targetobject    pd  pageview as targetview    pd  pagelocale as targetlocale from pageviews  pagedimension pd   pagedimension pd  where sourceid   pd  id     and pageid   pd  id  to show all consolidated page views with readable ids   analyzing the object analyzer  this procedure allows you to determine whether the object analyzer is running correctly   make sure that the data aggregator is not running  otherwise  invalid temporary states might be persisted during the following steps  execute the sql statement  delete from currentobjectstate  to get rid of historic data that might obscure the present situation   in the file config objectanalyzer proactivenegine properties set proactiveengine clear true  start or restart the object analyzer  check the objectanalyzer log for messages of the following form   statistics  queueworker batches      batch duration                   batch size             batch weight             jobs      job duration            queue capacity         current size      size           wait duration            such messages should appear regularly until the content is completely analyzed  at that point  the messages should stop abruptly   check the log for error messages  execute the sql command  select count    from currentobjectstate  and verify whether the result is equal to the number of resources in your repository  assuming you have not reconfigured the proactive engine triggers to limit the extend of the analysis    obtain the id of an example content that should be analyzed  e g       execute the command  select site    objecttypedimension name as typename    categorydimension fullpath as category    isdeleted  ispublished  lastchange    displayname from currentobjectstate  categorydimension  objecttypedimension  where currentobjectstate objectid  contentbean       and currentobjectstate category   categorydimension id   and currentobjectstate objecttype   objecttypedimension id  to retrieve information about the content  in particular  check whether the site  the type  and the category are correctly computed  repeat as needed with other content  if you correct the configured algorithms  make sure to regenerate the data by rerunning the object analyzer   using a db tool  set the dates stored in the tables lastsnapshot and permanentlyaggregatedbefore to one day before now  reset the property proactiveengine clear to false and restart the data aggregator  the data aggregator should now make a last snapshot of the current object state and aggregate the associate statistics  because the statistics for an entire day are regenerated  this will take its time  when the data aggregator has finished its first iteration  execute  select count    from objectstatesnapshot where logicalsnapshottime       select max logicalsnapshottime  from objectstatesnapshot   to make sure that all content has made it into the snapshot   open the analytics dashboard to inspect the repository report  check whether the distribution across categories and types looks plausible  
  case significant database connection properties  in coremedia cms before version          database account names for the content server and workflow server repository were converted to the database default case  that is  the entries you made in the sql store user property of the  properties corem sql properties file were changed for database access as follows   oracle   converted to upper case db    converted to upper case postgresql   converted to lower case microsoft sql server   no conversion  since coremedia cms         the database user name is case sensitive for databases that support this feature  this allows to access a database user and schema whose name does not correspond to the database default case  in detail  the account names are handled as follows   oracle   the oracle database does not support database schema names with lowercase letters  so  for oracle  user names continue to be converted to upper case automatically   postgresql   the user name is not converted  you can access a database user and schema containing upper case letters  such a schema is created when using an administration ui  or when using double quotes on the command line  db    the user name is not converted  you can also access a database user and schema containing lower case letters  micosoft sql server   the user name is not converted as before    migration steps  if you upgrade to coremedia cms         or higher and you have used an oracle or microsoft sql server database before   you do not have to change your old settings for the database user   if you have used a db  or postgresql database before  you should review your database connection properties to make sure that the case of the user name in the property file matches the case of the database user name in the database  you should check the file properties corem sql properties for all content servers and the workflow server  note that password handling is not affected  and remains as case significant as before  
  in a checked out document you start the spellchecking modus by clicking the  icon  the icon appears now in an activated style  
  the document is opened in a specific spellchecking modus an spelling errors are marked with a red  wavy line  the intention of this modus is only to correct spelling errors  you can not edit text  or richtext fields  
  correct spelling errors  in order to correct misspelled words  you have to check out the document and start the spellchecking  proceed as follows  left click an underlined word  a combo box opens up and shows suggestions  if there are any   click a suggestions or correct the word manually  press the enter key to take the correction  if you do not want to correct the word  press the esc key  
   processstatus  description this action checks whether sufficiently many and not too many instances of a process definition with a given name run in the workflow server  it is also checked that these instances do not contain escalated tasks  attribute   url  url where to get the ior of the content server  user  coremedia user name to log on to the server  domain  domain of the user  password  coremedia user password to log on to the server  processname  the name of the process definition  mincount  the minimum number of instances to expect  typically    maxcount  the maximum number of instances to expect error codes      ok       unexpected error       timeout       error       respawning too fast       io error       invalid login       escalated       too few instances       too many instances   
  coremedia analytics consists of a number of components that must be considered when setting up a watchdog or a set of watchdogs   the analytics database can be checked using a  db  watchdog action  the workflow server that hosts the data aggregator can be checked using a  workflowserverquery   the database of the workflow server can also be checked using a  db  watchdog action  the data aggregator itself is best checked with a  processstatus  action like the following      processstatus name  wda processstatus      url  http   localhost       workflow ior      user  admin      password  admin      processname  dataaggregator      maxcount             this ensures that at least one data aggregator process is running without escalations  in site analytics is best checked by the  http  action  ensuring that the web application is still up  tracking is also best checked by the  http  action  the analytics dashboard can also be checked by the  http  action  for example by retrieving a standard xml report      http name  pd http       url  http   localhost      analytics dashboard report           dashboardviewdefinition defaultview           dashboardviewdefinition defaultview performance            timeresolution h  timerange r dbyh           session false format xml      pattern     lt entries gt    lt  entries gt         user  admin  password  admin     note  the line breaks in the previous code fragment must be removed  adapt the user name and password as needed or choose any other xml report  adapt the regular expression in the pattern attribute to check more than the elementary presence of the report in xml format  if the chosen report is expected to be longer than       characters at times  increase the maxsize attribute of the  http  action  note that http basic authentication must not be disabled in analytics authentication xml   the file properties corem watchdog xml contains example watchdog scripts and probedog actions  see section for more details on setting up a watchdog  
    http    description  this action requests a url and checks whether the response code is        if so configured  it also checks whether the response matches a given regular expression  attribute    url    requested url   user  user name to use for http basic authentication  if given together with the password attribute  password  password to use for http basic authentication  if given together with the user attribute  pattern  regular expression according to java util regex pattern to be used for verifying the response  encoding  character encoding for parsing the reponse  if the pattern attribute is given  maxsize  maximum permitted size of the response in characters  default         if the pattern attribute is given   error codes       ok                      unexpected error       timeout        error        respawning too fast        io error    
   parameter description cmsiorurl the ior url of the content management server cmsuser the user on the content management server to be used for reading  typically admin  cmspwd the password on the content management server masteriorurl the ior url of the master live server masteruser the user on the master live server to be used for writing  typically admin  masterpwd the password on the master live server  
  the parameters have the following meanings  
  when there are rights rules for live groups to be published  required groups of the built in user management will be automatically created  but the subgroup relationships must be established separately  this is in line with the normal behaviour of the publisher   during operation of the cm publishall tool  no changes should be made on the content management server   even in a multi site environment  the tool publishes all content to the master live server  afterwards  you may destroy unneeded parts of the repository with cm multisitecleanup as described in section  
  the publishall tool is used to populate a new master live server in case the orginal master live server database has been corrupted and is not recoverable from a consistent backup  before starting the publishall tool  you must create an empty database schema  configure it in the master live server  restart the server and wait until it is completely initialized  you can then publish all content to the new server as follows  
  the client on the left hand side communicates either with a servlet container or with a stand alone application   when is it appropriate to use web services  the following list shows some requirements that suggest the use of web services   one or more clients need access to a central service via network  different operating systems and programming languages are used at client side  thin clients are required  a well known and established technology is preferred   in contrast  the following use cases indicate  that web services are not a good solution for your problem   the clients should react on events  large data amounts have to be transferred  stateful interactions between server and client are needed  direct references to server objects are required   
  the webservice examples in this manual are jax ws compliant  http   www jcp org en jsr detail id      and thus can be deployed in any webservices engine which supports this standard   webservices can run as standalone endpoints  be deployed in a jax ws enabled application server  e g  glassfish  or be packaged with a jax ws implementation and be deployed in an ordinary servlet container like tomcat   the deployment details are not specified in the jax ws standard but depend on the implementation   in this example metro  http   java sun com webservices technologies index jsp  will be used for a number of reasons   it is the jax ws reference implementation it supports a simple deployment as a servlet it generates portable artifacts in a developer friendly transparent way  however  if you are already familiar with an other jax ws compliant engine like apache cxf or axis   it should be easy to port the example   there are two approaches of developing webservices   code first  and  wsdl first   these examples follow the  code first  approach  i e  first the application is programmed  then enhanced with javax jws annotations and the metro tools generate the wsdl and the portable artifacts  this approach consists of the following steps   the server code the application  i e  the business logic   determine the webservice interface by annotating some classes and interfaces or methods of the application with  webservice or  webmethod annotations  respectively    let metro s apt tool  apt is an acronym for  annotation processor tool  in this context and has nothing to do with debian s advanced packaging tool  generate the portable artifacts classes for your webservice  unlike heavy weight protocols such as corba  webservices do not support complex objects with remote methods as arguments or return values  instead  all relevant data of your complex business objects is marshalled into simple container objects which basically consist of fields of primitive types and according getters  those objects are called portable artifacts   consult the metro documentation on https   metro dev java net nonav     docs apt html or in the docs directory of your metro installation for details of apt   compile and deploy your application  once it is running  you can query the wsdl description of your webservice and invoke the services   the client generate the client side interface of your webservice and the portable artifacts with metro s wsimport tool  https   metro dev java net nonav     docs wsimport html    wsimport requests the wsdl from your webservice  so your server must be running during this step  now you can make use of the interface to code clients against your webservice         
  the webservices examples need some additional tools and components   this section guides you through setting up the appropriate environment   jdk and ant  you need apache ant       and jdk       to build the examples  java home and ant home refer to the installation directories of these tools  respectively   java   contains a jax ws implementation  but the metro installation will override it with a newer version  therefore you need write permission in java home lib   make sure that java home bin and ant home bin are included in your path environment variable   tomcat and the cae template  jax ws compliant webservices can be deployed as standalone server  but a deployment in a servlet container is assumed as a more realistic scenario  so the build files of the examples require a tomcat instance to deploy to  the metro installation  will enhance tomcat with the jax ws libraries globally  so you should use a new tomcat instance in order to avoid clashes with other web applications that bring their own jax ws implementations   since the examples access coremedia cms  you need the cms api libraries   it is recommended that you use the coremedia cms installer to install the cae template and tomcat  the examples in the manual are preconfigured for this setup   metro  the webservices examples have been developed with metro        they should also work with later versions of metro  however  it cannot be guaranteed that everything works  and some details may vary from this manual   download metro       from https   metro dev java net and execute the jar file as described there  this extracts a directory named metro into your working directory refered to as jaxws home   set jaxws home as an environment variable  because that is the default configuration in the examples   jaxws home contains an ant build file metro on tomcat xml   this build file is used to install the jax ws libraries in tomcat and in your jdk   java   contains a jax ws implementation which must be overridden by a newer version for metro  therefore you need write permission in java home lib   the build file requires the environment variables java home and catalina home to find the installation directories of the jdk and tomcat   set them accordingly  and execute    ant  f metro on tomcat xml help  to see the exact usage   in metro       it is    ant  f metro on tomcat xml install  tomcat must be restarted after this enhancement   coremedia cms  you need access to a coremedia cms with reasonable permissions  but you don t need an admin account for these examples global read permissions and editorial rights for some part of the folder hierarchy are sufficient   
  this chapter describes the examples  first  extract the jax ws examples from cap examples jar to a working directory   there are two directories  etc and common  which are shared by all jax ws examples     common  directory  the common directory contains shared classes  especially the capconnector which is the bridge to the coremedia cms unified api   edit this class  and change the iorurl  user and password according to your coremedia cms account   the resources directory contains some icons which are used by the advanced examples   furthermore there are two deployment files in the directory   web xml is a simple deployment descriptor which delegates requests to the metro runtime    sun jaxws xml is evaluated by the metro runtime and specifies the endpoint of the webservice     since the examples do not focus on deployment issues  these descriptors are simple and identical for all the examples    etc  directory  the etc directory contains a base xml file which is an ant build file with common targets  it is imported by the local build file of each example   do not try to use it standalone  it depends on some properties which are set in the local build files   the global properties file is included by base xml and contains some properties concerning your coremedia cms lib  tomcat and metro installations  if you have set up your environment exactly as described here  you don t need to change it  otherwise you have to adjust it to your system   the structure of all examples is identical  they consist of a server and a client package  a build file and a local properties file   these properties are  local  with respect to the particular example  not to your environment   so you do not need to change them  just build and execute the examples by the following steps       change into the example directory    cd ws   cms      build and deploy the server    ant server      wait until the server web application is running in tomcat       build and execute the client    ant client  the big targets server and client you used above  consist of several sub targets   if you want to study the examples in detail  you can execute the sub targets one by one and explore the results     the server target consists of four subtargets   generate server compile server war server deploy server  generate server invokes metro s apt tool which evaluates the javax jws annotations of the application and generates the portable artifacts   they are stored in the build aptgen directory   compile server compiles all server classes  i e  the application and the generated portable artifacts   war server creates the web application which includes the classes you have just compiled  the coremedia cms libs and the descriptor files in the common webinf directory   deploy server copies the war file into tomcat s webapps directory   the client target consists of three subtargets   generate client compile client execute client  generate client invokes metro s wsimport tool  which queries the wsdl of the webservice and generates the client side portable artifacts  especially the service endpoint interface which is the bridge from the client code to the webservice  these artifacts are stored in the build wsgen directory   generate client also compiles the portable artifacts   compile client simply compiles the client code   notice that the classpath of compile client does not include the coremedia cms libs  because the example clients are based only on the webservice   finally  execute client executes the client   every jax ws example is self contained and independent of the others   nevertheless  it is suggested that you study the examples in the order used in the manual  because not every detail is repeated in every example  
  this is a very basic example  just to make sure that your setup with metro  tomcat and coremedia cms works properly   on the server side  the interface cms and its implementation cmsimpl declare the actual webservice  as you can see from the  webservice annotations   it features a single method getresourceid which looks up the resource specified by the path argument and returns its id   this webservice deals with two portable artifacts   the path as argument the id as return value  since jax ws can deal with strings directly  you do not have to care for the jaxb processing  i e  the xml representation  for these artifacts  all you have to do is to implement getresourceid   
  in the previous example only strings were interchanged between the server and the client   now you will see how to deal with more complex objects  namely cms content objects   the client of this example prints out the folder structure of the cms content repository   the webservice class folder exposes two webmethods getroot and getsubfolders   you have to consider two points   the client needs the folder names to print the structure and the ids to request the subfolders   so you cannot simply reduce a folder to a single string  path or id like in the first example  put have to pass a complex content object  a cms related webservice may be based on uapi or  preferably  on cae content beans   in either case the content object types are interfaces  and jaxb processors have no default handling for interfaces as portable artifacts  i e  arguments and return values of webmethods   there is a number of technical reasons for this limitation  see http   weblogs java net blog kohsuke archive         jaxb and interf html for details   these issues are covered by the interface contentmetadata   it features name and id of cms content  which are independent of any concrete document types  so you can run this example with arbitrary coremedia cms repositories  the  xmljavatypeadapter annotation tells the jax ws runtime to use a contentmetadataadapter to marshal contentmetadata objects  because jaxb processors cannot handle interfaces   contentmetadataadapter marshals the business objects into contentmetadataimpl objects   contentmetadataimpl is backed by a uapi content object and carries jaxb annotations which specify the details how to map the properties to xml   contentmetadataimpl objects are instantiated in different contexts  therefore the class needs several constructors and setters  
  both methods  getsubfolders and getdocuments  use getfolder and ascontentmetadata now  see the source of file browserimpl java   the service is ready now and can be compiled and deployed  change to the directory ws   browser build and deploy the webservice with the following command    ant server before you proceed with the client  be sure that the web application is running  generate the client api    ant generate client   in this example the client is more complex than the server  at the end of this example you will have a java swing client which allows you to browse the structure  before you can program the gui you have to consider the layout  the folder structure can be represented very well as a tree and the contained documents of one folder as list or table  because the swing components are delivered with the standard jdk they lend itself to the widgets of choice  trees and tables base upon the model view controller design pattern to separate your code from the visual representation  hence  all you need is to implement so called models with special interfaces which contain the vital data  your tree class may look like the following   
  the site parameter determines the  sub  site  the list of sites is automatically generated during report data aggregation  the category parameter determines a content category  the report displays the top viewed of this category and all of its subcategories  please note that this parameter only exists in the  top viewed pages per category  report  the time interval parameter allows a user to select the time interval  see the performance report for time interval description and screenshots   
  the coremedia system uses so called  content types  to describe the internal structure of documents  therefore  before you can work with content a  content type model  must be installed  each document type  except the root type  inherits from a parent type  or in other words  a hierarchical type system organizes the content  for more information on document types please refer to the coremedia administration manual   the web service of this section will offer two methods allowing to access all type data  in addition to the already introduced contentmetadata two other portable artifacts are needed  one describing the type generally and one for the property details   
  just like contentmetadataimpl which was explained in detail in folders  the implementation contenttypeimpl provides various constructors and setters  suitable for instantiation from request parameters  from a uapi contenttype or from another contenttype object  all type information of documents is retrieved by the methods of the content repository  in this case  use the method getcontenttypes    which returns all available document types  the code of the web service method looks like as follows   
  alternatively you could use different implementations of contentmetadata in each instantiation context   however  for cms based webservices this is not a good idea   for real world projects we strongly recommend the usage of cae content beans instead of naive interfaces and classes like contentmetadata and contentmetadataimpl   maybe you have an existing cae application which you want to expose as a webservice   in this case you don t want to reinvent the wheel anyway but just annotate your content beans for jaxb processing   you just might have to provide some additional constructors and setters  as explained above   but even if you start from scratch it is a good idea to benefit from cae flexibility  features and performance issues   however  contentmetadata is used for this example in order to keep it simple and independent of document types   why are subfolders not simply included in contentmetadata but require another server roundtrip to fetch them with getsubfolders   as mentioned before  portable artifacts have no callback methods but include all data in the first place   if subfolders are included as a list of contentmetadata  these subfolder objects would in turn include their subfolders  and so on   i e  the jaxb runtime would recursively marshal the whole folder structure of the content repository into a single response if you requested the root folder   when you jaxb annotate your existing cae content beans for a webservice  be aware not to include properties of recursive types   generate the portable artifacts now  change to the directory ws   folders invoke the apt tool    ant generate server  if you look at the generated portable artifact classes  you will notice that they make use of contentmetadata  although it is an interface   marshalling to contentmetadataimpl and jaxb binding are mere runtime issues   now compile and deploy the webservice  use the convenient server target    ant server wait until the web application is running in tomcat  generate the client api   ant generate client  the client is suitable for small repositories like the cms starterkit sample content   if you work on a larger repository  you should change the client and restrict the repository traversal to a subtree or a maximum depth   compile and execute the client with the following commands  compile the source file with    ant compile client on successful compilation  you can start start the client  a window should appear allowing you to explore document properties    ant execute client  
  build the server generate the portable artifacts for the server  run    ant generate server  you will see some  annotation types without processors  warnings which you can ignore  see http   java sun com webservices reference tutorials wsit doc examples glassfish  html   the generate server target creates a build directory and generates three portable artifact classes for the path and the id   as a developer you don t need to care about the artifacts   they are used only by the jax ws runtime  the application does not access them directly   they consist of fields  getters and setters for the data as well as jaxb annotations which tell the jax ws runtime how to map the data to xml snippets     your webservice is now ready to be compiled and deployed   call    ant compile server war server deploy server   alternatively you can run    ant server   which subsumes the four targets   if tomcat is not running yet  start it now  and make sure that it is listening on the host and port you configured in the global properties file  localhost      is used throughout these examples    your webservice named jaxws cms    cms should be running now  check this with the tomcat manager application  you can request the wsdl description of the webservice now by opening http   localhost      jaxws cms    cms cms wsdl with a browser   build the client 
  each document type consists of several properties describing the name and the type of each value   the unified api represents property declarations as cappropertydescriptor objects   for the webservice they are mapped to propertydescriptor objects  since you cannot enhance the uapi with jaxb annotations  a property has no id   instead  it is uniquely determined by its name and by the id of the declaring document type   thus the implementation propertydescriptorimpl needs two setters in order to enable the jax ws runtime to initialize it from incoming propertydescriptor arguments   
  now all important aspects of the document types are discussed  execute the known commands to compile and deploy the webservice  change to the directory ws   types compile the service class and the beans with the following command    ant server wait until the webapp is running in tomcat  generate the client api    ant generate client  the client consists of only of a main method and a printtypes method  after the initialization  all document types are requested and a for loop iterates over the returned list  a nested loop requests the property values form the webservice and generates the according output  the source code looks like as follows   
  enter the commands below and you should get all available document types  generate the required interfaces and compile all source files with    ant compile client on successful compilation  you can start start the client  your screen should show a similar output depending on your content types    ant execute client  execute client        java  contenttype  cmjavascript        java  id           coremedia    cap contenttype cmjavascript       java  description  null       java  abstract     false       java  concrete     true       java  parent id    coremedia    cap contenttype cmabstractcode       java  properties             java  include link collection        java  master link collection        java                         java         java  contenttype  cmhascontexts        java  id           coremedia    cap contenttype cmhascontexts       java  description  null       java  abstract     true       java  concrete     false       java  parent id    coremedia    cap contenttype cmlinkable       java  properties             java  contexts link collection        java  master link collection        java                               
  the web service of the prior section prints out all available document types but it is hard to recognize the hierarchical relations  a graphical representation would be better because you could navigate through even more complex document models neglecting the currently not interesting parts  at server side not much work is needed  the server will be extended by a second method which returns all properties  even the inherited  with a little refactoring the source code looks like that   
  after the previous section you should be acquainted with coremedia content types  in combination with the already introduced documents two interesting questions arise  how to access the values of a document and what kind of webservice is needed  due to the limitations of webservices each property type requires an own method  a document property contains either a collection or an atomic value of a particular type but you can ignore this fact to reduce the size of the web service interface  one solution is to just return lists even when a single value is requested  this saves programming effort  now the signature of your main class should be clear  fortunately  the coremedia knows six property types what allows a slim web service  blobs  dates  integers  links  markups and strings  for better legibility we only show the interface here  for implementation details please refer to the  propertiesimpl class  
  prior to using coremedia in site analytics for your web application  you must enable analytics in your application using the analytics tag library    overview  the analytics tag library allows you to mark pages  page parts and links as relevant for analytics  the tags are responsible for displaying statistics for pages and links  the tags also structure the page into a number of contexts  links that appear in different contexts are tracked separately even if they link to the same target page   when a link is rendered using the tag library  the html element is augmented by a javascript based event handler that tracks clicks on the link by sending notifications to your server  therefore  the tag library supports the creation of html pages only and will track clicks on links only if javascript is enabled in the browser  this may result in the loss of a small number of click events  but for most sites the effect is negligible  the counting of page views is never affected by disabling javascript in the browser   using analytics without the taglib  you can use the analytics dashboard without any additional changes to your templates  an interceptor tracks all page requests and logs them for later processing independently of the analytics tag library  see the file analytics controllers example xml for one possibility of activating the bean reportinterceptor  if you do not intend to enable in site analytics  you can skip the description of the tag library   using the taglib without analytics  it may happen that you have developed jsp templates that use the analytics taglib and want to deploy them in a project where analytics has not been licensed  in that case  you can still install a cae with the tracking extension  but set tracking enable false in the file tracking properties  this will ensure that no page views are tracked and that the license is not checked for an enabled analytics flag  
   x x x x tracking image include referrer true false true whether tracking images should report the referrer to the current page  this is necessary if you want to generate statistics on referrers or on external searches  but it enlarges the rendered page  tracking image include uri true false false whether tracking images should report the uri to the current page  normally this is not needed  because the page is sufficiently identified by the rendered object  its view and locale  tracking uri write prefix string   webapp  servlet tracker the prefix for generating image uris for the tracking images that are not supposed to be cacheable  i e   images that are actually used for tracking  it is suffixed by the image selection data and the payload data when the taglib builds a tracking image  this prefix should point at the tracking controller  it should be an absolute uri  for example  http   www mysite com myapp servlet tracker might be a typical value  take url rewriting into account when setting this value  if unset or empty  a reference to  servlet tracker in the current web application context will be used instead  tracking uri cacheable write prefix string the value of tracking uri write prefix the prefix for generating image uris for the tracking images that are supposed to be cacheable  i e   images that are not used for tracking  this uri may be chosen separately so that a cache in front of the cae can infer cachability more easily  in any case  the uri must ultimately resolve to the tracking controller  which will then deliver the images and other cacheable fragments  tracking uri parse prefix string  tracker the part of the image uris between the end of the name of the web application context and the image selection data  this string is used by the tracking controller to parse the request uri  tracking resource prefix string  web inf tracker resources  the path to the images to be delivered by the tracking controller  in the specified folder you can place additional images to be delivered as tracking images  single pixel images with a specified color are generated on the fly  so that this property is rarely changed  tracking cacheable duration integer      the time after which a response that the tracking controller considers cacheable should expire  in seconds  the tracking controller will set the http response headers appropriately  javascript code for tracking is also made cacheable for the given time  when setting this value too high  updated code might not become available in time   
  the gui of the client uses the tree and table views to browse through the content and offers an additional view on the properties of documents  a double click on a certain document opens a new window presenting name and value of one property per row  one problem is the diversity of the properties which demands a flexible graphical component  each property type requires an own special component and the blob type is special case  too  because of the additional mime types  in order to constrict the manifold set of types this example supports only some image formats like jpeg  gif and png  if you need more media types it is your task to provide the required java components  otherwise  the data cannot be presented properly   in this example a special class propertycomponent maps the property types to appropriate swing components  notice that the cappropertydescriptortype which is used here is not the uapi type but the com coremedia examples jaxws client cappropertydescriptortype which has been generated by wsimport    after the type is ascertained the method getcomponent returns the proper component as jcomponent for the assigned property  the graphical widgets are arranged in a separate window class named jpropertiesframe using the gridbaglayout  on the extreme left are the property names with a fixed length and the rest of the row is filled with the component rendering the property value   compile and execute the client with the following commands  generate the required interfaces and compile all source files with    ant compile client on successful compilation  you can start start the client  a window should appear allowing you to explore document properties    ant execute client 
  make sure that the webservice is running and that you can query the wsdl as described in the previous section  you cannot build the client if the wsdl is not available  
  now you are going to implement a client which uses the webservice   how would you access the webservice   clients can query the wsdl  analyze it  create according soap messages and post their requests   however  it is hard to deal with wsdl  xml schema and soap  compose xml snippets by string operations and send http requests  fortunately metro provides the wsimport tool   wsimport evaluates the webservice s wsdl and generates a convenient java api for the client side which handles all the low level protocol issues and enables you to focus on the business logic   the example contains a client which consists of the single class cmsclient   if you open it with your favorite ide right now  you will see errors all over due to unknown classes   this is due to the fact that you have not yet generated the client interface   generate the client interface by calling    ant generate client  to invokes metro s wsimport tool   you will find the api classes in the package com coremedia examples jaxws client in the build wsgen directory   if you add these sources to your ide project  the errors in the cmsclient class will vanish  at this point you would start to implement your own client if you had no prepared example   as you can see in cmsclient  you can access the webservice with  cms port   new cmswebservice   getcmsimplport     cms provides all methods which you have exposed as webmethods in the serverside cms interface   since you did not make use of method annotations but simply declared the whole cms interface as webservice  getresourceid becomes a webmethod   you can now invoke the webmethods to implement the business logic of your client  this basic example simply queries the id of the root folder  compile and execute the client     ant compile client execute client  there is also a convenience target client which includes the three targets     ant client  since the root folder s id is always    the result will look like this   execute client        java  invoking getresourceid          java  the resource id of path   is coremedia    cap content          java   
  using the  analytics linkattributes  tag you can determine the html attributes for enabling analytics for an  a  element  typically you provide three variable names  the target object and optionally the target view when invoking this tag    analytics linkattributes object    self targetobject      view  myview  hrefvar  hv  idvar  iv  onclickvar  ocv     when rendering the page  the three variables are set to appropriate values or null  if the attribute is unused in the current context  especially  the id attribute will be null unless in site analytics is enabled and the onclick attribute will be null unless tracking is enabled   the variable can then be used to render a link    a href   c out value    hv         c if test    not empty iv   id   c out value    iv       c if     c if test    not empty ocv   onclick   c out value    ocv          c if            a   this gives you much greater control over the generated html output than the  analytics link  tag  but of course this flexibility comes at the cost of a more verbose jsp  the tag is particularly useful if the start and end element of the link are not located in a single jsp   the link attributes tag will cause the creation of an in site analytics overlay if needed  so that you should use the variable values only once   it is possible to use a nested  analytics param  tag  which works like a  cm param  tag nested in a  cm link  tag    analytics linkattributes object    self targetobject      view  myview    hrefvar  hv  idvar  iv  onclickvar  ocv      analytics param name  some  value  thing      analytics linkattributes    if even this does not produce the correct url  it is ok to generate the href attribute a second time by means of a different method  but care should be taken that the uri ultimately refers to the same page as the page indicated in the  analytics linkattributes  tag   the following table summarizes the permissible properties for   analytics linkattributes   
  regardless of which deployment from section you chose  there is a number of required configurations tasks that have to be performed  they are summarized in the following  you will find that the three recurring topics are database configuration  timezone configuration  and http references to other components  but there a few other aspects to consider   it is assumed that you have installed all components needed for your deployment  it is assumed that you have made the basic decisions regarding the configuration  for details of the mentioned configuration properties  see the section on analytics in the administration and operation manual  this section is only intended as an overview and checklist   data aggregator  if you want to connect the workflow server hosting the data aggregator to the master live server  make sure to set workflow server allow live true in the file workflowserver properties  make sure to set the property cap server workflow server url in the file contentserver properties of the master live server correctly  obtain a license that supports a workflow server in the delivery environmen  configure the analytics database properties in the file workflowserver properties and provide a database driver in lib   configure the urls of the log providers  the tracking caes  using the properties workflow server managers aggregator logprovider  n  url  depending on the tracking method you chose from section  you may have to set the property workflow server managers aggregator allow rehinting by source  configure the timezone to be used when generating reports using the properties workflow server managers aggregator timezone   language and  country  implicitly determining the start of the week  the start of the day  and daylight saving time   if you want to import search logs of the coremedia search engine  you have to configure the properties starting with workflow server managers aggregator search log  it is also necessary to provide a shell script that moves the logs into the data aggregator installation  if you do not want to keep historical analytics data around forever  set the various purge delays to match your requirements   object analyzer  configure the content repository in the file proactiveengine properties  configure the analytics database and provide a database driver in lib   if you have decided to connect the object analyzer to a live server  which is not recommended   make sure to adapt the multi site setting in the file objectanalyzer trigger xml   delivery caes  verify that you are really installing the tracking extension with the delivery caes  and only those   in the file tracking properties  configure the multi site status of your isntallation using hte property tracking multi site  set the property to true  if and only if your content management server has multi site publishing enabled  if you have decided to use sampling for your tracking cae  configure the properties whose names start with tracking sampling as appropriate  at your option  configure the placement of the analytics log files using the properties whose names start with tracking directory   preview caes  you must only adapt the preview caes  if you have decided to use in site analytics or if you have decided to use the analytics taglib although you do not need in site analytics  having read section   verify that you are really installing the in site analytics extension with the preview caes  and only those   configure the analytics database in the file overlay properties and provide a database driver in web inf lib   configure the timezone to be used when generating reports using the properties timemodel timezone   language and  country  matching the timezone configured for the data aggregator  configure the hyperlink to the analytics dashboard using the property overlay dashboard uri prefix   analytics dashboard  configure the content repository in the file analyticsdashboard properties  configure the analytics database and provide a database driver in web inf lib   configure the timezone to be used when generating reports using the properties analyticsdashboard timemodel timezone   language and  country  matching the timezone configured for the data aggregator  configure the hyperlink to the preview caes for individual pages using the property analyticsdashboard caepreview prefix  if you do so  make sure the the bean previewcontroller or an equivalent is still mapped in the preview cae   analytics feedback  configure the analytics database in the file analytics feedback properties and provide a database driver in web inf lib   configure the timezone to be used when generating reports using the properties analyticsdashboard timemodel timezone   language and  country  matching the timezone configured for the data aggregator  
  the coremedia content application engine that is used for in site analytics is assumed to be also used for preview based editing  so that overlay reporting is always installed jointly with the coremedia editing services   as a necessary configuration step  you must provide access to the analytics database  the properties overlay db driver  overlay db url  overlay db user and overlay db password in the file web inf spring analytics overlay properties define the basic jdbc connection parameters  whereas the property overlay db database indicates the database product used  possible values are oracle  db   and mssql  the property value must match the database used  so that database specific sql statements can be correctly generated  all five properties can be set by means of the installer   you may configure the default reporting interval for generating the overlays  by default  statistics for a total of    minutes are displayed  but you may change this value as needed using the property overlay default interval  you may configure the type of the displayed link overlays  clicks  loyalty       by means of the property overlay default mode  by default  the number of clicks on the given link is shown   by setting overlay default satellite visible to false  you make sure that the in site analytics configuration satellite does not appear immediately when opening a preview  but only after it has been explicitly enabled by the user  by setting the values overlay satellite modes csv and overlay satellite intervals csv you can configure the possible value from which the user can choose in the satellite  
   x x x x overlay db driver string  the jdbc driver class used for connecting to the analytics database overlay db url string  the jdbc url used for connecting to the analytics database overlay db user string  the user name used for connecting to the analytics database overlay db password string  the password used for connecting to the analytics database overlay db database oracle  db   mssql  the database type for the analytics database timemodel timezone string jvm timezone the timezone for accessing the analytics database  must be identical to the timezone configured in the data aggregator timemodel language string jvm language the language to be used in the time model  must be identical to the time model language configured in the data aggregator timemodel country string jvm country the country to be used in the time model  must be identical to the time model country configured in the data aggregator overlay default interval int    the default length of the interval for which overlay data is generated  in minutes overlay interval duration int    the granularity of the preaggregated data for in site analytics  in seconds  must be identical to the setting of workflow server managers aggregator interval duration configured in the data aggregator  overlay default mode click  loyalty  views  sourcelessclick click the type of the link overlays  clicks  loyalty       displayed by default overlay default visible true  false true whether overlays are initially visible overlay default satellite visible true  false true whether the configuration satellite appears immediately when opening a preview  if it is embedded into a page using the  analytics satellite   tag overlay satellite modes csv csv string click views loyalty sourcelessclick the in site analytics modes that are offered to the user through the configuration window or satellite  a comma separated list containing all or some of the values permitted for overlay default mode overlay satellite intervals csv csv string           the possible interval for which overlay data is generated  a comma separated list of durations in minutes  
  all the previous examples were read only examples  i e  they applied no changes to the content repository   this example enhances the browser known from the content contentbrowser example with a toolbar which enables control of the content state like checkin  approve  publish   in the previous examples authentication was no issue   the webservices used one internal uapi session to connect to the cms repository  and the clients could use the services anonymously   this is appropriate for read only services  at least for examples without security issues   but it does not make sense for modifying access   if the webservice fulfilled requests like approve and publish with its own internal session  the document history would become useless   therefore clients of this webservice must authenticate themselves with a username and a password to obtain a session id   all other methods of the webservice require the session id and execute the requests with the particular session   the webservice interface looks like this  
  the implementation stores the sessions in a hashmap   clients are kindly requested to close their sessions before they quit   this is sufficient for an example  in a real webservice you must of course reckon that clients vanish unexpectedly and implement some cleanup mechanism which closes old sessions   the interface contentmetadata has been enhanced with an editor property which holds the id of the user who has currently checked out the document   with the getuser webmethod the client can fetch the user object for this id  a new portable artifact which provides the name of a user   there is another new portable artifact contentstate which holds the state of the document  
  technically  user and contentstate follow the well known pattern of interface  implementation and adapter  notice that contentstate is used only as return value but not as argument in webmethods  i e  contentstate objects are used only in outbound messages   this allows you to implement contentstateadapter marshal as a simple typecast  because contentstateimpl is the only implementation   furthermore  you do not need a noarg constructor and any setters in contentstateimpl  because if there are no inbound contentstate artifacts  the jax ws runtime does not need to instantiate contentstateimpl objects   nevertheless  the jax ws runtime insists on a noarg constructor  so  implement it as a dummy which throws an unsupportedoperationexception   deploy the webservice with the well known commands  change to the directory ws   states compile and deploy the websevice    ant server wait until the webapp is running in tomcat  generate the client api   ant generate client  since this webservice does not support unauthorized access  the client statebrowser must authenticate itself with the createsession webmethod and keep the session id for all further requests   the constructor is the appropriate place to do this   a windowlistener on the browser frame takes care for closing the session when the client terminates  
  compile and execute the client with the following commands  generate the required interfaces and compile all source files with    ant compile client on successful compilation  you can start start the client  a window should appear allowing you to change document states    ant execute client 
  the statebrowser uses the contentstate data in the enablebuttons method to determine which buttons are enabled for the selected content   e g  if the document is checked out  the checkout button will be disabled  but the checkin and the revert button will be enabled   be aware that a contentstate object represents only a snapshot of the document state by the time of the request   there is no update mechanism  so that a client action which is enabled due to the state may fail because the document has been changed by another user meanwhile  
  the tag  analytics satellite   displays an overlay window in which the user can configure the in site analytics mode and the time for which data is displayed  this tag may be placed anywhere in the body of the page  but it is not recommended to nest it in other elements in order to avoid z order problems during display    the placement of this tag determines the initial location of the overlay window  the user can then drag the satellite to a more convenient place  if desired   by default  the satellite is visible when the user first opens the preview page  but that can be changed in the file web inf spring analytics overlay properties  you can then configure pbe context menu actions to hide and show the satellite  
  you can activate and deactivate in site analytics by means of preview based editing  pbe  by means of the predefined pbe actions with the bean names turninsiteanalyticsonaction and turninsiteanalyticsoffaction   you can also activate and deactive the satellite window for setting in site analytics parameters  if you have included the  analytics satellite   tag into your jsps according to section  to that end  there are predefined beans turnanalyticssatelliteonaction and turnanalyticssatelliteoffaction   to activate both mechanisms  you can use the following xml snippet in one of your spring configuration files    customize append bean  pbemenuactions      list       value separator  value       value turnanalyticssatelliteonaction  value       value turnanalyticssatelliteoffaction  value       value turninsiteanalyticsonaction  value       value turninsiteanalyticsoffaction  value      list    customize append  
  configuring in site analytics parameters  in order to select the reports shown by in site analytics  there is a configuration panel that can be displayed in two different ways  in a standalone window and in an overlay in the previewed page  the configuration overlay   also known as the satellite   is only available  if it has been previously integrated into the preview webapp   the following picture shows the basic structure of the configuration panel  
  in the configuration panel there is a checkbox for enabling and disabling in site analytics  there are also drop down boxes for selecting one of the above mentioned overlay mode and for selecting the interval for which statistics are displayed   you can find the panel at the url http    host   port   application  servlet overlay config where  host    port   and  application  correspond to theurl components of your preview site  for example  if the preview uses the url http   cmspreview      preview servlet content    you can open the configuration panel by requestingt the url http   cmspreview      preview servlet overlay config in a new browser window  as soon as a value is changed in this window  it is automatically sent to the server and used for generating overlay the next time a preview page is opened or reloaded   if preview based editing has been implemented in the preview application  there may be entries in the context menu for enabling and disabling in site analytics or the satellite  
  you can click on the coremedia logo of the satellite and drag the satellite around  if the satellite obscures iimportant parts of the site  
  the meaning of the parameters of the beangenerator is described in the next table  
   parameter variable description  d   document types name of the document types file to use the url of the document types file to use  you need at least one file    baseonly  create only the base classes  but no implementations and no interfaces   beanmapping name of a file the file into which the bean mapping will be written  see section    c name of a properties file that contains the package information    define specific packages for specific document types in order to organize your bean files properly  there a three possible configuration types   one package for all files of a document type  example   doctype image package com mycompany image doctype article package com mycompany article  different packages for the different files of a document type  example   doctype article package base com mycompany base  doctype article package implementation com mycompany impl  doctype article package interface com mycompany  settings for all document types  example   package com mycompany  package base com mycompany base  package implementation com mycompony impl  package interface com mycompany  document document type generate the code for the defined content type  it must be included in one of the document type files defined with the  d parameter   e    exclude comma separated list of document types exclude these types from generation process   enc    encoding one of the defined java encodings encode the output files with the defined encoding  default is cp       f  overwrite existing files  generics  use java     generics   gensetter  deprecated parameter  generates code with public setter methods   i    include comma separated list of document types document types that should be included in the generation process  default is all   noimpl  only create base classes and interfaces but no implementations  o   out directory name the directory where to generate the source code into  if it does not exists it will be created   p    package package name the package name used for the generated beans  a setting defined with  c overwrites the package defined with  p  to avoid confusion only use  p or  c   
  example  if you use the following call from the lib directory of your content application web application   java  jar beangenerator jar   d  contentserver config contentserver doctypes menu doctypes xml  o  output classes  d  properties package properties  beanmapping  properties contentbeans xml  e picture  generic  with the following package properties file   doctype dish package com menusite dish package com menusite  this will generate interfaces  base classes and implementation classes for all document types of the menusite example except for the picture document type  the document types are read from the  contentserver config contentserver doctypes menu doctypes xml file and the generated classes are written to the  output classes directory    the dish document type belongs to the com menusite dish package while the other types are in the com menusite package  this information is taken from the  properties package properties file  the bean mapping is written to the  properties contentbeans xml file  generics are used which results in code like the following   public list   extends dish  getcontent         list   content    contents   getcontent   getlinks  content        return  list   extends dish   createbeansfor contents       
  many coremedia cms projects have defined a property that contains a list of name value pairs  used for configuration purposes or as  dynamic properties   a reason for this is  that even you can add new content types and most properties to the existing document type model  this requires a server restart and automatic schema migration is not possible  in addition  you might not want to have a new content type or property for every feature needed  on the fly    a typical use case for dynamic properties that also applies to the starter kit is to set and store parameters for  newly created  views  jsps  in a document  the jsps can be updated without even restarting the web application  so using them should also be possible without any restart   the starter kit introduces a new xml grammar coremedia struct      for such purposes   you can declare xml properties of this grammar in your content types  edit them with a special struct property editor  see section   and access them as capstruct objects in your cae application code  so you will hardly get in touch with the actual xml representation of a struct   nevertheless  the following example points out the features and gives you an idea of the capabilities     
  as you can see  a struct resembles a document which brings its own doctype declaration   it features string  integer  boolean and link properties  see section for details    all these types come in two flavors for single values  like the linktext property in the example  or list values  like the hotlinks property    furthermore  there are struct properties  which enable you to create simple nested structs and lists of structs   while all this might sound much more flexible than the static document types  structs have also some major drawbacks   the editors do not support them as convenient and configurable as ordinary document type properties  you cannot query or search for properties in structs   so you should not use structs for editorial content  structs are a powerful model for technical  programmatic issues like jsp parameters  layout related  texts and images  color schemes  sizes and the like   by implementing cascades and fallbacks with structs of different precedence according to some business logic you can easily achieve a site design which is both  flexible and consistent    
   jmx  description   the jmx action retrieves an attribute from any component via jmx and converts the attribute s value into a watchdog code  this attribute conversion is done by one or more configured com coremedia watchdog codeconverter instances  each configured converter might either return a watchdog code or a special  not responsible  code  the jmx action iterates over each converter until a watchdog code is returned  in case that all converter return a  not responsible  code  a configured default code is used   by default a converter com coremedia watchdog numberrangeconverter is provided which expects the jmx attribute to be a number  e g  int  long       and which returns a configured watchdog code if the number is included in a configured range of numbers  you might also implement a custom converter by extending com coremedia watchdog codeconverter  see the javadoc for more details  attribute   serviceurl  a url to connect to a jmx server objectname  the qualified name of the mbean attributename  the name of the mbean s attribute defaultcode  the watchdog code to use if none of the converters is responsible nested elements  each converter needs to be specified as a  converter  and has to provide its implementation class by  class  attribute  if the converter implementation provides additional configurable attributes   setter methods    these attributes might be specified as well  error codes the error codes depend on the configured converters or the default code is returned   
  example   jmx name  myjmxaction            serviceurl  service jmx jmxmp   localhost                  objectname  proactiveengine type core            attributename  heartbeat            defaultcode  ok        converter class  com coremedia watchdog numberrangeconverter                       min      max         code  ok         converter class  com coremedia watchdog numberrangeconverter                       min         code  error      jmx   the jmx action  myjmxaction  retrieves the attribute heartbeat of the mbean  proactiveengine type core   if the attribute value is between    and       then a watchdog code  ok  is returned  a value greater or equal         results in a code  error   the default code  ok  is used if no converter applies  e g  if the value is lower than     
  this action is a sibling of the aggregateintervalsaction in that it also fills a set of tables for similar statistics at multiple time granularities  it also reaggreates data from the finer grained tables to the coarser grained table  the differences is that the initial integration into the most fine grained table happens with java assistance   a custom class implementing com coremedia analytics wf plugin preprocessingmapper is repeatedly called with the values of data columns read from a source table  the mapper also receives a callback object of type com coremedia analytics wf plugin statisticscollector  on which calls can be made to increment counts and sums  for each call of the collector  an array of key values must be given  which correspond to the key columns of the target table  it is up to the mapper class how the keys are derived from the provided values and how often and with which keys a callback is made   before statistics values and keys are written to the database  they are preaggregated in main memory for each processed interval  this means that the number of different keys in a single fine grained interval should not normally exceed a few ten thousand  before keys are written to the database  they are processed by an instance of the interface com coremedia analytics wf plugin transformer  there is one transformer per key column  the default implementation identitytransformer passes the value on unchanged  the implementation singlekeydimensionencoder can be used to compress a single value  typically a string  into a numeric id using a dimension table  extending the table as needed   the file config dataaggregator spring dataaggreator actions example xml contains an example that shows how to configure a preprocessingaggregateaction in spring xml  
    editor   child elements   authenticationfactory   locale     preview    propertymodelfactory     remotecontrol    documenttypes     documents     explorer     resourcechooser     query     search     spellchecker    propertylanguageresolverfactory    resourcenamingfactory     workflow     processes     framefactory     webbrowsers    webcontext   parent elements  
   authenticationfactory   child elements   parent element   editor   you can use this element in order to set your own authentication factory  the element needs to be located in the editor startup xml file    editor     authenticationfactory class  com myfactory ownauthenticationfactory            editor   this factory circumvents the standard login dialog and fetches principal and credentials by custom means  
   attribute description class the fully qualified name of your authentication factory  your class must implement authenticationfactory and needs a public noarg constructor  see the javadoc for details   
  the coremedia editor can be configured with the settings in the xml files  see above   their default location is the directory  installdirectory  properties corem  customize the editor  by adjusting the following elements   enter an username and a password for the login  see element  editor   select the language and country settings which should be used  preferably located in editor startup xml  see element  locale   circumvent the standard login window with your own authentication factory  see element  authenticationfactory   determine which web extensions such as a preview or differencing should be used  see element  webcontext    determine which browser should be used  see element  webbrowser   select and configure the appearance of the fields in the document overview of the main window  of the query window and of the selection window for internal links  see element  explorer   determine the filters used on the documents in the document overview of the main window  see element  filter   determine the filters and sorting algorithms affecting the folders in the folder overview  see elements  treesorter    treefilter   set a factory for client side properties  see element  propertymodelfactory   define multiple views for the document overview of the main window  which can be selected with the menu item view display  see element  explorer   determine which fields of a document type should be shown in the document window  see element  documents   determine which document types should be shown in file new  see element  documenttypes   define initializer and validators for the fields of newly created documents  see element  documenttypes   set certain conditions for these fields  editable  obligatory field        see element  property   allocate certain editors to the fields and in this way  for example  define a selection field with certain preset values  see element  property   enable or disable the spellchecker  see element  spellchecker   configure the class for language determination of a property used by the spellchecker  see element  propertylanguageresolverfactory   configure the appearance of the workflow  see elements  workflow    processes   enable or disable the remote control of the editor  see element  remotecontrol    a formal description of the syntax of this xml file can be found in the corresponding dtd in  installationdir  lib xml coremedia editor dtd  the xml files must obey the dtd  but are not validated against the dtd  an example editor xml file follows  
  the coremedia lightweight portal allows standards conforming java portlets to be integrated into a website generated by the coremedia cae  it gives editorial staff full control over the placement of portlets  while maintaining the flexible page design offered by the cae   portlets enable the cae to have multiple independently developed  stateful  interactive elements on the same page  in a standard spring mvc based cae web site  you can achieve a similar result by implementing multiple controllers and cae plug ins  at the price of stronger coupling  portlet applications are independently deployed and can use different versions of different third party libraries   the coremedia lightweight portal may also come in handy to leverage existing it investments in portlet technology  or to increase the level of integration with other web applications  e g  from iframes to true html integration    architecture describes the architecture of clip supported standard features describes the supported features of jsr     
  the coremedia lightweight portal extends a cae web application  such as the coremedia starter kit  so that portlet applications deployed on the same application server can be integrated into pages delivered by the cae  the placement and configuration of portlets and portlet windows is content based  i e  directed by editorial staff  using familiar editing tools  and is stored in the coremedia content repository   the coremedia lightweight portal comes as a cae plug in  with an automated installer  for a starter kit based web site  you can start using portlets right away  the plug in does not require changes to application logic  it only has minimal performance impact  because it works on the abstract page model  and does not require any redundant page rendering  
  the coremedia lightweight portal supports the java portlet specification version      jsr      with some limitations  including events  public render parameters  response properties  resource requests and portlet filters  with the following limitations   portlet modes view  help  and edit are supported window states normal  minimized and maximized are supported custom window states are not supported  user roles are not available  portletrequest isuserinrole always returns false   only mime type text html is supported for portal pages  a cc pp profile is not provided    the following elements in the portlet xml are ignored    description display name the keywords subelement of the portlet info element   since the coremedia lightweight portal is currently targeted at designed web sites rather than emulating a window system  the clip does not show the following usual portal behaviour suggested by the java portlet specification   portlet window controls   it is assumed that on a live web site  no window frames will be desired  therefore window controls are considered an editorial utility only  currently  the frame always shows controls for all modes and states  even if not possible or supported by the portlet  no css styles for the portlet style classes are defined  you can however use the starter kit css importer to import project specific style sheets   some optional features of the portlet standard are not supported  including   shared resource qnames  resourceurl shared  container events the browser back button 
  this chapter describes  how to install and use clip in the starter kit   installation in the starter kit describes the graphical and script installation  hello world portlet describes the  hello world  example portlet application  editing portlet preferences describes how to edit portlet preferences in the edit mode  adding portlet window controls describes how to add portlet window controls to the example portlet  editor configuration describes how to prepare the coremedia editor for editing portlet preferences  
  scope of delivery  the coremedia lightweight portal comes as a  zip file that contains the following components   an installer  which installs the coremedia lightweight portal on top of a coremedia starter kit installation   this documentation technical reference documentation  javadoc    prerequisites  in order to install the coremedia lightweight portal a starter kit installation is needed  the starter kit installation must at least have a content server and a tomcat web server installed  if you want to install the example portlet window controls  see section  you also have to install the css importer  for further information on how to obtain and install the starter kit see the starter kit manual   graphical installation  in order to install the coremedia lightweight portal using the graphical installer  proceed as follows  enter the following command   java  jar portlet extension installer jar  the start screen opens up  
  script installation  the installer is based on antinstaller and supports silent text mode installation  installation properties are read from the file portlet extension install properties of the current working directory or the file specified with the  p parameter  start text installation with   java  jar portlet extension installer jar text auto  the file portlet extension install properties must be in the format as generated by the graphical installation  e g   ant install config version       clip install sse userfeedback plugin   true coremedia sse release path    sse coremedia sse         zip sse repository connection database type   postgresql sse repository connection driver class   org postgresql driver sse repository connection password   sseuser sse repository connection username   sseuser sse repository connection url    jdbc  postgresql    localhost       coremedia starterkit directory    starterkit 
  a few manual steps are necessary to prepare a cae application to bea weblogic server     the exact steps differ depending on whether the application uses editing services for jsf  and jstl  or only jstl  without editing services for jsf     the following coremedia components use editing services for jsf   advanced query editor bean query editor differencing starter kit  other web applications provided by coremedia fall into the second group   preparing a cae application using editing services for jsf for deployment in bea weblogic server install the jsf       implementation shipped with weblogic server as a deployable library  either by using the server administration console or via the command line  the library is provided as jsf ri       war in   wl install root  wlserver      common deployable libraries  see bea weblogic server      documentation  deploying shared java ee libraries and dependent applications for details  remove the jars and dependencies included in jsf ri       war from the web application s web inf lib directory  jsf   jar  jstl jar  standard jar  commons collections jar  commons logging jar  commons beanutils jar  and commons digester jar  if the web application s web inf lib directory contains a version of jtidy jar  make sure it does not contain the packages org xml sax or org w c dom  delete both directories from jtidy jar   if present   to avoid a linkageerror due to incompatible interfaces  in web inf log j properties  change the default log file path  the system property catalina home is only defined by the tomcat servlet container  add a deployment descriptor weblogic xml to the web application s web inf directory  containing a reference to the deployed jsf ri library and changing the class loading order to prefer libraries deployed in web inf lib over container libraries  see weblogic xml deployment descriptor elements for details     xml version           weblogic web app xmlns xsi  http   www w  org      xmlschema instance     xmlns  http   www bea com ns weblogic       xsi schemalocation  http   java sun com xml ns j ee     http   java sun com xml ns j ee web app     xsd http   www bea com ns weblogic       http   www bea com ns weblogic    weblogic web app xsd       container descriptor       prefer web inf classes true  prefer web inf classes      container descriptor      library ref       library name jsf ri  library name       specification version      specification version       implementation version        implementation version      library ref     weblogic web app   preparing a cae application without editing services for jsf for deployment in bea weblogic server install the jstl       implementation shipped with weblogic server as a deployable library  either by using the server administration console or via the command line  the library is provided as jstl       war in   wl install root  wlserver      common deployable libraries  see bea weblogic server      documentation  deploying shared java ee libraries and dependent applications for details  remove the jars and dependencies included in jstl       war from the web application s web inf lib directory  jstl jar and standard jar  if the web application s web inf lib directory contains a version of jtidy jar  make sure it does not contain the packages org xml sax or org w c dom  delete both directories from jtidy jar   if present   to avoid a linkageerror due to incompatible interfaces  in web inf log j properties  change the default log file path  the system property catalina home is only defined by the tomcat servlet container  add a deployment descriptor weblogic xml to the web application s web inf directory  containing a reference to the deployed jstl library and changing the class loading order to prefer libraries deployed in web inf lib over container libraries  see weblogic xml deployment descriptor elements for details     xml version           weblogic web app xmlns xsi  http   www w  org      xmlschema instance     xmlns  http   www bea com ns weblogic       xsi schemalocation  http   java sun com xml ns j ee     http   java sun com xml ns j ee web app     xsd http   www bea com ns weblogic       http   www bea com ns weblogic    weblogic web app xsd       container descriptor       prefer web inf classes true  prefer web inf classes      container descriptor      library ref       library name jstl  library name       specification version      specification version       implementation version        implementation version      library ref     weblogic web app   
  if you intend to deploy the starter kit web application to an application container other than apache tomcat  please follow the application container specific deployment instructions in administration and operation manual  
  for getting you started clip comes with an example  hello world  portlet application  this section shows you how to deploy it in the starter kit integration   deployment  after installation of the coremedia lightweight portal you will find the example helloworld war file in the folder  your starterkit installation  management portlet example helloworld   to deploy it  use the command line deployment tool with the prepare and register commands   prepare  in order to adapt the portlet application to the portal  proceed as follows  in your  your starterkit installation  management  folder type the following command   bin cm deployportlets prepare  i portlet example helloworld helloworld war  o jakarta tomcat webapps  this command creates the prepared helloworld war portlet application file in the  your starterkit installation  management jakarta tomcat webapps  folder   register  in order to register the portlet in the content repository proceed as follows  make sure that your content server is running   type the following command in the  your starterkit installation  management  folder    bin cm deployportlets register  i jakarta tomcat webapps helloworld war  u admin  p admin  this command creates a cmportletdef and a cmportletinst document at the default location  system portlets in the content repository   for details on the deployment command line tool see deploying a portlet application   placing the portlet on a website  now  that you have deployed the  hello world  portlet  you can place it on a webpage  each portlet is visually represented by a portlet window  in the starter kit integration  portlet windows are documents of type cmportletwindow  to create a cmportletwindow for your  hello world  portlet you can just import the predefined content in the portlet example helloworld directory  to do so execute the following command from your  your starterkit installation  management  folder   bin cm serverimport  u admin  p admin  r portlet example helloworld helloworldcontent  for detailed instructions on how to position a portlet on a page see positioning portlets   in your coremedia editor you can find the created portlet window in the system portlets folder  
   workflowserverquery  description this action executes a database query on the coremedia workflow server over the corba api  in this way  all integral components of the server from orb to the database connection are checked  attribute   url  url where to get the ior of the server  user  coremedia user name to log on to the server  domain  domain of the user   password  coremedia user password to log on to the server error codes      ok       unexpected error       timeout       error       respanwing too fast       io error       invalid login       repository error       query failed   
  the  analytics pagecontext  tag sets the stage for tracking the origin of clicks  it identifies the rendered object  the view  and the locale for the current page  this information is passed to all links inside the context  a typical usage would be   analytics pagecontext object    self   view                analytics pagecontext   if it is known that the rendered page is different from the page encoded in the url  for example because a text fragment was encoded into the url and it is now displayed in a container object   the page encoded in the url can be indicated as the linked page    analytics pagecontext   object    self   view         linkedobject    self   linkedview                analytics pagecontext   this can help the data aggregator correctly interpreting the javascript callbacks that are made when a link is clicked  further details can be found in section   if no interceptor tracks the current page view  the page context tag also ensures that an appropriate event is generated at the closing tag   
   x x x x object object  the currently rendered object  typically    self   view string the default view the currently rendered view locale string computed by the locale extractor the currently rendered locale  e g   en us  linkedobject object  the originally linked object whose identity is directly encoded into the url  only set if the linked page differs from the rendered page linkedview string the default view the originally linked view encoded into the url  only set if the linked page differs from the rendered page linkedlocale string computed by the locale extractor the originally linked locale encoded into the url  only set if the linked page differs from the rendered page logview true false true set to false if you do not want to gather page view statistics for this page or at least not for this request inhibitstatistics true false false set to true  if you want to inhibit the display of overlay reports for this page  this may be useful if you render click data separately from the preview  so that only click tracking has to be done using the taglib   
  the complexity in correctly recognizing transitions between two pages arises  to a considerable extend  out of the flexibility that the content application engine offers   if you can keep your application simple by rendering content beans and by using the same content beans as link targets  the complexity vanishes completely  if you need advanced cae features  analytics scales through the advanced customization options shown here  
  when you are logged into the preview  management  web site as a sufficiently authenticated editor  such as admin   you can change the portlet s preferences by switching to config mode using the preview based editing menu of the portlet  to do so  proceed as follows  right click on the portlet window  the portlet window looks as follows  
  pages are identified by three properties  as also explained in section in more detail  object  locale  and view  by using the analytics taglib  you have full control which values are chosen for each of these properties  while the view is typically the view used by the content application engine and the locale is either fixed or easily computed from the rendered content  choosing the correct object might not be as straightforward   if you are directly rendering instances of contentbean in your web application and if you are only using information reachable through that bean  it is a good idea to use the content bean as the object identifying the page  if you are using additional information that might possibly be passed through other request attributes  you have to decide whether the content bean is properly representing the page  it might even in this case  a search result page might be based on a content bean and you want to count all accesses to the search result page jointly  so that the actual search term can be ignored   if the content bean is not sufficient for identifying the page  you should either change application to use a more complex object as the self object or you should at least pass a different object to the  analytics pagecontext  tag as described in section  you can use the taglib functions described in section to that end  but it is also possible to use own beans   if you are choosing an object other than a content bean for identifying the page  you must provide an idscheme that is capable of converting such objects to and from their string representation  you should also provide an objectidanalyzer as described in section and configure it in the data aggregator  so that categories and names are correctly computed   in any case  a siteextractor must be configured  it computes a site from the object and uses that as the site of the page  if you want to render one content bean in multiple sites  this means that an aggregate page object must be used  because one content bean can only be placed in one site  choose your site computation algorithm carefully  because it is difficult to change later on as some objects have already been permanently assigned to sites  
  if your application is following the jsp     servlet     jstl     specification  the analytics taglib provides taglib functions for building a compound page object  those functions are normally used nested in the  analytics pagecontext  tag  all argument to these functions must be instances of contentbean   the function analytics compound       takes two arguments  from the first argument a siteextractor will compute the site of the page  the second object will be placed into a category by the object analyzer and that category will also be used for the page   the functions analytics compound       to analytics compound       take one to three additional content beans that can further differentiate the identity of the page and that will be used to determine a name for the page later on   an object that fulfils multiple functions in a page may be passed into the compound functions multiple times  for example when one object represents the site and the category  also  the object that determines the category may or may not be appropriate for acting as a name object   these taglib functions generate instances of the class com coremedia analytics compound compoundbean using the static methods defined in the class  for this class  an idscheme and an objectidanalyzer are already preconfigured  
    on the start screen click next  
      confirm the license agreement by clicking accept  
      select the directory of your starter kit installation  the clip requires the sse user feedback plug in  click the checkbox to install it   click next   the next window allows you to configure the database used by the sse user feedback plug in  
    choose the option portlet config mode from the menu  the portlet switches to config mode  
    in config mode  the hello world portlet allows to reconfigure the welcome message  type in a new message and submit  
  this will be the new default welcome message for all web site visitors  
    in config mode you can also switch back to view mode without changing any preferences  right click the portlet being in config mode and choose portlet view mode from the menu  
  the coremedia lightweight portal comes with an example portlet window layout  it provides means for rendering the portlet window frame including control buttons for changing the window state and portlet mode   installing the window controls consists of two steps   importing the css layout  adding the style sheet to your portlet window   a jsp template for the view type that makes use of the css styles is already included   importing the css layout to the content repository  before you install the layout make sure that you have the css importer installed in your starter kit  to import the clip example layout to your content repository perform the following command    your starterkit installation  management bin cm css portallayout import run  the layout will be installed in the content repository under the path  system portlets clip example layout  adding the style sheet to your portlet window  in your portlet window set the field associated css to  system portlets clip example layout css clipexample css  if you preview the page with your portlet window on it  it should look like this   
  you can now minimize  maximize and restore the portlet window by clicking on the window controls  there are no icons to switch to other portlet modes because the edit mode is only available for logged in users and the help mode is not implemented in the hello world portlet   the next section explains how a logged in user can use the edit mode to set user specific preferences for the portlet  
  if you want to view or edit the portlet preferences in the coremedia editor  you must add the configuration for the plain text xml editor in management properties corem editor xml  
  this chapter describes the administration and operation of clip  deploying a portlet application describes the deployment of a portlet application into clip  configuring a portlet application describes how to configure the portlet application in the coremedia repository  deployment blueprint describes how to deploy the portlet application to the live environment  roles and permissions describes the roles and permissions required for the intergration of a portlet application into clip  operation and monitoring describes the logging of clip  
  deployment overview  when you deploy a portlet application two steps are performed by the deployment tool    the portlet application is adapted to the portal    some additional entries which are specific to the portal are added to the web xml inside the war file some extra files like tlds  which are also portal specific  are added to the war file    the portlets contained in the war file are registered in the content repository    for each portlet a cmportletdef  see cmportletdef  and a cmportletinst  see cmportletinst  is created and filled with the values provided by the portlet   how to use the deployment tool  the following shows the usage of the command line tool for deploying a portlet application  in this description the command line calls are shown relative to  your starterkit installation  management bin  prepare portlet    cm deployportlets prepare  i  path to warfile   o  output path      register portlet in content repository    cm deployportlets register  i  path to prepared warfile   u  repository username    p  password       path  path in content repository    you can execute both steps with one single call for simplicity   cm deployportlets  all   i  path to warfile   o  output path   u  repository username    p  password       path  path in content repository      the following table shows the actions and options of the deployportlets tool  
  you configure a portlet application using two documents in the content repository    cmportletdef cmportletinst  both documents are generated automatically during portlet deployment  see portlet deployment    cmportletdef  the document type cmportletdef represents a portlet definition in the content repository  it currently consists of the application name and the portlet name  and additional information extracted from the portlet xml   applicationname  corresponds to the name of the portlet s war file  it represents a portlet application which can contain multiple portlets  portletname  is taken from  portlet name  tag in the portlet xml  it identifies a portlet within a portlet application  defaultpreferences  contains a copy of the  portlet preferences  tag in the portlet xml  the default preferences are used only when a portlet instance wants to reset a preference to its default value  portletsupports  contains a copy of the  supports  tag in the portlet xml    title  shorttitle  is taken from the  title  and  short title  elements in the portlet xml     cmportletinst  the document type cmportletinst represents a portlet instance in the content repository  a portlet instance provides one configuration of a portlet with preferences  there may be multiple portlet instances per portlet definition  the portlet instance currently consists of a link property referring to the cmportletdef document and a markup property storing the portlet preferences   portletdefinition  contains a link to the cmportletdef document  preferences  is originally taken from  portlet preferences  tag in the portlet xml  it defines the preferences accessible to the portlet using the javax portlet portletpreferences interface   additional instances can be created by copying and modifying the document  for further details  read on in configuring portlet preferences  
  the coremedia cms replicates its content repository from the content management environment to the live environment  and in the live environment from the master live server to the replication live servers  each copy of the content repository can have a number of cae web applications attached  in order to deliver a consistent web site in the live environment  the web application deployed in each cae always has to be compatible with the content available in the respective replication live server   the situation is similar when dealing with portlet applications  the selection and configuration of portlets to be shown on each page is defined by the content  the portlets are referenced by name  as described in section      configuring a portlet application  so in order to achieve a consistent web site in the live environment  all portlets referenced from the content should be available in the respective container  also  the version of the portlet application deployed should understand the preferences defined in the content   rolling out a new portlet application  the following procedure permits the rollout of a new portlet application without service interruption  and without intermittent inconsistent states on the web site  there may be other concerns  such as dedicated qa phases  requiring a stricter practice   in order to roll out a new portlet application through the whole system  you  as an administrator  need to execute the following steps  prepare war file  as described in section      deploying a portlet application  register portlet application  as described in section      deploying a portlet application  copy prepared war file to the content management environment  preview  servlet container create portlet windows  if desired  and verify portlet application functionality copy prepared war file to all live environment servlet container instances make sure the portlet application war file was successfully deployed by all servlet containers  check logs  publish portlet application registration documents  cmportletdef and cmportletinst  publish portlet windows  if desired  to avoid visible errors on the web page  the portlet application must be deployed before the registration documents are published   since servlet containers are typically only able to deploy and redeploy an application a limited number of times  it may make sense to restart the whole servlet container instance  usual procedures for servlet container restart  load balancing failover or scheduled downtime  apply   upgrading a portlet application  the steps required to update a portlet application depend on the degree of modification   if the updated application understands all preferences that were configured for its portlet instances in the previous version  the updated portlet application war file can be deployed immediately throughout the live environment  as described in the previous section  you may want to restart the servlet container   some servlet containers serialize and persist session states  as with all web applications  a portlet application should be aware that it may find serialized session state from an older version of itself in the session   if the updated application supports additional preferences or preference values  or contains additional portlets  these should be treated like a new portlet application  new or updated registration documents should only be published after the updated application was successfully deployed on all live nodes   if the updated application is not compatible with pre existing instance configuration  i e  preferences   the new portlet application version should be renamed and be deployed in parallel to the old application version  following the procedure for a new application rollout  after all instances of the old application version have been removed  and this removal has been published and replicated to all live systems  the old application can be undeployed from the servlet containers  you should first check whether the application supports operating multiple deployments in parallel  or whether its usage of global namespaces  such as application scope session attributes  leads to conflicts  if an interruption in portlet application service is acceptable  you can also remove the old version first  and then roll out the new version  this avoids a need to operate both versions in parallel  
  the coremedia lightweight portal logs error situations to help administrators to analyze problems  it depends on the configuration of your web application and servlet container where log output appears  for the starter kit the relevant log files are    management jakarta tomcat logs starterkit log  management jakarta tomat var logs httpd out   error codes  the coremedia lightweight portal uses error codes when logging exceptions  these error codes are documented in the coremedia api documentation and are intended for debugging purposes  however  these error codes may change at any point of time in future releases  they are solely intended for debugging and documentation purposes   error codes are defined in com coremedia cae portletcontainer lightweightportalerrorcodes  
  when integrating portlets into a coremedia lightweight portal  the following roles can be distinguished   administrator developer technical editor page editor  administrator  administrators have access to the file system where the software is installed  and have access to cmportletdefinition and cmportletinstance documents in the content repository  they are responsible for  installing the coremedia lightweight portal software installing portlet applications making portlets available for the technical editors  the associated tasks are described in this manual   installation in the starter kit  and parts of integration into a non starter kit project deploying a portlet application  and deployment blueprint  by registering a portlet application  the cmportletdefinition and cmportletinstance documents referring to the portlet application are created in the content repository  the administrator is responsible for keeping the registration in sync with the portlet applications that are actually available from all content application engines in the content management and live environment   therefore  the administrator should be the only role that has create  modify  delete and publish rights on the cmportletdef document type and the  system portlets definitions repository path  in order to register the default instances  the administrator should also have modify  delete and publish rights on the cmportletinst document type and the  system portlets instances repository path   developer  an html css developer is responsible for integrating portlets into the site layout  by defining suitable templates  see tag library  for further details  consult the starter kit manual on importing  assigning and editing css styles   a java spring developer will be required if the cae web application is not a pure starter kit webapp  primarily to make sure all portlet windows on a page are found in the page model  consult developer  for further details   technical editor  the technical editor is responsible for configuring a portlet instance  within the limits offered by the portlet preferences  a default portlet instance is created when the portlet is registered by the administrator  the technical editor may modify this portlet instance  or create a new portlet instance referring to the same portlet definition   the technical editor therefore needs access rights on the cmportletinst document type and the  system portlets instances repository path  he she also needs read rights on the cmportletdef document type   in order to test the portlet  the technical editor should also have the rights to create a cmportletwindow  at least on an unpublished sandbox page   page editor  the page editor is responsible for placing portlet windows on pages  each portlet window refers to a portlet instance provided by the technical editor or administrator   the page editor therefore needs access rights for the documents making up a page in the page editors area of responsibility  including the cmportletwindow document type  the page editor should also have read rights on all portlet related document types  
  prerequisities  for register and all a running contentserver is mandatory  
  portlet preferences are stored in the coremedia repository per portlet instance  portlet instances are represented by documents of type cmportletinst   cmportletinst documents are automatically created when deploying portlets with the deployment tool  see section      deploying portlet application   the deployment tool automatically creates a link to the cmportletdef document  which specifies the portlet name and portlet application  and initializes the portlet preferences with the preferences from the portlet xml portlet deployment descriptor   the default location of cmportletinst documents is  system portlets instances but other repository paths can be specified during the deployment   editing preferences  you can edit the preferences of a portlet instance either by using the portlet s edit mode  or by directly editing the corresponding cmportletinst document  for editing the cmportletinst document  you can use the coremedia editor or webeditor   using the portlet edit mode  in edit mode  a portlet application renders its own web ui for changing its preferences   in the content management environment  i e  preview   a portlet supporting edit mode can be switched to edit mode if a user is logged in for preview based editing  and if that user has sufficient privileges   the coremedia lightweight portal offers three ways for entering edit mode   using preview based editing using window controls using edit links rendered by the portlet itself  any changes to the preferences done through the portlet application s interface are stored back to the cmportletinst document  note that preferences are specific for this portlet instance  but are the same for all users viewing any portlet window linked to that portlet instance  the current user id is only used to determine content write permission  and the user s name is recorded in the version history of the cmportletinst document   section      editing portlet preferences in the introduction gives a detailed example of using preview based editing on a portlet window to enter edit mode  for editorial users  this is the most convenient approach   by default  portlet windows in the cae do not have a frame with window controls  if window controls are configured  e g  as described in section      adding window controls   you can click the respective control to change the portlet s mode   some portlet applications may also integrate a ui element for entering edit mode into their normal  view mode  markup  e g  when a portlet instance is not properly configured yet   note that edit mode is not supported in the live environment  as all content changes have to pass through the regular publication process   editing preferences in the coremedia editor  a cmportletinst document stores preference values in its xml property preferences  the property contains a sequence of preferences  each preference has a name and zero or more values  all of which are strings  a preference may be flagged as read only   a portlet instance s preferences are read from the cmportletinst document  which can be edited using any coremedia content editing tool  when the document is updated  the portlet application will see the new values on the next request   currently it is only possible to edit the preferences as plain xml text   the preferences xml property uses the schema http   www coremedia com      clip portlet preferences  which references the relevant part of the official jsr     portlet application descriptor schema   let s start with the most simple preferences  empty preferences  each xml property must contain the root tag clip portlet preferences with a suitable namespace declaration  and for empty preferences this is all you have to enter  
  this chapter describes how a user of clip can edit the settings and positioning of the portlets   configuring portlet preferences describes how the portlet preferences can be edited using the edit mode or the coremedia editor  positioning portlets describes how you can position portlets on your website  window controls describes how to add window controls to your portlet window  
  each preference is defined as a preference subelement from the portlet application descriptor namespace  it needs a name subelement for the name  followed by zero or more value elements  and finally an optional read only element  the content of the name and value elements is pure character data  the read only element may only contain the values true or false   the following example sets the preference foo to the value bar  
  in the example  there is another namespace declaration for the elements defined in portlet application descriptor schema  for brevity  the portlet namespace is defined as the default namespace   a preference with multiple values can be set by adding multiple value elements  you do not have to repeat the name element  the following example sets the preference languages to the values en and de  
  it s possible to set multiple key value pairs simply by using multiple preference elements  you can also omit the value in a preference to set an empty preference value  for example  
  if a preference should be read only even in portlet mode edit  you can add a read only element as follows  
  how to place a portlet window on your website depends heavily on the document type model of your project  this section describes how to position portlet windows in the starter kit integration  the following description might still be helpful if your project uses a similar mechanism   starter kit integration  in the starter kit integration  portlet windows are represented by documents of type cmportletwindow  cmportletwindow extends the starter kit s document type cmteasable  which provides all properties to place the document on the website  cmteasable is the base of various types including cmarticle which represents articles on the website  if you know how to put an article on the website  you nearly know what to do to add a portlet window   to create a cmportletwindow document in an existing channel  proceed as follows  open the navigation explorer in the webeditor from the window menu  select the parent channel for the new portlet window and click the toolbar button to create a new content   the following dialog pops up  
    in the left pane  select the folder where the cmportletwindow document should be created  choose type cmportletwindow enter a name for the new cmportletwindow into the name field   next  the cmportletwindow document opens  
  if you are using the coremedia editor which does not provide a navigation explorer you can manually create a cmportletwindow in the desired folder  you must add a link to the existing channel in the property contexts afterwards  
    in the document window  set the property segment to a string which is unique for all documents within the channel  the web editor will automatically derive the segment from the document name if you don t set one  to show the portlet window on the page of the channel  add it to the contentlist property of the channel document   these steps were the same as for creating a new article  the portlet specific part is easier  set the property portletinstance to link to the cmportletinstance document which represents the portlet instance with its portlet preferences    cmportletinstance documents are automatically created when portlets are deployed in the coremedia lightweight portal  by default  you can find cmportletinstance documents in the folder  system portlets instances   the resulting document looks like  
  if you have preview based editing enabled  you can use it with cmportletwindow documents too  all standard operations are available  for example to move a portlet window to another place on the website   however  you should never copy the same portlet window on two different pages  or twice on the same page  because the same portlet window always displays the same html content  rather create a new portlet window referring to the same portlet instance   preview based editing can also be used to configure the portlet s preferences  by invoking the  portlet mode edit  command  this is described in more detail in section      editing portlet preferences  
  if you want web site users to maximize  minimize and restore portlet windows  or change the portlet mode  you can add a window frame containing the required controls  an example for such a portlet window frame is included with the coremedia lightweight portal   you can activate window controls for a portlet window by configuring the clipexample viewtype in the cmportletwindow document  the clipexample viewtype associates the portlet window with the provided example layout  see section      adding portlet window controls for the documentation of its installation    attaching the example layout to a portlet window  in order to attach the clip example layout to a portlet window you have to perform the following steps in the content repository using the editor  open the cmportletwindow you want to be rendered using the example layout add the viewtype clipexample to the field viewtype go to the channel in which you added the portlet window as content and set the field associated css to  system portlets clip example layout css clipexample css  removing the example layout from a portlet window  to remove the window controls from a portlet window  you have to perform the following steps  open the cmportletwindow you want to update remove the viewtype clipexample from the field viewtype  leaving it empty   there is no need to remove the associated css from the channel  as it may still be used by other portlet windows  
  this chapter describes how you can integrate portlets into your custom cae applications   architecture describes the architecture of clip  integrating into a custom project describes how you can integrate clip into your custom project  find portlet windows plugin describes how you can find all portlets before rendering  tag library describes the tag library that you can use to integrate portlets into a page  exception handling describes how clip handles exceptions  caching describes portlet output caching  portlet user describes the handling of user information  
  the coremedia lightweight portal extends a standard cae web application with the ability to display and interact with portlets   as defined in the java portlet specification  a portlet is contained in a portlet application  which is deployed in a portal  in the case of coremedia  the role of the portal is implemented by four interacting components   the tomcat servlet engine   the cae portlet container  consisting of  the cae portlet container adapter the portlet container the cae web application 
  the cae web application is developed in the project  based on the cae and the starter kit  it is responsible for rendering the complete web pages  including usual web page constituents like navigation  logo and overall page layout and style  content  content teasers  search field  breadcrumb  login etc  standard cae means are used to implement this functionality  as demonstrated by the starter kit   for pages that contain portlet windows  the portlet container adapter renders the required portlets  the rendering result is provided to the cae web application  so that it can be included in the web page  the portlet container adapter is also responsible for detecting urls that are targeted at a portlet  handling of these urls is delegated to the portlet container  lastly  the portlet container adapter provides persistent configuration information  such as portlet preferences  from the content repository to the portlet container   the portlet container is an oem component that handles interaction with the actual portlets  it sends portlet requests to portlets  answers callbacks from the portlets  and returns the portlets  response to the portlet container adapter  it also maintains the portlet render state   the tomcat servlet engine hosts the portlet applications  a portlet application is deployed as a web application  war file  with some additional files  the tomcat installation  as well as each portlet application  is augmented in order to support communication between the portlet container and the portlet applications  the tomcat installation is augmented during installation of the coremedia lightweight portal  and each portlet application is augmented at the time it is deployed   request flow  the portlet container adapter is deployed as a spring handler interceptor  it intercepts a cae request after the cae controller has created the model  but before the model is rendered by the view  
  the cae controller may already have processed the request and committed a response  e g  by issuing a redirect  in this case  no further processing is done   otherwise  the interceptor searches the created model for all portlet windows that appear on the page  since the types and structure of the model depend strongly on the cae application  an extension interface  findportletwindowsinmodel  is provided  with a default implementation for the starter kit   if the request originated from a portlet url  such as a render  action  or resource url  it is delegated to the portlet container for handling  for an action request  the portlet container will invoke the portlet addressed to handle the action  and may also handle events between portlets  for a render request  or after an action was processed  the portlet render state is updated  the browser is then redirected to the original cae page  which will display the updated portlet state  an action request may also result in a redirect to an external url  a resource request is answered completely by the target portlet  in all of these cases  the http response is handled by the portlet container  and no further processing takes place in the cae   if the request originated from a normal cae link  not related to portlets   or from a redirect after a portlet request  all portlet windows on the page are rendered in their current state  and the augmented model and view is passed on to the view by the interceptor  applications should not assume that portlet rendering is complete by the time the view is invoked  the actual portlet invocations may proceed in parallel with each other  and in parallel or interleaved with the rendering of the http response   the rendered portlet windows are made available in the model and view and can be accessed from the cae s jsp templates by using the coremedia lightweight portal taglib  when the page element corresponding to the portlet window is rendered  its  project specific  template will use the taglib to insert the portlet s output  and possibly other markup depending on window state  portlet mode  error conditions etc  
  the coremedia lightweight portal comes with a number of extension interfaces  which need to be adapted to the concrete cae application  a default implementation for the starter kit is included  and is installed automatically by the installer  if significant starter kit modifications have been applied in a project  or if the project is not based on the starter kit  you should revisit these extension interfaces   in order to integrate the coremedia lightweight portal into your deployment process  you need to know the parts that are customized when installing the coremedia lightweight portal   installing the cae portlet container  the cae portlet container  without the starter kit specific files  comes as a bunch of zip files  each containing some additional files to be added to a certain place in your coremedia cms installation   the following zip files are included   cap objectserver portletcontainer api zip cap objectserver portletcontainer contenttypes zip cap objectserver portletcontainer tomcat zip cap objectserver portletcontainer tools zip cap objectserver portletcontainer webapp war  content types  in each content server installation  you have to add the portlet container specific document type definition files and xml schema definitions from cap objectserver portletcontainer contenttypes zip   config contentserver doctypes portletcontainer   xml lib xml   xsd  tools  in an installation directory that contains the infrastructure for command line tools  such as the content management environment content server installation   add the portlet container specific command line tools from cap objectserver portletcontainer tools zip   bin   jpif lib   jar  portlet container  in the servlet container s global class path  the jar files from cap objectserver portletcontainer tomcat zip need to be added   lib   jar  in a standard coremedia installation  these would go to jakarta tomcat lib   jar   cae webapp  in your cae webapp  additional files from cap objectserver portletcontainer webapp war are required  note  that this is not a complete war file  but only an overlay onto an existing cae webapp   these comprise coremedia and third party jar files  spring files and dataview definitions that customize and extend the cae s behaviour  a tag library descriptor for the coremedia portal tag library  and a partial web xml portletcontainer to be mixed into your web xml   there are only two cases where you need to modify an existing file for the cae portlet container   you have to merge the partial web xml portletcontainer with your web xml  if you have a custom faces config xml  you have to merge it with the portlet container s faces config xml   extension interfaces  in order to use the cae portlet container in your cae application  you need to implement the following   a document type that represents a portlet window in your layout structure a content bean class for that document type a strategy that finds all portlet windows on a page a template for your portlet window document type that uses the portal taglib  cmportletwindow document type  in order to represent the place where portlets are placed on a web page  you need to add a custom document type  this type needs to fit into the document type hierarchy of your cae application  and needs to provide the information required by a portlet window   the content bean class for this document type must implement the interface com coremedia cae portletcontainer cmportletwindow  which defines just one method   cmportletinstance getportletinstance    you will probably implement this by defining a matching link list property in your portlet window document type  the link target type should be cmportletinst  which is the document type corresponding to the cmportletinstance bean class  assuming your document type is called myportletwindow  the relevant parts of your doctypes xml file would look like this  
  the content bean also needs to have a dataview definition with associationtype dynamic  
  find portlet windows  you need to provide a strategy which finds all portlet windows on a page  see section      find portlet windows plugin for details   portlet window template  in order to display the portlet window s contents on the web page  you need to define a template for your portlet window content bean class  your content bean directly represents the portlet window  as it implements the cmportletwindow interface  you can use the portal tag library  see portal tag library  to access the current contents of the portlet window  its portlet window model   assuming your content bean class is com customer myportletwindow  the simplest possible template would look as follows  
  see section      tag library for further details about the portal tags  for further details about writing templates  consult the content application developer manual  
  in order to determine all portlet windows on a page even before the actual rendering has begun  the cae portlet container has to search the model returned by the controller  it is important to find all portlet windows  otherwise the portlet s output will not be available during rendering   the interface com coremedia cae portletcontainer findportletwindows defines just one method   collection cmportletwindow  findportletsinmodel object self  modelandview modelandview  httpservletrequest request    the starter kit plug in comes with a predefined implementation  which you may have to extend if your project contains additional container beans  for non starter kit projects  you need to provide a custom implementation   most implementations will only depend on the  self  argument  which is the content bean or data view representing the page itself  since the actual rendering result may also depend on additional information from the modelandview and the servlet request  these parameters are provided as well   each portlet window will be rendered only once  so it does not make sense to have the same window appear twice on a page  as it would contain identical markup  it is assumed that the returned cmportletwindow objects have a suitable equals and hashcode method  and have unique ids understood by the cae s idprovider   in order to register your strategy in the portlet interceptor  you should customize the portlet interceptor s property findportletwindows  using the coremedia cae spring plug in architecture  in one of your webapp s spring xml files  you should add configuration similar to the following   
  in the starter kit plug in  this would be in the file web inf spring starterkit portletcontainer xml  
  this section describes the coremedia lightweight portal  clip  tag library and explains how to use it  the tag library enables you to embed portlets into a page within a cae application   tag library usage  the following code fragment shows the basic structure of a page that uses the portal tag library  before being usable  the tag library has to be defined in the page and associated with a namespace  in this example the taglib is associated with the prefix portal  the portal portlet element and its children are used to render the markup of a portlet  the portlet tag defines a logical scope which enables access to the specified portlet given as cmportletwindow and supports generating its output  
  within the portlet tag the title tag is used to render the title of the portlet whereas the content tag is used to render its content  there are no restrictions on the usage of any kind of html or jsp markup within the portlet tag  the attribute errorview in the portlet tag allows the declaration of a default view that will be displayed if a failure occurs during the rendering of the portlet markup  the result of rendering a portlet which is provided as cmportletwindow is a portletwindowmodel  if you want to access the portletwindowmodel object in the page context you can use the var attribute in the portlet tag   in the example shown below the rendering result is bound to the variable name window which is then used to access the window s current state for an el expression  
  handling the maximized portlet window  if you want to retrieve the maximized portlet of a page you can use the getmaximizedportlet tag  this tag retrieves the maximized portlet of the current page and binds it to the specified var name in the given scope  if there is no maximized portlet the result will be null  the usage of this tag is shown below  
  the maximized portlet window may also be handled by java and spring programming  instead of using the portal taglib  for example  the starter kit integration uses a spring handler interceptor which replaces the modelandview s model  so that the maximized portlet appears as the page s content in the current channel  your mileage may vary   window controls  if you want to control the mode and window state of a portlet window from outside the portlet application  like traditional portals do  you can use the portal url tag to render the necessary links  the portlet window model offers methods to determine whether a certain portlet mode or window state is currently allowed  a simple example  without layout  would look as follows  
  head markup  the portlet standard allows portlets to add html fragments to the page at defined positions outside their portlet window  by setting xml  response properties   this is most useful to add elements that are only valid or effective in the page s head section  such as css style sheets and some javascript functionality   a simple top level cae template might contain the following code  
  in the starter kit integration  consult the template com coremedia starterkit common contentbeans page head jsp for a realistic example  
  this section describes how the coremedia lightweight portal handles exceptions thrown by or during the invocation of portlets and your options to customize the error handling   in general  the portal continues request processing and invokes further required portlets after catching exceptions for a single portlet window  exceptions for portlet windows can be handled with dedicated error views without affecting other parts of the rendered page  requests for portlet resources are different as the whole response is coming from a single portlet  an exception in a portlet resource request breaks the whole request and will be propagated to the servlet container which might render an error page if configured   error view  if a portlet render or portlet action request threw an exception  the portlet tag cannot render the content of the affected portlet window but will include an error view instead  it uses the content application engine s include mechanism to render a fragment for the thrown exception  exceptions for portlet windows are represented by instances of class portletwindowexception  a portletwindowexception provides methods to get the affected portlet window  error code  error message and exception cause   for example  if a portletwindowexception was raised for the portlet window self the following jsp tag will try to include the portletwindowexception object with view errormessage  
  note  that the cae s view dispatching logic is used to find the template   just as if the exception were included with  cm include target    exception   viewname  errormessage     in this example a template named portletwindowexception errormessage jsp or one for a superclass of portletwindowexception would be called  such a template can access the exception as   self   if you omit the errorview attribute in the portal portlet tag  the default view will be used instead  the coremedia lightweight portal includes a default view for throwables which simply renders the exception with its stacktrace   the error codes for exceptions thrown by the portlet are documented in the api documentation  see also section     operation and monitoring  however  these error codes are not supposed to be used algorithmically  the codes may change at any point of time in future releases  they are solely intended for debugging and documentation purposes   if you want to render different exception types differently you should provide templates for the different exception classes  you could for example add a template portletwindowsecurityexception jsp to handle security exceptions  portletwindowsecurityexception is a subclass of portletwindowexception  see the api documentation for details   window controls and error view  by default  the whole portlet tag is replaced with the error view  if some portlet window frame should still be rendered  you can set the bodyhandleserror attribute on the portlet tag  if bodyhandleserror is set to true  the body of the portlet tag will be rendered even when there is an exception  the portlet window model is available inside the tag  including the current portlet mode and window state  the portal url tag can be used to render urls that change the portlet mode or window state  since there is no content to be rendered  the portal content will invoke the error view of the exception instead  
  the coremedia lightweight portal implements portlet output caching according to the jsr     specification   caching architecture  through configuration in the deployment descriptor  and through the cache control api  a jsr     portlet can indicate whether its output is cachable  when it expires  whether it may be revalidated  and whether it contains session  or user specific  private  information  all cached output for the portlet window is discarded when the portlet window becomes the target of an action url  or receives an event   in the coremedia implementation  both private cache entries and public cache entries are stored in the cae cache  the public cache can hold multiple renditions of the same portlet window at the same time  provided they have different window states and render parameters  or in the case of private cache entires  have been rendered for different users or sessions  currently  portlet output is only cached in portlet mode view   configuration  there are currently only two parameters that affects caching    portletcontainer cache public portletcontainer properties private  in web inf spring portletcontainer properties  you can configure the number of characters of cached portlet output that should be cached in the public scope  and the number of characters that should be cached in the private scope  the default is       in each case  making for twice    kb of heap size   caching for resources  for resource urls  the responsibility for caching is delegated to the client s browser or intermediate http proxies  by mapping the cache control api to http headers   developing portlets for caching  in order to achieve optimal cachability for your portlets on a live web site  and keep memory usage low  the following guidelines should be used when developing and deploying portlet applications   use cache scope public where possible activate caching by defining expiration times use render links where possible  instead of action links use public render parameters instead of events  you may also want to set an etag to support revalidation   note that portlet output that goes to the public cache must not depend on the current session  let alone the current user  it may depend only on window state  portlet mode  and render parameters  and the shared portlet preferences of the portlet instance   for private portlet output  it may be more memory efficient not to cache the portlet output  but instead use caching inside the portlet application to make render requests run quickly   to avoid surprises  you should generally never change state  such as session attributes  in a portlet s dorender method  but only do it in doaction or doevent   caching during development  during development  when you change the code of your portlet application  cached portlet output can be annoying  because you do not see the effect of your changes  it is then important to understand how to render fresh content  you can take the following measures   for private scope  you may end the current session  log out or delete the browser cookie  and start a new session  for public or private scope  click an action link on the portlet window  for public or private scope  you may also restart your servlet container  all caches are empty when the servlet container starts up  if you do not use etags  and expiration times are limited  you could just wait  note that when using etags  cached portlet output may stay in the cache indefinitely  disable caching in the deployment descriptor and redeploy  and start a new session  this only works if the portlet application does not programmatically enable caching  for cached resources  flush your browser cache  or directly open the resource url in a browser window and click  shift  reload  
  this section describes how the user information handling is implemented and which user attributes are supported by clip   portlets commonly provide content personalized to the user making the request  this may require access to information about the user such as his name  email or phone  the portlet application defines the user attributes it uses in the deployment descriptor  portlet xml    the portlet specification defines that the user attribute names defined in a portlet deployment descriptor must be mapped to the user attribute names offered by the runtime environment   supported attribute names  for filtering and mapping the user attribute names during deployment clip provides the interface com coremedia cae portletcontainer repository userattributefilter where you can specify the supported attribute names and the mappings on them   currently clip supports the user attribute names recommended by the java portlet specification v     these attribute names are derived from the platform for privacy preferences      p p      specification by the w c   attribute name  user bdate ymd year user bdate ymd month user bdate ymd day user bdate hms hour user bdate hms minute user bdate hms second user bdate fractionsecond user bdate timezone user gender user employer user department user jobtitle user name prefix user name given user name family user name middle user name suffix user name nickname user login id user home info postal name user home info postal street user home info postal city user home info postal stateprov user home info postal postalcode user home info postal country user home info postal organization user home info telecom telephone intcode user home info telecom telephone loccode user home info telecom telephone number user home info telecom telephone ext user home info telecom telephone comment user home info telecom fax intcode user home info telecom fax loccode user home info telecom fax number user home info telecom fax ext user home info telecom fax comment user home info telecom mobile intcode user home info telecom mobile loccode user home info telecom mobile number user home info telecom mobile ext user home info telecom mobile comment user home info telecom pager intcode user home info telecom pager loccode user home info telecom pager number user home info telecom pager ext user home info telecom pager comment user home info online email user home info online uri user business info postal name user business info postal street user business info postal city user business info postal stateprov user business info postal postalcode user business info postal country user business info postal organization user business info telecom telephone intcode user business info telecom telephone loccode user business info telecom telephone number user business info telecom telephone ext user business info telecom telephone comment user business info telecom fax intcode user business info telecom fax loccode user business info telecom fax number user business info telecom fax ext user business info telecom fax comment user business info telecom mobile intcode user business info telecom mobile loccode user business info telecom mobile number user business info telecom mobile ext user business info telecom mobile comment user business info telecom pager intcode user business info telecom pager loccode user business info telecom pager number user business info telecom pager ext user business info telecom pager comment user business info online email user business info online uri  during deployment user attributes names specified in the portlet xml are mapped to the names supported by clip  at runtime only those user attributes whose names could be mapped during deployment can be accessed by the portlet  if a user attribute name could not be mapped it is left out and is not accessible at runtime   handling user information at runtime  to retrieve user attributes at runtime we need access to the user and its detail information   retrieving the user  for extracting the user and its detail information from the http request clip provides the com coremedia cae portletcontainer sun userextractor interface  it defines methods that expose the user s detail information  through the method getuserinfo httpservletrequest  list cmportletuserattribute   the attributes of the user can be accessed   retrieving the user attributes  for accessing the user attributes of a logged in user a mapping from the supported user attribute names to the attributes of the user at runtime must be specified  a userextractor uses a com coremedia cae portletcontainer userattributemapper to retrieve the user attributes from a user which are supported by clip  the userattributemapper interface defines a method for extracting an attribute from a user by using a supported user attribute name  a class that implements this interface must provide a mapping from the user attribute names supported by clip to the attributes of the runtime user   the userextractor and userattributemapper can be set and configured in the starterkit portletcontainer xml   
  this manual describes the clip   section gives an overview about the supported use cases and the architecture section describes how to install and configure clip  section describes the administration and operation of clip  section describes how a user can configure the portlet settings  section describes how clip can be used for own applications  
  the coremedia starter kit is an additional component for coremedia cms  since it can be installed as an add on  it is covered in full length in an separate manual   this manual is intended for all users of the coremedia starter kit  that is for editors  administrators and developers   
  this section describes how to deploy a portlet application into the coremedia lightweight portal  it gives a general overview and shows which changes must be conducted upon the original portlet application and how the portlets are weaved into the content repository  furthermore it explains how you can accomplish this  using our deployment tool  
   actions and options description prepare action that manipulates war files of portlet applications to adapt them to our portal  register action used to register prepared portlets in the content repository  all action that performs both actions prepare and register in a single call  it is also feasible to omit the declaration of an action to have the same effect as using all   i when used with action prepare and all this option is used to specify the war files that should be filtered  while using it with register it is assumed that the specified war file are already prepared for our portal   o specifies the output path under which the prepared portlets will be stored   u name of a content repository user   p password of a content repository user   path path declaration used for registering the portlets in the content repository  the default value   system portlets  is used when this option is omitted   
    first you need to specify the path to your sse release  then fill in the fields for the database connection  the sse user feedback plug in needs a supported database for operation  please see the coremedia administration and operation manual for supported databases and for details of the configuration  the properties have the following meanings     property description database username the database user to be used by the sse user feedback plug in  database password the password of the database user  database url the url of the database  database driver class the class of the database driver  database type the type of the database  possible entries are  oracle    db     mssql  and  postgresql    
    click install to start the installation routine  
  if you preview the portlet window it should look like this  
  users can customize the appearance and or behaviour of a portlet by editing the portlet s associated preferences if supported by the portal  the hello world example portlet supports the portlet edit mode to edit a single preference value  the displayed message  
  the developer can use three xml files to configure the appearance and behavior of the coremedia editor  e g   which information is shown in the document overview  which buttons are shown in the toolbar or which fields are hidden in the document window    the names of the xml files can be defined in the editor properties file  see the administrator manual   the xml files are read at different times of the editor startup process and thus contain different information  the default names of the xml files are as follows  editor startup xml     this file will be read at first and evaluated before login  useful entries are the language to be used  the login name and password the group configuration or the look and feel of the gui     editor xml     this is the main configuration file of the coremedia editor which will be read in after the user has logged in     editor  user  xml  editor  groups  xml     user and group specific configuration files which will be loaded after editor xml  the standard installation does not provide any files of this type   all elements which can occur only once   due to the coremedia editor dtd   will be overwritten by the settings of the succeeding configuration file  the following elements use inheritance   bundle and explorer elements will be added  existing  document and process definitions of documents and processes elements  will be overwritten  new definitions will be added  existing documenttype  definitions of documenttypes  elements use inheritance on the propertytype element level  that is  existing propertytype definitions  e g  a validator set for the property name  will be overwritten and new definitions will be added   example   the interesting parts of the editor xml look as follows    bundle name  first bundle     spellchecker enabled  true     documents     document type  article        property name  headline  editorclass  firstclass        document    documents   documenttypes     documenttype name  article        propertytype name  editor          validator class  notempty           initializer class  setchiefeditor          propertytype      documenttype    documenttypes    the interesting parts of the group specific editor definition look as follows    bundle name  second bundle     spellchecker enabled  false     documents     document type  image      property name  caption  editorclass  secondclass        document     documents   documenttypes     documenttype name  article        propertytype name  editor          modelclass class  mymodel           initializer class  seteditor          propertytype      documenttype    documenttypes   applying both editor definitions will result in the following behaviour   both bundles will be used  the spell checker will be disabled  article documents will use the property editor firstclass with the property headline  and image documents the property editor secondclass  with the property caption  article documents will use the validator class notempty   the initalizer class seteditor and the model class mymodel  with the property editor   
  the coremedia editor can be configured with the settings in the xml files which are defined in the editor properties file  their default location is the directory  coremediahome  properties corem and the default names are editor xml and editor startup xml  in the following chapters  you will find the administrative tasks you can execute in the xml files using the described xml elements  these are by far not all xml elements contained in the editor xml file  but the ones which are necessary for administrative work  you will find a description of the elements necessary for editor development in the coremedia editor development manual   
  you can enter a username and a password using the element  editor   the login window of the coremedia editor is automatically filled with these data  if you set the attribute loginimmediate  true   these login infos will immediately accepted and the login will proceed  the settings for the editor element must be located in editor startup xml     
  you can select the browser for the preview using the element browser  multiple browsers can be entered  you can choose the browser to use from the file preview menu of the overview window  if you do not define any browser  the preview cannot be executed  
  using the file web inf config bsh  various options of the active delivery server context can be configured  the config bsh page is executed once when the active delivery server starts and therefore behaves like a flexible configuration file  on changes to the configuration of the particular active delivery server context  the active delivery server must be restarted so that the changed configuration becomes active   using java syntax and method commands of the generator api  options of the active delivery server can be set  or extensions  java beans  integrated   in general  property allocation occurs via bean setter methods    beanname  set propertyname   value     i e    generator setresourceuriformat new numericresourceuriformat     
  this manual is dedicated to the administrators of coremedia sci installations  they will find descriptions of all tasks necessary for installation  configuration and operation of a coremedia system  the majority of customization tasks are mostly covered in the coremedia developer manual series    
  we use different fonts and types in order to label different elements  the following table lists typographic conventions for this documentation  
  the list below shows all log levels  the levels define a hierarchy  a log level in the list contains the log levels that follow in the list  e g  the log level debug includes all other levels  if you configure a log action to record a log with level debug all other messages are received also  
  an action definition is defined by the tag    actiontype     for  actiontype   the name of the desired action is entered  a list of all possible actions is given in the table below  the action is configured with a series of attributes  as follows   general attributes 
     serverquery    description   this action executes a database query on the coremedia server over the corba api  in this way  all integral components of the server from orb to the database connection are checked    attribute   url  url where to get the ior of the server  user  coremedia user name to log on to the server  domain  domain of the user   password  coremedia user password to log on to the server   error codes      ok       timeout       error       respanwing too fast       io error       no licenses       invalid login                   corba error       repository error       query malformed       query failed   
   servicestatus  description this action checks a certain service offered by the coremedia server  e g  the replicator of a slave live server  attribute   url  url where to get the ior of the server  user  coremedia user name to log on to the server  domain  domain of the user   password  coremedia user password to log on to the server  service  name of the checked service  possible values are   replicator adminlogin userlogin error codes      ok                    unexpected error       timeout       error       respawning too fast       io error       no licenses       invalid login                   corba error       service stopped       service failed       service disabled   
    db    description  this action checks a coremedia database over the jdbc api   attribute    driver   jdbc driver to use   url   url where to connect to the database   user   name of the database user    password   password of the database user   propertyfile   the coremedia database configuration file  sql properties  where the settings  driver  url  password  are configured  the path must be relative to  corem home properties    you have to specify either driver  url  user and password or the propertyfile attribute   error codes       ok                      unexpected error       timeout        error        respawning too fast        io error        no jdbc driver        no connection        sql exception      
    script    description    this action executes a shell command and checks whether the programs  return code is      if the command returns with a different value an error is assumed    under the windows operating system you cannot use non executable commands like dir  copy or echo directly  they will result in a java io ioexception  the reason is that these commands are part of the windows command interpreter and not a separate executable  to run these commands use the windows command interpreter by calling cmd exe  e g    cmd exe  c echo test   attribute    command    name of the executable command  error codes       ok                    unexpected error        timeout        error        respanwing too fast    
  with script based installation  all existing files in the destination directory will be replaced by the newer version without further notice  and will be moved to the installation archive  
  as opposed to versions up to coremedia cap      the corba communication between the sci content live servers and the client applications no longer requires the setup of two tcp connections  one for either direction  instead  only one connection from client to server is required  hostname port settings of client machines are no longer relevant  
  the orbredirector only works if the client uses the orb from the sun j re  it may not work if you are not using a sun j re or an active delivery server runs in a third party web container that provides its own orb  
  the watchdog actions return result codes  the following table lists all possible codes  
   servermode  description this action checks the runlevel of the coremedia server  this ensures that the server has reached the specified runlevel and that certain clients can connect to the server  attribute   url  url where to get the ior of the server  user  coremedia user name to log on to the server   domain  domain of the user   password  coremedia user password to log on to the server  mode  the expected server runlevel  valid values are  maintenance    administration  and  online    error codes      ok                     unexpected error       timeout       error       respawning too fast       io error       no licenses       invalid login                   corba error       insufficient mode   
  after the installation is finished  proceed with the configuration of components as it is described in the following component specific chapters  
  list of abbreviations  find a list of most common abbreviations as we use them in coremedia technical documentation listed below  this list just covers coremedia sci specific words and phrases  for common technical or software related vocabulary  consult the glossary section or other sources of information  
    enter the values for the editor configuration in the appropriate fields and click  next   
     the next window asks you to complete the installation      click  finish  to complete the installation of the coremedia editor   
  deinstallation of coremedia components running as windows services   as coremedia components have to be registered manually  they have to be deregistered manually too  they are not deleted automatically when uninstalling a coremedia system  deregister them before uninstalling the coremedia components  to deregister a coremedia component execute the command     cm  component  uninstall 
  alternatively  you can log to an own log file by specifying an action class of fileaction  log action   class fileaction   a sensible configuration  for example  is  
  it is imperative to set the value of  generatorport and  contextpath  
  the complete list of options can be obtained from the api documentation of the class hox corem servlets generator  see also the developer s manual    the following options might typically be adjusted  
  the configuration of coremedia components as windows services has two parts      configure service names   configure event logging   
  you can start and stop a previously installed coremedia sci component from a command prompt console or from the windows gui   start and stop from the command prompt console  to start a component execute the following command in the console   cm  component  start  to stop a component execute the following command in the console   cm  component  stop 
  configure service names  the coremedia sci installer already configures the attributes necessary to install a coremedia component  the attributes are defined in the bin  component  jpif file  the attributes are     service name     the service name must be unique across all windows services on the host  as it is an identifier for the service    service display name     the service display name is displayed in the name column of the service list window you can open with controlpanel administrative tools component services services  local   the display name must be unique across all service display names on the host      service description     the description is displayed in the description column of the service list window  available only in windows      and above    service dependencies     a list of service names  service identifiers  the current service depends on  e g  a coremedia importer service depends on a coremedia content server service  only services on the same host can be listed here   you only have to change the values of service name and service display name attributes if you configure more than one component of a type on a single host  e g  more than one content server or more than one xml importer   the coremedia sci installer will always set the service name and service display name of a component to the same value  the three different sci server types  content  master live server  slave live  have their own service names and service display names   the following excerpt is from the workflowserver jpif file  
  configure event logging  the coremedia sci installer does not automatically enable service event logging on windows hosts  the coremedia component events originate from log events fired inside the component  there are two types of logging mechanism used in coremedia components     coremedia logs  hox log log     apache log j  org apache log j logger     depending on these two types  two different configurations are necessary   coremedia log  the following coremedia components use coremedia logs     coremedia content and live server   coremedia workflow server   coremedia watchdog    coremedia importers  to configure windows event logging a win  eventlogaction class must be configured as log action in the properties corem  component  properties file  
   n  is an integer value not used for other log actions in the file and  service name  is the service name  service identifier  as configured in the service name attribute in the  component  jpif file  
  if you have changed the service name value in the jpif file you have to change the service name in the properties file as well  
  start and stop from the windows gui    go to controlpanel administrative tools component services services  local    select the coremedia service  right click and select properties or select action properties    start or stop the services by the  start  and  stop  buttons on the general tab  
  user a has read  edit and delete rights for the coremedia directory  news  since the rights of the groups add   
  using this element of the xml file  details of the localization of the coremedia editor are given  if the element is not used  the environment settings are used  as a default  this element is used in the editor startup xml file  
  this element is used to configure whether the coremedia can be remote controlled or not and to set the port where to listen for requests   the remote control of the coremedia editor allows to execute   all commands which may be executed on resources in the explorer view  all commands which may be executed on process and task instances in the workflow view and custom commands  which may be executed on resources  process and task instances  or external parameters given to the command   technically  the remote control is realized via http by an embedded webserver inside the editor  which listens to remote control requests  note that if you start two editors on the same computer which use the same configuration  remote control is disabled for the second editor  since it tries to use the same port  you could use custom configuration files for different users  specifying different ports  though  
  editor remote control urls  requests have to be adressed to an url of the pattern  http   localhost  port  coremedia control  parameters   the port has to be the same as in the xml configuration   the parameters determine  which command to execute and on which data to execute it  there are some well known parameters which ease the usage  
     parameter   description   command   allows to specify the name of the command class  which is executed upon the request  custom command classes have to implement the interface hox corem editor toolkit command or one of its subinterfaces  if there is no dot in the command name  hox corem editor commands is prepended    resourceid   allows to specify one or more resources  on which a hox corem editor commands resourcecommand is executed    processinstanceid   allows to specify one process instance id  on which a hox corem editor commands processinstancecommand is executed    taskinstanceid   in conjunction with a processinstanceid  it allows to specify one task instance by its id  on which a hox corem editor commands taskinstancecommand is executed  
     attribut   description   class   this attribute is used for selecting a propertymodelfactory for use with the coremedia editor  
  the following table shows the regular expressions which can be used with the attribute validpattern  
     regular expression   description       matches any character except newline     a z       matches any single character of the set      a z       matches any single character not in set     d   matches a digit  i e            w     matches an alpha numeric character  i e   a za z          w   matches a non word   i e    a za z          metachar   matches the character itself  i e                x    matches   or   x s  where x is any of the above    x    matches   or more x s    x    matches   or more x s    x m n    matches at least m x s but no more than n    foo bar   matches one of foo or bar     x    brackets a regular expression   
     attribute   description   name   this attribute is used for entering the name of the field for configuration    visible   this attribute determines whether the field is shown  using  false   the field can be hidden  the default value is  true     editable   this attribute determines whether the field can be edited  if  false  is entered  the field cannot be edited  the default setting is  true     editorclass   this attribute is used for entering the class with which the field is edited     varies    this entity stands for further configuration possibilities which depend on the api of the editorclass  the specific configuration possibilities must be obtained from your developers  
     attribute   description   name   name of the tab which is shown as the label of the tab  
   attribute description name use this attribute to enter the name of the filter  using this name  the entry for the menu item view filters is looked up in the bundle  remote use this attribute to enter whether filtering occurs on the server   true   or on the client  filtering on the client must be executed with self written filters  default is  true   if you use filtering on client side  you have to set the attribute combinesortingandfiltering of the  explorer  element to false  remote filtering and sorting on the server is much faster than local operations which may slow down the server dramatically  so use local filtering with care   
     attribute   description   rowheight   this attribute determines the height of a row in the table  the height is given in pixels  
     attribute   description   remote   defines whether the comparator should be used on client  false  or server side  true   default is true    name   name of the comparator 
     attribute   description   class   the renderer class which should be used to show the content of the column  for own renderer classes  the abstract class hox corem editor toolkit table columnrenderer layoutcolumnrenderer must be extended  
     attribute   description   enabled   this attribute determines whether the spellchecker should be used   true   or should be disabled   false    as default  false  is used  
     attributes   description   class   with this attribute  the class used for determining the dictionary used in the spellchecker is configured  as default the class com coremedia spellchecker bridge javaworddictionary will be used  this class integrates the dictionary of a microsoft word installation  it takes the file properties corem language mapping properties to map the java locale  e g  de de   to the word locale  e g  wdgerman   the spellchecker checks whether a language exists in word or not  if the language does not exist an error message will be shown  and all properties using the language will not be checked  see the element propertylanguageresolverfactory   if you are sure that the language is installed with word you might check the language mapping properties file for the correct mapping  maybe you need to add the appropriate mapping   for own classes  the interface com coremedia spellchecker dictionary must be implemented  
     attributes   description   class   with this attribute the class used for determining the customized dictionary used in the spellchecker is configured  as default the class hox corem editor spellchecker dictionary will be used  this class uses two customized dictionary created in the folder tree of the coremedia system  for usage of these dictionaries see the user manual   for own classes  the interface com coremedia spellchecker customdictionary must be implemented  
     attribute   description   class   with this attribute the class used for determining the language of a property is configured  as default the class hox corem editor defaultpropertylanguageresolverfactory will be used  this class sets the language of all properties used for the spell checker to the value defined via the element  locale    you can overide this setting with the attributes language and country of the default language resolver factory   for own classes  the interface hox corem editor propertylanguageresolverfactory must be implemented  
     attribute   description   name   name of the process  for which the view should be configured  
     attribute   description   name   name of the task for which the definitions should be valid  
     attribute   description   class   this attribute defines the class which manages the startup of the workflow  own classes must implement the interface hox corem editor workflow workflowstartup   as a default  the class hox corem editor generic genericworkflowstartup is used  it sets the ressource variable with the selected resource s  and opens a window for setting the other workflow variables  
  property editors are connected with fields in document types or with variables in workflows  in this way  for example  you can apply a combo box to a field  
  the following property editors are available for variables in workflows  
  the following property editors are available for string fields  
  the following property editors are available for integer fields  
  the following editors are available for entering dates  
  the following editors are available for blob fields  
  the following editors are available for editing linklist fields  
  predicates for filtering folders     default predicate   filtered objects   description   generictreepredicate   folders   hox corem editor proxy resourceholder   the default comparator filters without read rights  own predicates must implement java util predicate   
  predicates for filtering documents  the following filters are pre defined and can be configured without stating the appropriate package  they can only be used for  predicate  elements within the  filter  element  for each predicate  you need to define an attribute name in the  filter  element  otherwise  no name for the filter will be shown in the view filter menu  you will find the names to use in the next table  
  own predicates for filtering documents     default predicate   sorted objects   description   none   documents   hox corem editor proxy documentversionholder   own predicates must implement hox util predicate  
  some of the properties which exist implicitly in all documents can be addressed using the fieldnames in the property attribute given in the following table  
     property name   java type   description   id    integer   ressource id   name    string   name of the resource in its folder   folderid    integer   id of the folder in which the resource lies   creationdate    calendar   creation date of the resource   creator    usermodel   user who created the resource   modificationdate    calendar   date of the last modification of the resource   modifier    usermodel   user who last modified the resource   isdeleted    boolean   is the resource marked as deleted    ischeckedout    boolean   is the resource checked out for editing    version    integer   version number   editiondate    calendar   creation date of this version of the document   editor    usermodel   user who created this version of the document   approvaldate    calendar   date of the approval of this version   approver    usermodel   user who approved this version   publicationdate    calendar   date of the publication of this document   publisher    usermodel   user who published this version   isapproved    boolean   is this version approved    ispublished    boolean   is this version published  
     comparator   sort order   blobcomparator   size of file  if equal the mime type    booleancomparator   true   false   datecomparator   chronological   documentversioncomparator   version   idcomparator   numeric   integercomparator   numeric   linklistcomparator   document type in alphabetic order  if equal the number of list entries    namecomparator   alphabetical   documentpathcomparator   alphabetical   resourcedisplacementcomparator   sort order  published and deleted published and moved published and removed new and marked for deletion moved out of trash new all others  if equal document type   stringcomparator   alphabetical   documenttypecomparator   alphabetical 
  client side comparators for sorting rows  for rows  there exists no default comparator  a row can be sorted according to the different columns which are shown  own comparators must implement hox corem editor toolkit table nameddocumentversioncomparator  client side comparators get objects of types hox corem editor proxy documentversionholder  the following table shows the predefined column comparators which can be used on the client side  
     comparator   sort order   namecomparator   alphabetical   nullcomparator   alphabetical   stringcomparator   alphabetical   typecomparator   alphabetical 
  comparators for sorting workflows     default comparator   sorted objects   description   genericprocesscomparator   workflows   com coremedia workflow wfprocess   the default comparator sorts the workflows in alphabetic order  own comparators must implement java util comparator  
  for more details on the editor gui please refer to the coremedia user manual  
  in this chapter you will find all predefined classes useable for the editor configuration and a reference view of all xml elements of the editor dtd  
  this chapter deals with the customization of the coremedia editor by programming own extensions  you will find chapters covering the following topics   tasks useful for different customization validators initializer language resolvers property editors predicates implement commands add buttons to the toolbar add menu items to menus  please refer to the coremedia editor api for more details on the classes described in the following sections  for workflow issues you may find more information in the coremedia workflow developer manual  
  the following sections discuss cornerstones and issues of project migration to cap      a basic precondition is to meet the system requirements for sci      see the appropriate sections in the  system requirements  section for more information  it is crucial to update your java virtual machine   
  the use of the coremedia sci covers a range from sites maintained by a single editor to very large portals edited by many users in different roles  the more users are involved in editing  approving and publishing documents  the more difficult it becomes to coordinate tasks and schedules  it support can greatly enhance productivity because the users do not have to deal with organizational issues   this goal can be achieved by introducing automated workflows  these workflows do not precisely prescribe how tasks have to be performed  but coordinate and support the timely execution of different tasks by different users with as much flexibility as possible and as necessary  the coremedia workflow has a non restrictive  supportive approach  users are given access to the right resources at the right time via tasks  in contrast to restrictively controlling users  the coremedia workflow focuses on progress of the overall business processes  
  the workflow manual does not cover all eventualities  but introduces concepts  ideas and the technology  our manuals undergo permanent revision  and we are closely tracking progress in development and experience   to make our manuals valuable tools in development and implementation of the coremedia sci  do not hesitate to contact us for ideas and suggestions via documentation coremedia com    
  the coremedia workflow consists of two components   the workflow server    this component is a complete server that communicates with the content management server and the coremedia editor  the workflow server executes the workflow instances   the client gui    the client gui is what the user works with  by means of the client gui tasks are offered and processed   see the illustration below for grouping and interaction of the components  
  the following unified modeling language  uml  activity diagram symbols may be translated in elements of coremedia workflow definitions like this  
    begin of workflow      this symbol marks the begin of the workflow  for this node  only outgoing transitions are allowed    end of workflow      this symbol marks the end of the workflow  for this node  only incoming transitions are allowed    activity   task      this symbol denotes an activity  which is called a task in the coremedia workflow    subactivity state   subworkflow      a separate workflow can be called from a task of another workflow  thus the separate workflow can be called a subworkflow task    decision node   branch   choice      this symbol stands for a node where the control flow branches  depending on a decision  in a workflow definition  a decision based branch is usually called an if task    synchronization bar      this symbol is used for splitting or synchronizing the control flow  in the splitting case the control flow forks in more than one follow up task  in the synchronization case  multiple tasks executed in parallel are joined together    control flow      transitions specify the control flow from a node to its successor  nodes can be any of begin or end of workflow  task  choice and synchronization bar    conditional control flow      transitions can be inscribed with a condition in square brackets  such edges are usually used as outgoing edges of a decision node  called a choice task     actor with role      an actor is used in uml to denote a participant in a use case  we introduce actors to specify rights of users of certain groups  roles  for user tasks    dependency used to assign roles to tasks      a dashed arrow denotes a uml dependency  we use special dependencies to connect roles  see above  with user tasks in order to assign rights   
  there are five operations which can be applied to a process  depending on its state    create a process    if a process is created  the variables of the process are initialized  the client gui opens a form for this  where the user can enter the values of the workflow variables depending on the tasks client view  the workflow is in the state not started  i e  no task is activated yet  start a process    if a process is started  it switches to the state running and starts executing with its start task  suspend a process     a running process may be suspended by an authorized user  the further execution of all tasks is paused until the process is resumed again  thus tasks can neither be accepted nor delegated or completed if a process is in state suspended   resume a process    if a process was suspended it may be resumed by an authorized user and continues where it had paused before   abort a process      a process may be aborted by an authorized user in any substate of the state open  aborting a process means deleting it  the actions which took place as part of the workflow so far are not rolled back  so e g  approved resources remain approved   
     state   enter state   leave state   not started   this is the starting state of all task instances after process creation    the state is left automatically after the workflow server has entered the task     waiting   this state is entered automatically  after the task is reached by the workflow server   it is also entered from the activated state if instance context changes have been made  so the guards are recalculated    the state is left automatically when the task is ready for activation i e  if the following conditions have been fulfilled     the control flow of the workflow has reached the task    the optional guard specified in the task definition evaluates to  true     activated   this state is entered automatically  after the waiting state has been left    assigning a task  if this state has been entered  you can nominate a user or group for this task via task assignto    i e  only these users will see the task in their task list  if they have the appropriate rights   this operation will not change the state of the task   rejecting a task  a user can also reject the task via task reject    so it will not be offered to him anymore  if all appropriate users have rejected the task  it will be offered again to all these users  this is the default performers policy    canceling a task  the state activated is also entered if a task was accepted by a user and then cancelled by this user via task cancel    all changes made so far by the user are saved  but the task is offered again to all appropriate users like before it was accepted    a user task must be accepted by the user in order to leave the state  activated  via task accept    then preconditions and entry actions are performed  after successfully running the actions  the task is performed by the user and no more available to other users    another way to leave the state is to skip the task via task skip    switching to the state  skipping    a fallback to waiting is possible    suspended   this state can only be entered via process suspend   which suspends the workflow  all task are withdrawn from the task list  gui specific     this state can be left via task resume    the workflow will restart at the same task where it was suspended    running   if an automated task has been activated it automatically leaves the state  activated  and changes to  running    a user task must be accepted by the user via task accept   in order to enter the state  running   the task is then performed by the user and is no more available to other users     an automated task leaves the state  running  and enters one of the states  completed   via task complete    and  aborted  depending on the success of the actions and pre  and postconditions performed   a user task can leave the state  running  and enter one of the states  waiting    completed   via  completing   and  aborted     activated  is reached  when the user cancels the task via task cancel    all changes made so far by the user are saved  but the task is offered again to all appropriate users    completed  is reached  when the task is completed via task complete   and the exit actions execute successfully and the post conditions evaluate to  true     aborted  is reached  when one of the exit actions and postconditions fails    skipping   intermediate state    intermediate state    skipped   this state is entered if the task has been skipped by a user via task skip    the process continues with the following task    this state can only be left  when the flow of operation returns to the task  i e  there is a loop in the workflow definition which returns to the task    completing   intermediate state    intermediate state    completed   an automated task enters this state when all actions have been successfully performed and the pre  and postconditions have been evaluated to  true    a user task enters this state when the user completes the task  the exit actions have been successfully executed and the post conditions evaluated to  true     this state can only be left  when the flow of operation returns to the task  i e  there is a loop in the workflow definition which returns to the task    aborted   this state is entered if the process is aborted via process abort      final state  escalated this state is entered automatically when an error occurs  if e g  a postcondition fails  the previous user is still the performer if there was a performer  depends on the former state   you can leave this state retrying the task via task retry    this will retry the last operation  which has failed  e g  if a precondition has failed  the task will restart with the state transition from activated to running  or if a postcondition has failed the task will restart with the state transition from running to completing and repeating all actions   
  user tasks  automated tasks and control flow tasks have many features in common  they are presented in this section   the most important common feature of all tasks is that each must be assigned a name  which identifies it uniquely within the process  the name has to be an identifier according to the usual xml rules for names  nmtoken    since the name is only a symbolic identifier  a task may also contain a description  although any task may contain a description  it makes most sense for user tasks  if you want to provide localized versions of descriptions  put an identifier instead of the text itself into the description attribute in the workflow definition  in a resource bundle   properties file  see the editor configuration in the administrator manual   you can map the identifier to the localized text  depending on the chosen locale   tasks that finish a workflow process are declared final  there has to be at least one task in a process definition  which is declared final  only user tasks and automated tasks can be declared final   a task refers its successor by name  each task must either have at least one successor or be final  forking tasks may have multiple successors  joining task may have multiple predecessors  
  the control flow between the tasks can be defined by unified modeling language  uml  activity diagrams using the following schemes   sequence  when tasks are arranged in a sequence  a successor task may start just after its predecessor task has been completed  since the workflow server uses a pull approach  the task does not run immediately after the predecessor has been completed  as this is delayed until a user accepts it  except for automated tasks   the very first task of a process always runs immediately  
  respective elements and attributes of the workflow definition  successor attribute of all task xml elements   example   
  loop  the loop is a special case of a choice  where one of the successor tasks is a predecessor of the current task  thus  a task may be repeatedly performed  
  concurrency parallel execution  after the task before the synchronization bar is completed  all follow up tasks are activated  this is called a fork of the control flow  the re synchronization of parallel executing tasks is called a join  this is also called an and split  since all follow up tasks are performed  each fork must be matched by exactly one join that joins all previously forked tasks  
  choice  based upon a condition  the control flow continues at exactly one of two or more follow up tasks  this is also called an or split  since only one task will be performed  
  respective elements of the workflow definition   if   condition    then    else     switch   case    example  
  respective elements of the workflow definition   if   condition    then    else    example  
  respective elements of the workflow definition   fork     join    example  
  implicit choice  if a choice is used  see above   the workflow engine decides where to continue the control flow based on an explicit expression  an implicit choice lets the workflow users decide where to continue  simply by offering two or more user tasks  from which only one may be accepted  as soon as this one task is accepted  the other task s  is are automatically withdrawn and may not be accepted anymore  the notation is to draw two or more outgoing control flow edges without a condition inscription  the decision node may be omitted  as in the example diagram  
  respective elements of the workflow definition   choice   successor    example  
  expressions are used to specify conditions in validators  guards  pre  or postconditions and to guard action execution   simple expressions return constants  access variables  read properties of resources  or the like  more complex expressions can be build up from the simple ones by comparision operators  logical connectives  logical quantors  and so on  it is possible to specify custom expressions via wfexpression  if the predefined expressions are not sufficient  
  conditions are used to define how processing should proceed  they are expressions which evaluate to a boolean value  if specified in  an action  entryaction  or exitaction  a condition determines whether the action should be executed or skipped  an if element  a condition determines which branch should be taken  a case element  a condition determines when a branch should be taken  a precondition or postcondition element  a condition determines whether constraints are fulfilled    a guard element  a condition determines when a task is activated     
  pre  and postconditions are boolean expressions that act as assertions which are evaluated when entering or leaving a task  a task can contain any number of pre  and postconditions   pre  and postconditions help the developer to determine error conditions that can not be handled by the normal workflow  if a pre  or postcondition evaluates to  false   the task is escalated  it may be manually restarted when the error condition has been resolved  
  validators are boolean expressions that ensure that the variables that may be modified via a client view satisfy certain constraints  e g   they can ensure that values stay within a predefined range or that certain variable values have been entered at all  if a validator expression evaluates to  false   a message is presented to the user who performed the task  so that the error condition may be resolved by continuing work on the task   validators can be specified to verify each  save  of variables  when definiting the validator  set validatedonsave  true   in this case  you will get an error message if you try to save and the validator expression evaluates to  false   
  actions are used to automate or semi automate tasks  to do so  arbitrary actions can be invoked at the start or end of a user task or during an automated task   user task    element  entryaction       this kind of action is invoked after the task is accepted  but before the user starts to work on the task  typical start actions are the initialization of resources    element  exitaction       these actions are invoked after the task has been completed by the user and after the postconditions are checked  but before the workflow continues  a typical exit action might complete the users work and set some calculated properties  approve resources in the name of a user  show up a publication window etc   automated task    element  action       an automated task is not performed by a user  the task duration is exactly the duration of the invoked actions plus pre  and conditions  if pre  or postconditions are violated  the task is aborted    all actions except for actions in automated tasks are executed with the rights and on behalf of the user who accepted the task  actions in automated tasks run with the workflow servers  user  account at the content management server  
  in order to make your workflow definitions available to the users you need to upload them  for this purpose  you can either use the upload utility  see administration and operation manual for a detailed description  or the menu item file load in the workflow window of the coremedia editor   if you upload a workflow definition with a name  the attribute name of the process tag  not the file name  which has already been loaded  then a new instance of the workflow will be created and the old workflow instance will be disabled  so  running workflows will still use the old workflow definition  but you cannot create new workflows from the old definition  this may be a problem if you are using subworkflows    to manually enable or disable workflow definition  you can use the enable utility  see administration and operation manual for a detailed description   
  the workflow definition consists of seven blocks   the general definitions of the workflow automated task assigncomposer user task compose if task checkemptychangeset user task publish if task checkpublication automated task finish  these seven blocks will be illustrated in detail   general definitions 
  the first task in the workflow is an automated task that assigns a user to the main task   the user task  compose    of the workflow  the user to assign is the creator and thus owner of the workflow     line             the automated task is named  assigncomposer   the names of tasks are used in the definition of a successor of a task  the task  that is started after task  assigncomposer  completes  is  compose     line    the action element defines the action which should be executed in the automated task  here the predefined forceuser action is used  which assigns the user defined in uservariable to the task defined in task  thus  the compose task will only be offered and automatically accepted to the user defined in the variable owner   wfvariableowner  is a predefined variable which contains the user  who created the workflow   user task  compose  
  this is the second task in the workflow and the first user task  the purpose of the task is to enable the user to collect the documents which should be published at once     line        the user task is named  compose   the localized description is looked up in a resource bundle under the key  simple publication compose tasklabel   the tooltip key is  simple publication compose tasktooltip   and shown in the client gui  the task  checkemptychangeset  is started after task  compose  has completed    line        the rights concerning the task are assigned to users and groups  the user admin can read  accept  delegate or skip the task  the members of the group composer role are allowed to read  accept  delegate  or skip the task    line         if the task has been selected  the variables defined in this section will be shown in the variable view of the workflow window if the user has the read right   you can change the content of the variables subject  comment  changeset and comments because they are defined in writes elements  in addition  you can change the content of the documents  which are provided by the variable changeset due to the attribute contenteditable  true   the variable publicationresultcodes defined in the  variable  section of the workflow  will be shown if you press the appropriate button in the variable view  if the task has been selected in the workflow list   you cannot change the content of the variable because it is defined as  reads         line           a validator is defined and named  allcheckedin   the localized version of a corresponding message is shown in the dialog box  which appears when the validator evaluates to  false   the description is looked up in a resource bundle under the key  all checked in validator  and if that fails under  allcheckedin  to localize it  the validator is used to check whether all documents which should be published are checked in or not  if not  the user is not allowed to finish the compose task until all documents are checked in     line     the validator uses an iteration over all elements of the aggregationvariable changeset  the variable changeset contains all resources which were added to the change set in the compose task  the current resource is stored in the loop variable  change      line     the  implies  expression ensures that the change set contains only document versions and that every document must be checked in  if its version in the change set is the latest version  if the version in the change set is not the latest version  then the document may be checked in or checked out    line      the expressions contained in the and element must all evaluate to  true  so that the whole  and  element evaluates to  true      line     the element  isdocumentversion variable  change    checks if the current resource stored in  change  is a version of a document  otherwise it is not possible to publish the document    line     the sub expression results defined in the equal element are checked for equity     line     the value of the property latestversion  of the resource  which is referenced by the loop variable change  is read and compared to the value of the property version   thus it is checked  if the version of the document in the change set equals the latest version of the document    line     the  not  element negates the result of the boolean expression it contains  here this is the property ischeckedout  of the resource  which is referenced by the loop variable change  if the document is checked out  the variable is  true   thus  the whole  not  expression evaluates to  true   if the document is not checked out    line     an exit action is defined which is automatically carried out right after the task was completed by the user  the action to perform is defined by the class preferperformer  i e  if the  compose  task has to be repeated because of a failing publication  then the  compose  task should preferably be offered to the previous performer     line     it is possible to define more than one exit action  here the predefined forceuser action is used  which assigns the current task s performer to the task defined in task  thus  the publish task will be automatically accepted by the user who performed the compose task   if task checkemptychangeset 
  the third task in the workflow is the  checkemptychangeset  task  an if task  the aim of the task is to check if the change set is empty  then  no publication is necessary and the workflow can be finished      line        an if task is defined with the name  checkemptychangeset   an if task is a control flow element  which will be executed automatically  thus  no description is necessary  which should be shown in the gui     line         a condition is defined that checks  whether the variable  changeset  contains elements or not    line     if the condition evaluates to  true   change set is empty  the workflow should be finished  thus the succeeding task is finish     line    if the condition evaluates to  false   change set contains elements  the changes should be published  thus  the succeeding task is publish    user task  publish  
  the fourth task of the workflow is a user task called  publish   that will publish the changes contained in the change set  this task will be automatically accepted by the composer of the change set due to the exit action forceuser in the  compose  task  that forced the performer of the  compose  task as the performer of the  publish  task     line        the user task is named  publish  and its successor is the task  checkpublication   the task will automatically be completed after execution of the entry actions because of the attribute autocompleted  true   this is useful when a set of automated actions should be executed on behalf of a user     line        the rights are granted to the user admin and the group composer role    line         like mentioned before  variables are defined which should be shown in the variable view of the workflow window  nevertheless  automatically completed tasks will only be shown in the case of error in the task list  in contrast to the declaration of these variables in the compose task no changes at all can be applied to the variables  due to reads  and its content  due to contenteditable  false       line          the first action performed in the task is the predefined approveresource action which approves the documents given via the attribute resourcevariable    line          after executing the first entry action  the second one will be performed  here the documents given via the attribute resourcevariable will be published by the predefined action publishresources  the other attributes define the variables to store the publication result into  to set timeouts and to ignore publication errors only   if task  checkpublication  
  the fifth task in the workflow is the  checkpublication  task  an if task  the aim of the task is to check if the publication was successfull  if it was  the workflow will be finished  otherwise the compose task will be started again     line        the if task is named  checkpublication   an if task is a control flow element which will be executed automatically     line        a condition is defined which will be evaluated  the value of the boolean variable publicationsuccessful  which has been set in the publish task will be read using the get element    line    if the condition evaluates to  true   publicationsuccessful  true   the workflow should be finished  thus the succeeding task is  finish  task     line    if the condition evaluates to  false   publicationsuccessful  false   the compose task should be offered again   automated task  finish  
  the last task of the workflow is an automated task which is only needed because the previous if task may not be the final task of the workflow  thus  this automatedtask contains no action to perform     line    the automated task is named  finish   because the task should be the last element in the workflow  it must be marked as final  if the control flow of the workflow reaches a task with the attribute final  true  it quits the execution of the workflow    
  in this chapter you will find a summary of all predefined classes which you can use in the tasks of the coremedia workflow  
  these are the predefined action classes which can be performed in tasks  they can be used with the elements  action    entryaction  and  exitaction  by specifying the name of the action class as the class attribute of the respective action element   if an action is described as applying to one resource in an atomic variable  it can be applied to a set of resources in an aggregation variable  too   all predefined action classes discussed here support the following additional attributes to be specified as part of the action element  
  approveresource  use this action to approve one or more coremedia resources referenced by a variable  if the variable stores an explicit version  that version is approved and a place approval takes place  if no version information is present  only the place of the resource is approved  
  checkindocument  use this action to check in one or more coremedia documents referenced by a variable  
  checkoutdocument  use this action to check out one or more coremedia documents referenced by a variable  
  copyresource  use this action to copy a resource to a specified folder  
  createdocument  use this action to create a new document in a specified folder   this element may contain any number of property elements that specify initial property values for the newly created document  
  createfolder  use this action to create a new folder in a specified parent folder  
  deleteresource  use this action to mark a resource for deletion  
  disapproveresource  use this action to disapprove one or more coremedia resources referenced by a variable  if the variable stores an explicit version  that version is disapproved  if no version information is present  the most recent version will be disapproved   
  enabletimer  use this action to enable a timer  note  that a timer has to be enabled before it may expire later  
  excludeperformer  use this action to exclude the performer of the current task from performing another specified task  when the specified task coincides with the current task  the exclusion will take effect when the task is reached the next time  
  disabletimer  use this action to disable a timer   
  moveresource  use this action to move a resource to another folder  
  opendocument  use this action to open a document in the editor   
  preferperformer  use this action to set the performer of the current task as the preferred performer of another task  when the given task coincides with the current task  the preference will take effect when the task is reached the next time  
  publishresources  use this action to publish one or more coremedia resources referenced by a variable  if the variable stores an explicit version  that version is published  if no version information is present  the most recent version will be published   the aggregation variables resultvariable  codevariable  parametervariable  and versionvariable jointly represent the result of the publication  
  renameresource  use this action to rename a resource  
  savedocument  use this action to save a document that has to be opened in the client gui  
  uncheckoutdocument  use this action to revert the check out of one or more coremedia documents referenced by a variable  
  undeleteresource  use this action to remove the deletion from a resource  
  forceuser  use this action to preset a user as the performer of a task  the task will be automatically accepted by the client gui for the user   example  
  log  use this action to write output to the log  the log name can be defined using the facility attribute  you can write text to the output defined via the attribute message  using the subelement get you can output the content of variables  define the log level using the attributes debug  error or info  see section  logging  of the administrator manual for details on the logging   
     attribute   type   default   description   task   nmtoken    implied  current task   the task for which the user is predefined    uservariable   nmtoken    implied  performer   the variable which contains the user who should accept the task  
  assignvariable  use this action to assign a new value to a variable  it takes a list of expressions  that evaluate to a wfvalue  via the expression subelement or wfvalues via the boolean  date  string etc  subelements   example   this example will assign integer values to the variable defined via the attribute resultvariable  
  skipusertask  use this action to skip an activated user task  
  storeproperties  use this action to store property values in a document  the property name and value are defined using the subelement property  
  server side actions  while actions on the client side deal with resources of the content management server  actions on the server side work on workflow objects in the workflow server  
  timer handler classes are invoked when a timer expires    example definition of timer handlers  
  runactiontimerhandler  this timer handler runs one or more actions on expiration  the actions can be defined using the sub element action   skipusertasktimerhandler  this timer handler aborts the activated user task on expiration  it does not work with a task if it is not activated  
  the client gui comes with a set of property editors to allow out of the box editing of workflow variables  these predefined property editor classes may be configured and or replaced by custom property editors   predefined property editor classes  these classes are editing components which will be used for workflow variables shown in the variable view within the element  variable   these editors are the defaults for the appropriate variables  e g  a variable of type boolean will be edited using the jcheckboxbooleaneditor  
  in the workflow definition above you find the definition of a variable mainuser of type user  to use your own user editor with this variable you have to insert the following lines in your editor xml file  
  uploaded workflow definitions are stored in the database as serialized objects  every time  you have made incompatible changes to your extension classes  which are used in already uploaded workflows  you need to convert these workflows  use the workflow converter utility for this  see administration and operation manual for details   in case of an update of the coremedia workflow server  the workflows have to be converted  too  otherwise  object deserialization errors can occur  see suns jdk documentation for details    
  variables are typed  a variable of a certain type can only contain values of its defined type or subclasses of the type   the existing values are closely related to coremedia sci property types and resource objects     booleans   blobs   contents  folders and documents   content types   dates   exceptions groups and users integers strings timers  all values implement the java lang comparable interface  they may contain null values and are immutable  so  their setvalue   methods must never be called from your own code  the result of such an action is unpredicable 
  actions are used to automate or semi automate tasks  two kinds of actions exist   actions running only on server side     server side actions run completely inside the coremedia workflow server  they may use the coremedia workflow server s session to the coremedia content management server to access resources  client actions running partly on the server and on a client     clientactions in a user task run remotely using the client gui s session to the coremedia content management server to access resources  clientactions in an automated task run in a server internal client environment using the coremedia workflow server s session to the coremedia content management server to access resources   
  if there are concurrent running transactions in an instance  i e  if you ve forked the workflow  and the actions run by these transactions are creating read write conflicts in the context  they may be seen as transaction serialization errors in the log  to solve a conflict  the coremedia workflow server automatically repeats the conflicting transactions  this means that even already executed actions are repeated  too   since there is a complete rollback of the transactions  the actions cannot determine if they are run repeatedly try to avoid the conflicts arising from this under all circumstances or you may experience problems with your workflow  stick to the following rules     write actions that are fault tolerant and can handle multiple repeated executions    split your critical sections into several tasks to isolate the non repeatable actions from the actions creating the conflicts   note that  even if you follow these rules  an action may be executed repeatedly in the unlikely event of a coremedia workflow server crash  during the next restart  all failed transactions are repeated again to reach a consistent state  this may repeat the execution of your action  too   if an action throws any exception  its task instance will be escalated immediately     side effects on the instances context will become persistent  there is no rollback of the transaction    if you are running two actions and the second one fails  the success and result variables of the first action will keep their values    upon a retry  these variables can be used by the first action s guard to avoid repeated execution   exceptions within the runactiontimerhandler actions will have no effect other than the handler failing  
  line    you need to import this package because you are working on the coremedia editor   line     the name of the class must be the one called from the server   line         this is the method in which you implement your actual action  the example action only prints the content of context and target and returns true     line          this method returns whether the command is executable with the given target and context or not  
  in the example above  you defined a string variable with the name  myfirstvariable  and the value  onlyatest   with line   you configure the action bean that the method setvariabletopass   on an instance of com coremedia training workflow action parameteraction is called with the name of the string variable as a parameter   
  line        here you define the setter and getter methods for the configuration of your action bean   line    here you get the workflow variable using the name configured with the setvariabletopass   method  
  access workflow variables from the action  the example xml workflow definition shows how to configure the action bean to access the mail address of the receiver and how to access the document from the workflow instance  the success of the action will be returned to the successvariable  the necessary settings and the definition of the action are shown in the following  
  line    the package to which the action belongs  choose your own one    lines        the java packages which are necessary for mail usage   line        the packages for the workflow   line     if you implement actions  it is necessary to import the interface com coremedia workflow wfaction  the recommended solution is to extend abstractresourceaction which implements wfaction  
  expressions come in two variants    generic expressions and  boolean expressions   a generic expression must evaluate to a java lang comparable result and can be used for example in a  less  or  greater  expression  a boolean expression must evaluate to a boolean result value and can be used for example in an  condition  task   expressions can be used for many purposes in the workflow   guards for automated and user tasks pre  and postconditions  assertions  in automated and user task   validators for variable assignments in client views conditions for branching tasks guards for actions  
  when you are programming own expressions  respect the following general rules   expressions must not have any side effects  expressions must not hold any state  expressions must be repeatable any number of times  all top level expressions used in the workflow configuration must be boolean expressions   depending on their arity  expressions may have a specific number of sub expressions  which are added through the addexpression   method  for example  a comparison has an arity of two  as it compares exactly two expressions  a logical expression like and or or are n ary  it must have at least two subexpressions  but may have any number of expressions  in contrast to that  a not must have exactly one subexpression  if a maximum number of expressions is exceeded  a wfruntimeexception with the error code too many subexpressions thrown  
  example generic expression  the following code example shows s simple expression which returns a stringvalue  
  interface to implement  for a boolean expression you need to implement the interface wfbooleanexpression  it extends wfexpression and defines an evaluateexpression   method with a boolean result   convenience classes  for convenience you can subclass from com coremedia workflow common expressions abstractbooleanexpression and implement its evaluateexpression   method   the abstract classes evaluate   method calls evaluateexpression   and builds a booleanvalue from the returned value  the next example shows a simple boolean expression which always returns true   a tautology  
  line    the package to which the action belongs    lines        all  java classes which are at least necessary for an expression to use   line    in order to create a boolean expression you need to implement the interface wfbooleanexpression  for convenience you can extend the abstract abstractbooleanexpression class    line         if you extend abstractbooleanexpression  you need to implement four methods  three of them getname    getsymbol   and isinfix   are used for better reading of the log  if the expression is converted into a string using the tostring   method    line          the fourth method to implement is the most important one  evaluateexpression wfinstance instance  map localvariables   this method will be called when the expression is evaluated  here you can implement the logic of your expression  using the parameter instance  you can access the workflow instance as shown in the action example  the map localvariables gives access to expression local variables  which may be defined with forall and let  
  performer policies control to which users a task instance should be offered  a performers policy calculates this set of users based on the users which have permission to accept the task instance defined by the rights policy  the performer policy is called by the coremedia workflow server    a performers policy may optionally support   users who must be excluded from the offer  determined by the excludeperformer action   users who may be preferred  determined by the preferperformer action   groups which may be preferred  users who actively reject the offered task instance  a single user who must perform the task  which will force an accept of the instance as soon as the user logs on to the workflow server  determined by the forceuser action   the defaultperformerspolicy supports all of the options  
  line        your package and the packages to import   line    you subclass defaultperformerspolicy for convenience   line         return the name of the policy   line          return a description of the policy   line          the most important method which is called by the workflow server   line         on call  the workflow server passes a wftaskinstance and the wfusers to the method  wfusers contains all users which are allowed to accept the task    line         at first you call the method calculateassignment method of the super class  because the aim of this example policy is to modify the default result   line     prepare the manipulation of the result by getting the wfuser from the wfuserassignment   line     prepare a new wfuser array which should keep the resulting users  remember  we only want to get rid of the last user  so the length of the array is users length     line          if the result contains no user  this result is returned   line     otherwise  all users but the last are copied from the default result array to the returned array   line     the result array is returned to the workflow server  the second parameter determines that the selected user is not forced to accept the task   
  a workflow definition is stored in the database as a stream of serialized objects  that s why your own workflow beans have to stick to the following rules   avoid incompatible changes to classes which are already in use by a workflow definition  consider using a serial uid for all your classes from the start on  serialize and deserialize the object graph manually  see suns jdk serialization documentation for details   this gives you the most control  but the most work  too  use the workflowconverter tool to reparse and rebuild definitions which are not deserializable anymore  new versions of a workflow bean must be compatible with all uploaded xml definitions    new configuration options can be added as long as they are backwards compatible with the old ones    additional objects  e g  workflow variables  introduced with a new bean and definition will never be available in any old instance  if semantics have to be changed you should consider writing a new bean and keeping the old one   
  the gui of the coremedia workflow is quite flexible  you can simply use the coremedia editor configuration file  as default  this file is named editor xml  to configure the gui or even write your own startup classes or variable editors  note that variable editors are described in detail in the editor developer manual   
   workflow   child elements   tabledefinition   parent elements   editor  
  this element is used to define which information should be shown in the columns of the workflow list at the left side of the workflow window  
   processes   child elements   process     predicate     comparator    parent elements   editor  
  this element is used to configure the property editors  which define the view of the workflow variables and the determine a sort order and filtering criteria for the workflow list  the workflow variables are shown in the upper right part of the workflow window   
   process   child elements   view     task     workflowstartup    parent elements   processes  
   view   child elements   variable     aggregationvariable    parent elements   process  
  this element is used to group the elements  which define how the variables of a process are rendered and edited  
   task   child elements   variable     aggregationvariable    parent elements   process  
  this element is used to group the elements  which define how the variables of a task are rendered and edited   
   workflowstartup   child elements    parent elements   process  
  this element is used to define a concrete implementation for the configuration hooks  that are executed when a process is started  it is possible to prefill the variable before the user may edit them  skip the initial dialog to set the variables and perform arbitrary actions just before the process is started  if you do niot set an own startup class  the default implementation is used  which tries to assign the currently selected resources to appropriate process variables and opens a window in which all variables defined as  write  in the  initialclient  tag can be entered  
   variable   child elements   parent elements   view    task  
   aggregationvariable   child elements   parent elements   view    task  
  this element defines  which property editor should render and edit a workflow aggregation variable  if no element is defined for an aggregation variable and only resources are stored  the default aggregation editor is used    note  that there is only a default aggregation editor for aggregations of type resource  a property editor for aggregation variables must implement the aggregationeditor interface  
   tabledefinition   child elements   columndefinition    parent elements   workflow  
  within this element of the editor configuration  the columns of the workflow list at the left side of the workflow window are configured   
   columndefinition   child elements   displaymap     comparator     renderer     varies   parent elements   tabledefinition  
  this element is the same as known from the editor configuration  it defines a column in the workflow list  in the context of the workflow gui a column in the document view is defined which shows information of the workflow instance  wfinstance   
   comparator   child elements   varies   parent elements   columndefinition    processes      
   predicate   child elements   documenttype     varies   parent elements   processes     
  the predicate for filtering is entered with the  predicate  element  the provided filter classes are described in the editor developer manual  in the workflow context  the element is used for filtering the workflows offered via file new workflow    the default filter restricts the list of workflows to those workflows  from which the user is allowed to create a process instance  
  this element is used for the configuration of the variable editors for the process  in the  view  element  and for each task  in the  task  element   you may specify one  process  element per workflow  
  in the following section  you will find a description of all workflow related elements of the editor xml file  which you can use for the configuration  the description of some  universal  elements like predicate which can be used in different contexts is limited to the use in the workflow context  
  in this chapter  you will find an example for the configuration of the workflow window as it is used for the three step workflows   
  the startup of workflows can be customized by using customized startup classes  if you implement a workflow startup class you will use the workflow and editor api  in general  the workflow startup class covers the assignment of variables  mostly this means that selected resources from the explorer have have to be assigned to workflow variables  then  you have to decide  whether a variable dialog should allow a user to modify the variables before the workflow has been started  finally  a hook allows custom code to be executed before the process is started  the publication workflow startup classes use this to bring the workflow window to the front and select the process  that has just been started  
  the following code example shows how you might implement the inital assignment of the process instance variables   
  in this chapter you will find the xml workflow reference and unabridged code examples from the previous chapters  
  boolean   definition  true   false    definition of a boolean xml attribute type   
  varies  definition  entity for tagging varying parts of the dtd    
  boolean  grammar  empty   the boolean element is used to specify a single constant boolean value within expressions or variable initializers  
  date  grammar  empty   the date element is used to specify a single constant date value within expressions or variable initializers  
  document  grammar  empty   the document element is used to specify a single constant document within expressions or variable initializers  it is not useful to define a fixed document id in the workflow definition  either path or value should be specified  
    contenttype  grammar  empty   the contenttype element is used to specify a single constant content type within expressions or variable initializers  
  folder  grammar  empty   the folder element is used to specify a single constant folder within expressions or variable initializers  it is not useful to define a fixed folder id in the workflow definition  either value or path must be selected  
  group  grammar  empty   the group element is used to specify a single constant group value within expressions  variable initializers or policies  either  value  or  name  must be specified   if you delete a group in the user administration  which you have used in the group element of an uploaded workflow definition  its polices will fail   
  integer  grammar  empty   the integer element is used to specify a single constant integer value within expressions or variable initializers  
  resource  grammar  empty   the resource element is used to specify a single constant resource within expressions or variable initializers  it is not useful to define a fixed resource id in the workflow  either value or path must be selected  
  string  grammar  empty   the string element is used to specify a single constant string value within expressions or variable initializers  
  timer  grammar  empty   the timer element is used to specify a single constant timer value within expressions or variable initializers  
  user  grammar  empty   the user element is used to specify a single constant user value within expressions  variable initializers or policies  either  value  or  name  must be specified    if you delete a user in the user administration  which you have used in the user element of an uploaded workflow definition  its polices will fail  
  writes  grammar  empty   in a client  a writes element declares that a variable may be viewed and modified  see reads for details  
  isfolder   grammar  empty    isfolder queries whether a resource value contained in the variable given via the variable attribute is a folder and not a document or document version   
  isexpired   grammar  empty    isexpired queries whether the timer given by the defined variable has expired  
  grant  grammar  empty   grant authorizes users or groups to perform actions on the process or task instance they are specified in  grant is only defined for the predefined aclrightspolicy  if you implement own policies  you may parameterize the policy as you want   one of  user    userid    group  or  groupid  must be set to specify the subject who is authorized to do actions   if you use  group  or  user  the optional  domain  might be used in addition   the  rights  are a comma separated list of names for operations  which may be performed  the actions  defined in the wfrightspolicy interface are    read  write for process and task instances  create  start  suspend  resume  abort for process instances  accept  reject  assign  complete  delegate  cancel  skip  retry for task instances  
  performers  grammar  any   a performers element specifies external code that is called to determine which users to offer a task for acceptance  if you do not use this element  the default policy defaultperformerspolicy is used   you can either give the fully qualified name of your own performers class which must be an implementation of com coremedia workflow wfperformerspolicy  an unqualified classname which will be searched for in the package com coremedia workflow common policies or have it default to a builtin generic implementation com coremedia workflow common policies defaultperformerspolicy    the default implementation keeps a blacklist of users not permitted to perform a task and a list of preferred users  upon setting a new preferred user or group the old preference is deleted  for details see the action class preferperformer  
  property  grammar  empty   the property element defines the properties with which a new document is created   
  action attributes   grammar     you will find the attributes of the actions described for each action later in this chapter   
  this chapter describes the workflow definition xml file format  you will find two kinds of items described here   parameter entities  headline printed in bold italics     parameter entities constitute rules for the xml grammar or standard sets of attributes  parameter entities are reused in various places to shorten the definition of xml elements   xml elements  headline printed in bold     xml elements describe the actual parts of a workflow description   
  the coremedia workflow comes with four predefined workflows which cover the publication of resources and a fifth workflow for a global search and replace functionality  in this chapter you will find a description of the four publication workflows and a description of the publication semantics  the workflow facilities are not restricted to publications  but can be tailored to fit all types of business processes  as many business processes deal with publication issues  we deliver these example workflows  
  the four predefined workflows for the approval and publication of resources are described in the following table  you will find the workflow definitions of these workflows in the file  installdir  properties corem workflows zip and you can use them as examples for your own definitions    publication workflows  the following table compares the working steps which are covered by the predefined workflows  
  the predefined publication workflows have some features in common  which are described in the following   users and groups  in order to execute tasks within workflows  users have to be assigned to special groups  in the predefined publication workflows  these are the following  composer role  to be able to create  and start  a publication workflow and compose a change set approver role  to be able to approve the resources in the change set publisher role  to be able to publish the resources in the change set  special groups can be defined and linked to the workflow via the grant element in the workflow definition file  read more about users  groups and administration in the administration manual   note that  when all eligible users for a task reject that task  the task is again offered to all eligible users  so if you are the only user for a approver role group and you start a publication workflow  the second step of the workflow will be escalated  that is because you cannot be the composer and the approver of a resource   and there is no other user than you  
  basic steps in a publication workflow  after a user has created one or more documents  these documents shall be proofread  approved and published in a workflow  the user  not necessarily the user who did the editing  starts a workflow  if he selects resources at starting time  these resources will be added to the change set and the compose task will be accepted automatically  otherwise  he has to add the resources to the change set later   the user completes the  compose  task   the task  approve  is automatically offered to all appropriate users  members of the approver role group  but not to the composer   even if he is a member of this group   somebody accepts the task and approves the resources   the user has the following options  
     simple publication     step publication     step approval     step publication   the user must have  approve  and  publish  rights    a user creates the workflow with all necessary resources    a user creates the workflow with all necessary resources    a user creates the workflow with all necessary resources    a number of resources can be published  and implicitly approved  in one step    a second user  needs  approval  and  publish  rights  can explicitly approve resources      a second user  needs  approval  rights  can explicitly approve resources    a second user  needs  approval   rights  can explicitly approve resources    publication is executed by finishing this task  workflow    publication will be executed when finishing the task after all resources in the change set have been approved    workflow ends with approval of all resources in the change set    after all resources have been approved  a third user can accept the task      if not  the workflow is returned to its  composer      if not  the workflow is returned to its  composer      if not  the workflow is returned to its  composer        if the third user accepts the task  the publication is implicitly started   
  after a user has created one or more document s  these documents shall be proofread  approved and published in a workflow  the user  not necessarily the user who did the editing  starts a  three step publication  workflow and adds resources to be published to the change set  the task  compose  is finished  the task  approve  is automatically suggested to all appropriate users  members of the approver role group   somebody accepts the task and approves the resources   the user has the following options   
  so the three step publication only effects approval and publication of resources  documents and folders   but not the creation of resources themselves  the coremedia workflow allows to differentiate between content related and structural changes  both types of changes can be published separately  custom workflows can be completely different from the workflows mentioned and described here  
  but nevertheless  these basic principles go with any coremedia workflow   the user accepting a task first becomes the preferred user of this group  within a workflow tasks of this type will always be suggested to this user first  if the preferred user rejects a task  it is offered to all other members of the group  rejected tasks are automatically sent back to their last editor  not all users of a group can reject a task  the last user has to accept it     
  in this section you find detailed information about the editorial process  as the majority of projects deal with website publishing  we focus on it in the user manual  although the coremedia sci is not limited to web publishing  
  start the coremedia editor by doubleclicking the desktop icon or selecting the appropriate entry under  start programs   if web start is installed you can start the coremedia editor via the web start application manager or browser  a login window opens  
   for ldap enhanced systems  choose the appropriate domain      otherwise  leave this field empty     enter your user name     and your password         click the  login  button    the following errors can occur      user name or password are wrong or wrongly combined  type in again both  then click  login  again     all licenses are in use  wait until one of your co workers finishes and logs off  then start again  if this happens more often  buy more licenses      the content server cannot be accessed  restart the coremedia editor  if the same error occurs again  inform your system administrator    after successful login  the overview window opens  an administrator will see the user manager window  and you can start working  
  changes to user rights can only be made by explicitly authorized staff  but all users can change their individual passwords    user administration basically means to adjust profiles of      users  the settings for a user of the coremedia server     groups  only groups can hold rights  the users obtain their rights by being members of a group     rules  give groups rights to resources     
  new folders are always created below an existing folder  at the very top of the folder hierarchy you find the root folder  marked blue in the folder overview  the root folder is the starting point for the creation of folders    to create a new folder  select the folder in which you want to create the new folder   
  a dialog box appears  enter the name of the new folder  
    enter the name of your new folder in the name field  click  create  to confirm the procedure   the new folder appears in the folder hierarchy as a subfolder of the root folder   
  if a folder is not in its correct place  you can move it by cut and paste to the new location  to do so  proceed as follows     select the folder which has to be moved     select edit cut from the menu bar or  cut from the context menu     select the folder into which the cut folder will be pasted     select edit paste from the menu bar or paste from the context menu    the folder is pasted into the selected folder  
  to select a resource  click on it  selected folders are highlighted blue in the folder overview  documents in selected folders are displayed in the document overview  
  to select consecutive resources  first  click on the first resource you want to select  then hold down the  shift  key and click the last resource in the list you want to select  all resources are highlighted     you can also drag the mouse over the documents in the document view while holding down the left mouse button   
  in order to select several non consecutive resources  proceed as follows  click on the first resource you want to select  press the  ctrl  key   hold down the  ctrl  key and click on the next resource you want to select  continue until you have selected all resources  
  select the document with a click in on it the overview window  to open a selected document   select file open from the menu bar select open from the context menu press the key combination  ctrl   o   double click the document in the overview window  in this way you can also open a document which was not selected before   the document opens in a document window  the status and name of the document can be seen in it s title bar  
  select the field and start typing  
  the text section is coloured blue and shown underlined  when you mouse over the link  the name of the linked document is displayed in the status bar of the document window  by doubleclicking the link you open the other document in a separate document window   creating external links  to create an external link in your document  carry out the following steps    mark the text in the document which should appear as a link    designate the marked text as an external link     select format link from the menu bar    select link from the context menu    click  and  on the toolbar     press the keyboard shortcut  ctrl   shift   v    a dialog box appears for creating the external link  
  opening internal and external links quickly   in order to find out a link target  mouse over the link and and read the target in the status line  to open a link target quickly  double click it  internal links open in a new document window  external links open in a web browser 
  some document types allow to insert a list of links to other documents  so it is possible to add more images  further text documents and point at similar topics  documents with a link list option have a links menu in their menu bar   
  delete  to remove a link from the link list without copying to the clipboard  select the link in the link list remove the link by choosing one of the two possibilities   select links delete from the menu bar select delete from the context menu  sorting  to sort links in a link list by name  do the following  choose the link list  select links sort by document name from the menu bar   
  after the dialog has opened  continue as follows           select           choose the image you want to load from the dialog     if you want to convert the file into another file type while loading the image  you can select convert file format into the following format and select the desired file type     click  load   
    select the name of the file in which the image should be saved   save the image by clicking on  save     a dialog box informs you whether the action had been successfully finished  
  here you can select the image section from the original image by    selecting an area with the mouse while holding down the left mouse button after selecting the image section you can release the mouse button confirm the image section with  ok   the defined image section  the selected area of the image  appears on the website  
  after the dialog has opened  continue as follows     select       choose the binary data you want to load from the dialog  select  load   
    select the name of the file in which the binary data should be saved save the binary data by clicking on  save   a dialog box informs you about the success of the action  
  as in ms word  you can choose between two check modes   checking a document     spellchecker is started after the document was edited  immediate checking      check while typing   change mode  to change the mode  choose tools immediate check in the coremedia editor   start checking  if don t have activated the immediate check mode but want to do a spell check open and check out the document   choose extra spell checker or press  f      interactive check mode  if the immediate check mode is activated and words are underlined red  you can correct them in an interactive mode  open and check out the document   choose extra spell checker or press  f      the following window opens  
  words to be corrected are underlined in red  see the window for the actual language setting   correct a word  to replace such a word by one of the words suggested by the spellchecker click  correct  or  correct all  to correct in the whole document   don t correct the word  if a word is not misspelled but unknown and you want to leave it as it is  click   ignore  or  never correct  for the whole document   don t correct the word and add to user defined dictionary  if a word is not misspelled but unknown and you want to leave it as it is  click   add  to add it to the user defined dictionary   exit spell checker  click  exit   
  if a word is misspelled and you want to correct it  select the word underlined in red and open the context menu for suggestions and choose one  if there are none  the field is empty  
  in coremedia sci there are two user defined dictionaries      a central dictionary for your coremedia sci installation located as document type  dictionary  in the folder  system      a personal user defined dictionary of the document type  dictionary   for every cm sci user  located in the user s folder     add a word formerly unknown by clicking  add  in the spell checker   rights matter  for changes in the central dictionary the user has to have edit rights on this folder  if not  the word is added to the personal dictionary   change entries  in order to change dictionary entries    open the dictionary with a double click  rights matter  the field data displays all entries    select the word and click left on it    apply changes    finish and click  enter     save the dictionary   delete entries  in order to delete an entry    open the dictionary with a double click  rights matter     select the word    delete by    selecting edit remove    or selecting remove from the context menu          save the dictionary     
  if the menu entry and the symbol for checking out a document are shown in grey  you cannot check out the document because another user has checked it out  all other functions for editing the document are also deactivated  the document window looks like this  
  please take into consideration that every single document has to be checked out and checked in again for global search and replace  that can be very time consuming  so the search and replace in very large amounts of documents may take a little longer   
    you can alter the set of documents to be processed after creating the document list  add or remove documents      delete document    a  select the document     b  choose delete in context menu     add document    a  select one or more document s  from document or query windows and copy documents via context menu or menu item edit copy     b  switch to the detail information window of the workflow window  insert the selected documents via menu items or context menu items links paste before  resp  paste behind      alternatively  you may insert documents directly via a dialog window     a  select the menu or context menu item links paste with chooser      b  browse for the document  select it and click  choose         finish the creation of the document list via the menu item file complete task resp  the symbol bar item      the compose task is completed and the option task started  no changes have been made so far  if you abort the workflow up to this moment  no changes will be made to the coremedia repository         
  the following options are available   search for  the text to be searched for  replace by  text to replace the found text  case sensitive search  determines whether lower and upper cases matter  not activated by default   properties  lists all searchable text fields of all document types of the selected documents  the names of the properties are composed of  document type   field name   select some of them  or select all by pressing the keys  ctrl   a    set the options according to your specific requirements and type in the search text and the text to replace it with  finish the creation of the document list via the menu item file complete task resp  the symbol bar item the next step is to execute the search and replace process with your options   
  coremedia sci is shipped with one out of four predefined workflows    
  coremedia sci has a special window for creation and administration of workflows  this window holds three sections below menu bar     and toolbar       task and workflow overview        tasks or workflows to be edited are displayed here  detail information window        here you find all relevant information about the workflow which are partly editable  it also displays resources ready for approval  a document selected here opens in the detail view      document window        displays a selected document in the detail information window before  double click the document to open in a separate window  then  available menu entries are activated    
  in general  menu items and functions are activated according to user rights and document characteristics   menu bar        
  all interface icons display a short description on mouseover  nevertheless  the key icons of the workflow interface are  
  if you want to publish content changes of a document  the newest created version which is not published will be taken into the changelist  if the newest version is already published  no version at all will be taken in  if required you can select another version for publication in the  version  field of the detail information window  
  publication fails  content related reasons    broken links or missing folders  the  compose  task is automatically started again   publish  is kept in display as a reminder  usually the change set has to be completed  technical reasons    publication is stopped and marked erroneous for technical reasons such as live server trouble  the publication is paused  not started again and can be continued later by file   restart menu item or symbol     here error messages appear with two possible reasons   the document linked to has not been published yet   the folder where the documents are located has not been published yet   to correct the error  either add the missing resources to the change set  or remove the broken links   copy resources to the change set as described above or from the preview window click links   complete in the activated detail information window   to add resources directly from the preview window select missing resources in the preview window and choose edit   copy from menu bar or context menu  switch to the workflow window  choose links   insert  before  or insert  after  from menu bar or context menu and do so  repeat the publication preview  or the full procedure if necessary   delegate task  if you don t like the task or are not permitted to execute it  delegate it  switch to the workflow window and insert a comment in the  comment  field if necessary  choose file   delegate from menu or tool bar  choose the editor from a list suggested in a dialog box and click  select       the task disappears from your workflow and is sent to your helper  
  after composing of the change set the resources are checked and approved by the user in charge  the resources go through the following stages      accept task    add comments    approve resources  or not     complete task  or abort    to accept a task  proceed as follows     select the task you want to accept    choose file   accept task from menu or toolbar      the task is accepted by you  
    if you want to check document content  open the document in the detail information window  you can also check it out  create a new version and check it in again  but the new version is not added to the change set   add comments in the comment field if necessary  approve by checking the ok checkbox      if you don t approve all resources in the change set  the change set is sent back to its composer who then can make the desired changes     if you want others to do the approval  either delegate or revoke the task   finish the task by clicking file complete or the according symbol   approved resources are marked accordingly  
  the last step here is the publication of resources  they are automatically published with accepting the task   proceed as follows  switch to the workflow window  select menu item or symbol for file   accept task      the publication window opens and displays the publication result   
  there are some more workflow features   suspend  resume workflow  you have the chance to suspend a workflow and resume later  the task is not offered to somebody else  if the task is being edited in this moment  changes cannot be made  the task cannot be delegated or canceled  the workflow can be resumed at any time  choose the workflow to be paused from the task workflow window  choose file   pause in menu or tool bar      the workflow is paused    to continue the workflow  choose the workflow to be continued from the task workflow window  choose file   continue in menu or tool bar      the workflow is continued    terminate workflow  the composer of a workflow  or an administrator  can terminate a workflow  approved resources remain approved  choose the workflow to be terminated from the task workflow window  choose file   terminate in menu or tool bar      the workflow is terminated    reject task  a task in the   step workflow is automatically offered all users of the matching group  you can reject a task  it is removed from your overview window then  choose the task to be terminated from the task workflow window  choose file   reject in menu or tool bar      the task is removed from your overview window  if all other users had already rejected it  and you do so too  it would be offered again to all other users   return task  if you have accepted a task and are not entitled to  return it  all changes made by you so far are saved  choose file   return in menu or tool bar      the task is offered to all other entitled users   delegate task  you might have accepted a task which might be better performed by another user  in such cases  you can delegate the task  the task will automatically be accepted by the selected user  switch to the workflow window  insert a comment in the  comment  field if suitable  choose file   delegate in menu or tool bar  select the user from a dialog box displaying all matching users and click  select       the task disappears from your workflow window and is automatically accepted by this user  if you send back a task to the composer  an error message pops up because approval cannot be done by composers   
  during the editorial workflow process  the number of documents will increase continuously  in order to have quick access to documents and information  the coremedia editor provides the possibility of executing queries    technically speaking  queries are documents and so can be saved  edited  or copied  they are stored in the user s home folder  to view this folder  go to home  username  and look at the query documents  by default  this folder already contains one query document named myquery  
  besides fully user defined queries  there is the possibility of using predefined queries   navigation links of a document  this query gives an overview of all links which point from this document to other documents  navigation links to a document  a query window is opened which lists the links from other documents to this one  navigation checked out documents in the overview window  you can use this query if you want an overview of all documents which you still have checked out  navigation to be published  a query window is opened which lists all documents which needs to be published  
  queries are treated like documents  they are saved as documents  they can be copied  renamed  moved or opended by a doubleclick  
  to open a found document quickly  select it from the list and open with a double click   the selected document can now be edited in a new document window  
  you can directly add documents to a workflow from a query result document list  to do so  select the document s   select new workflow from the context menu and choose the appropriate workflow      a workflow window opens  containing the selected documents  
  an unparser is a java class that cares about the actual syntactic representation of your text  suppose you have a dom tree in memory and would like to write it into the file system or to the jsp writer  this is where the unparser comes in  the unparsers provided are all subtypes of saxunparser  which means that they use sax events to generate the actual xml  or sgml in case of the sgmlunparser    consult the following table which unparser fits your needs best  
  one of the major advantages of xml is its extensibility  this means that you re able to supply your own formal grammar for a given document  this grammar is called a document type definition  dtd   when producing xml with coremedia a dtd should be the first thing to agree upon within your team  with this dtd automatic validation of the generated xml becomes possible  there are two ways to do this    create a dtd with your xml content and use another jsp to read in and validate this content    after construction of xml via the techniques described above gather the information in a java lang string  prepend the dtd declaration and run the string through a validating xml parser  see the first example     in both cases you can use the hox log saxlog to report errors directly into the configured log facilities  the saxlog implements the org xml sax errorhandler interface which will allow you to attach it to the parser  errors will stand out in the logs prominently if you configure the correct log level  use error or critical    
  the coremedia sci offers a generic xml layer for your convenience  all markup produced by the relevant java classes is conformant to the coremedia dtd  lib xml coremedia dtd   
  changing the dtd for a particular property can solve many problems in your project  however  apart from the fact that dtd design is not a simple issue and requires much experience in developing formal grammars this process also raises another important issue    custom xml properties cannot be edited with the coremedia editor or the webeditor general rule  use custom dtds when importing from external systems that offer a dtd and use this dtd  a good example are ecommerce systems that offer dtds for product data  use custom dtds when you want to put structure into xml properties and the default dtd is not sufficient  workarounds  many layout issues can be solved by using the span element extensively  establish conventions on how to markup your content using special class attribute values    
  content management is always specific to a particular topic like sports or music and has an underlying semantic structure  in coremedia this structure consists of the coremedia document types bundled with certain conventions on where documents reside in the content hierarchy  we will call these conventions and the document types the information model of a content management project    the aim of a custom xml layer is to reflect the information model on a formal level  it provides the following benefits    increased readability for template developers  the standard xml format can make it hard to see what is going on  using a custom xml layer can make it very easy to see i e  where content is missing   increased efficiency for style sheet programming  it is easier to write good style sheets if the xml layer follows the information model closely  this is mainly because the xpath expressions needed to produce style sheets turn out to be simpler   increased style sheet processing capabilities  by offering a custom xml layer information can be aggregated and computed before any style sheet transformations take place  using this technique information from other systems  weather forecasts  stock information  can be incorporated as well  since a great many problems cannot be solved efficiently by style sheets or are not solvable at all the java xsl  combination is a powerful tool    
  xsl transformations  xslt  is yet another w c standard targeted at xml processing  using style sheets  developers can transform xml entities into other xml entities or plain text  the style sheets themselves are written in xml and can be stored in any xml enabled repository like the coremedia sci  this also means that syntax checking can be done by one of the free xml parsers  however  this also means  that you will have to put up with the syntax which is sometimes difficult   the latest xslt specifications can be found at http   www w  org tr xslt   a style sheet consist of so called template rules which contain literal output elements as well as instructions to the style sheet processor  variables and parameters    xsl transformations are tree driven  an input tree is processed by processing the root element  elements are processed by finding the template rule in the style sheet that offers the best match for the input element emitting it s content   the following information shows you how to write jsp s that implement xsl transformations   the xslt version supported by the coremedia sci is      
  use xsl transformations to  generate different representations from the same content  i e  it is possible to compute both html and wml from the same content base  convert xml files from one format to another  for example  a given system needs xml input conformant to some dtd a  however the available xml is only conformant to dtd b  the solution is to write a style sheet that translates instances of dtd a to instances of dtd b  the coremedia sci xml importer component makes heavy use of style sheets  present information using a web browser  for example  data is available in an  information only  format  by writing a style sheet developers can enrich this data with formatting information  it is possible to construct xhtml tables etc  thereby the data becomes readable and understandable  using the coremedia ads developers can enrich the default xml layer with formatting tags to produce aesthetic layouts  translate existing xml data into legacy data formats  for example  xml data can be transformed into simple text files which could then be read by a desktop publishing software to produce a catalog   
  however  every medal has two sides  the drawbacks of using xslt are   it does not integrate well with java  i e  it is not possible to simply call a java method from a stylesheet  processing can use a lot of memory since the entire input tree and stylesheet need to be in memory  processing can be slow depending on xpath expressions and sortings used  writing stylesheets can be difficult due to syntactic issues  
  in order to work with java s xml transformation apis  you need to pass input in the form of javax xml transform source  when working with custom xml produced through ads  you should use a javax xml transform stream streamsource wrapping the result of generator getinputstream uri  where uri points to your generated source xml  it is not correct to build a streamsource directly from the uri since this would lose the dependency from source to transformation result  
  with two inputsources  xml and xsl  you can use a javax xml transform transformer to perform the transformation  please see the api documentation in the java   sdk  a short example  
  there are some basic concepts every application designer should follow in order to implement the projects successfully      gather attributes in baskets   use xsl attribute set extensively  formatting rules often require large numbers of attributes i e  to specify the font  if you can do so  split up the attribute sets into small units  since xsl use attribute sets allows for multiple attribute sets you can merge them later  if you didn t like css and it s unflexible mechanisms this is a feature for you  it allows you to specify  a base font and then add up more formatting rules through joining of atribute sets     split your stylesheets   make use of xsl import and xsl include extensively  try to group your template rules by category  always put the formatting attributes in attribute sets into a seperate file  what used to be formats css is now formats xsl      forget about sharing template rules in stylesheets for different targets  as a rule  different target platforms want different tags  since usually all a template rule does is emit tags  sharing these rules becomes impossible  one set of stylesheets for one target platform  this allows you to divide your stylesheets neatly     do not forget the documentation  
  using xslt it is possible to deliver content to a number of different plattforms  these publishing targets shall be discussed in this section  
  serving web browsers always means serving html which is actually sgml  most html documents on the web are not even conformant let alone parsable by an xml parser    to overcome this deficiency the w c has issued a new version of html called xhtml  which is well formed html    when using xslt to serve content to a web browser  you ll end up serving xhtml  there re some points to keep in mind when doing this    some browsers  most notably netscape  have problems with empty tags like  b    solve this problem by using an hox text xml xhtmlunparser   do not forget to set the correct mimetype in your jsp  text html   
  xsl formatting objects  xsl fo  are a new standard by the w c  xsl fo defines how content should be styled  laid out  and paginated onto some presentation medium  such as a window in a web browser or a hand held device  or a set of physical pages in a catalog  report  pamphlet  or book   xsl was designed to overcome the limitations of html and create a formatting vocabulary that is truly platform independent  it aims at both browsers and desktop publishing programs   when producing xsl fo with xslt from some xml content please keep in mind   there are no tools for helping with the layout  you ll have to code everything with a text editor  considering the complexity of the specification this is quite a task  you can create pdf documents from xsl fo objects by using one of the available processors for this  the apache project offers fop for this purpose  this manual was created from xsl fo via xep from renderx   
  the wireless application protocol  wap  suite targets the mobile market  these protocols enable telecommunication companies to relay digital information and services to mobile users   exchange format of choice is the wireless markup language  wml    an xml dialect designed for mobile devices with  low bandwidth connection  unstable network access  small client memory and limited display and input facilities   when you have an xml layer in your web application it is only a small step to provide mobile users with information for the following reasons   wml is simple  it is easy to learn  the basic formatting vocabulary for text markup is identical to html in theory all you have to worry about is that you produce correct wml  the user agent  i e  the phone  is supposed to do the layout for you   real life is harder  nobody is going to use your mobile service if it s a drag to use  since the design philosophy of mobile devices varies greatly some pages will look great and be easy to navigate on some devices and feel horribly on most others   here is what you can do in order to prevent this  write a thin jsp wrapper around your web application that detect the kind of device used by your customer  since standard http requests are used this is easy  simply read the information out of the request header  the servlet api provides methods for this   then you ll need one style sheet for each and every device used by your customers  this sounds harder than it actually is since there are not that many vendors out there and mobile devices by one vendor almost always share the same design philosophy and user interface capabilities   using the wrapper deploy information by transforming with the correct style sheet   finally  use the correct mimetype and encoding  since most devices will only accept utf   or utf          page contenttype  text vnd wap wml  charset utf      
  cacheable pages  for pages which are cacheable you need to set  session false   
  the executed template can call up the context information provided by the ads for this execution using a request scope bean called  context   in particular  the template is told the coremedia resource which should be displayed  as well as further attributes of the requested resourceuri  the bean is imported in the template as follows  
  the resource to be displayed by the template is accessible via the context bean  
  further execution parameters can also be obtained from the resourceuri stored in the context bean  
  if the template is configured exclusively for displaying documents  you can work directly with the corresponding api class   
  the properties of a document defined in the schema can be called up in the following code and inserted onto the page  access to and formatting of the types of properties supported by the coremedia system is described in the following subsections  
  access the value of an integer property using the getintproperty method of the document class  the method is defined as follows  
  to insert the value of the property directly into the output of the jsp page  use the common jsp tag      java expression     in the case of an integer property  this appears for example as  
  string properties are dealt with in a similar simple way  the access method in the hox corem servlets document class is defined as 
  you can access the string property as follows  for example  
  if the contents of the property should not be interpreted as html markup  or if the output should be produced independently from character set and encoding of the page  charset  encoding   the information carrying characters must be filtered  escaped   an appropriate filter is prepared as follows  
  if necessary  use this bean in the following way  
  the value of a dateproperty is represented by the java util calendar class  
  as usual in java  the returned object can be transformed into a string representation with the help of the classes from java text  
  multimedia objects  often known as binary large objects  blobs  in database terminology  should occur directly in the output of the template as seldom as possible    in most cases only a uri should be put out  leading to the actual blob content  as an example  the document type  image  has a blobproperty  onlineimage  with mime type  image gif  that should appear in the web page display of the document  the template code could be as follows  
  the getpropertyuri method of the hox corem servlets document is defined in the following way  
  configure the template finder appropriately  so that on access to a property uri the content of the corresponding blobproperty is delivered   
  the template shown in the following demonstrates how to use the document getblobproperty method for access to the contents of a blobproperty  
  as the result  the method delivers an object of theblob class  which represents the binary object stored in the property of the document  the blob class has four methods  getcontenttype and getsize for requesting metadata  and writeon and getinputstream for accessing the actual content  
  the value of a linklistproperty is accessed via the document getlinklistproperty method  the method is defined as follows  
  often  the linked documents also have to be inserted into the page  possibly displayed in a different way   the following code gives an example    
  coremedia sci supports the efficient computation of incoming or reverse links to documents as part of the generator api  the method getlatestincominglinks returns an array of documents  this feature allows a more adequate modelling of document types under certain conditions  take for example documents that have to relate to different categories  in former releases you would probably have created a category document type with a linklistproperty referring to the documents of a certain category  note  that documents can be part of multiple categories  so  every time  when a document is added to or removed from a category  the category documents have to be modified  a consequence can be a large number of versions  due to frequent changes  if you want to delete a document from the repository  you also have to remove links to this document  in order to avoid dead links  if a user doesn t has the respective rights  somebody else who has these rights ought to execute this  with cm sci the opposite approach can be chosen  add a linklistproperty to documents that shall be categorized  thus the creator of a document has the ability to define the categories for a given document  only one document has to be modified  deleting this document automatically removes it from all categories  on the delivery side you use the new method getlatestincominglinks to show all documents related to a category resource   in the following example all incoming links to the current document are analysed  incoming links are separated by the following criteria   documents of a subtype of pagecontent linking to the current document are accumulated in the arraylist incomingcontentcategories documents of a subtype of category linking to the current document with the attribute subcategory are accumulated in the arraylist incomingparentcategories   documents of a subtype of category linking to the current document with the attribute sidecategory are accumulated in the arraylist incomingsidecategories    note that this code can be placed in a cacheable template  if the incoming links to the current document change  the generated page will be invalidated by the coremedia active delivery server  this  results in a rebuild of the page   
  in the coremedia system  some properties are available from the start for all documents  independent of document type and the project specific document type definitions  the names of these pre defined properties can be recognized by the underscore character at the end of the name  pre defined properties behave differently from project specific ones  on the one hand  their value can also change when the document is not checked out  on the other hand  the values are usually not entered directly by the editorial staff  but are set as a side effect of operations such as approving or publishing    depending on the type of the property  the value can be called up with the familiar methods  getstringproperty  getdateproperty       or with the generic method getproperty   
  the folders of the coremedia repository contain named documents and sub folders  the resources contained are also known as children of the folder  each resource apart from the root directory lies in exactly one folder  or in the archive   the folder where a resource lies is obtained with the getfolder method of the hox corem servlets resource class  
  during template development  it is difficult to determine for complex web pages  which documents are entering the page and which templates are involved in the creation of the page fragments  to provide better overview here and even to allow direct access  coremediacap offers automatically generated template links and content links   a template link has a hyperlink to a page showing the template source code  a content link has a hyperlink to the corresponding document in the web editor or coremedia editor  as help text  the template name  with directory  for template links  and the document type and name for content links are shown in the browser when the mouse pointer hovers over the symbol  so it is easy to check which template or document is behind the page fragment  
  with activated template and content links the original document and the generating template can be determined for all page fragments  the additional html code for the links messes up the layout somewhat  but there is no general prevention against it  therefore  after editing the templates or the documents  template and content links should be switched off again  see below    sensible positioning of template and content links allows convenient debugging  if an error is suspected in a template  the template links can be switched on  so it is possible to see which template is responsible for the faulty page fragment  as soon as the error has been corrected  the template links are switched off again for testing the actual layout   the content links can also be used for debugging  since erroneous content is often responsible for errors on the web page  for websites with closely interconnected content and online layout  content links can also be used for content editing by editorial staff  in contrast to the normal workflow process which involves content being edited and then a preview being shown  this reversed process involves navigation from the web page to the content  this workflow process can be more suitable  especially in the phase of revising the content  
  templatelinks and contentlinks have been changed in coremedia sci  the  jinc files of coremedia     have been replaced by several beans  the iconlinkfactories  such a bean can be switched on and off  setenabled     a bean set enabled generates a html fragment displaying an icon for templatelink or contentlink calling its tostring method  this could be executed by jsps too  but the advantage of a bean is that these usually small html fragments do not have to be included via jsp include and so avoid overhead  in addition  the display of iconlinks will not change often  so precompiled beans have a further advantage to jsps  the classes for all beans can be found in the package hox corem servlets beans  the source code is accessible  
  the abstract class abstracticonlinkfactory contains the basic functionality  the administration of enabling   disabling and the construction of the html fragment  the html fragment is parameterised by several abstract methods     geticonurl   to return the url of the icon for display of the link   gettargeturl   returns the url of the link target   gettooltip   returns the tooltip text displayed when hovering the mouse over the icon    it is also possible to overwrite the method gettarget   in case the link should open in the same window and not in a new one  target   blank      the methods getgenerator   and getcontextpath   can be used by subclasses to get the current ads or its context path  
  templatelinkfactory is a simple implementation of an abstracticonlinkfactory for templatelinks  the icon is always the same template link icon  the target a page which displays the template source code  the tooltip text is composed of path and name of the template file  
  contentlinkfactory is a simple implementation of an abstracticonlinkfactory for contentlinks  the icon is always the same contentlink icon  the target the current resource in the webeditor  the tooltip text is composed of resource description document type or folder   path and name  for subclasses the current resource  getresource    and its id  getresourceid    are provided  
  statecontentlinkfactory  statecontentlinkfactory is a subclass of contentlinkfactory displaying additional information about the condition of the current resource in the tooltip text  the icon displays folders with the appropriate folder icon and also the current state of the document  editable  checked out  approved  published   if suitable  the tooltip also contains information about who checked out  approved  or published the resource and the date of the action  contentlinks target to the webeditor like in the contentlinkfactory  
  editorcontentlinkfactory  editorcontentlinkfactory is a subclass of statecontentlinkfactory calling the coremedia editor  not the webeditor  for display and editing of the current document  an url is constructed that is a  remote control  for a locally running coremedia editor  the editorcontentlinkfactory has to be configured to use the same port as in  remotecontrol enabled  true  port         in the editor xml  see the editor developer manual   the coremedia editor is  remote controlled  to display the corresponding resource in the explorer window  as the resulting html page  it just delivers a status indication  that s why gettarget   returns an identifier for a window to be reused  
  the beans for later use in templates are preferably generated and configured in config bsh  a typical configuration of e g  an editorcontentlinkfactory is     
  in this case it would not have been required to set properties because the default values are used   
  because the html fragment ist generated by the tostring   method  the use of the bean initialised in the config bsh in templates is simple   
  it is comfortable to enable or disable beans with the standard names contentlink and templatelink from the develop pages  for further iconlink beans make appropriate changes in tomcat  webapps coremedia web inf develop configurelinks jsp  
  by default  the uris of coremedia pages start with  coremedia generator  followed by the path of the document and further information  however  this is not essential  in fact  most aspects of the uri formatting can be reconfigured with the help of the hox corem servlets resourceuriformat class  in this chapter  the possibilities offered by this class are described   
  in order to work as a link  a resourceuri object needs to be transformed into a textual representation  if a client follows this link and sends a corresponding request  the textual representation sent by the browser needs to be transformed back into the original object form in order to be consumed by a template  in ads  these steps are called formatting and parsing  respectively  naturally  these two operations must be inverse  parsing a formatted uri must reveal an equivalent object and vice versa    the parsing and formatting algorithm is a pluggable implementation of the hox corem servlets resourceuriformat interface  the default implementation hox corem servlets beans standardresourceuriformat uses the full repository path for identifying the resource  a different algorithm can be configured by installing your own implementation class in the generator bean  this is done in the config bsh file by overriding the resourceuriformat bean property of the generator bean    
  when a uri is output in a template  this usually comes with a jsp fragment as follows  
  when a uri request is read in and analysed  the ads goes through the reverse process as for formatting   the context and servlet path of the active delivery server  typically  coremedia and  generator  are removed from the beginning of the uri  note the asymmetry to formatting the uri  where the contents of generator resourceuriprefix are inserted  this way it is possible to present the user with a prefix which is different from that expected from the servlet standard for requests  request uri   the decision between the displays is carried out by an external component  such as the pre connected web server described above   the shortened uri is passed to the parseresourceuri method of the configured resourceuriformat   the result is a uri object  folderuri  documenturi or propertyuri  which identifies the page being created and can be requested in the template code as context resourceuri    
  assume that short and meaningful uris are desired  a possible uri format would then be to take the name of the resource  without path  and  to avoid ambiguity  attach the id of the resource  the document   sports abstract  with id    would receive the uri   abstract      a corresponding resourceuriformat class would appear as follows  
  this formatter is not suitable for real projects  because various information available in the resourceuri object does not appear in the string representation   parameters  key value pairs   template id  the version of the document  for document uris  the name of the property  for property uris    furthermore  many browser applications assume that the uri has an extension matching the mime type  e g   html for the mime type text html   the extension is important if the created files are transferred to a separate web server via uploader  since otherwise the information about the content type of the page is lost  for this  see the section about active delivery server configuration in the administration manual     furthermore  a resourceuriformat which is ready for production should prevent forbidden or significant characters from appearing by mistake in uris by using appropriate escaping of resource names  parameters and other components    it is not allowed to print  system out println uri    a uri inside the formatresourceuri   method because this method is triggered by the tostring   method  this will lead to a recursive loop and at last to a java lang stackoverflowexception    the classes standardresourceuriformat and numericresourceuriformat delivered by coremedia in the hox corem servlets beans package naturally take into account all the points mentioned above  they are delivered in full source code and can serve as the basis for project specific configurations  their function is documented in detail in the java api description  broadly stated  the uris of the standardresourceuriformat are based on the path of the resource in the coremedia repository  while the numericresourceuriformat explicitly writes the resource id into the uri   
  the viewdispatcher is a template finder that maps template ids to templates depending on the document type  particular attention is paid to the fact that document types have inheritance relationships    to understand the way the viewdispatcher functions  the idea of templates as views of documents is presented first here  it is explained how views depend on the document type and how they pass down through the document hierarchy  after that  the concrete configuration and use of the viewdispatcher is discussed     
  variant rules are java classes implementing the interface hox corem servlets beans viewvariantrule  please see the api documentation for details  there are five types of predefined variant rules  which can be applied after each other as desired      stringpropertyviewvariantrule    a string property from which the variant designator should be read can be configured in a particular document type  for resources of the given document type with non empty string property  the rule delivers the value as the only variant designator  otherwise the empty variant list     linklistpropertyviewvariantrule    a linklist property from which the list of variant designators should be determined can be configured in a particular document type  the delivered variant list consists of the names of the linked documents     pathviewvariantrule    the selection of the view variant should depend on the location of the resource  for this purpose  a list of pairs of paths and variant designators is configured  the rule delivers the variant designator which is assigned to a path which is a prefix of the path of the requested resource  the path designator list is searched in the given order     parameterviewvariantrule    the selection of the view variant can be made dependent on a parameter in the resourceuri  the name of the parameter is configured from whose values the variant list should be constructed  the length of the list corresponds to the number of appearances of the parameter in the uri     mimetypeviewvariantrule    since version      the dispatching according to a blob property s mime type has been moved to this new  predefined viewvariantrule  the reason is that the basic view dispatching is based on  static  data of the resource at hand  like its resource type or the name or type of a property which cannot change at run time  while the mime type pattern  image    is statically defined in the document type  the concrete mime type of a blob  like image jpg  depends on the concrete stored data  view variants are better suited to  look into  the blob  the mimetypeviewvariantrule adds exactly two variants to a blob property uri  one for the major part of the mime type  one for the minor part    it makes sense to pass parameters for which a variant rule is configured from one page to the next  since they express a kind of mode in which the site is displayed  they are useful when only some templates differ in the different modes  but these considerably   for which view variants can then be implemented  according to the lookup logic  all other view variants revert to the view without variants  for this reason  variants are also suitable for template selection by the editorial staff  since if an error is made on entry  doesnotunderstand is not called up  as occurs with a false view designator  but simply the view without variants is used    variants of views should be used if the selection of the view is an intrinsic property of the called resource  this is different from the case where a caller decides how the resource is to be displayed  in this case you should not use a variant but a different view  variants should only be used if global conditions can be found according to which the resourceuri can decide which template should be used for a particular document and for a particular view  other case decisions should be made  as before  in the templates or in the corresponding beans   if it is between  am and  pm  use view renderday  otherwise rendernight    
  as described before  the caching mechanism cannot be used for pages that depend on request time values such as current user  time of day  user agent      however  with a little transformation  you can still make use of the cache  you need to shift the relevant properties into the cache key  e g  as parameters of a resourceuri  this way they become distinguishable to the ads cache     assume that you want to build a site which appears differently to different user agents  thus  in a non cacheable outer template  you would shift the http request header  user agent  into the parameter of a resourceuri and include the resulting cacheable template  since the user agent is now part of the cache key  different versions of the page will be cached and delivered according to the requestor    the following example demonstrates the necessary steps  it starts out with one non cacheable template that does the whole job  
  in order to make use of the cache  we separate the work of classifiying the user agent from the actual content generation into two templates  a non cacheable dispatcher template that dispatches to different browser specific cacheable fragments  
  a template which branches to different cacheable variants  depending on the user agent   the template responsible for the content can now operate in a deterministic way  since the user agent is available through a resourceuri parameter  
  wrap up   in a nutshell  a thin template marked as non cacheable branches  depending on the request  to one or more content templates marked as cacheable  the actual work is carried out in the content template  in comparison to a page generated completely dynamic  the calculation work per request is reduced to the absolute minimum in this way  the general procedure can be summarized as follows    collect the necessary dynamic state in a dispatch template marked as non cacheable  encode the state into the parameters of a resourceuri  branch to the page identified by this uri  which is then created by a template marked as cacheable    you should make sure that not too many parameter combinations are created and that only parameters which actually have an influence on the output are passed to a template  for example  it doesn t make sense to transfer a session id in this form  otherwise  too many variants of the page are stored in the cache memory and in this way diminish the effectivity of the cache    you can proceed in a similar way with fragments  for example  a dynamically generated homepage could select several pre calculated fragments and insert them in varying order  when all dynamic decisions are made in the template of the homepage  the fragments can be delivered rapidly from the cache  
  so far  you could only include a fragment verbatim into its enclosing page  sometimes  you want to make use of fragment caching  however  you want to transform or post process the fragment contents    for this purpose  a number of methods are available in the generator class     getinputstream uri  allows you to read a page directly from the cache as a byte stream    getreader uri  allows you to read a page directly from the cache as a character stream  this only makes sense if the page has character content and declares its encoding correctly    getobject uri  interprets a page as an object  depending on its content type  pages of type text   and application xml are transformed into a string  pages of type application x java serialized object are deserialized into an object  this way you can compute and cache intermediary objects in one template and use them from another    please note that all three methods require the target uri to point to a cacheable template    you can use these methods  for example  to cache and transform xml fragments via the jaxp transformation api  javax xml transform   using a streamsource wrapping the result of  getinputstream  also  you could store a structured navigation object as a serialized object in a cached fragment    in addition  these methods ensure the correct dependency of the calling page to the fragment  if  for example  you use a urlconnection to read a fragment instead of using  getinputstream  the generator cannot map the http request to the calling page and will not assign the correct dependencies  thus  if the fragment changes  the calling page will not notice    the following template shows how to create a fragment containing a cached  serialized object   
  as already mentioned  the ads keeps record of contents of the repository accessed by a template when calculating a page  in the following  the dependency management is explained in detail  this should help you to keep the dependencies between pages and the repository under control    in a development installation  you should enable the ads admin pages  by moving the directory admin out of the web inf folder   the admin pages contain a cache browser that enables you to see and traverse the dependency graph  starting from the page cache listing  you can jump into and navigate inside the dependency graph by following the arrow symbol to the left     two types of dependency are distinguished  basic and derived dependencies  
  basic dependencies come into existence when using an object from outside the ads  to follow the validity of the dependency  the active delivery server must be informed about changes to the external objects  the following three types of basic dependencies are distinguished    dependency on the contents of a coremedia resource  in the case of documents such a dependency includes the property values  for folders the list of the resources contained  and  in general  the editing state of the resource   dependency on the name of a coremedia resource   dependency on the code of a certain template    the ads must be informed about changes to the template code manually via the administration interface  on the preview server normally in  coremedia admin   on the other hand  the ads finds out about changes to coremedia resources automatically    in the dependency browser  these dependencies are classified as  external value     an example  the following template reads the properties of a document  consequently  the generated page receives a dependency on the contents of the document   
  if  for example  a page is generated for the resourceuri  id    templateid short jsp   the active delivery server allocates a dependency on the contents of resource    and on the code of the template  templates short jsp to the created page  
  derived dependencies are created when a template uses an artefact which has been created by the ads itself  most prominently page fragments  you ll encounter  page content    formatted uri    template mapping  and others when using the cache browser   in principle  a derived dependency concentrates all dependencies of the artefact into an interior node  with this dependency hierarchy it is possible to avoid change propagation and regeneration of pages when the contents of an artefact haven t  really  changed    the following example illustrates this   
  a fine division of pages into fragments which can be marked as cacheable can significantly reduce the generation time per access  because    fragments can be used again in many pages   after a change in the repository  only the affected fragments need to be reconstructed   regeneration of pages on higher levels can sometimes be avoided completely when changes do not replicate    on the other hand  the creation of fragments requires more   time  since each call of context include causes some extra time for request processing in the j ee container and in the ads   memory  since dependency information must be stored for each fragment    the memory required is about   kb java heap per page  or page fragment  in the cache  for        pages  therefore  about     mb of heap are used  
  note that an active delivery server configured for offline generation cannot at the same time be used for on demand generation from external http requests  both modes are exclusive  
  in offline generation mode  the page cache size configuration is ignored  in order to regenerate affected pages on change  all reachable pages are generated and kept in the cache  regardless of the setting  if you run into space problems  you can reduce the amount of cached pages by making fragment templates non cacheable  possibly at the expense of fragment reuse and thus generation time    the bean property pregeneratetransactionally can be used to configure the behaviour of the ads when the data on the server is changed  if data is changed on the server  the ads receives events which inform it about the changes  the active delivery server must then invalidate the corresponding pages and  pre generate them anew    with pregeneratetransactionally true  the changes are processed transactionally  this means that before generation  the documents that need to be changed are determined  and only these documents are changed  even if new events occur during generation  the new events are only taken into consideration in the next generation    on the other hand  with pregeneratetransactionally false  change events which occur during the generation phase are immediately taken into consideration    a pregenerator in transactional mode must be connected to live server to generate pages after content changes  if it is connected to a contentserver  the generated pages will not be updated  because the begin of a transaction is signaled by a publication event     the following section from config bsh configures the ads so that events during the generation phase are taken into consideration immediately   
  in this way  documents offer the usual flexibility of the object oriented world  according to the context  you can allow general or special document types in linklists or templates    for good system performance  however  you should not inflate the inheritance tree with too many generic intermediate types  but limit this to types which will actually be required in the foreseeable future   the order of the type definitions is relevant to inheritance  a document type used as the parent type must be defined previously  in this way  cyclic construction of inheritance relationships is ruled out   a field which is defined in a  direct or indirect  parent type cannot be newly defined in the derived document type  
  you have installed and configured coremedia sci  but the most important part is still missing  the content  you can create your own documents with the coremedia editors  but coremedia sci also offers the possibility to automatically import external content   coremedia sci comes with a generic xml importer  it can be configured to import xml documents of any structure as well as any other non xml format  
  the extensible markup language  xml  is a standard for platform  and software independent description of structured files and data published by the world wide web consortium  w c   more and more content suppliers recognize xml as a simple yet powerful exchange format and deliver their content in xml format   coremedia naturally also supports xml and provides an importer for xml files of any format and map them to your coremedia document types   this chapter deals with conceptual aspects of the xml importer  in particular the configuration for any given xml format  how to put a new importer with such a configuration into operation is described in the administration manual  
  xml is a generic format  however  the importer cannot guess the meaning of various tags  but requires a certain format   the coremedia xml format   to achieve a visual separation between xml elements and attributes  the elements are written in the following in pointed brackets   element   the attributes are written in italics  attribute   files here are xml files or xml documents  while document means documents in the sense of coremedia sci  
  the following example shows the construction of a coremedia xml file  
  each document is uniquely determined by the value of its id attribute  it can be referenced to via this id by other documents  in the example below  you can see that the document called mydocument contains a link  link idref  pic     to the second document   the importer supports two types of id      target ids      target ids refer to documents which already exist in the coremedia sci repository  they begin with the prefix target  followed by the actual document id which is always a positive even number    internal ids      they are only valid within the consistency check of an import procedure and are later mapped to target ids by the importer  they begin with the prefix internal  followed by the actual document id which can be a string  containing any character allowed for nmtoken  the internal document id must be unique in the set of documents to import    if the prefix is missing  the type of the id is determined in the following way    the system checks whether the id occurs in the import set or not  if a document can be found  the id is treated as internal  this was the behaviour in previous releases of coremedia sci    the system checks for the id in the coremedia repository  if  a document can be found  the id is treated as target    if no document with this id was found at all  the import will fail    the documents for import must form a closed set with regard to their referential integrity  i e  no documents can be imported which refer to unknown ids  for internal ids  this means that the referenced document must also be contained in the import group  a document which is referenced with a target id must already exist in the coremedia sci repository   the following example is intended to illustrate this   for clarity reasons we limit ourselves to the elements and attributes relevant in this context  
  case    the document with the internal id  pic   is also contained in the import group  the link is valid   case    a document with the internal id  not here  is not contained in the import group  it cannot be  a target id either  because it is not a numerical   the import would therefore fail   case    if  at the time of the import  there is already a document with the id      in the repository  then the link is correct  otherwise the import would fail   case    a document with the internal id        is not contained in the import group  if  at the time of the import  there is already a document with the id        in the repository  then the link is correct  otherwise the import would fail   the documents to import can be distributed over multiple xml files  documents which are connected via a reference do not necessarily have to be in the same file  it is only important that all files with referenced documents are available at the start of the import process  
  coremedia sci does not run without specifying document types and their fields  see the administration and operation manual   e g  
  if the property import enforcecompleteversion in the configuration file of the importer is set to  true   default   then the values for all fields must be provided for an import of a document of this type  for each document property  stringproperty  xmlproperty        there must be a corresponding  xml element  string  text        if one declared field is missing an error message is generated  and if there are two values for one field  the first is overwritten by the last    if the property import enforcecompleteversion in the configuration file of the importer is set to  false   it is not necessary to provide all elements  see the administrator manual for a description of the property    before we describe the format of each field element in detail  the following example shows a typical document of the above document type  
  while the field elements describe the contents of the document  the  action  elements define its state  action elements have the following attributes     name is the name of the action and can have one of the following values  publish  approve  delete  according to the dtd the edit value is allowed but the importer ignores it    user is ignored as well  all actions are carried out by the importer user  see administration manual     date  time  timezone are ignored as well   
  having dealt with the coremedia xml format in the previous section  we ll describe here how to provide source documents for import   this section contains important points which must always be considered  followed by the description of the standard configuration  if the standard configuration is not suitable in your case  the last section tells you how to use the importer api to meet your requirements     
  since the term  document  is inevitably used rather often in this manual  it is important for understanding this chapter to distinguish between the following types of documents   source document  a document of any format for import  e g  a file or a generated dom tree  this term includes both the input data and the intermediate results of the transformers  xml document  a document of any xml format  e g  coremedia xml  coremedia document  a document in the sense of the coremedia sci  for example  a  document  in the coremedia xml format represents a coremedia document   there is no one to one relationship between source documents and coremedia documents  as you can see from the example of coremedia xml above  a source document can represent several coremedia documents  on the other hand  a transformer can generate a single coremedia document from the contents of several source documents   due to the requirements for consistency over documents  especially the referential integrity   in many cases it is not possible to import individual coremedia documents  often  a group of coremedia documents which can only be imported together results from many source documents  the importer therefore offers the possibility of processing any number of source documents in one operation   on the other hand  a large number of source documents significantly increases both the amount of memory required and the time required for consistency testing  many operations with fewer documents are more efficient than fewer operations with many documents  therefore  ideally  the source documents should be imported individually and then be combined into the smallest possible groups  if required by the referential integrity  
  the standard configuration of the importer is set up for the situation that the source documents exist as files in certain directories  these directories are set in the configuration file  separated by semicolons  
  files which lie directly in the inbox are imported individually  if several source files should be imported in one operation  they must be combined in a subdirectory  such subdirectories can have any desired name  only  bak  and  err  are reserved  the importer creates these two subdirectories and moves successfully imported source files and subdirectories to bak and failures to err   at the time of the import  the files must be completely ready  in particular  all files must be present in subdirectories which should be imported in one operation  therefore  both individual files and complete subdirectories should  under unix  only be moved to the inbox directories in one complete step with mv  not by means of successive copying or writing   if the inbox directories are empty  the importer goes to sleep  you can configure the sleeping time in seconds  using the property import multiresultgeneratorfactory property sleepingseconds  the special value      means that the importer does not wait for new files  but only imports the current contents of the inbox directories once and then ends  
  it may be the case that files are present in the inbox directories which should not be imported as source documents  a typical example for this are graphics which are referenced without path by a blob property in a coremedia xml document  on the one hand  such graphics must lie in the same directories  so that the importer finds them  but on the other hand should not be imported as independent source documents  for such cases  a further property can be entered in addition to inbox and sleepingseconds  filenamefilterclass  the value of this property must be the name of a java class which implements the java io filenamefilter interface  if this property is specified  a file is only imported if its name is accepted by a filenamefilter of this class  if your files have meaningful names  it is usually possible to decide according to the filename extension whether it is a source document or another file  
  the class subdirgeneratorfactory creates generators which implement the file logic described in the previous section  subdirgeneratorfactory is included with the delivery of the importer and is preset in the example configuration file properties corem cm xmlimport properties  instead  you can use your own multiresultgeneratorfactory   the class is instantiated by the importer with java beans beans instantiate  if the class supports properties in the sense of java beans beaninfo  see sun javabeans api specification   these properties can be specified in the configuration file and are then set by the importer  for example  subdirgeneratorfactory requires the properties inbox and sleepingseconds   
  such property entries have the format   import multiresultgeneratorfactory property  propertyname     propertyvalue    and are specific in their meaning for the particular multiresultgeneratorfactory implementation  therefore  when configuring your own factory  you have free choice of names and number of properties  you are not confined to inbox and sleepingseconds    all properties are set by the importer as strings  for example  the class subdirgeneratorfactory must transform the value of sleepingseconds into a number    after the properties have been set  the importer obtains the actual generator for the document set from the factory with getmultiresultgenerator    in this situation  the use of factories has the advantage that the factory can use the properties to configure the generator in any desired way    getmultiresultgenerator   must return a multiresultgenerator object which supports the methods fail  next and success  next is called by the importer in order to create a new set of source documents  with success and fail  the importer informs the generator about the success or failure of the import of the source documents delivered by the previous next command  after calling success or fail  the importer no longer accesses the source documents    for example  on each next command  the generator created by subdirgeneratorfactory delivers a file directly from the inbox directory or all files of a subdirectory  after the complete contents of the inbox directory have been imported  the generator delays the next execution of the next method by the time determined in the property sleepingseconds  and then delivers the files which have newly arrived in the meantime to the importer  the success method moves the file or subdirectory to the bak directory  fail to the err directory    if the next method of the generator returns null  the importer ends  in the normal case  however  it delivers a new document set in the form of a multiresult  multiresult implements the result interface and therefore fits into the concept of jaxp next to streamresult  saxresult and domresult  a new empty multiresult is created via multiresultfactory getinstance   getmultiresult    new documents are added to multiresult via addnewresult  there are two variants of this method  
  the first variant is used for entering a document via a reference  the systemid must be an url which can be read by the importer as an inputstream  e g  a file path    with the second variant  the document data can be entered directly  the method returns a result in which the data can be deposited  the parameter format determines whether the result is a domresult  a streamresult or again a multiresult   sax is not yet supported in this version   valid values for format are streamresult feature  domresult feature or multiresult feature  in this variant  the systemid is not used as a data source  but  according to the jaxp concept  only as the basis for resolution of relative urls  depending on the result type  the generator can store the source document with domresult setnode or streamresult setoutputstream   write  or construct a more deeply nested document hierarchy with multiresult addnewresult   the nesting plays no role for the importer  it could at most be used by special transformers     a final example shows a simple next method which returns one file of a directory on each call     
  if no transformers are entered in the configuration file  the sets of source documents delivered by next are imported directly  of course  this only works if the documents are coremedia xml documents matching the document types of the coremedia sci  typically  however  a transformation of the documents is necessary to achieve the correct format  this is the subject of the next section  
  configuration of the transformer is done in the importer configuration file  all properties relating to transformers have hierarchical names and begin with the prefix import transformer  e g  
  the generaltransformerfactory interface consists of two methods  gettransformer and getfeature   the method getfeature is used in the sense of jaxp to find out whether the transformers created by this factory support certain source and result formats  for example  if your factory returns  true  for the call      
  this means that the transformers created with factory gettransformer name  accept both a streamsource and a domsource as input documents  therefore  if your transformer does not contain an xml parser  but is confined to input documents in dom format  the factory should return  false  for getfeature streamsource feature   on the other hand  if the transformer processes non xml documents  the factory must return  false  for getfeature domsource feature   because otherwise the importer tries to parse the supposed xml document  naturally leading to an error   this is also true for domresult feature and streamresult feature  if your transformer works internally with a dom tree  it should return it as such  and not as stream  if the next transformer in the chain expects a dom tree as input  this saves a new parsing of the document   in this version  sax is supported neither on the source nor on the result side   if a transformer should be only called once for the whole document set rather than for each source document individually  its factory must return  true  for getfeature multisource feature   in contrast to domsource and streamsource   multisource does not belong to jaxp  but is an extension by coremedia  if the transformer should return multiple documents  the factory must return  true  for getfeature multiresult feature   multiresult has already been introduced in connection with the document generator   the source and result formats of a transformer are completely independent from each other  for example  you can develop transformers which create a single stream document from all source documents  or which produce a set of dom trees from one stream document   to make the creation of factories easier  the importer api contains the class generaltransformerfactoryimpl  which implements the generaltransformerfactory interface  generaltransformerfactoryimpl can be configured with three properties  transformerclass  sourceformat and resultformat  transformerclass sets the class of the actual transformer  this class must be a derivative of javax xml transform transformer  for more details see below   and must have a default construction without parameters  sourceformat and resultformat give the source and result format  valid values are  stream    dom  and  multi    note  these values do not match those of the corresponding feature constants  the latter are opaque and are therefore not suitable for configuration via property files    the configuration of a transformer of the class mytransformer  which should be called individually for each document  which processes the source documents as stream and which produces multiple result documents  therefore appears as follows  
  generaltransformerfactoryimpl has further features  the transformers instantiated with this class automatically receive some parameters without these having to be explicitly configured  in particular  these are  the name of the transformer  i e  the value of the import transformer xx name property  a log object which the transformer can use for log outputs a coremedia object which enables access to the coremedia repository  details of the classes of these objects can be found in the importer api and in the scripting api   
  by using gettransformer the importer calls up an instance of the transformer from the factory  as name argument  the importer passes gettransformer the name entered in the configuration file for this transformer with the name property  in the example above  therefore   my special transformer    the factory can use this name  for example  for log outputs  however  the name is not intended for information that is semantically more important  for this purpose there are properties   the transformer itself is an object of the javax xml transform transformer class  the decisive abstract method of this class which you must implement within the framework of a derivation of transformer in order to realize your transformation is transform  in addition to this  transformer has a few other abstract methods whose function  however  is precisely specified by jaxp  to save you work  these methods are already implemented in the importer api  if you derive your transformer from com coremedia publisher importer abstracttransformer  rather than directly from javax xml transform transformer  you only need to implement the transform method   according to the getfeature information of the factory  the importer calls the transform method either individually for each source document in the form of a streamsource or domsource  or once for all source documents in the form of a multisource  in both cases  the importer calls the gettransformer method of the factory only once and transforms all documents with the same instance of the transformer  
  in the first step of the example a special transformer is created that generates any missing  base  elements in the source documents  these elements are optional according to the dtd  but in the framework of this example are vital for further transformation  the following section of an example document illustrates the position at which the  base  elements are located  
  in this example  the href attribute of the  base  element becomes the id of the document  therefore  all generated  base  elements within an importer process must have different href values  the transformer should ensure this by means of a configurable prefix  extended with a consecutive number  the transformer processes all source documents at once  here is the java code of this transformer  
  the transform method first creates a log output  the fact that the log object and the name are available to the transformer is a feature of the generaltransformerfactoryimpl factory  which we will use for instantiation of this transformer  the actual transformation is transferred to the generatebase method  transform only catches any exceptions and transforms these  if necessary  into transformerexceptions   instead of transforming all documents at once  it would also be possible to administrate the consecutive numbers with a static variable and call the transformer individually for each document  this would make the loop over the source documents and the construction of the multiresult unnecessary  however  this example is intended to show the use of the importer api   next  a factory is required which instantiates and configures the transformer  generaltransformerfactoryimpl is not sufficient  because it does not support passing of the prefix to the transformer  the following extension puts this right   
  the transformer now only has to be entered in the configuration file of the importer  since we had to change generatortransformerfactoryimpl anyway  in order to support the prefix  we have also coded the class of the transformer  basemaker   as well as the source and result formats  straight into basemakerfactory  in the configuration file  therefore  only a prefix needs to be specified in addition to the class and the name  
  in this step  a stylesheet for the transformation of xmlnewsstory documents into coremedia xml documents with the document type text is created  with the following example document we find out which information from the source format should be transferred to the target format  and then a stylesheet is created  
  the attribute href of the element  nitf head base contains the complete url of the document  the fetchfilename function recursively cuts off one level of the path using the     sign  until only the filename is left   now we begin top down with the transformation templates  we use the root as the entry point for generating the  coremedia  element  
  the  nitf  element is mapped to a  document  element  
  the version number  number  is irrelevant for import and is simply set to     in the version a corresponding field element must be generated for every field of our document type text  we set priority and source to default values  while autodeletedate  autopdate and images are left empty  within this example  only the heading and the actual content should be taken from the source document  for this purpose  suitable templates for body head hedline hl  and for body content are called  
  the heading results directly from the textual content of the  hl   element  inline markup is not taken into consideration here  
  jpeg  joint photographic experts group  is a lossy compression procedure for images standardized by the iso  the jpeg standard  iso dis          also contains a structural description of the corresponding files  but this definition is rather loose  so that exchange of jpeg images between different applications and platforms does not always function without problems   therefore  the jpeg file interchange format  jfif  is a minimal standard to organise the exchange of jpeg compressed images between different platforms and applications   a jfif file can be divided into sections introduced by the byte  xff and a so called marker byte  the first section consists only of the two bytes  xff and  xd   the latter byte is also known as soi  after this  a section always follows which begins with the two bytes  xff and  xe    ex  is also known as app  marker  after this marker follows the sequence  length    bytes   the number of bytes of the section  the marker is not counted  the   bytes of this length declaration are included  the value is almost always  x    x    identifier    bytes   the five bytes  x a  x    x    x    x    the first four bytes form the word  jfif   version    bytes   the two bytes  x    x    which designate version       unit    byte   unit of colour density  which can be      or    for the meaning  see the specification  x density    bytes   horizontal pixel density y density    bytes   vertical pixel density x thumbnail    byte   number of pixels in the x direction y thumbnail    byte   number of pixels in the y direction  rgb n   n bytes      bit rgb value for the thumbnail image  n x thumbnail   y thumbnail  if no thumbnail exists  the last entry does not appear and the number of bytes in the sequence above is    or  x    this is then the value of the length declaration   after the app  marker section  a app   marker section can follow  introduced by  xff and  xed  app     this section is used by photoshop for storing metainformation  e g  the title or the author  and consists of the following sequence  length    bytes   as above identifier  a series of bytes representing  for example  the string  photoshop      and ending with the zero byte  x    unknown     bytes   the contents of the photoshop section no longer belongs to the jfif specification and is not publicly documented in full  iim record    see following description   the iim record   is part of the  iptc   naa information exchange model   iim  specification  which describes a model for sending files from different sources between different computer systems  the core concept of the model is the electronic envelope  which represents the seventh level of the osi news model and can be freely used by applications  this envelope can contain data of any format  e g  text  images  graphics  audio and video  which is described by additional information in the envelope   the electronic envelope can consist of nine so called records  of which only six have been defined so far  each record is numbered from   to   and contains so called datasets  which always consist of a unique tag and a data field  only a few datasets have a fixed byte length  there are two types of dataset  standard datasets and extended datasets  the latter are used when the number of bytes in the data field exceeds         the tag in the standard dataset consists of five bytes  which have the following meaning  tag marker  stands at the beginning of the tag and always has the value  x c  record number  number of the record  i e  a byte from  x   to  x   dataset number  number of the dataset in binary form data field octet count  together  bytes   and   give the length of the data field  the seventh bit in byte   is always    this results in a maximum length of         record   contains datasets  which contain metainformation about the news object  in the following  some dataset numbers are listed with their meaning   record version   x     all datasets in record   are optional  however  when a dataset does exist in record    then the dataset must also contain the number    the data field contains the version of the iim specification for record    object name   x     short description for the object consisting of a maximum of    bytes special instructions   x     editorial notes which relate to the use of the message  e g  transmission bans or warnings  max      bytes  date created   x     creation date of the message in the iso     format ccyymmdd time created   x c   creation time of the message in the iso     format hhmmss     hhmm by line   x     name of the author  photographer or graphic artist  max     bytes  by line title   x     title of the author  photographer or graphic artist  max     bytes  city   x a   location of the message  max     bytes  country primary location code   x       byte country code according to iso     or iptc headline   x     headline  max      bytes  credit   x e   message supplier  max     bytes  source   x     original owner of the message content  max     bytes  caption abstract   x     textual description of the message content  max       bytes  writer editor   x a   name of the person who was involved in editing  max     bytes  
  the example website created in the following chapters is supposed to support a chain of restaurants   chez andre    for each day there are    different dishes on the menu and every restaurant offers the same    dishes  the website shows the menu and gives a description and a picture of each meal  the dishes are categorized in meat  fish and poultry  there are four dishes in each category  on the home page of the website the three dishes of the day  one from each category  are shown  on the left is a menubar linked to the different categories to have a look at the other dishes  the normal  or anonymous  user is only allowed to see the three dishes of the day and the fish dishes  to see the other meals he needs to login  you find the login link atop of the menubar on the left   
  for the example three document types are needed  the document types describe how the documents are constructed   dish  contains the information about the different dishes  consisting of name  description  ingredients  calories  a picture and price of the dish  picture  contains name and image of the dish page  contains the information of the title page  consisting of name  headlinepicture and a couple of dishes of the day  
  now the first dish can be added to the menu  lets add a fish dish   click the right mouse button in the folder view on the new directory fish and select new dish  as can be seen  all other document types created in the last chapter can be selected here   the new dish needs an identifier to be distinguishable from other dishes in the database  name it spicytrout and click  okay   a new document window for the dish opens up   
          for every field defined in the document type dish a field can be seen in the new window  enter a name  price  description and calories for the fish dish     now a picture should be added showing the trout      create a picture document first  go back to the main editor window  click with the right mouse button on the fish directory and select new page from the context menu      name the picture e g  spicytrout pic and click  okay   the picture window pops up      enter a name for the picture in the name field      click with the right mouse button on the image field  select load from the context menu and load a jpeg picture with the trout from the filesystem      now go back to the window for the fish dish and click the right mouse button on the field pictures  select insert with dialog  select the picture spicytrout pic from the fish folder and click  okay   the first complete dish has now been created  please create some more dishes now  with at least one dish in each category    the last document to be created is the page document  this has to be placed in the main folder menusite      create a page document first  go back to the main editor window  click with the right mouse button on the menusite folder and select new page from the context menu  after providing a name like  food of the day  some of the dishes can be added as links      click the right mouse button on the content field and select insert  with selection dialog   now select a dish from one of the categories  you can add several dishes to the content field      now you have to provide a title image for the page  click with the right mouse button on the image field  select load from the context menu and load a jpeg picture with the logo from the filesystem    before the website can be seen  templates have to be created  templates describe how the content will actually be displayed  this is the most complicated part  as programming with jsp  java server pages  and html  hyper text markup language  is needed     
  in the previous chapter the content of the website was created  now the content should be displayed online  to accomplish this  templates have to be created which manage the displaying of the documents  lets have a look at the document structure of the website   open a webbrowser and enter the address      http   localhost      coremedia develop    this is the address of the locally installed coremedia content server  that should be running on your computer  now select browse document model and select expand all in the opening browser window  the following picture should appear  
  the first line       coremedia page cacheable  false        makes the images non chacheable  this is necessary for the access control  if cacheable is set to  true  for any template and the template is changed after it was displayed in a browser  the template has to be invalidated or the old view will be displayed    invalidating a template is done with the developer page  enter http   localhost      coremedia develop  in the browser and click invalidate templates  either all templates or specific templates can be invalidated  if you have changed a template and nothing seems to change on the website  you probably forgot to invalidate the old template  if a new template has been added or an old template has been removed  you also have to update via http   localhost      coremedia develop  and clicking update views   the next line in the jsp code import links to foreign modules  in the  jsp usebean  element the java bean is named which is used to access the context of the request  small jsp and large jsp then initialize the variables document and property with the document object and the content of the property name respectively  then the html tag  img      is output  for a full description of the code refer to a jsp manual  the developers manual for coremedia cap and the api javadoc    the property type blob image is not to be confused with the document type picture which holds an image  now the following template can be added as render jsp to the template directory for picture    tomcathome  webapps coremedia templates picture render jsp 
  the template for picture uses the small jsp template of property type image  as can be see in the codeline  uri imginclude   document getpropertyuri  image   small      the following line includes the output of small jsp directly in the html page that is eventually generated   context include pagecontext  imginclude     now you can have a look at one of the pictures  to accomplish this enter the following url in the browser  where spicytrout pic is the name of the picture residing in the fish folder   http   localhost      coremedia generator menusite fish spicytrout pic templateid render html  the browser displays the picture using the picture template render jsp    now change the line in picture render jsp where imginclude is set to  uri imginclude   document getpropertyuri  image   large      if the picture is reloaded in the browser with the same url the picture comes up large  
  in this chapter  templates  for image display belonging to a dish document are described  in the tutorial it is assumed  that dish images can have different sizes  so templates need to be written for resizing images  as image resizing is directly concerning property data  the blob image  templates for displaying images should be added to the directory for property data  add the following two templates small jsp and large jsp to the directory     tomcathome  webapps coremedia templates proptypes blob image       the template small jsp will show the images with a width of     pixel    the template large jsp will show the images with a width of     pixel   in both cases resizing is done by the browser  
  the document type dish consists of several fields  price  calories etc   and a picture of the dish  with the following render   template for dish  located in the   templates dish directory  these fields are simply displayed in the browser  the next code example shows the template  
  the different properties of the dish document type have to be handled in different ways   xmlproperty     the description of the dish is stored in a xmlproperty and has to be unparsed  at first  context include      is called what is a convenience method for  jsp include page      context getincludeuri uri      flush  true      the unparsing is done by the template proptypes sgmltext default jsp which uses the domunparser class  stringproperty     this property can be easily accessed via document getstringproperty  ingredients    i e  the content of the stringproperty ingredients is directly inserted in the html page   linklistproperty     the picture for the dish is included via the linklistproperty pictures  at first  the content of pictures is got via getlinklistproperty  pictures   then this picture document is included with the template picture render jsp that was created  and renamed  in the last chapter   for a full description of the code refer to a jsp manual  the developer manual for coremedia sci and especially the api javadoc    now you can look at the render view of a dish  rolledporc  in the folder meat by setting the browser to   http   localhost      coremedia generator menusite meat rolledporc  templateid render html  your browser should display something like this  
  now a second view for dish should be created that displays a teaser  this template is supposed to give a short overview when a couple of dishes are displayed in a list  like on the  food of the day  page   the template renderteaser jsp is basically a reduced version of render jsp  
  you can look at the page  food of the day  by calling the url   http   localhost      coremedia generator menusite foodoftheday  templateid render html 
  though folder is actually no document type  templates can be written for displaying folders and their content  in the coremedia editor the main folder menusite and some folders for dishes  meat  fish and poultry  were created in this example  the folder menusite holds the page document with the  food of the day   which should be displayed  the dish folders hold no page document but several dishes which should be displayed  the following template folder render jsp distinguishes between these two cases  if there is a page document in the current folder it displays its enclosed dishes via calling render   of document type page  if no page document exists  it displays the dish documents in the folder  
  now the main template for the menu site has to be created  this template is called whatever dish  page or anything else is looked at  it displays a headline and a navigation bar with a search field and it includes the jsp for the login  as all documents inherit main   from the document type resource  you just have to replace resource main jsp with the following code  
  the headline of the website is the image inserted in the page document  it is displayed on top of the website as a table row  in the next row  the login jsp is included using   string loginuri    resource geturi  login      and  a href     loginuri    login  a   the navigation bar and the  window  where the dishes are displayed are two cells in another html table  the navigation bar consists of links to the  dish folders     the  dish window  on the right hand side displays the resource on which the main   template is called  this is done by executing the command      context include pagecontext resource  render           if resource main   is called on the main folder menusite  the template page render   is called  if it is called on a subfolder like  poultry  folder render   is called    look at the site by selecting the folder menusite in the editor and clicking preview     for information you can contact coremedia at info coremedia com  
  here are some hints for known problems  
  virtual machine crashes can be experienced when using certain combinations of kernel glibc under linux with sun hotspot     to      the crashes were reported to occur mostly on startup  sun jdk     does not show the problems and neither does ibm jdk for linux   the problems can be fixed by reducing the default stack size    at bash shell  do ulimit  s       at tcsh use limit stacksize        glibc     linux     users should also define an environment variable   export ld assume kernel          
  this manual might not cover all eventualities  but introduces concepts  ideas and the technology  our manuals undergo permanent revision  and we are closely tracking progress in development and experience   to make our manuals valuable tools in development and implementation of the coremedia smart content infrastructure  do not hesitate to contact us for ideas and suggestions via documentation coremedia com   
  the goal of multi tier applications is to separate presentation  business objects  and business logic of an application   for a web application based on wage  this can be a coremedia resource  business object  that is displayed as an html form  presentation   on submitting the form  some action  business logic  is performed  e g  to update the coremedia resource with the data submitted   this mapping from web form to coremedia resource doesn t have to be a one to one mapping  this means that on the one hand a single web form should be able to write content to different data sources  these can be multiple coremedia resources   on the other hand  not all properties of a coremedia resource have to be edited in one form but may be distributed to several forms in a wizard like fashion   as there are already many general purpose web application frameworks available  we didn t want to develop yet another one and therefore decided to let wage extend struts   some of the advantages of struts are   clean model   view   controller design usage of javaserverpages  jsp  for templating open source widely in use  the following chapter gives a short overview of the struts web application framework  it can t replace the struts documentation  but explains the basic concepts you ll need when developing wage based web applications  for further details on struts  please refer to the struts user and development guides  
  since java frameworks like the struts web application framework often use the javabean pattern to access business objects  wage allows you to access coremedia resources as javabeans   for example for a coremedia resource  every implied resource property and every document property is accessible as a bean property of the resource object   as coremedia document types and workflows can be defined individually in every project  there can t be a single class or an interface that represents all coremedia resource properties as bean properties for every document type  there has to be some kind of dynamic  but nevertheless javabean conformant interface   as  normal  javabeans are not that dynamic  coremedia client document objects implement the dynabean interface  org apache commons beanutils dynabean  from the jakarta commons project  the bean utilities framework takes into account the shortcomings of javabeans when it comes to flexibility  in some frameworks like the jsp     expression language  java util map is used for dynamic beans  while a map is arbitrarily dynamic  it lacks some kind of typing and reflection of properties  a dynabean is a java object that supports properties whose names and value data types  as well as values  may be defined during runtime  each dynabean has a dynaclass that describes the  fixed  set of typed properties for this dynabean  like java lang class does for  normal  java objects  the only difference is that a dynaclass itself can be constructed at runtime  for further information about dynabeans and dynaclasses  see the online documentation of the beanutils component of the jakarta commons project   another problem you face when developing web applications is that web forms only offer very limited capabilities to edit typed data  in fact  html only supports strings  input fields   booleans  checkboxes   and enumerable values  selectors   combo boxes   business objects like the coremedia resources and workflow objects need additional data types like dates  numbers  rich text  and lists of  references to  objects   the wage api provides objects that add dynabeans accessebility to active delivery server objects and workflow client objects so that these can be used conveniently in web applications  
  configuration of offline operation involves  above all  the following options which must be set in the config bsh file    setpregenerateroot  the root for generation is configured with this property  the format must correspond to that of the configured resourceuriformat  without prefix or host port  the root folder page as root is therefore configured as follows      generator setpregenerateroot   index html     setresourceuriprefix  the namespace of the generated pages can be freely chosen  the generated pages must only be placed appropriately in the document tree of the web server  example  all generated uris should begin with  site instead of  coremedia generator      generator setresourceuriprefix   site      for passing on the generated pages  a file uploader can be used  for example    setuploader  an implementation of the interface hox corem servlets upload fileuploader can take over the distribution of the generated pages to other computers      generator setuploader new myftpuploader  www mysite com    ftp    ftp     usr share htdocs        for more details  see the developer manual   
  to simplify development of coremedia web applications with content editing and workflow functionality  wage extends the struts web application framework by providing implementations of common struts interfaces or extensions of struts classes with coremedia support  you can either use these implementations for developing your own web applications  or further extend them to implement additional functionality specific to your needs   both the coremedia authoring server and struts dispatch requests to jsps  struts uses the actionmapping and coremedia invokes its template finder  usually the viewdispatcher  which interprets symbolic  template  names as a view  method  of the current resource or property   with wage it is possible to use both  struts  dispatching mechanism should be used to invoke high level actions  like login  which are not directly associated with a coremedia resource  the coremedia template finder should be used for dispatching to templates rendering coremedia resources and properties  for example as the result of a struts action  see resourceactionforward below   the coremedia templates then again use the struts tag library  for example to submit a form to a struts action     wage implements this integration by providing you with the following classes  which are implementations of struts interfaces or extensions to struts classes  
  this chapter demonstrates how wage can be used to build your own customized coremedia web applications with content editing and workflow functionality   we will use the document type model of the menu site sample project as known from the coremedia sci developer series with the following document types  
  this chapter explains some of the basic features of wage  with the help of an example   how a property of a coremedia resource can be read and changed  it shows the basic steps necessary for implementing your own wage based web application   implementing a view which will render a form for changing property values of a coremedia resource implementing an action performing the business logic  for example to update a coremedia resource implementing an actionform  which is used to transfer data between the model and the view layers configuring your web application  this example also explains some of the most common struts features and tags  for more details on struts please refer to the struts documentation  
  web application generator extensions  wage  run in the coremedia webediting server  a special active delivery server   the webediting server generates and delivers web forms and dhtml pages which allow the user to interactively change document properties  create new folders and documents  accept offered tasks  modify workflow variables  and so on   wage offers a framework which consists of server side components  an extension to the active delivery server api and controller components based on jakarta struts  and client side components  based on dhtml   javascript   these modules are reusable and flexibly adaptable to the web application s needs   the webeditor is a wage web application that runs on the webediting server and allows to modify the coremedia cms repository and participate in workflows independently of project specific document types and workflows   it can be considered a web equivalent of the coremedia editor and offers most of that editor s features  requiring only a web browser  the webeditor utilizes the apis and components offered by the wage framework  
     property name   java type   method   description   id    integer   resource   getid     resource id   name    string   resource   getname     name of the resource in its folder   folderid    integer   resource   getfolder   getid     id of the folder in which the resource is located   creationdate    calendar   resource   getcreationdate     creation date of the resource   creator    user   resource   getcreator     user who created the resource   modificationdate    calendar   resource   getmodificationdate     time of the last modification of the resource   modifier    user   resource   getmodifier     user who last modified the resource   isdeleted    boolean   resource   isdeleted     is the resource marked as deleted    ischeckedout    boolean   resource   ischeckedout     is the document checked out for editing    version    integer   document   getversion   version number   editiondate    calendar   document   geteditiondate     creation date of this version of the document   editor    user   document   geteditor     user who created this version of the document   approvaldate    calendar   document   getapprovaldate     time of the approval of this version   approver    user   document   getapprover     user who approved this version   publicationdate    calendar   document   getpublicationdate     time of the publication of this document   publisher    user   document   getpublisher     user who published this version   isapproved    boolean   document   isapproved     is this version approved    ispublished    boolean   document   ispublished     is this version published    lastname    string    the name of the resource on the live server  this property is empty for unpublished resources    lastfolderid    integer    the id of the parent folder of this resource on the live server   syncdate    calendar    date and time of the last successfull publication of the resource   ismoved    boolean    is this resource moved    isrenamed    boolean    is this resource renamed    isnew    boolean    is this resource new    isunarchived    boolean    is this resource unarchived  
    class   description  hox text xml xmlunparser   an xmlunparser is a saxunparser producing the concrete syntax of xml from a stream of sax events efficiently  in contrast to the sgmlunparser  there is no point in cloning an xmlunparser  because there is no configuration  neither a character entity map nor a dtd   user defined character entities are not needed when processing xml  so the xmlunparser does not support them  if you need to configure  additional character entities  to support really old browsers or sgml applications   use a sgmlunparser instead  hox text xml prettyxmlunparser   a prettyxmlunparser is an xmlunparser producing pretty xml on a given target writer  since only programmers need to  read  xml this is actually a debugging tool  although there are other uses   you may customize the printing process by setting the indenter string and specifying how many characters shall be printed in a character content line  hox text xml tidyxmlunparser   a tidyxmlunparser is an xmlunparser producing xml with minimal whitespace content  whitespaces are                      the xml space attribute is ignored  each occurrence of whitespace is removed or collapsed to a single space   use this class when whitespaces are not important  ie  no source code content  no html pre elements etc   and size is a concern  hox text xml xhtmlunparser   an xmlunparser producing xhtml on a given target writer  for xhtml compatibility with current html browsers  we insert a space before the empty tag closing delimiter  i e  we write   tag       secondly  old browsers  e g  netscape       do not deal correctly with some empty xml tags  therefore the following tags are printed as a sequence of opening and closing tag  e g   textarea   textarea  instead  of  textarea      textaraea  code  b  i  pre  script   note that the produced xml is still well formed  i e  parsable  and identical in information content to the events received   the xhtmlunparser passes all whitespace to the output unmodified  if you need human readable output and your input does not contain appropriate whitespace  use a prettyxhtmlunparser   use the xhtmlunparser when you  need to produce machine readable xhtml with exact whitespace  hox text xml prettyxhtmlunparser   an xmlunparser producing readable xhtml on a given target writer   for compatibility with old browsers  empty xml tags are treated specially  firstly  the xhtmlunparser always writes a space before the slash  e g   br    instead of  br     secondly  old browsers  e g  netscape       do not deal correctly with some empty xml tags  therefore the following tags are printed as a sequence of opening  and closing tag  e g   textarea   textarea  instead of  textarea      textaraea  code  b  i  script  in addition  the xhtmlunparser does some prettyprinting  reformatting whitespace and line breaks   it uses the same algorithm as the prettyxmlunparser  with the following exceptions      within anchor   a   elements all whitespace is removed  this will avoid the trailing lines from image elements  when viewing xhtml produced by the prettyxmlunparser      no pretty printing is done inside textarea elements      if a tag contains only character data  there is no newline before and after the tag   note that the produced xml is still well formed  i e  parsable   use instances when producing xhtml  which you need to read and which contains anchors and textareas  if you only need the indentation   use the prettyxmlunparser  if you only need machine readable xhtml  use the xhtmlunparser  hox text xml escapingxmlunparser   the escapingxmlunparser is an xmlunparser that passes its output through an xmlescapingwriter  that is  the unparsed xml is completely escaped using the minimal xml entities and can be used as character data inside another xml document   this class is especially useful as the sgml unparser for coremedia text properties  the xml of the text properties will be escaped  so the xml for the overall  document will be valid xml even without namespaces   
  the generator s getinputstream   method requires a cacheable template  
  working with cacheable templates can be a burden to developers  since the templates have to be reinvalidated frequently via the admin pages  a good workaround is to include a little button that is included in every page to be developed and which links directly to  coremedia develop templates jsp uri all  a click on this link will purge the cache  
  if you like the prospect of automatic layout changes through the publishing of style sheets here s what you can do  decide upon a dtd for the xml to be transformed  generate testdata for this dtd  enable the style sheet designers to be able to transform this data offline for testing purposes  once they re done  copy and paste the finished style sheet into the webeditor  test again and  then publish  
  let s begin with the view  we want to render an html form with an input field for the string property  name  of our document type dish  a jsp rendering such a form using the struts tag libraries could look like this  
  here is a short explanation of the struts tags used in this example   the  html html  tag just renders a standard html html tag   the  html form  tag outputs a standard html form tag  and also links the input form with a javabean subclassed from the struts actionform object  each field in the form corresponds to a property of the form s bean  when a field and property correspond  the bean is  populated  with the request data from the form  this means it stores the user s input when the form is submitted to the controller servlet  the name of the bean and its class can be specified as a property of the form tag  but should rather be omitted  if omitted  the actionmappings database  loaded from the struts config xml file  is consulted  the form bean name is then retrieved from the corresponding action given by the form s action attribute   the  html errors  tag displays a set of error messages prepared by a business logic component and stored as an actionerrors object  a string  or a string array in request scope  if such a bean is not found or the list of errors is empty  nothing will be rendered  this way it is possible to reuse an input page  like our renderlogin jsp  to display error messages   the  html text  tags render standard html text input fields  the property attribute defining the corresponding bean attributes with which the form is first populated and which are then used to store the user s input when the form is submitted   note that when using the generic wage resourceactionform  implementing the dynabean interface   the property attribute has to correspond exactly with the document property as defined in the coremedia document type model  so if the document property is defined with an uppercase first letter in the document type model  you also have to use an uppercase first letter for the property attribute  if you develop your own actionform implementing specific getter and setter methods  the property attribute has to start with a lowercase first letter  as defined by the javabeans specification   the  html submit  tag renders an html  input  element of type submit  which is a simple submit button   for a complete reference of struts html tags  please refer to the online struts html tags reference  the struts bean tags can be found in the struts bean tags reference  
  now that we ve seen how the the view can be rendered  we ll take a closer look at the action that is processed after submitting the form  as defined in the form s action attribute   struts actions extend org apache struts action action  and have to override the method public actionforward execute actionmapping mapping  actionform form  httpservletrequest request  httpservletresponse response   which will be called when the action is executed   an implementation of this method that simply tries to commit the changes made so far  by committing the current changecollector  could look like this  
  with script based installation  all files are moved to the installation archive without checking  they will be replaced by newer versions  
  coremedia wage is a set of building blocks you can use to develop your own web application with content editing and workflow functionality  these building blocks include   the coremedia authoring server which manages changes made by web clients extensions to the struts web application framework  allowing rapid development of coremedia web applications a wage tag library  which encapsulates much of the functionality to be used in jsps view components like property editors or a focus management component  
  it is important to submit the current resource as a request parameter  e g  as a hidden parameter as shown above  so that the right resource is modified and also for the coremedia resourceactionforward  see below  to work  the parameter name to be used is defined as a constant in the cmrequestprocessor  but you may also use the name  resource  directly   it would also have been possible to write plain html with java scriptlets instead of using the struts tag libraries for most of the tags used in this example  the next code block shows the html that will be generated out of the tags of this example if no error occurred  
  with the new coremedia webeditor  or your own web application based on wage  clients use a web browser  http  to communicate with the coremedia authoring server  changes to coremedia resources are collected by the authoring server and only written to the content server when a set of changes is committed by the client   nevertheless the client is always able to preview the result of his changes  if the result is not satisfying  the editor may also revert some or all of the changes made so far  or continue editing  and everything without actually having to write to the content server   the authoring server also needs only a single session to the content server and the workflow server  which is then used to establish lightweight sessions for the actual clients  these lightweight session require much less server resources than a normal session  therefore reducing load and further improving the scalability of the coremedia smart content infrastructure  
  now that we ve shown some of the advantages of coremedia wage  we ll take a closer look on the architecture and the concepts wage is based upon  
  when developing your own coremedia web application  you will be extending the coremedia authoring server web application  which is based on the struts web application framework  by implementing own forms for editing resources  actions which are processed when a form is submitted  and so on  wage simplifies this development by providing the building blocks mentioned above   the next chapter describes how client side changes are managed by the authoring server  
  dynamically accessing properties also works for coremedia workflow objects  the variableassignment interface  com coremedia cap wage variableassignment  extends the dynabean interface and therefore allows you to access workflow variables through generic getter and setter methods   in coremedia workflow definitions  a variable can be defined either globally inside the process or locally inside a task  the context in that the variable is defined is its name space  but does not imply any scoping or access semantics  what follows is a summary of the semantics of variables as described in the coremedia workflow developer manual   variables can only be read and modified by a user using a client view on the set of all variables that is defined as either the initial process client view  initialclient   the  running  process client view  client under process   or  most commonly  a client view of a user task  client under usertask   a client view specifies a subset of all  globally or locally defined  variables of the current process  and for each variable  whether it may be read  reads or  additionally  modified  writes   for variables referring to coremedia resources  a client view also specifies whether the referred resource it intended to be modified  contenteditable   a variable assignment  com coremedia workflow wfvariableassignment  is essentially a structure consisting of a variable name  its read only and content editable state  and the variable s value   wage represents each type of client view definition as a dynaclass with a property for each variable  called a variable assignment type  com coremedia cap wage variableassignmenttype   for each process instance  there are two variableassignmenttype  dynabean  instances  one for the initial and one for the running process client view  for each user task instance  there is one variableassignmenttype instance for its client view   the workflow api usually works with wfinstance objects  similar to the resourcefactory for coremedia resources  there is a variableassignmentfactory  com coremedia cap wage variableassignmentfactory  that can be retrieved from the wageconfig bean  from this factory  you can construct variableassignment and variableassignmenttype objects from the corresponding workflow objects  
  one very important javascript component is the wage focusmanager  the focusmanager is responsible for managing the single editor that has the focus within a given frame or frame hierarchy  it must be installed prior to any property editor   you can install a focusmanager by calling wage focusmanager create    this will create a focusmanager with the name  wage focusmanager    the focusmanager is installed in the current frame and can later be retrieved by calling wage focusmanager find    this not only tries to find a focusmanager attached to the current frame  but up the window hierarchy to the top frame  in this way it is possible to reuse one focusmanager for multiple frames   the currently focused editor may be retrieved with the call wage focusmanager find   getfocus     you can also attach a focuslistener to the focusmanager  which will be notified whenever an editor receives or loses the focus  this can be useful for example to dynamically change which command buttons are displayed on an editing toolbar according to the currently focused editor  a focuslistener can be attached to a focusmanager like that  
  the coremedia installer allows you to install wage  which will create a context with the name  wage  in the webapps directory of jakarta tomcat  or simply the  wage  context in the installation directory if you choose not to install tomcat   this context includes all wage components  that is the classes  the javascript components  and the tag library   to follow the examples hands on  download the wage examples in the file cap examples jar from the coremedia website  for detailed step by step instructions about installing and running the examples  see the readme txt file contained in the wage directory in the examples file  
  with wage you can easily develop web applications which allow to edit coremedia resources in a wizard style fashion  in multiple steps   
  at the same time it is possible to edit multiple coremedia resources within a single html form  therefore allowing to hide the  possibly complex  content model from the user  
  with java web start  jws  you can download the coremedia editor from the cm server and start it  jws is a deployment technology from sun microsystems  it guarantees that users always run the latest version of an application  eliminating complicated installation or upgrade procedures  on every launch  jws checks the web server  in this case the content server   to see if a new version of the application is available and  if positive  automatically downloads and starts it    an application can be launched    from a web browser by clicking on a link    from jws s built in application manager  tracking usage of applications and providing quick access to most frequently used application  or from desktop icons or start menu  windows only     
  the launch method has no impact on the operation of the application  for more details  please see the jws relevant pages at sun microsystems  website at http   java sun com products javawebstart      in order to webstart your coremedia editor  you have to prepare the cap server first  and then install jws on your computer  the next pages outline server side preparations and the setup procedure on your local computer  
  now you are able to begin to install jws on single computers  the following disk space is required for installation  
  the next chapter explains how wage extends the struts features described above and therewith simplifies the development of struts based coremedia web applications  
  database schema  the database schema for all coremedia servers has slightly changed  however  the server will automatically update the schema in the database at startup  if you had set up your server with your own sql schema scripts  adjust them accordingly  
  users and groups  starting with sci      users created on the master live server are not automatically replicated to the slaves   up to cap      the group that contains special users like webserver or replicator was named system  in sci     this group is named system  all lowercase   for new servers  the new name is used automatically during initialization  but for existing servers you have to rename the group manually using the editor  doing so avoids problems when replicating rights rules to new live servers  
  api changes  some api enhancements have been made to the delivery server api  since many classes have been refactored to be interfaces  check that your code still compiles and runs against the api  for example  the way to instantiate a new context object outside the active delivery server has changed   
  view dispatcher     in order to accomodate for the possibilty of defining xml properties of multiple dtds  the viewdispatcher has been enhanced to define property templates for each and every dtd  further  property templates can be defined for each document type  see the programming manual  if you have defined your own property templates  adapt them to the new directory structure     in general  the     delivery server does not require the definition of a loopback port in a servlet     compatible servlet container  such as tomcat       in this case  change your config bsh to not specify a loopback port  a loopback port is only necessary if you want to generate query cached pages from within a generator context that has no request and response set  this especially applies to the pregenerator which operates autonomously without external requests        
  logging  the delivery server uses the standard servlet container s logging facility by default now  previously made changes in the log properties still work  however  
  the     delivery server now ships with tomcat      if you are planning on using this servlet engine  make sure your existing application still runs flawlessly in this container  
  api changes  if you have made any programmatic enhancements to your workflow  keep in mind that there have been some minor api changes in the workflow client api  make sure your code still compiles and runs   
  the previous webeditor has been replaced by a new one  a more flexible  more scalable web editing application  based on the new wage framework and running in the authoring server   
  if you plan to integrate an ldap server  be aware that webdav enabled clients cannot use digest authentication anymore  without ldap  everything works as it did before  with ldap  use either basic authentication or  if enabled and required  basic authentication plus ssl   we re not discussing performance issues or ssl in tomcat issues here   
  this example shows how wage can be used to develop a  wizard style  web application  where coremedia resources can be edited in multiple steps  resource properties are shown for editing on different pages  and at the end of the wizard there is a preview of the resource with the changed properties  the user may then decide if he wants to commit the changes and make them permanent  or roll back all changes   this example also demonstrates how to use multiple wage changecollectors  when editing a resource  a new window is opened and an own changecollector is used for storing the changes made to this resource  therefore it is possible to edit multiple resources simultaneously without interference  changes can be made to different resources in different windows  the changes are not visible in the other windows until they are committed  on committing the changes  only the changes of the current resource are committed and are then visible in all other windows   in this example  the resourcelistactionform provided by wage is used  so there is no need to define a custom actionform subclass   we will also integrate basic rich text editing functionality into this example  using the wage richtext editing components  and write a custom toolbar for this purpose  
  as we want to develop a wizard style action  we need a way to send some command that tells the action what to do  e g  to commit the current changecollector  or to forward to the next step of our wizard  wage s resourcelistactionform provides a parameter called resourcecommand that can be used for this purpose   so our action has to process the following steps in its execute   method   evaluate the resourcecommand parameter and process it  either by committing or by rolling back the current changecollector  forward to another view  depending on the resourcecommand parameter  
  first  the resourcecommand parameter is evaluated  our action supports the following commands    complete   try to commit the current changecollector and if successful  continue with the action forward complete  otherwise with failure   abort   empty the current changecollector by calling rollback   and continue with the action forward abort   continue   continue with the action forward continue   back   continue with the action forward back   as you see  the symbolic names for the commands and the respective  successful  forwards have been chosen to be the same  this makes the implementation of the wizardaction fairly easy  
  the view for this example consists of several coremedia templates   a view dish render that displays one dish by including dish renderproperties and providing an edit link that invokes the wizard in a new window  a view dish preview that displays a  preview  of one dish by including dish renderproperties  a view dish renderproperties that renders some properties of a dish  one template for each editing step  dish rendereditstepn with n        a view dish preview  and a helper view dish dialog as well as a static helper html page closedialog html   the wizard is opened in a new window  since at the end of the wizard  the original window should be updated  reloaded  and raised  we need some helpers  the dish dialog view constructs a frame that contains the actual wizard  this is necessary because the javascript window opener information would be lost when loading other pages into the new window during the wizard steps  with the frame constuct  the outer page always remains the same and thus the window opener can still be retrieved  the html file closedialog html contains javascript code to reload and raise the current window s opener and then close the current window  so that the original page is updated and the dialog disappears   the template rendering the resource  dish render  renders a link to the dialog view  we set target   blank  to open the editing wizard in a new window  thereby allowing to simultaneously edit multiple resources  in the link to the generic dialog view  we hand in the name of the action that should be invoked inside the frame   the  bean define  tag copies an existing bean property into a new bean  in our case  the property resource of the bean context  which holds the current coremedia resource  is copied into the newly created bean document with the type clientdocument  it can then be used as a page scope bean  default scope  and as a java scripting variable   the  wage css  tag is used to include the cascading stylesheet necessary for displaying rich text with all attributes  
  we are using the generic wage resourcelistactionform for this example  so we only have to configure  apart from the standard wage and struts configuration  the actions and the  properties file for our new richtext editing command   we have to define several actions  one to start the wizard  one for each editing step  and one to commit changes after the preview  these have to provide appropriate actionforwards  using the wage resourceactionforward  for the different forwards that can occur in each situation  since abort is used in every action and always forwards to the same url  it is defined as a global forward  all other forwards are defined locally for the respective action  
  this example also demonstrates how to use the richtext editing features of coremedia wage  the description property of a dish document is an xml property with the coremedia richtext     grammar  for editing this property in the second step of our wizard  the following steps are necessary     include the necessary stylesheets for editing    load all necessary wage javascript packages    install a wage focusmanager    render the commands you want to be available for richtext editing  for example by rendering a wage toolbar    include the property for editing   this could look as follows  
  this template first includes the necessary stylesheets  apart from the stylesheet necessary for displaying rich text  there is another one  wage css  required for editing  e g  for correctly displaying the wage toolbar   then  the wage javascript packages that are necessary for using the wage focusmanager and the richtextediting features of wage are loaded   as we are using the focusmanager only within this template and therefore it hasn t been created before  we have to install a new one by calling wage focusmanager create     for richtext editing  commands  like bold or italic  have to be executed for the currently selected text  allowing the user to choose these commands can be done by rendering a wage toolbar  see below    then  we include the actual description property for editing   finally  we render the usual wizard buttons  
  as we have created the focusmanager without specifying a name  with wage focusmanager create     the default name  wage focusmanager  has to be used in the  wage toolbar  tag   for our new  wizard command   some properties like tooltip and icons have to be defined  which is done in a   properties file that has to be referenced in struts config xml  the properties can also be localized by providing language specific   properties files  i e  your de properties   
  different operations are possible or mandatory during the execution of a task instance to enter or leave the different states  which operations are allowed to a user is defined by a configurable rights policy  the following table shows how to leave or enter the different task states  a user task always requires its performing user to have the appropriate rights to perform an action which changes the state of a task  
  changes at classes that are used in uploaded workflows should happen with great care and intensive testing  the classes must be compatible with the uploaded xml workflow definition   
  the semantics must work in any still existing instances of older workflow definitions  
  since the workflow beans of a given definition are shared by all the definitions instances     no workflow bean must store any state in a local variable  state is always restricted to an instances context    no workflow bean must cache any objects requested from the server or client instances such as objectrepository  directoryservice  coremedia content management server session etc  these objects may carry session specific information that is only valid to the current bean invocation    every bean must be reentrant  i e  is must be thread safe and never use nested synchronization   
  all properties can also be internationalized by overwriting them in a language specific   properties file  for example your de properties  all   properties files also have to be referenced in struts config xml as message resources  so if you have a  your properties  file  and maybe additional localized versions  your de properties  and  your en properties    and the   properties files are contained in the package  package   the message resources definition in struts config xml should look like that  
  the new command can then be defined and registered for use with the following javascript code within a wage toolbar  
  after the command has been defined and registered as shown above  the command can then be used with the  wage cmdbutton  tag like the predefined commands within a wage toolbar  
  tooltip  image  etc  will then be rendered automatically according to the language and  toolbar settings  the icons have to be placed either in a   jar in your webapp s web inf lib directory or as single files into web inf classes  always considering the package names  
  tooltip  image  etc  will then be rendered automatically according to the current language and toolbar settings  the icons have to be placed either in a  jar in your webapp s web inf lib directory or as single files into web inf classes  always regarding the package names  
  you can configure the jmsreceiver using two files    jmsreceiver properties     this file contains the log configuration and the name of the xml file used for jmsreceiver configuration   jmsreceiver xml     this file is used for the actual jmsreceiver configuration    both are located in the properties corem directory    configuration of logging   logging configuration is done in the jmsreceiver properties file  the jmsreceiver uses apache log j for logging  please see http   jakarta apache org log j docs documentation html for configuration options  as default  the jmsreceiver logs to the file var logs jmsreceiver log    configuration of the xml configuration file   use the property jmsreceiver config of the jmsreceiver properties file to configure the used xml file  as a default properties corem jmsreceiver xml is used    configure the jmsprovider to receive from   configuration of the jmsprovider is done in the jmsreceiver xml file using the  jmsreceiver  element  you can define the provider using the following attributes of the  jmsreceiver  element  copy required libraries for the jms provider to the lib directory of the jmsreceiver  
  the message resources configuration can be taken from the standard wage struts config xml and extended by the resource bundle path and name containing the additional properties  for the new richtext editing command properties in  com coremedia examples wage wizard wizard properties the following configuration results  
    attributes  description  initialcontextfactory  name of the initial context factory class of the jms provider   providerurl  the url to access the jms provider   connectionfactory  name of the connection factory class of the jms provider   topic  to receive events from a topic  you need to enter the name of the topic  don t use topic together with attribute queue   queue  to receive events from a queue  you need to enter the name of the queue  don t use queue together with attribute topic   clientid  this attribute is needed for a durable topic subscription if the used connection factory does not already set a client identifier   subscription  if you want to use a durable topic subscription  this attribute needs to be set to the subscription name    
     the installation is complete     click  finish  to finish the installation of the jmsreceiver   
  like the active delivery server  pads provides administration pages  in this chapter you will find a description of the pages    in order to open the pads administration page enter the following address into your browser       http    host   port  pads admin 
  you can start the jmsreceiver from the command line    bin cm jmsreceiver start  options    or to start the jmsreceiver as foreground process    bin cm jmsreceiver run  options    the following options are supported     p  property bundle        use a different configuration bundle for the jmsreceiver  default is corem jmsreceiver  which corresponds to properties corem jmsreceiver properties     d       do not buffer events  without this option the uploader gets events not until a commit message marking a consistent state was received    r       register a receiver but stop the service without receiving  this can be used to create a durable topic subscription only    i  file        initialize the attached uploader with all values contained in the given file before receiving starts  
  this chapter describes how to configure  initialize and start the jmsreceiver  the jmsreceiver is a service that receives upload events from a jms queue or topic which have been sent to that queue or topic by a jmsuploader  it is a separate application that runs on the host where the generated pages or values are needed  it buffers incoming events until it receives a commit message which marks a consistent state  then it passes all received events to an attached uploader  in order to supply the jmsreceiver with content  you need to configure a jmsuploader in the proactive delivery server   
  the proactive delivery server needs a database to maintain its persistent cache  up to now only oracle is supported    use the attributes of the  database  element to configure the database    
    attribute  optional  description  driver  no    the driver class used to connect to the database  oracle jdbc driver oracledriver for oracle  url  no  the url used to connect to the database  e g  jdbc oracle thin  localhost      oracle   user  no  the user used to connect to the database   password  no  the password used to connect to the database   bundle  no  this attribute must be set to oracle  for oracle databases  scheme  yes  the name of the database scheme is needed if the database user has access to database tables of other pads instances    
      argument    optional    description    folder    no    the folder below which resources reside  if the type includes folders  a page for the folder itself is also generated     type    no    the resource type to generate pages for  this can be the document type  e g   article   or the special values  folder  to generate pages for folders or     to generate pages for all resources     template    yes    the template which should be used for page generation  if no template is given  the one determined by the template finder will be used     property    yes    the property for which pages should be generated     version    yes    the document version for which pages should be generated     params    yes    request parameters  e g  params  p    amp p        
  example     pageselector folder   site  type  article      this will generate pages for all documents of type article that are located below the folder  site  the used jsp templates are determined by the configured template finder  all linked pages will also be generated    restrict the followed links   with the default settings all pages that are reachable through links from the configured root pages  using page and pageselector  will also be generated  use the attributes from and to of the element pagelinkpredicate to restrict the followed links  the following attributes are available  
    attributes  optional  description  from  yes  a regular expression  e g      sport      which defines the resource uris of the source pages of the links  if you omit this attribute       will be used   to  yes  a regular expression  e g      sport      which defines the resource uris of the target pages of the links  if you omit this attribute       will be used   follow  no  defines whether the links should be followed   true   or not   false      
  if you specify more than one predicate  the first one whose from and to expressions match will be used     example  
  example     fileuploader id  file    directory  upload  filter          all pages are written to the directory upload    the jmsuploader   a jmsuploader sends jms objectmessages  see the developer manual for details  for generated values to a jms queue or topic    
    switch  grammar    variable   aggregationvariable     case       a switch task determines the successor based on the result of two or more  case  conditions  the successor is defined by the first  case  condition evaluating to true  the conditions are evaluated in sequential order of their definition  a default successor is mandatory if all given conditions evaluate to false   
     attribute   type   default   description   name   nmtoken    required   the name of the task    description   cdata    implied   the textual description of the task    defaultsuccessor   nmtoken    required   the default successor task that is chosen if no case condition matches   
  five options are available from this page    configuration  get information concerning the configuration of pads   status  get information concerning the status of pads   dump entries to file  create a file with cached values  the file can be used to initialize a new jmsreceiver   web container information  get information concerning the web container   java vm informtion  get information concerning the used java virtual machine        
  this reference chapter lists the essential wage tag library components  
  if you select the configuration link on the administration page you will get information concerning the configuration of the proactive delivery server  this is largely determined through the files web inf config bsh and web inf properties corem pads xml  
  the following table describes the meaning of the parameters  
  use the dump entries to file link on the administration page to get a file of cached values that can be used to initialize a new jmsreceiver  in the drop down list select the builder of which you want to get values  if you are using a custom builder as described in the developer manual  this field corresponds to the builder attribute of the uploader element  if you use the default setting  pagebuilder selected  all pages will be dumped  in the next field you can enter a regular expression describing a resource uri  for pages  or a scheme specific part  for custom builders  to restrict the saved values  this field corresponds to the uploader filter attribute     
  use the web container information and the java vm information links on the administration page to get information on the used web container and the used java virtual machine respectively  the next figure shows the information you can get concerning the java vm  
   modelclass    child elements    parent elements   propertytype  
  the modelclass element allows to configure the class from which instances for property values are created  the class attribute is the classname of the property model class  which must have a public no arg constructor  i e  setting  class  to  xxx  corresponds to class forname  xxx   on which newinstance   is called to create new property models  an unqualified modelclass class will be looked up in the package hox corem editor proxy    
     attribute   description   class   this attribute defines the class which is used to instantiate objects of the property value  
  for editing multiple coremedia resources within a single html form  we implement our own actionform class  extending the wageactionform   alternatively  you can reuse resourceactionform and navigate to the other resources via struts  nested property expressions  if possible   or reuse resourcelistactionform and place all resources to be added in the resources property   our actionform has at least to provide getter and setter methods for the properties of the main resource we work with  and getter methods for the other resources we want to access  which are possibly linked to the main resource through a linklist property   in our example we want to edit a dish document which has a linklist property pictures linking to picture documents  we want to allow editing of the dish properties and the picture properties  of the first linked picture document  in a single html form  if there is no picture document linked to the dish document  a new picture document should be created and linked to the dish document automatically   an actionform with this functionality could look like this  
  the dishactionform tries to get the current coremedia resource in its constructor  which is only possible if the resource parameter is set  therefore  as in the other examples too  the initial link pointing to the edit action will have a parameter containing the current resource   as the resource parameter also could be a multipart request parameter  which isn t accessible in the constructor of an actionform yet  we use the helper method getcurrentresource   inherited from wageactionform  this method retrieves the resource  lazily   i e  on the first call   the dishactionform provides getter and setter methods for the name property  of a dish document   and could also provide getter and setter methods for any other property we want to access   the most interesting thing here is the getpicture   method  it first checks if there s already a picture document linked to the dish document we re editing  if this is the case  it just returns this picture document  which allows us to access its properties in the same html form as the dish document    if there isn t a picture document linked to the dish document  a new picture document is created  in the same folder as the dish document  and linked to the dish document  of course you would have to provide appropriate exception handling code here  for example for the case that a document with the same name already exists in that folder  after the new picture document has been created  it is stored and returned  and can then be edited   the dishactionform also provides getter and setter for the calories property of the dish document  in the renderform jsp template  see below   we use a  wage checkbox  tag with truevalue        and falsevalue          so the setter will be called with these values according to the state of the checkbox when the form is submitted  
  the template for rendering the html form for editing a dish document and the first linked picture uses the struts tag library like the other examples  as we want to give the user the possibility of uploading a new image as blob property for the picture document  this time the form encoding has to be set to  multipart form data   
  first the form is defined with the struts  html form  tag and the encoding set to  multipart form data   as we want to support file upload in this form   the  wage img  tag is used to render a coremedia logo  the  wage resourcetype  and  wage documentstate  tags render icons for the document type and state respectively  the  wage resourcetype  tag and the  wage documentstate  tag use the current resource for rendering its document type or document state  checked out etc    respectively   a  wage checkbox  tag is used to render a html checkbox  which will set the  string  calories property of the dish document being edited to        or          according to the checkbox setting  the accesskey  f  attribute lets you change the state of the checkbox by pressing  alt   f   note that the struts  html checkbox  tag cannot be used for this purpose  since it maps to a simple html  input type  checkbox    which has the  in this case  undesired behaviour to submit no value at all when unchecked   a simple text input field is used to display and change the name property of the dish document  via the getter and setter method we wrote    if there is already a picture document available for the dish we re editing  the image blob property of the picture document is displayed  in any case we render a file upload dialog via the struts  html file  tag  the property picture image formfile attribute of this tag will first cause a call to getpicture   get  image   getformfile   on the dishactionform we wrote  this is where our code for creating a new picture document is called if no existing picture is found  when the form is submitted  getpicture   get  image   setformfile      will save the new image blob in the picture document  so we don t even have to implement a setpicture   method   also the name property of the picture document  inherited from document  can be accessed by simply using the property  picture name  attribute for the  html text  tag  the getpicture   method of our dishactionform will return the picture document as clientdocument  which implements the dynabean interface and therefore supports generic getter and setter methods  so we don t have to implement getimage    getname    etc  for the picture document   at the end of the form  the resource and action parameters are set as hidden input fields  and a submit button is rendered which will submit the form to an appropriate action  
  accessing a blob property via the getblobproperty   method may return null  if no blob is currently being stored   when using the generic get   method for the same property  a clientblob object representing an empty blob is returned  if a clientblob represents an empty blob property can be determined by the isremoved   method of the clientblob interface  
  writing a login action  one thing you ll need for all examples to run is a way of logging in users  as access  read as well as write access  is controlled by the wage generator  you won t be able to access or modify any content if not logged in  unless generator access control is turned off  then you can read content without logging in    one way for logging on users is to write a simple loginaction as shown here  
  the first thing this action does is to check if the current user is already logged in  if so  it just forwards to the  success  actionforward   if the user isn t logged in yet  it gets the username  domain and password parameters out of the actionform that has been submitted  we re using a dynaactionform here so we don t have to write an own actionform class  see below how to configure this dynaactionform in struts config xml   the action then tries to log in the current user by calling context getcurrentcontext   login   with the supplied credentials  if no error has occurred  we also forward to the  success  actionforward  only if an exception was caught during login  for example because the password was incorrect   we save an error message which can later be displayed with the struts  html errors  tag  and return to the login form by returning the forward mapping getinputforward     the login form can easily be built by using the struts tag library  
  the  html errors  tag will show the error message saved in our loginaction if an error has occured during the login  for example if a wrong password was submitted   the  html text  and  html password  struts tags are used to render input fields for the username  domain and password parameters   html submit   renders a submit button for submitting the form to the action configured for the  login path  and  html reset   renders a reset button can be used to reset the input fields of the form   now the action and actionform have to be configured in struts config xml  
  this manual is addressed to developers of coremedia projects who want to take the major step from large web site projects with read only content access to content editing web applications  they ll find a description of ideas and concepts  building blocks  and detailed examples  
  in order to emulate cap     server login behavior  with service groups  in sci      supply the nameloginpredicate with the following parameter  
  this example demonstrates how linklist properties of coremedia documents can be edited with wage  a wage toolbar is used in this example for allowing the user to resort linklist entries and for removing items from the linklist  for adding new entries  this example shows how to develop templates to render all picture documents in a folder together with appropriate javascript commands for adding these pictures to the linklist that is being edited    only the view part  templates and javascript  of this example is explained here  you can use the standard wage resourceactionform and a simple action for committing the changes as shown in the other examples  
  first a template rendering the form for editing the document containing the linklist property is needed  
  this template first includes the wage stylesheet  which is necessary for correctly displaying the toolbar we will be using for editing the linklist  it then loads the javascript packages and installs a wage focusmanager  a simple text input field is rendered for the name property of the document   for editing the pictures linklist property of a dish document  first a toolbar is included for rendering command buttons  see below   then the linklist itself is rendered using the  edit  view  this will also instantiate a javascript linklist editor component  which we ll need later for adding new resources to the linklist  the  addpicturestolinklist  view for the current folder will render all picture documents in a folder and the javascript commands to add pictures to the linklist   the resourceid is submitted as hidden input field  and a submit button is rendered which will submit  commit  as  action   parameter   
  after including the toolbar  the edit view for the pictures linklist property is included  this will render the current state of the linklist and instantiate a wage linklist property editor component  together with the toolbar you will already be able to move linklist entries up and down  and remove entries  
  this template simply gets all picture documents in the current folder  and includes the  addtolinklist  view for each picture inside an html table   addtolinklist  the  addtolinklist  view of a picture defines a javascript function  addtolinklist id    which gets the currently focused editor through the focusmanager  and calls the addresource   method with the resourceid of the current picture on it if the focused editor is a linklist editor   the picture is then rendered as small icon with an enclosing html anchor tag calling the addtolinklist   javascript method with the id of the current picture document  
  windows paths in java properties files   when you configure a windows paths in a property file  you have to escape a backslash with a second backslash in the path  this applies especially to paths for an importer inbox path  for more details about writing property values  see the javadoc for the load   method in the java util properties java class  
  one thing you have to pay attention to is the spelling of coremedia property names  if you have defined your document type model with property names starting with upper case letters  and you want to access these properties using the struts tag library  you will have to use property  name  when the resource is accessed as dynabean  get  name   will be called   if you have implemented own getter and setter methods  getname   and setname       you have to write property  name  in the struts tags  as struts derives the property name automatically according to the javabeans conventions  essentially by removing get set from the method name and converting the following letter to lower case   
     attribute   type   default   description   name   nmtoken    implied   the name of the expression    description   cdata    implied   a textual description of the expression    successor   nmtoken    required   the successor which should be activated if the condition s expression evaluates to true  
  find descriptions of some of the components defined in these packages here  for a complete reference of the available javascript components in wage  please refer to the javascript api documentation   on the following pages  we ll give you an overview of the available wage property editors  javascript components that can be used for editing coremedia resource properties  
  this chapter describes tasks that can be used for different customizations of the editor  
  validators are used to check the values of document properties at check in time  if the validator throws a validationexception a window pops up which shows a message containing the exception message   interface to implement  own validators must implement the interface hox corem editor validation validator  with the method validate  validator  replaces the deprecated validator interface which was memory consuming when it comes to the validation of blobs   parameters to use  the validate method gets the following parameters  
  example   the next example shows a validator which simply returns the value to be validated   
  return types  the method returns a value  the type depends on the property which has been validated   the properties have the following types   
     parameter   type   description   document   documentmodel   the document with the property to validate  the documentmodel is for read access only  do not try to modify any document here   propertytype   propertytypemodel   the property type of the property to validate   value   object   the value of the property  not a propertymodel but the value of the propertymodel  see table below for the default types    allproperties   map   a map indexed by property name of all the documents properties 
   property default propertymodel value string stringmodel string integer integermodel integer date calendarmodel calendar linklist linklistmodel resourceholder    sgmltext sgmltextmodel org w c document blob blobmodel  hox corem editor proxy blobvalue  
  initializers fill the fields of a newly created document with default values   interface to implement  for own initializers you need to implement the interface hox corem editor initialization initializer with the method getinitialvalue   parameters to use  the getinitialvalue method gets the following parameters  
     parameter   type   description   document   documentmodel   the document which contains the property to initialize    propertytype   propertytypemodel   the property to initialize  
  return type  depending on the property type for which the initializer is intended to use the method may return the following values  return type is object   
     property   default propertymodel   value   string   stringmodel   string   integer   integermodel   integer   date   calendarmodel   calendar   linklist   linklistmodel   resourceholder     sgmltext   sgmltextmodel   org w c document   blob   blobmodel   byte    
  integrate your initializer into the coremedia editor using editor xml  you can integrate your initializer into the coremedia editor using the element initializer of the editor xml file as shown in example  
  example   the next example shows a simple initializer which checks whether the property to initialize is of type string or not  if it is  the property will get the name of the creator of the document as the initial setting  
  predicate classes enable selective view of objects  they can filter different types of objects   interface to implement  for own predicates you need to implement the interface hox util predicate with the method include   parameters to use  the include method gets only one parameter of type object  depending on the element of the editor xml where the predicate is used  the method can be called with different object types    filter     if the  predicate  element is used in a  filter  element  the documents shown in the document overview of the coremedia editor can be filtered  due to different conditions  thus  the objects to be filtered are documents of the type hox corem editor proxy documenttypemodel   treefilter     if the  predicate  element is used in a  treefilter  element  the folders shown in the folder view of the coremedia editor can be filtered  the objects to be filtered are folders of the type hox corem editor proxy resourceholder   documenttypes     if the  predicate  element is used in a  documenttypes  element  the document types which can be created  moved  copied or selected in document choosers are filtered  thus  the objects to be filtered are document types hox corem editor proxy documenttypemodel   processes     if the  predicate  element is used in a  processes  element  the workflows offered for initiating in the menu file new workflow    are filtered  the objects to be filtered are workflows of the type com coremedia workflow wfprocess   integrate your predicate into the coremedia editor using editor xml  you can integrate your predicate into the coremedia editor using the element predicate of editor xml as shown in example  
  example  the next example shows a predicate which simply returns  false  for all input  as a result  all items are filtered  
  a renderer is used to render the table cells of the document table view in the explorer  workflow  query and resourcechooser window    class to subclass   in order to create your own renderer class you need to subclass the abstract hox corem editor toolkit table columnrenderer layoutcolumnrenderer class and implement the following two methods      getcomponent       this method returns the jcomponent which will be used for the table cell  the method is called without parameters     customizecomponent       this method is called with the jcomponent returned from getcomponent and an object which contains the data to render  the actual object which will be passed to the method depends on the window for which the renderer is defined  in the explorer window a resourceholder is passed and in the workflow window a wfinstance is passed to the method  
  integrate your renderer into the coremedia editor using editor xml  you can integrate your renderer into the coremedia editor using the element renderer which can be used within the element columndefinition  columndefinition can be used within tabledefinition which can be used within the elements explorer  query  workflow and resourcechooser  
  example  the following example shows a very simple renderer which inserts a jlabel saying  hello  in each cell of the table column independent of the column type   
  each of these chapters starts with a general window  or interface  description  followed by      the menu bar   the tool bar 
     parameter   type   description   document   documentmodel   the document for which the language resolver should be built    propertytype   propertytypemodel   the property of the document for which the language resolver should be built  
  return types  the getlanguageresolver method returns a hox gui languageresolver   integrate your propertylanguageresolverfactory into the coremedia editor using editor xml  you can integrate your propertylanguageresolverfactory into the coremedia editor using the propertylanguageresolverfactory element  
  example  the following example shows a language resolver which returns locale us as the language  
  the menu bar s activated resp  visible items depend on the current task and focus as well as user s rights    a selected title document will display other items in the menu bar than a complex document that holds a multimedia object  apart from some system document types  they are highly project specific anyway  a staff editor will have less options to process a document than a chief editor  a sports editor will edit and process different documents than somebody from the financial department     that s why some of the items listed here might not be activated or visible in your coremedia project  
   menu item sub items function reverse sort order  reverses sort order  ascending or descending  of active sort options  displayed in status bar  sort   state  name  date  version  type   sets the property or document type as criteria to sort by  in combination with reverse sort order filter   no filter  undeleted  unprocessed    to approve  to publish  published   displays all documents  default setting   all documents not marked for deletion  all documents  approved nor published  checked out checked in    on folder changes jump to begin    focus jumps to the very first resource in a folder automatically   of not active  the last item in the list is displayed  maintain clipping  if activated  the list of resources in the overview window  see explorer window description  is not automatically updated display configurable allows to modify the display of document properties   
     menu item   sub items   function   previous document    displays the previouos document that has been opened in this window before  only if there are to navigate to     next document    moves forward to documents opened in this window  only if there are to navigate to     links of a document    opens a preconfigured query window that searches for documents linked to from the selecte document   links to a document    opens a preconfigured query window that searches for documents that link to the selected document   checked out documents    displays all documents checked out by you in a preconfigured query window   to be published    preconfigured query window shows all documents either approved or marked for deletion  
     menu item   sub items   function   explorer    opens new explorer window   workflow    opens new workflow window   query    opens new query window   publisher    opens new publisher window   user manager    opens new user manager window   document types    opens new document type window   currently available open windows of all types    number and names in menu depend on opened windows  
  the db user must not be a dba or owner of the database otherwise all objects are created in the wrong  dba  schema  roles db datareader  db datawriter and db ddladmin are sufficient as the rights for the database user  
  if you are using a microsoft sql server things are easier  the coremedia server uses nvchar for string properties in the sql server which can simply be used for unicode strings  so  you only need to set the utf weight attribute of the doctypes element to      no triple size is needed  no utf length attributes for string properties are required  
  the third alternative is the path of least resistance  be aware though that xml has a lot of fine points on the syntactic side  unless you re very experienced you should avoid this method at all costs  the unparsers will take care of the syntax hassle for you  however if you re experienced a combination of the three method can lead to very processing effective templates with a small  memory footprint  
  in case you d like to produce your xml verbatim the hox text xml xmlescapingwriter is a very helpful tool  
  refer to the hox text api documentation which is included in the coremedia generator api documentation for further details  
  this reference chapter lists some of the wage components  for a complete reference of the available javascript components in wage  please refer to the javascript api documentation 
  example  the following example shows a property editor which extends the comboboxstringeditor  the property editor adds all available locales to the combo box from which the user can select one  
  in this chapter  you will learn how to extend the coremedia editor with buttons and menu entries which call commands on the current selection  a command is called with a target as a parameter and it executes an operation on this target following the command pattern  therefore you need to register your command at a commandmanager   interface to implement  all commands implement the command interface  you need to implement  or overwrite  the execute and the isexecutable methods  the execute method gets the context and target as parameters  see editor api for details    classes to subclass  there are a different predefined commands for different tasks  you can subclass each of them  or its subclasses  for your needs  please refer to the editor api for details   
     name   description   commandsequence   a command which consists of a sequence of simple commands    createprocessinstance   a command which creates a new wfprocessinstance from a wfprocess    enumerationcommand   a command which operations on enumerations and executes the given command   globalcommand   a globalcommand works on global  i e  application wide targets  it provides convenience methods to allow small and simple commands   mapcommand   a generic command which works on a map    resourcecommand   a command which works on resources    resourceenumerationcommand   a command which works on a set of resources    resourceholdercommand   a command which works on resource holders    searchtext   a command  which searches for the text in text components   stringselectioncommand   a command  which acts on string selections    textactioncommand   a command  which bridges from commands to actions on text components    wfinstancecommand   a command which works on a wfinstance  
  find a list of different ways to get support for coremedia smart content technology here  
  coremedia systems are distributed systems that have a rather complex structure  this includes databases  hardware  operating systems  drivers  virtual machines  class libraries  customized code etc  in many different combinations  that s why we need detailed information about the environment for a support case  in order to track down your problem  we need   which coremedia component s  did the problem occur with  incl  release number   which database is in use  version  drivers   which operating system s  is are in use    which java environment is in use    which customizations have been implemented  a full description of the problem  as detailed as possible  can the error be reproduced  if yes  give a description please  how are the security settings  firewall    in addition  log files are the most valuable source of information  
  to put it in a nutshell  we need    a person in charge  ideally  the coremedia system administrator  extensive and sufficient system specifications detailed error description log files for the affected component s  if required  system files  
  an essential feature for the coremedia system administration is the output log of java processes and coremedia components  they re often the only source of information for error tracking and solving  all protocolling services should run at the highest log level that is possible in the system context  for a fast breakdown  you should be logging at debug level  the location where component log output is written is specified in it s   properties or   jpif startup file   which log file   mostly at least two coremedia components are involved in errors  in most cases  we need the  server log files together with the log file from the client  if you are able locate the problem exactly  solving the problem becomes much easier   where do i find the log files   log files can be found in the coremedia component s installation directory in  var logs  coremedia active delivery server log files in tomcat  webapps coremedia web inf var logs  
  email  telephone  and fax  we appreciate support requests via email using our support form because you can easily enclose all required information such as problem description  system specifications  and log files   support customers please write to  support coremedia com  coremedia partners please write to  partner support coremedia com  phone support is available mon fri              via  fon                           fax                          
  bugtracker  the bugtracker is a tool to search for already known bugs    it is accessible via  http   bugtracker coremedia com  download area  obtain the latest coremedia smart content technology releases as well as manuals from  http   download coremedia com  accessing bugtracker and download area  for access to these  customers and partners please send a request to support coremedia com  ssh access  more complex support cases and emergencies might require to provide our support team an ssh access facility for quick and efficient help   read more about ssh at www ssh com products ssh features html    further requests  questions  inquiries   coremedia ag  ludwig erhard strasse           hamburg  fon                         fax        www coremedia com  support coremedia com  partner support coremedia com 
  our manuals undergo permanent revision  and we are closely tracking progress in development and expertise to make our manuals valuable tools in development and implementation of the coremedia smart content technology and solutions  do not hesitate to contact us for ideas and suggestions   via email  documentation coremedia com via fax                     
     component   problem   log files   coremedia editor   general   editor log  contentserver log  workflowserver log  capclient properties    check in check out   editor log   contentserver log  workflowserver log  capclient properties    publication or preview   contentserver log    content management server   contentserver log    master live server   workflowserver log  capclient properties    import   importer log  contentserver log  capclient properties    workflow   editor log  workflowserver log  contentserver log  capclient properties    spell check   editor log  ms office version details  contentserver log    licenses   contentserver log   content management s erver   contentserver log   master live server    server and client   communication errors   editor log  contentserver log   content management s erver   contentserver log   master live server     jpif files    preview not running   capserver log  content server   httpd log    website not running   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   httpd log  capclient properties  license zip   server   not starting   contentserver log   content management server   contentserver log   master live server   contentserver log   replication live server   capclient properties  license zip  
  the coremedia active delivery server has been extended to automatically check user rights on resources  this chapter describes the details of login  user representation and rights for cached pages and page fragments   
   by default  access control is switched off  so that the active delivery server behaves exactly like in versions up to cap      in order to enable access control  you have to set generator accesscontrolenabled to  true   using the config bsh file       generator setaccesscontrolenabled true    if you leave access control off  you should not experience a performance penalty for the unused functionality  
  with access control enabled  a template always operates under an identity that is stored in the current context  ads employs java s javax security auth subject which basically is a set of java security principals  identities  to store the current user  for purposes of access control  only the set of principals of class hox corem servlets group  which implements principal  are considered by ads  if you only include a hox corem servlets user in the subject  ads derives its groups automatically  both groups and users can be obtained through the usermanager object available through the generator bean   while the subject can be constructed by authenticating against the content server  you can also employ your own authentication scheme to construct a subject  as long as it contains a set of group objects  alternatively  you can employ j ee container authentication  in which case you have to provide a mapping from j ee roles to sci groups  thus it is possible to only maintain a few groups in sci for purposes of rights administration  but have user identities and login provided through other means   
  the j ee servlet standard uses role based authentication  the active delivery server maps these roles to corresponding sci server groups to determine the access rules to apply  please note  that the nature of the j ee role model has one implication  no access rights inheritance due to hierarchical groups is taken into account in the web application  the user is treated as if he was only in the groups corresponding to his j ee roles  for example  if the container identifies the user to be in role  x   only rules that are explicitly defined for group  x  are taken into account  not those for supergroups  you have to keep this in mind when designing the groups rights model in the content server    in order to use container managed authentication  you have to follow three basic steps  configure the web application through the standard deployment descriptor  web xml   please refer to the servlet specification  section    for details  a fragment like the following may be used   
   instead of container managed authentication  an application can choose to perform its own authentication  in order to do so  the generator should be configured as follows      generator setrolemap null   a logged in user is identified through an instance of javax security auth subject in the servlet session  the application is responsible for providing a login screen and depositing the user information in one of the following ways   either  by invoking context login user  domain  password  that will look up a corresponding user in the sci server  validate the password  and place a subject containing the user in the session   or  by manually setting a user             
  this fragment generically instructs the container to authenticate a user using the basic authentication scheme in the realm  coremedia           create map the realm  coremedia  through container specific configuration  please consult your container manual for details         for the tomcat     container that comes with coremedia sci  please refer to http   jakarta apache org tomcat tomcat     doc realm howto html       authentication against a microsoft active directory server can be configured by placing the following fragment in a file called coremeda xml in the webapps directory  the name of the file must be the same as the name of your context root directory    
         configure the ads via config bsh to query the container provided user information        generator setplainrolemap true        please refer to the api documentation of generator set plain rolemap  for customization options  
  while container managed authentication has indisputable advantages  two major drawbacks exist when using the active delivery server    rule inheritance between groups is not considered  caching by groups  see below  does not work   in order to mitigate these problems  container managed authentication and the subject in session based approach can be combined  after the container has authenticated the user for the first time  the active delivery server can convert the user information from the servlet request to a group based subject   in order to do so you have to provide the active delivery server with a  role  map  that constructs a subject from the servlet request  i e  maps  j ee roles to sci groups  for example  
  this will map every user to group public and also map role  sport  to group  sportnews  and role  economy  to  economynews   
   so far  we ve only looked at resources and the current user s access  this requires all templates to be non cacheable  because the user s servlet session must be visible  templates marked as  cacheable  true    on the other hand  generate output to be reused in many sessions  so it cannot access the user s session   in order to still allow for caching  a cacheable template exhibits special behaviour   during execution  the page s template runs in a special security context that is allowed to read  any  resource  however  it remembers all resources that have been read   at delivery time  i e  when the page is directly requested or included  access to all these resources is checked  this behavior garantuees that the client has the necessary permissions to read the content in the fragment  a special variant of the fragment inclusion api allows for  inclusion attempts   a call like        context tryinclude pagecontext  article   asteaser    will silently skip the fragment if the user does not own the necessary permissions  but remember that in most cases the  template wouldn t encounter an unreadable  article  document in the first place   this model implies  that  cacheable  true   has to be used at the granularity of your permissions  if your design foresees different visibility for single items in a list  each single item can be cached this way but the list has to be composed dynamically  however  if you arrange the content in several blocks comprising multiple content items   public content   vip content     each block can be cached  
  since permissions in sci are granted on a group basis  all users with the same group combination have access to the same set of content  for this reason  a second caching option has been added  a  group cacheable  template  as opposed to  once cacheable   allows page caching on the basis of group combinations  the template is declared so by embedding cacheable  bygroups  in the template header  such pages are actually rendered and cached in multiple variations  during rendering  the template runs in a security context comprised of exactly those groups  corresponding to the group combination   caching  by groups  only makes sense  if you have a small      number of possible group combinations  otherwise  the number of cached fragments will explode   at the moment  caching by groups works by adding a hidden parameter to the resourceuri object to distinguish from other versions of the same page  this parameter is not visible to template programmers and cannot be influenced  you will therefore encounter multiple directories in the page cache with different values for the parameter  cap groups   
  please note that   due to the predicative nature of the j ee role model   caching by groups does not work with container managed authentication  
  interaction of  cacheable  true   and  cacheable  bygroups    the two caching modes can be used in combination  up to a certain granularity  content is frequently non personalized  it can either be accessed by a user or not  but the presentations do not  vary  these quasi atomic fragments should therefore be marked as  cacheable  true    templates that assemble and combine such fragments  on the other hand  should be marked as cacheable by groups or non cacheable  
  please note that it is not allowed to include group cacheable fragments from once cacheable fragments  
  this example demonstrates how coremedia wage can be used to develop a simple workflow application   we will be using the  two step approval  workflow for this example  so to run it you need a coremedia workflow server with the  two step approval  workflow uploaded   this example shows how a new workflow can be started  how resources can be added to the workflow  and how resources can be approved in a web application using coremedia wage  
  the starting point for our workflow example is the renderworklist jsp template in the wftemplates directory of the web application  
  this template uses the wage wfinstancelistaction and the wfinstancelistactionform to iterate over all workflow instances for the current user  in a table  an icon for the state of each task or process instance  such as accepted  is shown  then the wage workflowtemplatefinder is used to include the details of each task instance  in the third column of the table  an input field of type radio is rendered  which allows to select an instance  if the task state is running  an edit link is rendered in the last column of the table    the table shows all task instances for the current user plus the process instances which haven t been started yet  so only newly created processes are displayed  together with a link for editing the initial client for the process instance  please note that the process is only created on the server when you actually start the process  you nevertheless are already able to edit its initial client    after all workflow instances have been rendered  four buttons are shown which allow to perform an action  such as  cancel  or  complete   on the selected task    please not that this example doesn t provide any error handling code  so for example trying to accept an already accepted task is possible and will lead to an error  for your projects you will have to provide appropriate error handling code    then we iterate over the newprocesslist property of the worklistclient for rendering a button for each configured workflow  which will allow us to create a new workflow  as the content of this list depends on the user s role  these  create new workflow  buttons are only shown for users with the appropriate role  composer role   when logged in as a composer  this is what it could look like  
  for an approver with two available tasks  one offered and one accepted  this would look like that  rendered by the same template  renderworklist jsp   
  the task details are rendered by the renderdetails jsp template  as this template is included via the workflowtemplatefinder  it is placed in the wftemplates processes twostepapproval  default  directory  so it will be used for all tasks of the twostepapproval workflow  as long it is not overwritten in a task specific subdirectory of the twostepapproval directory  
  this template renders the value of the subject workflow variable of the current task  or an  internationalized  no subject defined message if no subject has been set  it also renders the name of the current task  like compose or approve   now let s see what the edit link for each task does  the  edittask  action uses the wage wfinstanceactionforward to forward to the  renderclient  view of the task set with the wfinstanceid parameter  the wfinstanceactionforward uses the workflowtemplatefinder to find the appropriate template  so for our example we provide one renderclient jsp template in wftemplates processes twostepapproval compose  for editing the changeset variable in a compose task  and another renderclient jsp in wftemplates processes twostepapproval approve  for approving resources in the changeset  the wfinstanceactionforward will then automatically forward to the appropriate view   the renderclient jsp template for the compose task renders a form which contains all documents in the menusite folder  including subfolders  for each resource  a checkbox is rendered which can be checked to include the resource in the changeset   the form is submitted to the edittask action  and the workflow instance id is passed on as hidden form field  
  the addresource view for a folder only includes the addresource view for all of its children  
  the addresource view for a document first checks if the current document is already part of the changeset  and then renders an icon for the state of the document  the document name  and a checkbox  which is checked if the document is already part of the changeset  
  the renderclient jsp template for the approve task iterates over the resources in the changeset and renders the resource name and a checkbox for approving the resource  it also submits to the edittask action including the workflow instance id as hidden form field  
  after you have written your command  you need to register it at the commandmanager  at the listenermanager and at the manager of the chosen gui element  this will make the command usable and visible  optionally  you may associate your command with an activation model  these models activate or deactivate the command depending on a specific condition  see the field summary in the javadoc of the documentview for the available activation models  to register your command proceed as follows   
    step  description        extend the view class        class myview extends hox corem editor generic genericdocumentview        get a commandmanager        commandmanager commandmgr   getcommandmanager           register your command at the commandmanager        commandmgr registercommand  my first command   new com coremedia extensions myfirstcommand         if you want to associate your command with an activation model you have to call the associateactivationmodel   method  see the field summary of the documentview class for the available activation models   commandmgr associateactivationmodel  my first command   approvemodel         get a manager for the gui component in which you want to insert your command  possible are    toolbarmanager  menubarmanager  popupmenumanager         toolbarmanager toolbarmgr   gettoolbarmanager      menubarmanager menubarmgr   getmenubarmanager      popupmenumanager popupmenumgr   getpopupmenumanager           get a listenermanager in order to make your command live        listenermanager listenermgr   getlistenermanager           if you want to insert your command in the tool bar or in a popup menu you need to get one        jtoolbar toolbar   toolbarmgr gettoolbar    or jpopupmenu popupmenu   popupmenumgr getpopupmenu         add your command to the listenermanager and to the gui component at once       toolbarmgr addiembefore toolbar  null  listenermgr createtoolbarbutton  my first command       or   menubarmgr additembefore  edit menu   null  listenermgr createmenuitem  my first command       or   popupmenumgr additembefore  linklist menu   movebottomcommand  listenermgr createpopupmenuitem  my first command          
  we also provide a renderclient jsp template for editing the initial client of a newly created process  in addition to letting you add resources to the change set like renderclient jsp for the compose task does  it lets you set the subject variable for the workflow  
  for editing the tasks we use a simple action class that forwards to a  standard  actionforward if no action  parameter is set  or to a  success  actionforward  if action  commit and the commit was successful or action  save  as this action is very similar to the actions of the other examples  and also does not contain any workflow specific code  it is not shown here   in the struts config xml configuration file we have to configure the required form beans  actions and actionforwards for this example  
  as form beans  we are using the standards wage wfinstanceactionform and wfinstancelistactionform   the wfinstancelistaction is used to perform actions on workflow instances  for example accept a task or start a process  this too is a standard wage class   our commitaction  which is configured for the path  edittask  uses the wage wfinstanceactionforward to forward to the renderclient view of the current workflow instance as  standard  forward  which is used when no action  parameter is set  
  as we try to show many different configuration options for the examples  for example writing own form beans and actions for one example  and using the standard wage forms and actions for another  each example is deployed as a separate web application  on the other hand  for the examples to work with any coremedia cms version  they re use the wage context of your installation  please follow the installation instructions in the file readme txt contained in the wage examples distribution carefully   also the menu site demo content has to be imported before running the examples  for instructions on how to import the demo content  please refer to the coremedia cms developer manual  
  the document view of the coremedia editor is created by the class hox corem editor generic genericdocumentview  this class builds a container for a menu bar  a tool bar and a property section which contains the data of the document  if you want to use own commands in the menu bar or  tool bar of the document view you need to extend genericdocumentview and overwrite the method getcomponent which returns a jcomponent  follow the steps described in the next table   
  after you are finished with your view class  you can insert it into the attribute viewclass of the element document of the editor xml file  
  all computer users who access a coremedia system are users  their user profiles are defined by individual settings and preferences as well as access regulations  these access regulations are set by rights  defined in rules  implemented via group memberships  special workflow groups act in roles  roles are a predefined set of actions members of these groups are entiteled to perform   
  you can define some attributes for your command in a properties file  the attributes are shown in the gui and the names must follow the scheme     command name  suffix   value     suffix  can take the following values      label  the text which is shown in the menus     menuitemlabel  the text of a menu item     image  the icon which is shown in the toolbar     tooltip  the text which is shown as a tooltip     mnemonic  the shortcut which can be used to start the command    please notice that  command name  is not the class name of your command but the name registered at the commandmanager  so it is possible to register several commands with the same name    example    you have created a command called makecheaper  
  to change your password  open a user manager window   
  the name of this file is  myname  properties  you can integrate it using the bundle element of the editor startup xml file  the file name must be entered without file extension  it must appear at the right position of the classpath    example  
  if you want to use own commands in the menu bar or  tool bar of the explorer view you simply need to extend the explorerview class and add it to the editor using the attribute explorerviewclass of the framefactory element  follow the steps described in the next table    
  you can find context menus in each view of the coremedia editor  in this chapter  you will learn how to add a command to a context menu which belongs to a property editor  the steps shown in the next table will add the command to a menu belonging to a link list editor  the name of the menu is  linklist menu  and your command will be added at the end of the menu  
      step    description         extend the property editor for which you want to add your command    public class mylinklisteditor extends genericlinklisteditor           overwrite the getcomponent method    public jcomponent getcomponent             call the getcomponent method of the parent class to create the default behavior    super getcomponent            get the references to the manager components and register your command      commandmanager commandmgr   services getcommandmanager context     popupmenumanager popupmenumgr   services getpopupmenumanager context     listenermanager listenermgr   services getlistenermanager context     commandmgr registercommand  my command   new mycommand             add a separator and your command to the end of the popup menu      popupmenumgr additemafter  linklist menu   movebottomcommand  listenermgr createmenuseparator  custom       popupmenumgr additemafter  linklist menu    custom   listenermgr createpopupmenuitem  my command         return the jcomponent to the coremedia editor      return this         
  according to the license purchased this workflow either is one out of four plus one predefined workflows or can be configured according to project requirements  these four workflows are  simple publication two step publication two step approval three step publication  see the following table for the sequence of editorial steps     
    step publication  here the basic ideas are described according to a three step publication  an extended version of the four eyes principle  
  large projects with complex settings  many editors  many responsibilites  and deadlines to catch  need some kind of administrative support in order to catch up with all the demands     this support is provided by the introduction of the coremedia workflows      workflows are defined sequences of editorial steps available for defined groups of users acting in certain roles on resources in certain states    the full editorial routine from creation to publication  from editing to deletion  can be modelled in workflows  these workflows run on a separate coremedia component  the workflow server        
     option a   option b   option c   option d   the user accepts and finishes th task and approves the resource s     the user accepts and finishes th task but does not approve the resource s     the user rejects the task    the user accepts the task but delegates it to somebody else     the task  publication  is offered to all members of the group publisher role    the change set is sent back to the last editor  if suitable with comments    the task is offered all other members of the group approver role    the task is automatically accepted by this user     
  coremedia sci comes with an active editing application  this out of the box java application provides the complete functionality needed for content editing and production requiring no customization  
  the coremedia editor provides automatic content entry features for any content model  thus supporting all possible document types  and full functionality for complete content production  approval and publication processes  content production tasks occur in sequences defined in flexible and customizable content production workflows   
  in coremedia cap     the public dictionary is located in  home  in coremedia sci     it will be located in  system  when you update from version     to      a new public dictionary will be created in  system and the old dictionary will not be available for the user  so  you have to move the old dictionary to the new location  
     attribute   type   default   description   user  or  userid   nmtoken    implied   the name of a user  or  the user id of a user   group  or  groupid   nmtoken    implied   the name of a group  or  the group id of a group   domain   nmtoken    implied   the domain of a user or group  may be used if group or user is chosen    rights   cdata    required   a comma separated list of rights as specified above  
     attribute   type   default   description   name   nmtoken    implied   name of a group    domain   nmtoken    implied   domain of the group  might be used in addition to name    value   nmtoken    implied   numeric id of a group   
      attribute   type   default   description   user  or  userid   nmtoken    implied   the name of a user  or  the user id of a user   group  or  groupid   nmtoken    implied   the name of a group  or  the group id of a group   domain   nmtoken    implied   domain of a group or user  might be used in addition  if group or user has been chosen    rights   cdata    required   a comma separated list of rights as specified above  
     attribute   type   default   description   value   nmtoken    implied   the numeric id of a user    name   nmtoken    implied   the name of a user    domain   nmtoken    implied   the domain of a user  might be used in addition to name   
     attribute   type   default   description   path   nmtoken    implied   the path of a document    value   nmtoken    implied   the id of the document    version   nmtoken    implied   the version number of the document   
     attribute   type   default   description   value   nmtoken    implied   the id of the folder    path   nmtoken    implied   the path of the folder   
     attribute   type   default   description   value   nmtoken    implied   the id of the resource    path   nmtoken    implied   the path of the resource  
  this file is necessary for the spellchecker  it defines the mappings from java locale objects to word language identifiers  e g   de de wdgerman  maps the locale de de to the word language identifier wdgerman  the most common european languages are covered in the default language mapping properties file  the locale identifier can be taken from the locale tostring   method  see javadoc for details  and the word language identifiers from the wdlanguageid enumeration of the word object type library   
  to circumvent these inconsistencies  you should always use property names starting with a lower case first letter in your coremedia document type model  
  this is also consistent with the recommended java spelling for property names  and you can use property  name  regardless of the implementation of the getter and setter method  
  addpicturestolinklist  for adding new entries to the linklist  we include the addpicturestolinklist view for the current folder  this view also defines a helper javascript function  addtolinklist id    which is used by the view  addtolinklist   it gets the currently focused editor through the focusmanager  calls the addresource   method with the resourceid of the current picture on it if the focused editor is a linklist editor  
   wage css   renders a stylesheet link to the stylesheet set with the css attribute  if the css attribute isn t set  a link to the wage css stylesheet is rendered  which includes the styles for wage toolbars  etc  for displaying a xml property with the coremedia richtext     grammar you should use this tag with the css attribute set to  coremedia richtext       attributes   css  optional   name of the stylesheet for which a link should be rendered  the stylesheet has to be placed in the css directory of your web application uriprefix  optional   uri to the context containing the css directory  if not set generator getcontextpath   will be used    
   wage menuitem   item in a wage menu  if selected will excecute the  javascript  command defined by the commandcode attribute or the wage command set via the command attribute  can only be used within a wage menu  attributes   commandcode  optional   javascript command to execute on selection of this menu item command  optional   command to execute via the wage commands manager if commandcode is not set  
   wage includescripts   includes coremedia templates defining javascript objects and or loads wage javascript packages  attributes   templates  optional   comma separated list of coremedia folder templateids  for which the uri will be included as src attribute of a  script  tag packages  optional   comma separated list of wage javascript packages to load  
   wage menu   drop down menu on a wage menu bar  contains menuitems  can only be used within a wage menubar  attributes   key  required   unique key for this menu  
   wage menubar   a wage menubar can be used to render a drop down menu bar containing one or more wage menus  which in turn contain menuitems grouped by menuseparators  attributes   styleid  required   an id for the menu styleclass  optional   style class to be used for the menu bar menustyleclass  optional   style class for the menus on the menu bar selectedmenustyleclass  optional   style class for a selected menu focusedmenustyleclass  optional   style class for a focused menu  
   wage menuseparator   separator for grouping wage menu items in a wage menu  can only be used within a wage menu  attributes   styleclass  optional   style class for the separator  
   wage resourcedisplacement   renders an icon and label for the displacement a coremedia resource  the icon and label will be rendered for the current resource  unless the  bean  name and property attributes are set  attributes   name  optional   name of a bean available in the pagecontext property  optional   bean property which has to be a resource  
   wage resourcelist   renders a html form element with hidden input fields for commonly used wage form fields  like resourceid   also instantiates a wage javascript resourcetable object  which is used to dynamically update the focus and selection fields for this form  placing  wage resourcerow  tags within this tag allows you to easily create html forms with selectable coremedia resources  by submitting this form to an appropriate action  for example the wage resourcelistaction   commands  like check in  can be executed on the selected resources  this tag extends the struts form tag  so you may also used other attributes allowed for this tag  attributes   action  required   the action to which the form should be submitted  
   wage resourcerow   renders a row within a resourcelist using the coremedia resource specified via the name attribute  can only be used within a resourcelist  attributes   name  required   name of the  resource  bean for which the row should be rendered property  optional   name of the  resource  bean property for which the row should be rendered styleclass  optional   style class to use for rendering the resource row  
   wage separator   renders a separator icon  a vertical line  for grouping entries on a wage toolbar  can be used only within a  wage toolbar    
   wage img   renders a html image tag with optional tooltip etc  according to keys which can be defined in property files  if the srckey cannot be found in any property file  this tag tries to get the image from the coremedia editor resources  this tag is an extension of the struts img tag  so you can also use any other attribute allowed for the struts tag  attributes   srckey  optional   key in a property file pointing to an image path  struts tag attribute  large  optional   try to get large or small editor icon  only used if srckey can t be found  true or false unselectable  optional   true or false  indicating if an uselectable  on  attribute should be rendered in the html tag  which is used to indicate to wage editors if this image can get the focus   
  why do we return the jlabel first and enter the text   hello   later  this is because customizecomponent will be called later  short before the rendering  it is good practice to execute  expensive  operations at this place   
  column classes for workflows     class   description   hox corem editor workflow columns tasktypecolumn   using this class  the type of the process or task is shown in the workflow list by its icon    hox corem editor workflow columns taskstatecolumn   using this class  the state of the task or process is shown in the workflow list by an icon    hox corem editor workflow columns taskdatacolumn   using this class  additional information concerning the task or process is shown  if you use this class  the sub element  componentfactory  has to be set  the following attributes can be used to define the information to show      class  the class which is used to show the content     hox corem editor workflow columns defaultdatapanelfactory will show the information owned by all tasks or processes    hox corem editor workflow foureyes foureyesdatapanelfactory will show the information unique to the processes of the publication workflows    own classes can be programmed  they must implement wfinstancecomponentfactory     processname  the name of the process  for which the class should be used    taskname  the name of the task  for which the class should be used  if this attribute is set  processname must also be set  then  the class should be used for the specified task belonging to the specified process   
   workflow name   step in workflow   simple publication     step publication     step approval     step publication      a user creates the workflow with all necessary resources    a user creates the workflow with all necessary resources    a user creates the workflow with all necessary resources    a user creates the workflow with all necessary resources       the resources are published  and implicitly approved  in one step  performed by the same user  who needs  approve  and  publish  rights    a second user  needs  approval  and  publish  rights  can explicitly approve resources      a second user  needs  approval  rights  can explicitly approve resources    a second user  needs  approval  rights  can explicitly approve resources        publication will be executed when finishing the task after all resources in the change set have been approved    workflow ends with approval of all resources in the change set    after all resources have been approved  a third user can accept the task         if not  the workflow is returned to its  composer      if not  the workflow is returned to its  composer      if not  the workflow is returned to its  composer           if the third user accepts the task  the publication is started automatically   
     option a   option b   option c   option d   the user accepts the task  approves the resource s and finishes the task  all resources are approved    the user accepts the task  does not approve all resource s  and finishes the task    the user rejects the task    the user accepts the task but delegates it to somebody else     the task  publication  is offered to all members of the group publisher role    the change set is sent back to the last editor    the task is offered all other members of the group approver role    the task is automatically accepted by this user  
     attribute   type   default   description   class   nmtoken    required   the name of the action   successvariable   nmtoken    implied   the name of a boolean variable that will represent whether the action was successfully executed   resultvariable   nmtoken    implied   the name of a variable that will receive a possible result of the action  if any  
  furthermore  every predefined action may contain a condition element  which will be evaluated to determine whether the action should be executed at all   actions can be divided into server actions which are running solely on server side and client actions  based on the class abstractclientaction  which are running on client and server side   client side actions  client action classes that are used to modify resources on the gui client respond to the following attributes  
     attribute   type   default   description   gui    boolean     true    defines whether a gui element will be shown on execution of the action   true   or not  e g  executing publishresources with gui  false  will not show the publication window    ignoreerrors    boolean     false    if set to  true   this attribute makes sure that the task containing the action will continue normally after an error was encountered    timeout   nmtoken          the timeout in seconds for the action  the default timeout is    seconds  
     attribute   type   default   description   resourcevariable   nmtoken    required   the name of the variable that contains the resource s  to be approved  
     attribute   type   default   description   documentvariable   nmtoken    required   the name of the variable that contains the document s  to be checked in  
     attribute   type   default   description   documentvariable   nmtoken    required   the name of the variable that contains the document s  to be checked out  
     attribute   type   default   description   sourcevariable   nmtoken    required   the name of the variable that contains the resource to be copied   destinationvariable   nmtoken    required   the name of the variable that contains the folder where the copied resource should be located  
     attribute   type   default   description   foldervariable   nmtoken    required   the name of the variable that contains the folder where the resource should be created   namevariable   nmtoken    required   the name of the string variable that contains the name to be used   typevariable   nmtoken    required   the name of the variable that contains the document type for which a document should be created 
     attribute   type   default   description   foldervariable   nmtoken    required   the name of the variable that contains the existing folder in which the new folder should be created   namevariable   nmtoken    required   the name of the string variable that contains the name to be used 
     attribute   type   default   description   resourcevaraible   nmtoken    required   the name of the variable that contains the resource s  to be marked for deletion  
     attribute   type   default   description   resourcevariable   nmtoken    required   the name of the variable that contains the resource s  to be disapproved  
     attribute   type   default   description   sourcevariable   nmtoken    required   the name of the variable that contains the resource to be moved   destinationvariable   nmtoken    required   the name of the variable that contains the destination folder for the move 
     attribute   type   default   description   documentvariable   nmtoken    required   the name of the variable that contains the document to open 
     attribute   type   default   description   codevariable   nmtoken    required   an integer aggregation variable   ignorepublicationerrors    boolean     false    whether an unsuccessful publication should be ignored   parametervariable   nmtoken    required   a string aggregation variable   resourcevariable   nmtoken    required   the name of the variable that contains the resource s  to be published   versionvariable   nmtoken    required   an integer aggregation variable  
     attribute   type   default   description   resourcevariable   nmtoken    required   the name of the variable that contains the resource to be renamed   namevariable   nmtoken    required   the name of the string variable that provides the new name of the resource 
     attribute   type   default   description   documentvariable   nmtoken    required   the name of the variable that contains the document to be saved 
     attribute   type   default   description   documentvariable   nmtoken    required   the name of the variable that contains the document 
     attribute   type   default   description   documentvariable   nmtoken    required   the name of the variable that contains the checked out document s   
     attribute   type   default   description   resourcevaraible   nmtoken    required   the name of the variable that contains the deleted resource s   
     attribute   type   default   description   timervariable   nmtoken    required   the variable that contains the timer that should be disabled 
     attribute   type   default   description   timervariable   nmtoken    required   the variable that contains the timer that should be enabled 
     attribute   type   default   description   task   nmtoken    implied  current task   the name of the task for which an exclusion should be established 
      attribute   description   debug error info   defines the log level  debug    error  or  info   value must be  true     message   the message which is printed to the log    facility   define an own log name for the output  if you use this attribute you can define an own log target for the ouput in the workflowserver properties file e g    log action   class fileaction  log action   selectors workflow  mylogname  info  log action   initargs  
     attribute   type   default   description   task   nmtoken    implied  current task   the name of the task for which a preference should be established 
     attribute   type   default   description   task   nmtoken    implied  current task   the name of the user task to skip  
      class   description   jcheckboxbooleaneditor   a check box   true  is shown as checked   false  as unchecked     comboboxdocumenttypeeditor   a combo box with the allowed document types    groupchoosereditor   a window which shows the available groups    resourcechoosereditor   a resource chooser window  like the one in the editor window    userchoosereditor   a window which shows the available users  
  example invocation of own editors  in the workflow definition you have defined a variable as follows  
     attribute   description   rowheight   this attribute determines the height of a row in the table  the height is given in pixels  
     attribute   description   class   name of the class with the predicate for filtering  in the workflow context  there are no predefined filter classes  the default class is  genericprocesspredicate  own classes can be written and must implement the interface hox util predicate   
     attribute   description   name   name of the process  for which the view should be configured  
     attribute   description   name   name of the task for which the definitions should be valid  
      attribute    description    class    this attribute defines the class which manages the startup of the workflow  own classes must implement the interface hox corem editor workflow workflowstartup    as a default  the class hox corem editor generic genericworkflowstartup is used  it sets the resource variable with the selected resource s  and opens a window for setting the other workflow variables  
  preconditions  preconditions for a successful publication are   all path information concerning the resource has to be approved too  if the resource is located in a folder never published before  this folder has to be published with the resource  so  add it to the change set or publish the folder before  withdrawals and deletions must be approved before publication  all documents linked to from a document which is going to be published have to be already published or included in the change set  this is because a publication that would cause dead links will not be performed    a document which is going to be deleted must not be linked to from other documents or these documents have to be deleted during the same publication         
  special cases  please keep in mind that     older versions cannot be published     example  if a version no    had already been published it is not possible to publish version no    thereafter  to do so  create a version no    from no       during a deletion  a resource that has not been published yet is moved to the recycle bin immediately   in addition  consult the previous tables for effects of a publication depending on the state of the resource  for all examples it is assumed that you have appropriate rights to perform the action       
  right after installation  you find the pages in the web inf directory of the ads  to make sure that a direct access to it is not possible by default  please copy the directories  admin  and  develop   for the develop pages  one level up to make use of them  keep in mind to secure those areas by means of your servlet engine  
  open this web page by entering the following address in your browser   http    server   port  coremedia admin  for  server  you have to enter the computer name where the active delivery server works and for  port  the port address on which you contact the ads   you can choose the following options on this web page   active delivery server status and setup      page for overview of the current configuration of the ads  in addition  the number of cached pages is shown  view page cache      displays all cached pages and their dependencies  the number of pages in the cache could be very high  so the opening of the page could last   sync cached pages and filesystem      the command leads to synchronisation of active delivery server cache and database  this template should be used if cache entries have been manually deleted  view page dependencies      with this page  the dependencies of a particular page can be displayed  in contrast to  view page cache  you don t have to display all pages in the cache  but you can choose the appropriate page by entering the uri in the appropriate form field  it should be noted that the uri is entered without authority  server names  port and active delivery server context  e g     templateid section xml jsp id        browse dependencies     with this page  the dependencies of the active delivery server cache can be browsed   web container information this page shows information concerning the web container in which the ads is running  java vm information     this page shows information concerning the java vm you are using   last but not least  you can change from the administration page to the development page  the functionality of the development page is described in the developer manual  
   rights works on explanation read document this is the most basic right  a document of the specified document type for which a user has no reading right cannot be read  the user doesn t even see the document    edit document this right enables the user to check out  save  check in   uncheckout  rename  move and create  documents of the specified types   delete document this right enables the user to mark the documents of the specified types for deletion   approve document  folder this right enables the user to approve or disapprove the documents of the specified types  for folders  it allows to approve a place change  publish document  folder this right enables the user to publish the documents of the specified types   supervise document  folder this right enables the user to create new rules that grant rights on the resource for documents or folders of the given type   folder folder this right allows structural modifications within the folder this right is granted for  to create  rename  move or delete subfolders  it does not allow renaming  deleting or moving of the folder itself   
  rights in a coremedia system are granted via group memberships  in order to obtain read right on a resource   the user cannot be granted this right directly but has to become a member of a group having this right   
  coremedia groups are highly project specific  and their hierarchies and dependencies are modelled after the needs of the editorial team     a default set of groups comes with every coremedia system in order to enable basic functionality  these are      admin       for project administration  user and rights management as well as troubleshooting     chief editor       has extended access to the project  can modify the project structure     approver       the explicit right to approve resources for publication and so make modifications available to the public     importer       no real users  technically required for automated or manual import of content     publisher        for publication of approved resources     editor        editorial staff  has access to certain parts of the project      system       no real users  technically required     
  right after installation  you find the pages in the web inf directory of the ads  to make sure that a direct access is not possible by default  please copy the directories  admin   for the administration pages  and  develop   one level up to make use of them  keep in mind to secure those areas by means of your servlet engine  
  this section of the user manual outlines the functionality and handling of the webeditor    the webeditor is both in interface and functionality modeled after the coremedia editor  but the coremedia editor is a stand alone application  a so called rich client  and the webeditor is a web application which runs in the browser  thereby  differences in the functional range  usage and performance can occur  this part of the manual focuses on these differences  
  coremedia sci supports the development of templates with the development pages  you can call the pages with your browser   http    host   port  coremedia develop 
 master live server failure    error behavior   the slave live servers connected to the master live server discontinues replication and attempts to log on again to the master live server periodically in order to continue replication  log attempts are written to the server log   publications are no longer possible and the publication which was running at the time of failure fails  you will see an error message if you try to start a publication or publication preview with the coremedia editor    error correction   in an environment without cluster  the watchdog of the master live server detects the failure and restarts the server  in the cluster environment  the cluster software controlls the watchdog  probedog   after server restart  the slave live servers log onto the master live server  and publications are possible again   
      master live server deadlock      error behavior    the clients hang up or receive error messages until the watchdog restarts the server     error correction    the watchdog detects the error and restarts the server  restarting the server implies a brief server failure  therefore  the further behavior of the clients corresponds to the behavior described under live server failure  
     master live server database failure    error behavior   transactions which are active at the time of failure or which first notice the failure are terminated with an error  the error is passed to the server and clients  further publications lead to errors  the slave live servers detect the malfuntion and attempt to reconnect  you can see the login attempts in the server log  transactions started after the server has detected the database failure are blocked until a new database connection is created  clients  replication of the live server  publication  etc   remain paused  appropriate messages are written to the server log    error correction   as soon as the database is available again the server creates new connections to the database  watch the server log  and blocked transactions are released  note  error free operation after a database breakdown cannot be guaranteed  since external components are also affected  e g  jdbc driver   if an error occurs here  it is usually recognized by the watchdog and remedied  by restarting the server   
     slave live server failure    error behavior   all ads connected to the slaveliveserver are forced to shutdown    error correction   the watchdog of the slave live server detects the failure and restarts the server  see the watchdog and slave live server logs   as soon as the slave live server is online again  the watchdog restarts the active delivery servers   
     slave live server database failure    error behavior   transactions which are active at the time of failure or which first notice the failure are terminated with an error  the error is passed to the server and clients  a replicator client is terminated  requests to active delivery server clients fail with an error  transactions started after the server has detected the database failure are blocked until a new database connection is created  requests to active delivery servers are paused  appropriate messages are written to the server log    error correction   because a database failure can lead to erroneously generated pages or blocked requests  the watchdog restarts the slave live server  in the meantime the second slave live server takes over the task of the first one  restarting the slave live server implies a brief process failure  all logged on active delivery servers are terminated  in its initialization phase  the slave live server will remain paused  until the database is available again  see server log   the active delivery servers cannot log on in this state  they are restarted by their watchdogs when the slave live server is online again   
      ads failure    error behavior   requests which were active at the time of failure are cancelled  later requests are refused  in both cases a browser displays an error page     error correction   the watchdog of the ads detects the failure and restarts the ads  in the cluster system  the load balancer must remove the failed ads from its list of active webservers   
     ads deadlock    error behavior   request are blocked and a browser displays an error    error correction   the watchdog of the ads detects the error and restarts the ads  see the watchdog log   further behavior corresponds to ads failure with subsequent restart   
  use the home folder as defined above only for your personal files  queries  preferences etc    don t use it for content that will be published  
  a coremedia project   be it a web site  be it an intranet application   is made up of structured content  this content is held in a database  but organized and structured by means of resources   
     document getproperty   query field   alternative query method   creator  user   creatorid  integer       modifier  user   modifierid  integer       editor  user   editorid  integer   editedby string username    approver  user   approverid  integer   approvedby string username    publisher  user   publisherid  integer   publishedby string username        lastfolderid  integer     
    choose file new group  enter the name of the group   anonymous   into the name of the group field  check the content server group box  press the  add  button in the middle of the window to add rules to the group   
    enter the name of the user   joe   into the user name field   enter the password   for simplicity joe   into the password and repetition field  press the paste group with chooser icon in the membership in field and select the group  poultryfan   press the disc icon in the toolbar to save the new group   now you have created all necessary groups and users   
  properties are inherited to subclasses  e g  page has a name property inherited from document  templates are also inherited  for displaying a document  coremedia sci calls the main   template of this document  if no template exists for this template the main   template of the  superdocument  is taken  all document types inherit main   from document type resource  if you want to alter the displaying of page a main   template for page can be added  that would automatically override the inherited version from resource  adding a main   template for page is done by storing a main jsp file in the appropriate directory      coremedia templates page main jsp 
  using the functions in the upper area  navigation can be simplified and clarity increased  the functions in detail are     admin home    develop home   switches to the  coremedia generator administration  or  coremedia template development  homepages    expand all   all document types are expanded    hide show properties   display of properties is suppressed globally  hide  or allowed again  show    if the viewdispatcher is being used  views of documents are displayed in the uml notation for operations  then there are two further functions     hide show views   as for properties  display of views can be suppressed globally    update views   the view templates are read anew from the file system  this function is also available in the  coremedia template development  region   if views are displayed  they are hyperlinked to the template source text  a click on a view opens the source text in a new window  the template can also be disabled there  
 for ldap enhanced systems  choose the appropriate domain      otherwise  leave this field empty   enter your user name     and your password       click on  login  button    the following errors can occur    user name or password are wrong or wrongly combined  type in again both  then click  login  again   all licenses are in use  wait until one of your co workers finishes and logs off  then start again  if this happens more often  please consider to buy more licenses    the content server cannot be accessed  restart the coremedia editor  if the same error occurs again  inform your system administrator    after successful login  the overview window opens and you can start working  
  if a document is not in its correct place  you can move it by cut and paste to the new location   
  if you move a document and cut it in its original location  it will not be removed there before you paste it into its destination folder   so  if you have cut a document and changed your mind in the meantime  you dont have to repaste the document  but keep in mind that this document is held in the clipboard  
  the new document appears in the document overview on the right hand side of the overview window  it is automatically opened in the document window so that it can be filled with content right away    
  note  to avoid confusion  no more than one folder or document with the same name may exist within a folder  if this is the case  you ll be asked to rename the resource in an opening dialog window  
   wage locale   gets the current locale from a resourceuri parameter and sets it as session attribute  use this tag to be able to make localized templates cacheable  attributes   sessionkey  optional   the key under which the locale should be set as sesstion attribute  defaults to org apache struts globals locale key uriparameter  optional   the resourceuri parameter containing the locale  defaults to cmrequestprocessor param locale  
   wage selectstyle   renders a drop down box which lets you select a style attribute for the selection in a rich text editing component  extends the struts selecttag  so you can also use other attributes defined for that tag  attributes   stylegroup  required   name of the style group  i e   list item   targettag  optional   tag to which a selected style attribute should be applied  i e    li   for the  list item  style group   defaults to  inline  
   wage styleoption   renders an entry for a  wage selectstyle  drop down box  extends the struts optiontag  so you can also use other attributes defined for that tag  attributes   value  required   name of the style  i e   list item   to be applied when this option is selected  i e   arial  for the  font name  group  
   wage packwindow   includes the wage packwindow js script in the output  which will resize the browser window on load to an appropriate size  no attributes  
   wage jsobject   defines a javascript objects from a given java object  for example    wage jsobject name  generator  jsobjectname  cap generator  methods  getserverprotocol getservername getserverport      defines a javascript object  cap generator  with methods as specified above  which will return the values from the according methods of the  java  generator object   attributes   name  required   name of the java object for which a javascript object should be defined property  optional   if given  the javascript object is defined for the  bean  property specified with this attribute of the object set with the name attribute scope  optional   scope in which to look up the java object jsobjectname  required   name of the javascript object to be defined methods  required   names of the methods of the java object for which javascript equivalents should be defined 
   wage windowicon   renders a window icon   link rel  shortcut icon  href        for the icon specified with the name attribute  the icon must be available in the hox corem editor icons windows package  attributes   name  required   the name of the icon for which the link should be rendered 
       this group needs read rights on the root folder  the menusite folder  the page document inside the menusite folder  the fish folder for all document types and for the freshcod  freshcod pic  mutton and mutton pic documents             if you are finished with the rules  press the disc icon in the toolbar to save the new group    now you have created the group  anonymous   please create  poultryfan  in anology before you continue creating the user  joe   the  poultryfan  group needs read rights on the root folder  the menusite folder  the page document inside the menusite folder and on the poultry folder for all document types    create the user  joe     choose file new user  
  the renaming of folders and documents is done in analogy    if you want to modify the name of the resource    select it  then    choose file   rename from the file menu   or right click the selected resource and choose rename from the context menu     
         enter the new name in the dialog box that opens now  
         click  rename  to let the change become effective  or click  cancel  to skip it   
         click  yes  to mark the folder for deletion  or click  no  to skip it   
  select the richtext field and start alike  
     attribute   type   default   description   variable   nmtoken    required   name of the variable in the subprocess 
     attribute   type   default   description   name   nmtoken    required   the name of the task   description   cdata    implied   the textual description of the task 
     attribute   type   default   description   name   nmtoken    implied   the name of the condition   description   cdata    implied   the textual description of the condition 
     attribute   type   default   description   value   cdata    required   the date in the format dd mm yyyy hh mm 
     attribute   type   default   description   value   nmtoken    required   the name of the document type  
     attribute   type   default   description   successor   nmtoken    required   the name of the successor task for the  else  case 
     attribute   type   default   description   varies   additional parameters according to the implementation of the action class  
     attribute   type   default   description   variable   nmtoken    required   the name of a new variable that iterates over all members of the aggregate   aggregate   nmtoken    required   the name of an aggregate variable   index   nmtoken    implied   the name of a new integer variable that is set to the current index in the aggregate during the iteration 
  in order to format lists in richtext documents  either  type in the text and format the list via tool bar  see illustration  or context menu  or preselect the format and start typing   the following list formats are available under   
     attribute   type   default   description   varies   additional parameters according to the implementation of the action class  
     attribute   type   default   description   class   nmtoken    required   the name of the expression class   varies    
     attribute   type   default   description   variable   nmtoken    required   the name of a new variable that iterates over all members of the aggregate   aggregate   nmtoken    required   the name of an aggregation variable   index   nmtoken    implied   the name of a new integer variable that is set to the current index in the aggregate during the iteration 
     attribute   type   default   description   name   nmtoken    required   the name of the task   description   cdata    implied   the textual description of the task 
      attribute   type   default   description   variable   nmtoken    required   the variable that contains the result value   index   nmtoken    implied   the optional index into an aggregation variable  given by a variable name or a constant value 
  opening documents in a link list quickly   to open a document in a link list quickly  double click on the document  the document will be opened in a new document window for editing  
     attribute   type   default   description   name   nmtoken    required   the name of the task   description   cdata    implied   the textual description of the task 
  these are available for nested lists      indent   makes a list item subordinate to its predecssor  see illustration       outdent   moves list items up one hierarchy level  
     attribute   type   default   description   value   nmtoken    required   the integer value 
     attribute   type   default   description   variable   nmtoken    required   the name of the document variable   index   nmtoken    implied   the optional index into an aggregation variable  given by a variable name or a constant value 
     attribute   type   default   description   variable   nmtoken    required   the name of the document variable   index   nmtoken    implied   the optional index into an aggregation variable  given by a variable name or a constant value 
     attribute   type   default   description   variable   nmtoken    required   the name of the document variable   index   nmtoken    implied   the optional index into an aggregation variable  given by a variable name or a constant value   property   nmtoken    implied   the optional name of a resource property 
      attribute   type   default   description   variable   nmtoken    required   the name of the timer variable 
     attribute   type   default   description   variable   nmtoken    required   the name of the resource variable   index   nmtoken    implied   the optional index into an aggregation varaible  given by a variable name or a constant value 
     attribute   type   default   description   name   nmtoken    required   the name of this task   description   cdata    implied   the textual description of this task   successor   nmtoken    required   the next task to execute after all predecessors have been joined 
      attribute    type    default    description    name    nmtoken     required    the name of this task    description    cdata     implied    the textual description of this task    forktask    nmtoken     required    the name of the task that forked the subprocess to wait for    successor    nmtoken     required    the next task to execute after the subprocess has been joined    processresultvariablec    nmtoken     implied    name of the variable of the subprocess that contains the result variable     localresultvariable    nmtoken     implied    name of the variable of the current process into that the result value should be stored  
     attribute   type   default   description   variable   nmtoken    required   the name of the variable   index   nmtoken    implied   the optional index into an aggregation variable  given by a variable name or a constant value   property   nmtoken    implied   the optional name of a resource property 
     attribute   type   default   description   variable   nmtoken    required   the name of the local variable that will be bound to the result of the first sub expression 
     attribute   type   default   description   variable   nmtoken    required   the name of the document variable   index   nmtoken    implied   the optional index into an aggregation variable  given by a variable name or a constant value   property   nmtoken    implied   the optional name of a resource property 
     attribute   type   default   description   name   nmtoken    implied   the name of the postcondition   description   cdata    implied   a textual description of the verified condition 
     attribute   type   default   description   successor   nmtoken    required   the name of the successor task in the  then  case 
  start a three step publication   to start a workflow and add one or more resource s  to the change set     select the resource s  in the overview window        select file new workflow   three step publication or new workflow   three step publication from the context menu         the workflow window opens with a newly created workflow and the  compose  task automatically assigned to you  the added resource is displayed    
     attribute   type   default   description   name   nmtoken    required   the name of the successor task  
     attribute   type   default   description   value   cdata    required   the string value 
     attribute   type   default   description   variable   nmtoken    required   the name of the document variable   index   nmtoken    implied   the optional index into an aggregation variable  given by a variable name or a constant value   property   nmtoken    implied   the name of the resource property to read 
     attribute   type   default   description   name   nmtoken    required   the name of a property as defined in the document type   value   cdata    required   a value of the appropriate type 
     attribute   type   default   description   name   nmtoken    required   the name of one predecessor task 
     attribute   type   default   description   name   nmtoken    implied   the name of the precondition   description   cdata    implied   a textual description of the verified condition 
     attribute   type   default   description   class   nmtoken    required   timer handler class that is called    name   nmtoken    implied   name of the timer handler    timername   nmtoken    required   name of the timer for which the timer handler is installed  
  to preview a document   either    choose file   preview       from the menu bar  or    select the document and press  alt   v    if you choose file preview a submenu opens up from which you can choose a specific browser or all configured browsers  from which browsers you can choose  depends on the configuration of your coremedia system  if you called the preview with  alt   v   all configured browsers will be called automatically  
  the settings for this browser preview are project specific   
  the single menus  their items  and symbols are explained throughout the following sections  
  in order to create a webdav folder on your computer  connect to network computer  the procedure is slightly different for the different windows versions    proceed as follows      
  windows xp open the windows explorer or go to my workplace  select tools connect network drive    activate  online disk space  or  go to your network neighbourhood and click add        continue in both cases     click  continue   select  choose another network computer   continue with step   of the windows      steps   
  every folder within the webfolder contains an automatically generated info file containing   the user name you re logged in with exported document types file extensions necessary to determine coremedia document types     this determination is necessary to define which coremedia document type is assigned to documents created   
  example    the illustration shows   doc documents assigned to the coremedia document type worddokument  if you create a new   doc document in ms word it is automatically saved as coremedia worddokument in the matching blob field    documents locked by you for editing  webdav applications locked by the document  the last error messages from webdav requests  errors can occur if you have insufficient user rights  http error      or if you try to save a file  e g  a file should be saved in a field and the mime types of the file and the field differentiate or a string too long for a string field should be saved      
  by clicking   unlock  you can manually unlock the file if the webdav application failed to do so automatically and the file is not yet available for other users  but this is troubleshooting  
  lock   to avoid that more than one user edits a file at one time  documents have to be checked out for editing  this principle also applies to webdav files  a webdav application opening a coremedia file might lock this file for other users and might as well block this file for other webdav applications of the same user  this lock might occur automatically with file opening as in word      or be caused by the user  dreamweaver   if the user had not checked out the file in coremedia before  this is done automatically by the webdav server when locking the file  when this lock is removed from the webdav application  either automatically or explicitly by the user   the document will be checked in again with all changes or the checkout revoked  changes not saved    
  the functionality is available in richtext documents too and works alike  
  you can add more information to a query by switching to the comment tab in the query window and taking notes  
  you can set the standard text attributes  background color      color      font       font size       language         the other attributes are xhtml compliant display options for the published document  they are  text      the name of the coremedia picture document   width     and height     in pixels  px   role      title     and float       read more about these at the w c s xhtml pages at http   www w  org markup         
  after you have inserted and positioned the image  check the preview  
  this chapter illustrates the basic features that are required to set up a project in the webeditor  
  the dialog box  create a new folder  appears  
         enter the name of your new folder in the name field     click  create  to confirm the procedure  or  cancel  to skip     
  in order to move or copy folders   select the folder   choose edit   cut  or the scissors icon in toolbar select the target location  and choose edit   paste  or the clipboard icon in toolbar  in order to copy folders  just choose edit   copy instead of edit   cut or the add to clipboard icon  you re prompted to rename the resource in case of identical names        
    select the document type  enter the name of your new document in the name field  click  create  to confirm the procedure   
  if a document is not in its correct place  you can move it by cut an paste to the new location    to move an existing document  proceed as follows  select the document which has to be moved   choose edit cut from the menu bar  select the target folder   choose edit paste from the menu bar   the document is pasted into the selected folder  
  the renaming of folders and documents is done in analogy   if you want to modify the name of the resource   select it  then  choose file   rename from the file menu  enter the new name in the dialog box that opens now  
  click rename to let the change become effective  or click cancel to skip it   
  the number of documents will constantly increase during the editorial process  in order to keep track of the plethora of documents you can use the query of the webeditor  you can create specific queries and store them in your profile  alternatively  you can use pre defined queries    technically speaking  queries are documents which can be saved  edited and copied  they are stored in the user s home folder  by default  this folder already contains one query document named myquery  
      menu bar   from the menu bar  you can access the query document  the clipboard and other windows        tool bar   from the tool bar  you can access the common document options and start the query        information about the query document   here you can find the status of the query document  checked out     and can select the version of the document        annotations to the query document   you can enter notes into the description and comment fields and save them with the query               list of the selected query options   you can select one of the document types  limit the number of query results to             or all hits or add search criteria to the query      each time you select a new search criteria from the combo box  it will be added to the list of search criteria        the search results will be shown in a separate window  
    choose the picture document  select it and click  choose   save it and view the result  
  documents can have link lists  link lists are special fields that can hold one or more links to other documents  the webeditor has a special tool bar for the editing of link lists  
  the login template checks whether the user is checked in or not  if the user is not logged in  the template shows the login fields  otherwise the user will be logged out   
  you might have to press the f  key in order to update the document window view  
  the following functions are available    tool nr  description     opens the document in a document window     opens the selected document in a new explorer window     inserts a link behind the currently selected link     removes selected document from the link list     moves the selected document to the very top of the list     moves the selected document up one position     moves the selected document up one position     moves the selected document to the last postion in the list  
  or  by manually constructing an  unnamed  subject consisting solely of groups  
  the default  anonymous  subject  before a client chooses to log in  it has no subject at all  since every rule in sci is bound to a group  such a client has no rights at all  therefore  in order to show content  you can specify a set of groups that a non logged in user will assume   for example   generator setanonymoususergroups new string      public company com     instructs the active delivery server to treat an anonymous user like a user that is in the group  public  in domain  company com   
  if you want to use the bea weblogic servlet container for your coremedia sci installation you need to mind the following points  extend the config bsh by the following lines   
  the content of  text  is included in two ways     as embedded text      place the content in the  text  element       example        text name  text    div   p    flowing text     p    div   text    as a separate xml resource      the content is stored in a separate resource and referred to by url given in the href attribute  the xml in the resource must be wellformed  the root element depends on the dtd specified for the field type and usually is  div   the url in the href attribute is relative to the main xml document containing the  text  element  or absolute  if the resource is a file  do not store the file in the importer inbox directory when the default subdirgenerator is configured in cm xmlimport properties  otherwise the importer will try to import the file and fail       example        text name  text  href     href text txt     the importer selects the embedded content if  text  element contains embedded content and a href attribute  the  xmlproperty  is used to specify xml fields in document types  since coremedia sci     this element replaces the former now deprecated element  sgmltextproperty   to be compatible with older releases this element can still be used in document type definitions  in this case the content of  text  must conform to the    coremedia query dtd in the expression field of the coremedia document type query    coremedia preferences dtd in the data field of the coremedia document type preferences    coremedia sgmltext dtd in all other cases   
  xml fields that conform to the now deprecated coremedia sgmltext dtd may link to documents with the elements  hox link  and  hox image  as shown in the  following example  
  links in xml fields  beginning with coremedia sci     xml fields conforming to any dtd can be defined  to link to documents from this xml fields use the attribute xlink href  the attribute value must start with the prefix coremedia    cap resources  followed by an internal or target id as shown below  
  this example contains a link to a document with the internal id info  the internal id must not contain a     character  to link to a field of a document append a     character and the name of the field  
  this example contains a link to the field xml in the document with the internal id info  the field name may not contain a     character  if you use a link in an  img  tag the link must point to the blobproperty of the document  links to other types of properties are not supported by the coremedia editor  the following example contains links with target ids  
   framefactory    parent elements   editor  
  you can use this element to add your own explorerview  publishview  queryview or workflowview classes to the editor  
  please keep in mind  that the databases and application servers have only been tested in coremedia compliant operating environments and therefore are only approved on these platforms   
  for proper operation  only use platforms with the approved service packs  
  the xml files used to configure coremedia sci components are processed by the beanparser  which is a basic part of the system  as such  it is used to     read the license    define document types and workflows    configure editor  watchdog  retrieval  feeder and syndicator   the beanparser processes the xml files as follows     for each xml element it tries to instantiate an object of a class  which is determined by a factory or via the class attribute  the object is created via java reflection and a zero argument constructor    if the xml element occurs inside another xml element  it tries to set the object created by the inner element on the object created by the outer element  for this  it calls a setter method and passes the object  the setter method may be named set element name     add elementname    or simply set   or add      for each attribute of an element it calls a setter method on the object that was created when parsing the element start tag  the setter method may be named set attributename     add attributename    or simply set   or add     example   assume the following xml file  
  the beanparser will execute the following steps  create an instance of class com example firstelement  call setattribute   ho   on that instance  create an instance of class com example secondelement  call setattribute  hi   on that second instance  call firstelement setsecondelement secondelement   i e  set the object created in step   on the object created in step     advanced features   the class attribute has a special meaning as it determines the name of the class to instantiate objects from  for this attribute  no setter methods has to be defined inside the class   the beanparser works without an xml document type definition  dtd   but in connection with a dtd  it makes use of id and idref feature of the xml parsers  the object  that has been created by the element with the idref attribute  is substituted by the object that is defined the corresponding id attribute  again  no setter methods have to be defined inside the involved classes   
      attribute    description    autocheckout    setting this attribute to  false   you can disable the auto checkout  start typing in a checked in document and it will be checked out automatically  functionality of the coremedia editor  default is  true       
  in this chapter  you will find general settings which must be done for each template    content type of a page   a page must always define a content type  otherwise  text html   is assumed  it is possible that a template delivers content of different types  for example depending on the user agent  in such a case  where the content type is not known in advance or more than one type is possible  you must declare the content type   application x coremedia dynamic   in addition  you have to register an implementation of the interface hox corem servlets contenttyperesolver with the generator that can dynamically compute the content type for a specific invocation of this template  please see the api documentation for details    the content type determines several things      for outermost templates  it determines the content type sent to the browser    the charset parameter determines the encoding of the jsp writer  see the jsp specification for details   coremedia recommends using contenttype  xxx charset utf    for all textual templates  note that the jsp file itself has to be encoded in utf    too  if you want the jsp to be encoded in iso        but still have it deliver utf   encoded text  you have to add a pageencoding attribute to the jsp page directive  templates that do not deliver textual content  i e  write directly to the servlet response s output stream  should not declare an encoding     the content type may help to distinguish fragments from whole pages  the generator allows you to prohibit direct delivery  as opposed to inclusion  of certain content types through its  adddeniedcontenttype method    examples  
  if the resource selected for publication has been changed and moved or renamed  two entries for this resource appear in the change set  a moved resource is marked in the column  change   this only applies to documents already published  because the folder  i e  path information  has to be published too with the first publication of a resource  
  you can also start a workflow without adding one or more resource s  to the change set    open the workflow window    choose the menu item file new workflow   three step publication        the workflow window opens with a newly created workflow and the  compose  task automatically assigned to you  no resources added yet  a change set is a number of resources assembled in one workflow to be checked and published  to create a change set    start the workflow  and add resources to the change set     optional  add more resources   optional  publication preview  if errors occur  add more resources if necessary  the preview assumes  that all resources are approved and all documents are checked in  the preview does not check for checked out documents     optional  delegate the task   complete the task   to create a change set you have to be a member of the relevant group  
  to avoid confusion  only one resource with a given name is allowed in a folder  if a resource with the given name already exists  you will be notified on saving  you can change the name of the new resource choosing the menu item file rename  
  you can edit resources in the workflow window  therefore the amount of usable menu items in the menu bar depends on the selected resource and the user rights       the menu bar contains other menu items if you have selected a simple title document instead of a complex document containing multimedia objects     an editor has fewer rights on a document than an editor in chief  a sports editor works on other documents than a politics editor    because of the aforementioned reasons  it could be possible that some of the menu items are not visible or usable in your coremedia editor  
      search option    modifiers    definition    approval date    less than   greater than    determines the time span within a document had been approved    approved    true   false    lists all documents currently approved    approver    equals  user name     lists documents approved by this user    checked out    equal   true   false        creation date    less than   greater than    determines the time span within a document had been approved    creator    equals  user name     lists documents created by this user    editor    equals  user name     lists documents edited by this user    id    equal   less than   less equal than   greater   greater equal than    searches for documents of the defined id range    is referenced by    the document    lists all documents this document is linked from    last folder    equals  folder     lists documents which have been in this folder before    limit to stock or trash    select one    recommended for recycle bin search as well as in large projects    modification date    less than   greater than    determines the time span within a document had been modified    modifier    equals  user name     lists documents modified by this user    name    equals   less than   greater than    searches for documents of the defined name range  numeric or alphabetic     only latest version    true   false    lists only the latest versions of all documents    path    descendant of  folder     searches in specified folder and subfolders    publication date    less than   greater than    determines the time span within a document had been published    published    true   false    checks if the document had been published before    publisher    equals  user name     lists documents published by this user    references        lists all documents this document links to    selected for deletion    true   false        to be published        new version  moved or deleted    version    equal   less than   less equal than   greater   greater equal than    searches for documents of the defined version number range 
  queries  like all other documents  are saved as documents  like documents  queries can be copied  renamed  moved or opened  a query will be automatically opened in the query window  not in the document window  
  you can directly take documents from the query result window to the workflow  proceed as follows     select the documents for the workflow      select file new workflow     and select the appropriate workflow from the opening window        the workflow window opens with the selected document     
  you select a resource with a click of the mouse button  selected folders are highlighted in blue in the folder overview  documents in the selected folder are shown in the document overview  
  the new document opens automatically in the document window  you can immediately enter content  the document appears only in the folder overview  when you save it or check it in   
  a document cut from the start folder  will not be deleted from this folder until you paste it into the target folder  therefore  you don t have to revoke the cut operation if you change your mind concerning the moving of the document  but mention  that the document is still in the clipboard  
  save binary data   you can save binary data using browser functionality     click the blue text  testblob   blob  with the right mouse button  the context menu of the browser opens    choose the menu item save target as    and save the binary data   
  delete binary data  to delete binary data from the document proceed as follows  you must have checked out the document     click on the mime type field of the field of which you want to remove the data  the field gains the focus    click the recycle bin     symbol in the tool bar    save the document or check it in   you have removed the binary data from the field  
  open binary data  you can open binary data in external applications  click on the field mime type of the field whose content you want to open  the property gains the focus  click on the blue arrow symbol     in the tool bar   or click on the blue printed name of the field   the binary data will be opened in an external application  
  the settings of the preview are project specific  
  if another user has checked out a document it s read only for you  you can t check it out or edit it  the  corresponding menu items and buttons are deactivated but they are not greyed out  all other functions for editing the document are also deactivated  the document window looks as follows      
  after composing the search list and completing the task  the options task will be assigned to you and automatically accepted  here  you can enter the options for search and replace  
  the layout of the publisher window is simple        the menu bar with the common functions        the toolbar with quick access to the most important functions        the result list  here you ll find the success of the publication for each involved resource  
      menu item    sub item    functions    check out        checks out a query document for editing     revoke check out        revokes the check out  all changes will be lost     check in        checks in the query document and saves all changes     save        saves changes  if you chose revoke check out later all changes are lost anyhow     rename        renames the selected query     close        closes the query window  if the query window is the last open coremedia editor window  then the editor will be aborted  
      menu items    sub items    functions    add condition        adds a search criteria to the query      remove condition        removes a search criteria from the query  
      menu item    sub items    functions    start query        starts the query     stop query        stops a running query  
     menu items   sub items   functions   previous document      opens the document previously displayed in this window  if it exists     next document      open the next document which was displayed in this window  if it exists     open in explorer      opens a document selected from the query result in the explorer window  simultaneously  the according folder will be opened in the folder overview     copy to clipboard      copies a document selected from the query result to the clipboard   
      symbol nr     function           checks out a query document for editing            revokes the check out  all changes will be lost            checks in the query document and saves all changes            saves changes  if you chose revoke check out later all changes are lost anyhow            adds a search criteria to the query            removes a search criteria from the query            starts the query shown in the query window            stops the running query  
  the publisher window shows all information concerning the publication or publication preview      it shows the status of the active query      if a publication fails  it shows details on the failed publication      it shows all publications in the queue      it shows a history of publications    the window consists of three parts        the menu bar allows access to all functions        the toolbar allows direct access to the most important functions         the three tabs own publication  queue  all publications show the wanted information      own publication shows the result of your publication  you can see the status of your publication  the success   errors etc      queue shows all publications in the queue of the publisher      all publications shows a history of all publications which were executed as long as you have opened the publisher window     
  the administrator can create  edit and delete users and groups in the user manager window  all other users can change their password  the window is composed of three parts        the menu bar which gives access to all functions        the toolbar which gives easy access to the most important functions        the working part in which you edit users and groups  if more than one user or group is opened  tabs will be created for each of them   
      menu item    sub items    functions    cut        cuts the selected user grops and copies them to the clipboard     copy        copies the seleceted users groups to the clipboard     paste        pastes user groups from the clipboard into the selected field     membership in    paste  paste group       you can insert groups from the clipboard  paste  or using the dialog box  paste group     into the field membership in     members    paste  paste user     paste group       you can insert groups or users from the clipboard  paste  or using the dialog box  paste group     paste user     into the field member  
  you update the user manager window using this menu item  
      symbol nr     function           create a new user            create a new group            opens a user for editing            opens a group for editing            saves changes  also saves newly created users and groups            deletes the active user or group  a dialog box opens and asks for confirmation            cuts a user or group from the fields members or membership in            copies a user or group from the fields members or membership in to the clipboard            pastes a user or group from the clipboard into the fields members or membership in             refreshes the user manager window  
  the document type window has only one area     below the menu bar      in this area  you will find the document types defined in your coremedia system  double click on a document type and you will get detailed information on the fields of this document type  
  this menu item closes the window  
  coremedia sci has a special window for creation and administration of workflows  this window holds three sections below menu bar     and toolbar         task and workflow overview          tasks or workflows to be edited are displayed here    detail information window          here you find all relevant information about the workflow which are partly editable  it also displays resources ready for approval  a document selected here opens in the detail view        document window          displays a selected document in the detail information window before  double click the document to open in a separate window  then  available menu entries are activated   
      menu item    sub items    function    start workflow        this function is only activated  using customized workflows  depends on the license   if so  it starts a newly created workflow     abort        aborts a workflow     resume        continues the processing of a suspended workflow     suspend        suspends the processing of a workflow  a task edited by a user can not be completed     accept task        accepts a task for editing     reject        rejects the editing of a task  it will be removed from your task list     skip        this feature can only be used in custom made workflows  depends on the license   if so  you can skip the current task and continue with the next one     retry        if a task aborts  it will be marked as erroneous in the task list  you can restart the task after fixing the error     nominate           you can nominate users or groups for the processing of the task in order to narrow the choice  you need the right to use this feature     user        nominate to user     group        nominate to group     complete task        you can complete the task after finishing all work on it     delegate        you can delegate an accepted task to another user  the task will be automatically accepted by this user     cancel        you can cancel a task you have already accepted  the task can be again accepted from all authorized users     save        saves changed workflow variables and or edited documents     properties        show the properties of the selected workflow process or task     close        closes the workflow window     exit        exits the webeditor and closes all windows        
      menu item    sub items    functions    cut        copies the selected resource s  from the change list to the clipboard      copy        copies the selected resource to the clipboard  a copy will be pasted to the target position     paste        pastes the content of the clipboard to the current position of the change list  it is not possible to paste documents in documents but in folders  
  instead of the  warning  value in the third line  you can also use the log levels  error    critical    alert  or  emergency     apache log j   the following coremedia component use log j logs      jms receiver 
      attribute    description    name    the name of the document type     
  important  to guarantee high performance of the whole system  correct installation and regular database maintenance is necessary  in particular  the statistics data for tables and indexes must be updated daily according to the manufacturer s instructions  
  older clients cannot always deal with the corrected xml  so nested lists may get corrupted  vice versa  the bug fixed clients cannot deal with the invalid xml  the webeditor shows parse errors  the coremedia editor displays corrupted lists and the ads complains about the empty xml lang values   so  update the cap server and all clients when updating to coremedia sci         
  up to coremedia sci        the richtext pane of the coremedia editor produced xml for nested lists which was not valid according to the coremedia richtext     dtd   in addition  attributes with empty values have been stored by the editor which was incorrect in case of the xml lang attribute since the empty string is not a valid language identifier  both problems have been solved now  but if you have started with coremedia sci     lower than build    your content may contain such incorrect xml  by default  the coremedia server corrects invalid xml in the richtext pane automatically now  if you are sure  that no incorrect content is in your repository  e g  when you have started with coremedia sci         you can switch off the converter  use the following property    sql store convert correctrichtext false    by default  the converter is enabled   true    
  the dialog box for internal links in richtext fields contains the following input fields      the link field      click on       to open a file chooser in which you can select the coremedia document to link to    the show field      you define how the link target will be shown  e g  in a new browser window  select new  or in the same window  select replace     the role field      you can define a role for the link which will be analyzed   project specific   by the active delivery server    the title field      you can define a title for the link  this might be shown e g  as a tool tip in the browser    the actuate field      you can define when the link should be interpreted  this can be at a mouse click  on request  or at loading time of the page     the usage of the fields      is project specific and optional  see the w c website for more details  http   www w  org tr xhtml       formating           you define the formatting of the link text  by default  the text will be shown with blue font color and underlined  
  in addition  you can use the attribute editor to define the bullet and the standard formatting options of the text  
