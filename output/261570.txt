

Session Management

The session manager and user sessions are the main elements of Social Software session management.

Session Manager

The session manager (interface com.coremedia.sse.base.session.SessionManager), available in the application context as bean "sessionManager", is responsible for creating user sessions. It provides information on 

the number of users online (#getNumberOfOnlineUsers) and provides online users queries,
the number of open sessions (#getNumberOfOpenSessions) and provides open session queries,
and information on the sessions of a given user.

In order to create a new user session, use the Session Manager method #createSession (see the authentication example in the previous section).

User Session

The user session (interface com.coremedia.sse.base.session.UserSession) represents a session a logged-in user has with the Social Software system. It holds a reference to the User resource.

Session Creation

The Session Manager is responsible for creating new sessions (see above).

Session Termination

User sessions can be terminated / closed by calling #close on them. Note that this does not close or invalidate any HttpSession.

Cascading Session Termination: Usually, it is required that user sessions are closed when the associate HttpSession is closed or invalidated. Two options are available in order to achieve this.

If you are using Spring MVC and if you are using RequestAttributes#setAttribute and #getAttribute to store and retrieve User Sessions as a request or session scope attribute value, then register a com.coremedia.sse.base.session.UserSessionDestructionCallback. The wrapped user session will be closed when the scope is destroyed (the request is completed or the session terminates, respectively). 

Example:

RequestAttributes attributes = new ServletRequestAttributes(request);
  attributes.setAttribute(
  sessionAttributeName,
  userSession, RequestAttributes.SCOPE_GLOBAL_SESSION);

attributes.registerDestructionCallback(
  sessionAttributeName,
  new UserSessionDestructionCallback(userSession),
  RequestAttributes.SCOPE_GLOBAL_SESSION);

If you are not using Spring MVC, you may use the simple Servlet API fallback. When storing the User Session in the Http Session via calling #setAttribute (which typically happens just once per session), you must first decorate / wrap the plain UserSession in a com.coremedia.sse.base.session.UserSessionBindingListenerDecorator (which implements the UserSession interface). The decorator implements the HttpSessionBindingListener interface and will automatically close the User Session when the attribute is manually unbound from the HttpSession or the HttpSession is closed. Note that this is ONLY an option when you are NOT using the above mentioned Spring MVC and scoped attributes.

Request-local access to the current user session

Most applications require access to the active user session while servicing an HTTP request. For this common purpose, the SSE default configuration provides the user session context. It is available in the application context as a bean with name "userSessionContext" and implements the com.coremedia.sse.base.session.UserSessionContext interface. The implementation class configured by default is com.coremedia.sse.web.ServletUserSessionContext, which should be appropriate for many applications. The following descriptions assumes the use of this implementation, although you may replace the bean with your own implementation.

inject the ServletUserSessionContext ("userSessionContext") bean into your login controller (which creates the user session), and store the user session reference in the HttpSession by calling ServletUserSessionContext#storeInHttpSession
add the com.coremedia.sse.web.ServletUserSessionContextInterceptor to your handler chain in order to make the user session available to the ServletUserSessionContext while the request is being handled
during request handler execution, the current user session will now be available via UserSessionContext#getUserSession (inject the "userSessionContext" bean where access to the session is required)
inject the ServletUserSessionContext ("userSessionContext") bean into your logout controller (which calls UserSession#close), and remove the user session reference from the HttpSession by calling ServletUserSessionContext#removeFromHttpSession

If the "userSessionContext" bean is setup correctly, the current user information will be added to the change log entry whenever a change is made to a SSE element while the request is being handled. This information is currently not accessible via the SSE API.