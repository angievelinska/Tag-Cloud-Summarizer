

Social Software Extension client library

One of the characteristic architectural features of the SSE is that no central server exists to mediate access to the shared repository. Instead, the architecture is designed for decentralized writers accessing the repository. At the core of all SSE components and SSE-enabled applications, the client library is the part of the application stack encapsulating repository access. To reduce the load on the underlying database, the client library implements a read cache with a write-through strategy for repository modifications. Most importantly, the SSE client library is designed to be deployed in web applications based on the Content Application Engine (CAE) and integrates with the CAE cache to provide transparent caching with event-based invalidation.

In most scenarios, multiple instances of the client library will access a shared repository, including multiple CAE instances and other SSE components, such as the Management Views. In this case, there will be some latency before repository updates written by one instance have been distributed to all other instances. During this short period of time, other instances may read stale data from the cache. Therefore, application developers should take measures to ensure that end-users do not interact with the SSE repository via different application instances within a single session in order to avoid surprises caused by the event distribution latency.

Similar to the CMS content repository, the Social Software repository has the ability to notify listeners of repository changes via an event mechanism.