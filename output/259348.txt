

hOn the left-hand side of this picture, you can see the resource types supporting the storage of user generated content. The type UserContent is the abstract base class with the central properties title and text. These properties may hold the caption and the body of the text some user has submitted, respectively. In contrast to the title property, which is a plain string, the text property may contain structured XML text. 

The concrete XML schema for the text property is left open here, it must be defined by concrete subclasses. The two concrete subtypes provided by the base module, RichTextUserContent and XhtmlUserContent, define coremedia-richtext-1.0 and xhtml-1.0, respectively. You will have to define your own sublcass if you want to use a different XML schema (How to register custom schemas is described in section).

If the user who has submitted the content - the "author" - is somehow "logged in" and therefore known to the system, that user is normally represented by a User resource within the SSE repository. In that case, the UserContent resource is associated with that User via the Ownership relationship. The author is said to own the UserContent resource. Therefore, Ownership is a generalization of the author relationship, which is useful in other contexts as well. The owner of a Manageable resource will always be able to change the ACL entries for this resource, this right can never be retracted.

For the case that the author of some user content is not represented within the system, there are properties of UserContent which may at least some hold basic information about the author such as a name and an e-mail address. This is to support anonymous commenting on a web site. An author not authenticated to the system will usually have to fill out at least two form fields corresponding to this information, and maybe an address field also.

A UserContent resource might also be attached with one or more Media resources via the Attachment relationship. These may hold additional data such as pictures or videos. The data property is of type Blob and holds the binary data as well as the MIME type. If Media resources are attached with UserContent objects, their life cycle is intended to be the same as that of the user content resource. That is, if the user content resource is deleted, the attached media resources should be deleted as well. 

On the right-hand side of the above picture are depicted the resource types intended for user and user profile management. User and Group resources are generalized to the Subject resource type. Each subject has a name which must be unique within the repository. Subjects (and, therefore, both users and groups) might be associated with arbitrary profile information, organized into resources of type ProfileCard. 

There are two profile card types predefined within the base module: a VCard type for the usual personal and contact information of a person or organization, representing something like a business card, and a PasswordCard type. The latter is intended to store password information for a user if authentication is to be done with the simple name/password authentication strategy shipped with the SSE (see the next section for more information on user providers and authentication strategies). For other profile data specific to your application, you may extend the ProfileCard type with your own subtype and define the properties you need.

The ProfileDetail relationship connects subjects with their profile data. Since the cardinality on the profile card side of this relationship is not constrained, there might exist arbitrary many profile cards for a given subject, even of the same ProfileCard type. Keep this in mind when working with profile data. If it makes sense and the application allows to store multiple profile cards of the same type, there is usually also a special card property defined which discriminates between the different cards of a given subject, so that the application knows what card is used in which context. For vcards, the organization property may take this part, so that a user may have different vcards, one for each different organization.

This completes our brief discussion of the resource type overview given in the above picture. The following picture now provides a closer look at the relationship types which connect resources of the types discussed so far:

