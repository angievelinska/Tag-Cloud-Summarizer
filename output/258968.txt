

The Query API provides a generic, programmatic way to find objects stored within the SSE repository. Rather than concatenating string fragments into some query language like SQL or EJB-QL, which is a cumbersome and error-prone process, you build your queries by creating objects representing certain aspects of a query, combine them programmatically, and finally pass them to a query instance for execution. 

Following the general structure of the SSE API, the query API is divided into two layers. The core layer, to be found in the package com.coremedia.sse.core.queries,  provides a raw, low-level access to resources and relationship objects as they are stored in the database. A core level query is created directly from the Repository using Repository.createQuery(ElementType type). The provided element type defines the domain of the query, the initial set of resources or elements the query operates upon. If this result set is not restricted further (see below), the query will return all elements of the given type which exist within the repository (with the exception of deleted resources, we will come back to this later).

At this point, you are forced to decide whether you want to search for resources or relationships. One query for resources and relationships is not possible. This means that you may not pass the top level Element type here, you have to pass some subtype when creating a repository query. For the current implementation you can choose between Resource and Relationship.

Building upon these core services, a higher level, more domain specific layer is defined in the package com.coremedia.sse.base.queries. It provides a higher-level access to these resources. This layer generally operates on Java beans which is a natural fit with the CAE programming model. Application programmers will generally prefer to stay on this level. You create a domain level query with the base module by calling BaseModule.createQuery(ElementType type). The same restriction to the type parameter applies here: you have to decide whether you want to search for resources or relationships.

Once you have created a query instance, you may restrict the result set of a query by adding search criteria with Query.where(), add orderings via Query.orderBy(), apply a Projection by calling Query.setProjection(), and limit the size of the result list by calling Query.setLimit(). For result paging, you may also set the index of the first item to be returned by calling Query.setStart(). Finally, the query is executed and the resulting elements are retrieved by calling Query.list(). 

