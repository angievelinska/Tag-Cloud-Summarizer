

Using Criteria

Criterion is an object-oriented representation for some condition which must be satisfied for an item if it should be included into the query result. Criterion objects are, as well as Projection and Order instances, created using criteria factories. 

The base module provides several criteria factories. Each one is designed for a specific domain model type. For example, there is a criteria factory designed for UserContent which is called UserContentCriteria. 

The following example query retrieves users with the name "Alice".  Note that most query methods return the query object itself, so we can simply chain together our method calls: 

List<User> users = (List<User>)  
  baseModule.createQuery(baseModule.getUserType())
   .where(baseModule.getUserCriteria().nameIs("Alice"))
   .list();

This query is yielding resource beans of type User. The result set is restricted by a criterion requiring the user objects to have a property with the value "Alice".  The citerion factory method UserCriteria.nameIs(String value) is implemented by using the generic method ElementCriteria.propertyIs(String propertyName, Object value). It is provided just for programming convenience, you could as well use the generic method.

The following query retrieves user content objects which have been tagged with the tag "social": 

List<UserContent> userContentByTag = (List<UserContent>)  
  baseModule.createQuery(baseModule.getUserContentType())
   .where(baseModule.getUserContentCriteria()
   .taggedWith("social"))
   .list();

This query is yielding resource beans of type UserContent. The result set is restricted by a criterion requiring the user content objects to be tagged with "social".  There might be quite many content objects tagged like this, so it is a good idea to restrict the number of results using the Query.setLimit()method. 

Limiting the size of the result set generally makes sense only if we also impose an ordering on it. Otherwise it will be database implementation dependant which items are included in the result list, these may vary each time we execute the query. So we also order the result list by the creation date by using Query.orderBy():

UserContentCriteria userContentCriteria = 
     baseModule.getUserContentCriteria();
List<UserContent> userContentByTag = (List<UserContent>)  
  baseModule.createQuery(baseModule.getUserContentType())
   .where(userContentCriteria.taggedWith("social"))
   .orderBy(userContentCriteria
   .orderByCreationDate(Order.Direction.DESCENDING))
   .setLimit(20)
   .list();

Note that the order is chosen to be descending so that we get the 20 newest user content objects which exist in the SSE repository.

Again, there are two layers of criteria factories. The core level criteria factories are the class ElementCriteria and its two subclasses ResourceCriteria and RelationshipCriteria, all within the com.coremedia.sse.core.queries package. These are the foundation on which the domain level criteria factories in the com.coremedia.sse.base.queries package are build upon. The core level criteria factories should be used in conjunction with core level queries created from the repository, whereas the domain level factories should be used in conjunction with queries created from the base module (see above).

The topmost criteria factory classes are ElementBeanCriteria and its two subclasses ResourceBeanCriteria and RelationshipBeanCriteria. These carry the term "bean" within their names to emphasize the fact that they operate with CAE beans rather than the core SSE element objects. In particular, they provide transparent conversions between beans external to the SSE repository (that is, all beans which are not derived from com.coremedia.sse.beans.ElementBean) and their representational proxy within the SSE repository (instances of com.coremedia.base.model.ExternalReference), using the IdProvider and the ElementBeanFactory configured for the base module. This comes in handy if you want to find all comments to some CAP content objects, for example. The CAP content objects are stored within the CAP Content Repository, whereas the comments are stored within the SSE repository.

In contrast to the three core level criteria factory classes which are not subclassed any further, these three domain level criteria factories merely provide the generic foundation for more criteria factory classes which can be found in the same package. They add more factory methods which are specific for the corresponding domain model type. For example, factory methods for the resource type User are bundled within the factory class UserCriteria, and factory methods for the relationship type Voting are bundled within the factory class VotingCriteria.

This criteria factory class hierarchy is designed for extensibility. It is intended that you define your own criteria factory classes if you extend the base module domain model. This should be done by subclassing the factory class which corresponds to the base module domain model class that has been extended. This new criterion factory is then the place to define factory methods specific to your domain.

The predefined criteria factories found in the base module suffice as long as you do not extend the base module domain model by defining your own element types with their own properties. In that case, you won't be able to query for the new properties you defined. This is because the property criterion factory methods check whether a given property is defined within the element type of the factory.

However, subclassing criteria factories is not always necessary. Most of the time it will be sufficient to just create a domain type specific criterion factory instance by instantiating one of the existing factory classes, passing in the domain type to the constructor. This way, you may already use all the new properties defined within your domain type. Finally, if you do not define any new properties and also do not want to provide any factory methods which encapsulate some domain specific logic for programming convenience, you may always use the criterion factory provided with the base module. The criterion factory of the base module is  most specific to your new element type.