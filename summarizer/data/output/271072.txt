

The CoreMedia Lightweight Portal comes with a number of extension interfaces, which need to be adapted to the concrete CAE application. A default implementation for the Starter Kit is included, and is installed automatically by the installer. If significant Starter Kit modifications have been applied in a project, or if the project is not based on the Starter Kit, you should revisit these extension interfaces.

In order to integrate the CoreMedia Lightweight Portal into your deployment process, you need to know the parts that are customized when installing the CoreMedia Lightweight Portal.

Installing the CAE Portlet Container

The CAE Portlet Container, without the Starter Kit specific files, comes as a bunch of zip files, each containing some additional files to be added to a certain place in your CoreMedia CMS installation.

The following zip files are included:

cap-objectserver-portletcontainer-api.zip
cap-objectserver-portletcontainer-contenttypes.zip
cap-objectserver-portletcontainer-tomcat.zip
cap-objectserver-portletcontainer-tools.zip
cap-objectserver-portletcontainer-webapp.war

Content Types

In each Content Server installation, you have to add the portlet container specific document type definition files and xml schema definitions from cap-objectserver-portletcontainer-contenttypes.zip.

config/contentserver/doctypes/portletcontainer/*.xml
lib/xml/*.xsd

Tools

In an installation directory that contains the infrastructure for command line tools (such as the content management environment Content Server installation), add the portlet container specific command line tools from cap-objectserver-portletcontainer-tools.zip:

bin/*.jpif
lib/*.jar

Portlet Container

In the servlet container's global class path, the jar files from cap-objectserver-portletcontainer-tomcat.zip need to be added:

lib/*.jar

In a standard CoreMedia installation, these would go to jakarta-tomcat/lib/*.jar.

CAE Webapp

In your CAE webapp, additional files from cap-objectserver-portletcontainer-webapp.war are required. Note, that this is not a complete war file, but only an overlay onto an existing CAE webapp.

These comprise CoreMedia and third party jar files, spring files and dataview definitions that customize and extend the CAE's behaviour, a tag library descriptor for the CoreMedia portal tag library, and a partial web.xml.portletcontainer to be mixed into your web.xml.

There are only two cases where you need to modify an existing file for the CAE Portlet Container:

You have to merge the partial web.xml.portletcontainer with your web.xml.
If you have a custom faces-config.xml, you have to merge it with the portlet container's faces-config.xml.

Extension interfaces

In order to use the CAE Portlet Container in your CAE application, you need to implement the following:

a document type that represents a portlet window in your layout structure
a content bean class for that document type
a strategy that finds all portlet windows on a page
a template for your portlet window document type that uses the portal taglib

CMPortletWindow document type

In order to represent the place where portlets are placed on a web page, you need to add a custom document type. This type needs to fit into the document type hierarchy of your CAE application, and needs to provide the information required by a portlet window.

The content bean class for this document type must implement the interface com.coremedia.cae.portletcontainer.CMPortletWindow, which defines just one method:

CMPortletInstance getPortletInstance()

You will probably implement this by defining a matching link list property in your portlet window document type. The link target type should be CMPortletInst, which is the document type corresponding to the CMPortletInstance bean class. Assuming your document type is called MyPortletWindow, the relevant parts of your doctypes.xml file would look like this: