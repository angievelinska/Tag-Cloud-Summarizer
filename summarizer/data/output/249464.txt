

CoreMedia Analytics offers three methods for tracking page views:

By means of an interceptor in the Content Application Engine. In this case the page view is counted immediately after a page has been completely rendered. The advantage of this approach is that it is very easy to set up and that it has minimum impact on the generated pages.
By mean of a taglib as described in section. In this case, JSPs include the <analtics:pagecontext> tag, which will generate a page view event when closed. The taglib allows the specify the identity of the page being viewed more flexibly.
By means of tracking images, using the additional tag <analytics:trackingimage/>. In this case the page view is counted when an image embedded in the page is retrieved. This is arguably somewhat more reliable for counting only those page views for which the page was actually delivered to the client, so that the client has started rendering. It is also more in line with other standard counting methods.

By default, a newly installed Content Application Engine comes with an enabled interceptor for the built-in controllers, which is configured in the file WEB-INF/spring/analytics/analytics-controllers-example.xml:

<customize:append id="analyticsExampleInterceptorsCustomizer" 
                  bean="controllerInterceptors">
  <description>
    Adds the 'reportInterceptor' to the list of interceptors.
  </description>
  <list>
    <ref bean="reportInterceptor"/>
  </list>
</customize:append>

Whenever more than one tracking method is present, CoreMedia Analytics takes care to track page views only once. Tracking images disable immediate event logging during rendering. The page identity specified using the taglib overrides the identity determined by the interceptor.

When the property tracking.taglib.required in the file custom/trackingbase.properties is changed to true, the presence of the interceptor is no longer sufficient to generate a page view event. Instead, the tracked pages must be explicitly tagged with a page context tag.

When using the Http Cache, it is not possible to use the interceptor. You must use the taglib and tracking images.

When using sampling to reduce the load for processing Analytics data, you should use tracking images. In such scenarios it is typically desired to reduce the load on the CAEs by caching, so that only tracking images can guarantee exact numbers. Moreover, tracking images themselves may be cached, if it can be decided by JavaScript code that a certain request is not supposed to be tracked. This reduces the load further. However, you might want to deliver certain pages dynamically even in high-traffic portals. For such pages sampling and tracking without tracking images integrate seamlessly.

The tracking image callbacks are handled by a specialized tracking controller. In the default installation, the Http Cache will recognize that it is not supposed to cache requests to the tracking controller. However, it is still configured to at least examine the request, because the servlet filter is mapped to all incoming requests. While this is a robust solution, you can improve performance by adapting the filter mapping in the file web.xml once your URI format is stable, ensuring that the filter does not act on tracking requests.