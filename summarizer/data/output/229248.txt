

In this section you will find a discussion of the interaction of the components of the Analytics Engine.

Tracking of Visitor Behavior

When a visitor of a site visits a page, that page is fetched from the CAE. After the page has been completely rendered, the relevant parameters of the request are computed and written to a log file that is managed by the CAE. The referrer URL of the request is also analyzed, giving information about the origin of the page view and potentially about the search engine query that led the visitor to the current page.

Alternatively, tracking images may be inserted into a page. In this case, page views are not directly counted, but instead the retrieval of the tracking image is detected and converted into an appropriate event. By default, the tracking images are fetched from a URL similar to the following:

http://<host>:<port>/<webapplication>/servlet/tracker.gif?...


Tracking images are more versatile, but somewhat more difficult to set up compared to counting the rendered pages directly. They are absolutely required when the generated pages are supposed to be cached, for example by means of the Http Cache of the CAE.

While generating the delivered content, each hyperlink on the page can be augmented by a JavaScript onClick handler which sends an asynchronous request back to the server if the visitor clicks on one of the links. Depending on the browser, this is either a request for an image similar to a tracking image or an XMLHttpRequest using the following URL scheme:

http://<host>:<port>/<webapplication>/servlet/tracker.xml?...

The asynchronous request is logged by the tracking controller. This way, it can be determined precisely which link was clicked, improving the information previously gathered from the referrer URL. Of course, this requires JavaScript to be enabled, but for the vast majority of visits to Internet or intranet sites, this can be safely assumed.

It is possible to activate sampling, which ensures that only a fraction of the actual page views are tracked. For high-traffic websites, this reduces the precision of the statistics only marginally, but cuts hardware costs for Analytics considerably. When using sampling, JavaScript in the browser helps in minimizing the load on the tracking CAE. 

All log data is kept in local files until the Analytics Data Aggregator retrieves the logs by means of HTTP. A servlet in the tracking CAE is responsible for the management of external requests for retrieving the logs.

Analyzing the Repository State

For all content objects some key properties like type, display name and category are computed and stored in the Analytics Database by the Object Analyzer. The Object Analyzer listens to the repository and updates the database continuously, taking all dependencies into account. Normally, content data is read from the Content Management Server.

Fetching and Aggregating Data

The Analytics Data Aggregator runs an aggregation workflow. During normal operation, this process regularly starts an aggregation without user interaction. Initially, the tracking CAEs are requested by means of HTTP requests to rotate the logs and to provide a list of available logs. The used URLs are of the form

http://<host>:<port>/<webapplication>/servlet/analyticslog?...

The logs are fetched via HTTP and written into the Analytics Database in a raw unprocessed format. As the aggregation workflow progresses, the data is refined, written into additional tables and aggregated to obtain summary statistics. Ultimately, the Data Aggregator will discard old data and statistics, if so configured.

Alternatively, the Data Aggregator may parse log files (for example generated by an Apache) and derive page view events from that.

The aggregation workflow is also responsible for fetching logs from the CoreMedia Search Engine. It does so by calling a custom external process that moves the search logs into a directory that can be reached by the Analytics Data Aggregator. Afterwards, the logs are parsed, imported into the database, and aggregated according to the specification of the aggregation workflow, generating the final reports in the Analytics Database. 

Displaying In-Site Analytics

A CAE with In-Site Analytics displays overlay graphics in a preview of the web site, if this is enabled for a session. The overlays contain information about the frequency of page views, about the frequency of clicks on a link, or about the average loyalty of a user who views a page. To this end, In-Site Analytics accesses the Analytics Database at the begin of a page and reads all relevant information from the Analytics Database. That information is processed and displayed as appropriate. 

Displaying the Analytics Dashboard

The dashboard is a separate web application that displays statistics that are not specific to a single page. The number of page views in a given time interval or the top 10 search terms would be typical reports that appear on the dashboard. Whenever a report is rendered, the Analytics Database is accessed and the statistics are retrieved. The dashboard is then rendered and delivered to the client. The Analytics Dashboard accesses a Content Server for authenticating its clients.

