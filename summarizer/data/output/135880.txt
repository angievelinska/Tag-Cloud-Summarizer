

A Custom Tag to Include Views

Another convenience feature we will use in the examples is a custom tag library that makes including Active Delivery Server views easier. Basically, a the custom tag <ads:include> replaces the usual way of including Active Delivery Server views either by <jsp:include> with a complicated Java expression or using the context.include() methods directly. For an example, see the end of this section.

The tag descriptor and implementation (with source code) are contained in the WAGE examples distribution. Here, we just provide information on how to use the custom tag library. General infomation about JavaServer Pages and custom tag libraries can be found at Sun's Web Site and in respective literature.

In the examples, the tag library descriptor cap-wage-examples.tld is deployed in the WEB-INF directory. The library can be accessed by its public URI, which is defined in cap-wage-examples.tld as http://www.coremedia.com/examples/wage. Note that this is not a real URL, but just some unique identifier for the tag library.

To use the tag library in a JSP, the following code is needed:

<%@ taglib uri="http://www.coremedia.com/examples/wage"
           prefix="ads" %>

The prefix can be chosen arbitrarily. In the examples, we use ads, since the tag library's function relates to the Active Delivery Server (and not to any WAGE extension).

The tag's function is to provide a convenient way to include another Active Delivery Server view. To recall from the CoreMedia CMS Developer Manual, the parts of a Resource URI, and thus possible parameters to context.include(), are:

resource - a CoreMedia Resource,
templateId - a view identifier that dispatches to a JSP,
property - optionally, if the Resource is a Document, the name of a property, and
params - a list of arbitrary additional parameters.

The custom tag <ads:include> gives you a convenient way to specify these parameters. It has the following attributes which are all optional:

name - the name of a Bean in any scope,
property - a (nested) property of the Bean retrieved by name,
view - the CoreMedia view (templateId)
documentProperty - the name of a CoreMedia Document property

Note that the property part of the Resource URI appears as documentProperty, since the Struts pattern to determine a Bean is to use the name and property attributes.

The custom tag <ads:param> can only be used nested inside a <ads:include> tag and has the following required attributes:

name - the name of a parameter
value - the value for that paramter

The URL to be included by context.include() is computed as follows:
If name is specified, but not property, use the Bean under name as the resource.
If name and property are specified, retrieve the Bean bean under name and evaluate bean.property as the resource.
Otherwise, set resource to the Resource retrieved by Context.getCurrentContext().getResource().
If view is specified (present and not the empty String), use it as templateId.
Otherwise, use null as templateId, which dispatches to the default view.
If documentProperty is specified, use the URI ((Document)resource).getPropertyUri(documentProperty,templateId).
Otherwise, use the URI resource.getUri(templateId).
Add all parameters added by nested <ads:param> tags to the URI, using hox.net.Uri.plusParameters().
Return the computed URI.

As an example, suppose you write a view of a Document that has a link list property related and want to include the view renderDetail of the first Document in that link list. Traditionally, this would look like in the following JSP snippet:

<jsp:useBean id="context" scope="request"
             type="hox.corem.servlets.Context"/>
<jsp:include page='<%=
  context.getIncludeUri(((Document)context.getResource())
    .getLinkListProperty("related")[0]
    .getUri("renderDetail"))%>' flush="true"/>

Alternatively, you can replace the <jsp:include> by a call to the Active Delivery Server API context.include() method:

<% context.include(pageContext,
                  ((Document)context.getResource())
                    .getLinkListProperty("related")[0]
                    .getUri("renderDetail")); %>

or a bit simpler by using another overloaded version of context.include():

<% context.include(pageContext,
                   ((Document)context.getResource())
                     .getLinkListProperty("related")[0],
                   "renderDetail"); %>

Now, with the new custom tag, you can do the job as simply as this, without any Java code:

<%@ taglib uri="http://www.coremedia.com/examples/wage"
           prefix="ads" %>
<ads:include name="context" property="resource.related[0]"
             view="renderDetail"/>

You will see further examples of how to use the <ads:include> custom tag throughout the examples.