

This part of the filter chain checks the authentication object to make a decision. When the access rights are sufficient the operation is permitted. Otherwise an exception will be thrown indicating an authorization problem. In this example, the SecurityEnforcementfilter contains to objects: the FilterSecurityInterceptor, which performs the security check, and the AuthenticationProcessingEntryFilter, which is the entry point for a new login. The security check bean offers a defined interface and uses other beans implementing the required operations. A decision manager asks an arbitrary number of voters to make its own decision. In this case, an AffirmativeBased decision manager is used, returning a positive result when at least one voter accepts the request, with a RoleVoter, checking the group membership.

Now you know how you can set Acegi up, but how can you integrate it into your own application? The owner of "Chez Andre'' wants a new item in the navigation that directs to the login page. Before the login, all resources are accessed under the anonymous user. Regrettably, Acegi only stores the actual URL during an authentication violation but not for a user change. If you want to avoid a standard entry page, you should open the login form in a new window. After a successful login the result page contains some code, which reloads the actual URL in the main window and closes the login window. Following sequence points up these steps: 