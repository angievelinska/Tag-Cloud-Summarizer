

For the representation of XML texts, a recommendation of the W3 consortium is used, the Document Object Model (DOM, see http://www.w3.org/TR/REC-DOM-Level-1). The returned element is the document element of the Xml text property. This is the "div" element in case of the Xml text property (see lib/xml/coremedia-richtext-1.0.dtd). 

The data structures returned by getDomProperty are used by all templates, and therefore must not be modified. 

CoreMedia provides classes for editing DOM trees in the hox.text.dom package. In particular, the hox.text.dom.DomUnparser class is useful for the output of DOM properties in a template. The output can be configured in many ways: 

You can register filters which rename elements or change or leave out attributes during output. 


You can select the form in which the elements are displayed textually. 

 

If a DOM tree should be output, it is first translated by the DomUnparser in a series of Sax events. CoreMedia uses the SAX 1.0 interface (see http://www.saxproject.org). A Sax event is a call of a Java method, e.g. startElement, characters or endElement, according to one of the handler interfaces defined in org.xml.sax. In the DomUnparser, the Sax events are sent through configurable filters (interface hox.text.sax.SaxFilter) and finally put out as text (interface hox.text.sax.SaxUnparser). 

So as not to have to carry out configuration anew in each template, creation of a prototype in the config.bsh file is recommended. This prototype is preconfigured and then copied into each template for local use. Example shows the creation of the prototype, while Example shows its application. 