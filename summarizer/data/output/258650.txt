

The FeedableContentBeanEvaluator creates Feedables from ContentBean objects. It extends the ContentBeanEvaluator of the Content Trigger Framework of the Proactive Engine and is configured in the file caefeeder-triggers.xml, which is located in the directory <InstallRoot>/config/caefeeder/spring.

An implementation of com.coremedia.cap.feeder.persistentcache.KeyTransformer is used to create identifiers for FAST documents in the index of the Search Engine. The default KeyTransformer implementation creates identifiers of the same format as the IdProvider of the Content Application Engine. 

For example: a content bean for the content with the numerical id 42 is represented by a FAST document with the value contentbean:42 in the field id. Search applications can use the IdProvider to get a content bean for the identifier again.

The FeedableContentBeanEvaluator uses an implementation of com.coremedia.cap.feeder.FeedablePopulator to set the elements of the Feedable for a content bean. By default a BeanMappingFeedablePopulator is used which maps Java bean properties of ContentBean objects to elements of the created Feedable as configured. If required, a custom implementation can be configured in the property feedablePopulator of the FeedableContentBeanEvaluator bean. This section describes the configuration of the BeanMappingFeedablePopulator.

The property beanClassProperties in the definition of the BeanMappingFeedablePopulator takes a java.util.Properties object, which maps bean class names to a comma-separated string of their indexed bean properties. By default, the Properties object is created from properties in the file caefeeder.properties, which is located in the directory <InstallRoot>/config/caefeeder/spring These properties have the following format:

feeder.beanMapping.<bean class>= \
<comma-separated list of bean properties> 

The following example defines the mapping for content beans of classes com.coremedia.demo.contentbeans.fragment.Text and com.coremedia.demo.contentbeans.media.Download. For content beans of class Text and subclasses, the Java bean properties headline and text map to elements of the Feedable. When constructing a Feedable the BeanMappingFeedablePopulator calls the property methods getHeadline and getText of class Text to retrieve the values for these elements.

feeder.beanMapping.com.coremedia.demo.
contentbeans.fragment.Text=headline, text
 
feeder.beanMapping.com.coremedia.demo.
contentbeans.media.Download=data

The above configuration provides a simple way for bean properties which are mapped to elements with the same name. Furthermore the bean properties will always be added to the textbody index field. A more powerful configuration is available with property beanMappings in the definition of the BeanMappingFeedablePopulator. You can use both beanClassProperties and beanMappings to configure the mapping.

The property beanMappings in the definition of the BeanMappingFeedablePopulator takes a list of mappings where each mapping applies to one bean class. The definition is contained in config/caefeeder/spring/caefeeder-mappings.xml. A mapping for a single bean class is represented by a com.coremedia.cap.feeder.bean.BeanFeedableMapping. Each BeanFeedableMapping contains a list of mappings for Java bean properties of the bean class in the property beanPropertyMappings. A mapping for a single Java bean property is represented by a com.coremedia.cap.feeder.bean.BeanPropertyFeedableElementMapping. The BeanPropertyFeedableElementMapping maps a single Java bean property to an element of the Feedable. When setting the elements of a Feedable for a specific content bean, the mappings for the whole class hierarchy of the content bean are considered. The order of the configured mappings is important: the property mapping of the first configured BeanFeedableMapping overwrites other mappings for the same element.

The following example defines a mapping for the superclass of all content beans com.coremedia.objectserver.beans.ContentBean. The bean property content.modificationDate maps to the Feedable element named freshness. The bean property uses the syntax of Spring Framework's BeanWrapper for nested properties. When constructing a Feedable the BeanMappingFeedablePopulator calls the property methods getContent().getModificationDate() of class ContentBean to retrieve the value for the element. Furthermore the value is not added to the textbody index field and does not use advanced text processing. Note that the index field freshness is used for ranking of the search results in the default index profile. Furthermore the example sets the type of the Feedable to the value of the nested property content.type.name, which resolves to name of the underlying content's type: getContent().getType().getName().