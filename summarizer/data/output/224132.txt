

The Proactive Engine is based on the Persistent Cache which means that it works with persistent cache keys. An active client component called Trigger is responsible for defining a set of such keys by adding or removing keys via a KeyManager interface. One or more Evaluator components are continuously computing the values for those keys whose values either don¿t exist or which aren¿t valid any longer due to invalidation events. One or more client components called Receiver are notified about any key related changes by an internal component called Sender. Values which are computed by an Evaluator are temporarily stored in a small memory cache called Evaluator Cache in order to be available when passed to the Receivers.

A receiver is notified about

Add: A new key and its value is introduced. This happens after a Trigger has added a new key and an Evaluator has computed the key¿s value. 
Update: A key¿s value has changed. This is a result of an invalidation and a re-computation done by an Evaluator. 
Remove: A key has been removed by a Trigger 

The Proactive Engine¿s architecture uses an asynchronous event processing model. Receivers as well as the Proactive Engine itself are allowed to do a deferred event processing in order to work more efficient. In each case, a finished processing is signaled via a callback mechanism. The Proactive Engine makes the Receiver¿s callback results persistent so that it is able to resume seamlessly after a restart.