

A builder is invoked to compute an output value for a given key. Values are Java objects which implement the interface java.io.Serializable. Builders must implement the interface com.coremedia.generator.Builder. They are called if the key was configured as root key or a link was established to the value with that key. They are also called to compute fragment values which are read during the computation of other values.

Each value is identified by an unique key, which is an URI (Uniform Resource Identifier, see RFC 2396) consisting of scheme and scheme-specific part separated by a colon: <scheme>:<scheme-specific-part>. The scheme defines the builder to be used whereas the scheme-specific part contains builder-specific arguments that tell the builder what to build. Keys are used to configure which values should be generated and to which uploaders they should be passed. They are used to read fragments and to link to other top-level values. Uploaders use them too, e.g. the FileUploader uses the key's scheme-specific part to construct file names.

There are two different kinds of computed values: top-level and fragment values. The method Builder#isFragment defines whether a value is a fragment or not. Uploaders receive top-level values only and you can only configure top-level values as root values.

During the computation a builder can read fragment values which are cached separately. Fragment values can be used for the computation of several other values. PADS automatically tracks dependencies to accessed fragments and resources. Whenever a resource in the CoreMedia Content Server or an accessed fragment changes, the dependent value gets invalidated.

When a fragment is invalidated it is either deleted from the PADS cache or instantly recomputed. The behaviour is defined by the return value of the method Builder#instantlyRecompute of the fragment's builder. If it is deleted from the cache, the invalidation will be propagated to all values that depend on this fragment. Instant re-computation only makes sense, if there is a fair chance that the value remains unchanged. In such a case invalidation of dependent values isn't needed. Non-fragments are always recomputed immediately on invalidation.

A builder may trigger the computation of top-level values by establishing a link to it. Often this is the only purpose of the configured root keys; e.g. to trigger computations with another builder for all CAP resources below a certain folder. 

You can write and configure link predicates to restrict the computed values. Link predicates are asked if a link that a builder requested during computation with given source and target key should be created or not, i.e. if the value for the target key should be computed or not. If no link predicates are configured, all requested links are created. Link predicates must implement the interface com.coremedia.generator.pads.LinkPredicate.

You can write and configure repository event predicates to prevent the invalidation of computed values for certain events from the CoreMedia Content Server. Repository event predicates must implement the interface com.coremedia.cap.generator.pads.RepositoryEventPrediate.