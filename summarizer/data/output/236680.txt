

 Parameter Value Description -XX:NewSize= <total heap size/[3 to 5]>m The initial new size should already have the final size. -XX:MaxNewSize= <total heap size/[3 to 5]>m The maximum new generation size has a default value which is to small for server applications. The new generation size should have a size of between a 1/3 and 1/5 of the total heap size. -Xms <total heap size>m The initial heap size should be set to the maximum heap size. Any Java server application will finally grow to the maximum heap size. Setting it to the final size will avoid many full GCs for the application. -Xmx <total heap size>m 

The maximum heap size has to be picked dependent on the expected load and application profile of the application. Java applications tend to start trashing with garbage collections when the old generation will be filled to more than 50% after a full garbage collection. 

Increasing the total heap size requires sufficient physical memory on the system to avoid swapping. A Java application should not page. Increasing the heap will, however, lead to longer garbage collections with more side effects to the application. The advantages of increasing the heap sizes will have to be carefully balanced with the disadvantages.
The parameters suggested above will lead to fixed size new and old generations. The total heap size depends on the number of objects to be used, the number of concurrent threads and the number of CPUs to be used.
The fixed size pools will avoid full garbage collections to widen the pools until they reached their final sizes. -verbose:gc  This option should be part of any productive systems. This option logs the GC activity. The amount of log data is small (less than 5 lines per minute). This log will allow later on to see if a system have had garbage collection issues under load. -XX: +DisableExplicitGC This option disables the call System.gc(). Applications may not anymore trigger garbage collections on their own. Some applications needed to trigger garbage collections in the past (J2SE 1.2) in order to avoid out of memory exceptions. Triggering garbage collections in J2SE 1.3.1 or higher versions creates significant overhead.
Setting this option is a precaution against third party applications which may do this.
This option should not be set in J2SE 1.3.1 with a patch level lower than 10. Virtual machines with patch level 9 and lower need to trigger full GCs from time to time in order to assure that random numbers are random. -XX: +UseParallelGC This option enables the parallel garbage collection. In contrast to the standard garbage collection which stops the VM while collecting, the parallel garbage collection runs parallel. 

