

Since processes and tasks are dynamic, interacting entities, their lifecycle needs to be explained in some detail.

Process States

The state chart of a process is shown in ###. After being created, a process is started, and may be suspended and resumed a number of times. Ultimately, the final task is completed and the process closes.

When a process is created, it does not immediately start running.  Instead, the process remains "not started" until its start method is invoked. This way, the process' variables can be initialized at leisure. Note that as long as the process is not started, its initial view is active (see ###). For example, this allows some variables to be writable only during initialization, and allows different validation rules to apply during setup and during the process' runtime.

When the start method is invoked, the process becomes "running" and starts with its first task. All relevant automated action and user interaction happens during the execution of tasks. The process itself mostly serves to structure and coordinate their execution.

While a process is running, it may be suspended at any time by invoking its suspend method. This stops all progress, be it in automated or user tasks. The process can be continued by invoking the resume method.

A process can terminate either normally, by reaching and completing its final task, or it may be aborted by an invocation of its abort method. Either way, after a short cleanup delay, the process and all its sub processes are destroyed, and all state and variable values are irretrievably lost. If some part of the process' state is still of interest, a process should first be suspended and inspected before aborting it.