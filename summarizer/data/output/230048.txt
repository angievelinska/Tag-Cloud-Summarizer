

The first lines in diffContainer.jsp declare the content type and the used tag libraries. The prefixes f and h are declared for the two standard JSF core and html libraries. The last two lines bound the prefix es to the Editing Services tag library and the prefix diff to the Differencing Engine tag library:

<%@ page contentType="text/html;charset=UTF-8" language="java"%>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f"%>
<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h"%>
<%@ taglib uri="http://www.coremedia.com/jsf/editing-services" 
           prefix="es"%>
<%@ taglib uri="http://www.coremedia.com/jsf/differencing" 
           prefix="diff"%>

The root tag <diff:container> is used to create a UIDifferencingContainer component that defines a container element with the id diffContainer and the value #{diffContainer} which is a JSF Expression Language (EL) expression referencing a container model bean, called diffContainer:

<diff:container id="diffContainer" value="#{diffContainer}">
    ...
</diff:container>

Its Java type com.coremedia.diff.DifferencingContainer has two properties:

leftPane: com.coremedia.diff.DifferencingPane
rightPane: com.coremedia.diff.DifferencingPane

The two pane properties are backing bean models for the two version components. The root element contains a single child element that renders a three column panel grid for the left version, toolbar column and right version:

<%-- left/right version column and a toolbar in-between --%>
<h:panelGrid columns="3"
          styleClass="CMDiffPane"
          columnClasses="CMDiffColumn, CMDiffToolbarColumn, 
          CMDiffColumn"
          rowClasses=", CMVFill">
  ...
</h:panelGrid>

The panel grid contains six child elements. The first three elements render the headline row and the next three elements render the two document versions with the toolbar column in-between. The first and third headline elements are nearly the same and render the two toolbars above the document versions. The second element is an empty panel group. The document version headlines itself are rendered with panel grids which consists of two columns to allow different alignment of the child components. The buttons and labels in the first columns are left aligned and the buttons in the second column are right aligned:  

<%-- left/right differencing pane toolbar --%>
<h:panelGrid styleClass="CMToolbar3"
             columnClasses="CMTitle small CMHFill,CMToolbar small"
             columns="2">
  ...
</h:panelGrid>

The first component in the headline is a label which renders an icon and a localized text stored under the bundle key 'Difference.Version':

<es:label value="#{diffResult.left}"
          text="#{localize.label['Difference.Version'].text}"
          styleClass="CMInlineLabel"/>

The EL-expression #{diffResult.left} in the value attribute evaluates to the left document version with the type com.coremedia.cap.content.Version, which the label component renders as document state icon. The next tag <es:selectOneMenu> renders a version chooser listbox. The tag is an extension of the standard JSF <h:selectOneMenu> tag which adds autosubmit functionality to the component. If the attribute autoSubmit="true" is specified, the form is submitted immediately, when the user changes the current selection, in this case the resource version:

<es:selectOneMenu id="version"
    autoSubmit="true"
    value="#{diffResult.left}"
    valueChangeListener=
    "#{versionChangeListener.processValueChange}">
  <f:selectItems 
   value="#{selectItems.byFactory[longVersionLocalizer]
                         [diffResult.leftVersions]}"/>
</es:selectOneMenu>

The method-binding EL-expression #{versionChangeListener.processValueChange} refers to the method processValueChanged from bean versionChangeListener being invoked when the value has changed. The method resets the current difference index to 0 or 1, depending on the number of differences found between the two versions. If the number of differences is 0, the counter is reset to 0, if the number is greater than 0, the counter is reset to 1. The value-binding EL-expression #{selectItems.byFactory[longVersionLocalizer][diffResult.leftVersions]} returns an instance of UISelectItems required for the value attribute in the JSF standard tag <f:selectItems>. The expression diffResult.leftVersions returns a list of Version instances for the left document. The version list and longVersionLocalizer bean are parameters for the selectItems.byFactory property which computes the UISelectItems instance. Defined in the longVersionLocalizer spring bean definition, each version in the listbox is rendered in the format version number followed by a vertical bar followed by the edition date of the version.  

The action of the right aligned highlightChanges button is executed on client side, so no request are send to the server, when the user clicks on the button. The tag <es:clientButton> is used to render buttons with client side actions.

<es:clientButton for="diffA" 
                 value="#{highlightChangesAction}"
                 mode="icon"
                 pressed="#{diffPaneLeft.highlightChanges}"
                 styleClass="CMToggleButton"
                 disabled="#{diffPaneLeft.showChangesOnly}"/>

The action is specified with the value attribute where the value-binding expression #{highlightChangesAction} refers to the highlightChangesAction bean, configured in editing-jsf-diff.xml. It only displays an icon, hence the mode icon. The button is disable in case only changes are rendered (showChangesOnly=true). 

The next button in the left toolbar is the showChangesOnly toggle button. When pressed, it only displays the changes, and not the whole document version. 

<es:button value="#{showLeftChangesOnlyAction}"
           pressed="#{diffPaneLeft.showChangesOnly}"
           styleClass="CMToggleButton"
/>

The EL-expression in the value attribute binds the attribute to the showLeftChangesOnly action bean. The value of the pressed attribute is bind to the property diffPaneLeft.showChangesOnly. If the property value is false, the value of the styleClass is used. If the property value is true however, the style class used for the component is the constant 'pressed' appended to the value of the attribute styleClass, which in this example results to CMToggleButtonpressed.

The second row in the panel grid starts with the left differencing pane. The tag <diff:pane> renders a UIDifferencingPane component. 

<diff:pane id="diffA"
           styleClass="CMDiffScrollpane"
           value="#{diffPaneLeft}">

The tag is only valid inside a differencing container element. The value attribute points to a DifferencingPane backing bean.

Note: currently the id attribute must have the constant values diffA or diffB.

Inside the element is a tag <es:forEach> that iterates over the document properties.

<es:forEach id="diff-changes"
            value="#{diffResult.differences}"
            var="propertyDiff"
            listElement="div"
            styleClass="CMPropertyEditor">

The body of the iterator renders a label, if the "showChangesOnly" toggle button is not pressed or the document property contains changes. The iterator also renders the differences of the property with the tag <diff:property>.

<diff:property value="#{propertyDiff}" 
 mode="#{diffPaneLeft.showChangesOnly ? 'changes' : 'left'}"/>

The value attribute requires a value binding to a CapPropertyDifference backing bean. The value of the mode attribute is set to changes or left in the left differencing pane and to right in the right pane. The toolbar column is a pane grid with three elements. The first and third are client button elements to in/decrement the currently selected difference. 

<es:clientButton for="diffContainer" 
                 value="#{prevDiffAction}" 
                 mode="icon"/>

The second panel group element has two children, a differencing counter <diff:counter/> and the text output of the total number of differences.

<es:panelGroup element="div" styleClass="CMDiffCounter">
    <diff:counter/>
    <h:outputText value="/#{diffContainer.diffCount}"/>
</es:panelGroup>

Note: The panel group with it's child elements will be replaced by a more general JSF counter component in later releases.