

To define a view for a document type, you have to carry out the following steps:
Create a directory inside the servlet context directory. There the templates for different document types are stored in subdirectories. This directory is called templates by default. It makes sense to begin with a copy of the templates delivered with CoreMedia SCI.
Create in the template directory a subdirectory with the name of the document type for which you want to implement  a view. For the document type Image this would be /templates/Image.
Store the template file with the name of the view and the ending .jsp in this directory. For the view renderSmall this would be the filename /templates/Image/renderSmall.jsp.
For view variants add the name of the view in the variant list in square brackets before the extension .jsp. If the view renderNormal is implemented specifically for the variant list homepage,colored for the document type Image, the template must be stored under the filename /templates/Image/renderNormal[homepage,colored].jsp.
For property views there must be a subdirectory of the template directory called proptypes. As can be seen from the PropertyViews delivered, there is a subdirectory for each property type where the corresponding views are stored as JSP templates (see above).
The property type LinkList must be supplemented by the document type of the LinkList. For this purpose, a subdirectory proptypes/LinkList/<doctype> can be created for each (virtual) resource type in which views for this special LinkList type are stored.
The property type Blob receives two levels of subdirectories corresponding to the major and minor type of each relevant MIME type. Accordingly, the template proptypes/Blob/image/gif/default.jsp is responsible for blobs with the MIME type image/gif, and proptypes/Blob/application/special.jsp for all blobs with MIME types application/*. Since SCI 4.1, MIME types are treated as view variants rather than subclasses of the Blob property type (see PropertyViews). Views implementing a variant are usually named as described above, using square brackets, but in order not to have to change the location of MIME-type-dependent templates with respect to older CAP versions, placing BLOB property views into MIME type sub-directories is still allowed. The new way to specify the views mentioned above would be proptypes/Blob/default[image,gif].jsp and proptypes/Blob/special[application].jsp. Be careful if you have already used variants of BLOB property views before, since the MIME type variants and your variants (given by sqare brackets in the view's file name) may interfere.

The ViewDispatcher already knows the inheritance relationships between the document types and property types from the global document type definition or from the LinkList types. The inheritance relationships therefore do not need to be entered again for views.

The following properties of the ViewDispatcher bean can be configured, normally in config.bsh:

generator - the ADS that the ViewDispatcher should use. This property only has to be set once.
templateRootUri - the path from the servlet context directory under which the directories for the various document types can be found. Predefined: /templates.
defaultView - the name of the view which should be used when no view is explicitly defined by the template-ID. Predefined: main.
defaultPropertyView - the name of the view called for PropertyUris without template-ID. Predefined: default.
folderType - the name of the "virtual" folder resource type. This is predefined as Folder and should not be changed. If a user-defined type has been named Folder (which is advised against), this can nevertheless be necessary.
topDocumentType - the name of the "virtual" type which is the supertype of all user-defined documents. Predefined: Document. However, it is  possible (but discouraged from) to configure a user-defined document type here if all other document types inherit from it (directly or indirectly). This is useful when there are properties which should appear in all document types. 

Furthermore, there is the method

void addViewVariantRule(ViewVariantRule variantRule)

with which variant rules for views can be configured (see Section 4.4.1.3). The variantRule is transferred as an example of one of the implementations of the hox.corem.servlets.beans.ViewVariantRule interface. The rule requires various parameters depending on the class. The variant rules described in Section 4.4.1.3 are delivered with CoreMedia SCI in the source code. The configuration possibilities mentioned in the description above are realized by means of parameters in the particular constructors. A precise description of the classes is given in the Generator API (JavaDoc).

A configuration of a variant rule appears, for example, as follows:

viewDispatcher.addViewVariantRule(new LinkListPropertyViewVariantRule ("Content", "Look"));

This example from CoreMusic proves that the property Look (a LinkList property) is output for all documents of type Content or a subtype. A variant list is made of the names of the linked documents and attached to every view called for a Content document. The selection of the template occurs according to the lookup strategy described in Section 4.4.1.3.