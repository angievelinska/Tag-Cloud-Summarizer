

Sometimes an action needs additional input from the user. E.g. if you provide an action for renaming a resource, the user has to provide the new name via some form. These forms can be provided as jsps. A mapping from actions to form jsps can be stored in the file /WEB-INF/jsf/faces-navigation.xml. The following listing displays this file for the CoreMedia Demo. 

<faces-config>
  <navigation-rule>
    <from-view-id>/pbe/menu.jsp</from-view-id>
    <navigation-case>
      <from-outcome>navi-new</from-outcome>
      <to-view-id>/pbe/forms/newpage.jsp</to-view-id>
    </navigation-case>
    <navigation-case>
      <from-outcome>navi-rename</from-outcome>
      <to-view-id>/pbe/forms/renamepage.jsp</to-view-id>
    </navigation-case>
    <navigation-case>
      <from-outcome>page-new-language-de</from-outcome>
 <to-view-id>/pbe/forms/newpagelanguage.jsp</to-view-id>
    </navigation-case>
    <navigation-case>
      <from-outcome>page-new-language-en</from-outcome>
 <to-view-id>/pbe/forms/newpagelanguage.jsp</to-view-id>
    </navigation-case>
    <navigation-case>
      <from-outcome>style-change</from-outcome>
     <to-view-id>/pbe/forms/changestyle.jsp</to-view-id>
    </navigation-case>
    <navigation-case>
      <from-outcome>fragment-new</from-outcome>
     <to-view-id>/pbe/forms/newfragment.jsp</to-view-id>
    </navigation-case>    
    <navigation-case>
      <from-outcome>subcontent-picture-new</from-outcome>
<to-view-id>/pbe/forms/newsubcontentpicture.jsp</to-view-id>
    </navigation-case>
    <navigation-case>
      <from-outcome>subcontent-fragment-new</from-outcome>
<to-view-id>/pbe/forms/newsubcontentfragment.jsp</to-view-id>
    </navigation-case>
    <navigation-case>
      <from-outcome>workflow-start</from-outcome>
<to-view-id>/pbe/forms/startworkflow.jsp</to-view-id>
    </navigation-case>
  </navigation-rule>
</faces-config>

Let us now take a look at the renamePageAction (id) with the name navi-rename action. The user can choose this action from the context menu on beans of type Structure. A form pops up querying the new name of this Structure element. The user provides a name, clicks okay and the structure element is renamed.

In the code above we saw, that the action is mapped from its name navi-rename to the template /pbe/forms/renamepage.jsp. This template renders the input form for a user provided new name of the Structure bean. Take a look at the template:

<%@ page contentType="text/html;charset=UTF-8" language="java"%>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f"%>
<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<f:view>
<f:loadBundle basename="com.coremedia.demo2005.pbe.pbemessages" 
 var="bundle"/>
<html lang="<h:outputText 
      value="#{facesContext.viewRoot.locale.language}"/>">
  <head>
    <title><h:outputText value="#{bundle['renamepage.title']}"
    /></title>
    <link rel="stylesheet" href="<c:url value="/pbe/pbe.css.jsp" />" 
          media="screen,projection" type="text/css" />
    <script>
      dom=parent.dom;
      com=parent.com;
      com.coremedia.ui.Frame.getInstance(window); 
      dialog = com.coremedia.ui.InternalFrame
                   .getInstance(window.parent);
    </script>
  </head>
  <body>
    <h:form>
      <h:panelGrid styleClass="outside" columns="1" 
                   columnClasses="inside"
                   headerClass="title" 
                   rowClasses="description,middle" 
                   footerClass="buttons">
          <f:facet name="header">
            <h:panelGroup>
             <h:graphicImage 
              url="/icons/hox/corem/editor/icons-32x32/rename.png"/>
              <h:outputText value=" #{bundle['renamepage.title']}"/>
            </h:panelGroup>
          </f:facet>
          <h:outputText value="#{bundle['renamepage.description']}"/>
          <h:panelGrid columns="3" columnClasses=",label,">
             <h:graphicImage width="12" height="12" 
           url="/images/#{bundle['renamepage.property.labelIcon']}"/>
             <h:outputLabel for="newLabel" 
               value="#{bundle['renamepage.property.labelLabel']}:"/>
             <h:inputText id="newLabel" styleClass="text" 
             value="#{renamePageAction.command.label}" />
          </h:panelGrid>
          <f:facet name="footer">
            <h:panelGroup>
              <h:commandButton value="#{bundle['form.save']}" 
               action="#{renamePageAction.execute}" />
              <h:commandButton value="#{bundle['form.cancel']}" 
               type="reset" onclick="dialog.hide();"/>
            </h:panelGroup>
          </f:facet>
      </h:panelGrid>
    </h:form>
  </body>
</html>
</f:view>


As you may have noticed the template uses Java Server Faces (JSF). Please refer to JSF documentation, if you need more detailed information for creating your own input forms.
The form rendered by the template looks like the following in the CoreMedia Demo: