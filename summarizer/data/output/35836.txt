

This is the second task in the workflow and the first user task. The purpose of the task is to enable the user to collect the documents which should be published at once.



Line 1 - 3: The user task is named 'Compose'. The localized description is looked up in a resource bundle under the key "simple-publication-compose-taskLabel" (the tooltip key is "simple-publication-compose-taskToolTip") and shown in the Client GUI. The task 'CheckEmptyChangeSet' is started after task 'Compose' has completed.


Line 4 - 7: The rights concerning the task are assigned to users and groups. The user admin can read, accept, delegate or skip the task. The members of the group composer-role are allowed to read, accept, delegate, or skip the task.


Line 9 - 14: If the task has been selected, the variables defined in this section will be shown in the variable view of the workflow window if the user has the read right.  You can change the content of the variables subject, comment, changeSet and comments because they are defined in Writes elements. In addition, you can change the content of the documents, which are provided by the variable changeSet due to the attribute contentEditable="true". The variable publicationResultCodes defined in the <Variable> section of the workflow, will be shown if you press the appropriate button in the variable view (if the task has been selected in the workflow list). You cannot change the content of the variable because it is defined as <Reads ...>.


Line 16 - 30:  A validator is defined and named "AllCheckedIn". The localized version of a corresponding message is shown in the dialog box, which appears when the validator evaluates to "false". The description is looked up in a resource bundle under the key "all-checked-in-validator" and if that fails under "AllCheckedIn" to localize it. The validator is used to check whether all documents which should be published are checked in or not. If not, the user is not allowed to finish the Compose task until all documents are checked in. 


Line 18: The validator uses an iteration over all elements of the AggregationVariable changeSet. The variable changeSet contains all resources which were added to the change set in the Compose task. The current resource is stored in the loop variable "change". 


Line 19: The <Implies> expression ensures that the change set contains only document versions and that every document must be checked in, if its version in the change set is the latest version. If the version in the change set is not the latest version, then the document may be checked in or checked out.


Line 20:  The expressions contained in the And element must all evaluate to "true" so that the whole <And> element evaluates to "true". 


Line 21: The element <IsDocumentVersion variable="change"/> checks if the current resource stored in "change" is a version of a document. Otherwise it is not possible to publish the document.


Line 22: The sub expression results defined in the Equal element are checked for equity. 


Line 24: The value of the property latestVersion_ of the resource, which is referenced by the loop variable change, is read and compared to the value of the property version_. Thus it is checked, if the version of the document in the change set equals the latest version of the document.


Line 27: The <Not> element negates the result of the boolean expression it contains. Here this is the property isCheckedOut_ of the resource, which is referenced by the loop variable change. If the document is checked out, the variable is "true". Thus, the whole <Not> expression evaluates to "true", if the document is not checked out.


Line 33: An exit action is defined which is automatically carried out right after the task was completed by the user. The action to perform is defined by the class PreferPerformer. I.e. if the "Compose" task has to be repeated because of a failing publication, then the "Compose" task should preferably be offered to the previous performer. 


Line 34: It is possible to define more than one exit action. Here the predefined ForceUser action is used, which assigns the current task's performer to the task defined in task. Thus, the Publish task will be automatically accepted by the user who performed the Compose task.

If Task CheckEmptyChangeset