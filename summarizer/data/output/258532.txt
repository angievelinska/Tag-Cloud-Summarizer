

web.xml is the central configuration file in the servlet specification and it keeps its place in the CAE configuration. Here, important entry points of the web application - such as the path to the other configuration files or the application context - are defined. Due to its central role, the web.xml file is one of the few configuration files which can only be modularized in a very limited way. Nevertheless, in a newly installed CAE web application the web.xml file is constructed in such a way that it does not have to be adapted in a typical project.

In the CAE web application, the Spring Root Application Context is created by a so called ContextLoaderListener.The listener reads in all Spring bean configurations, whose location follows one of the following patterns:

classpath*:framework/spring/*.xml,
classpath*:framework/spring/*/*.xml,
/WEB-INF/spring/*.xml,
/WEB-INF/spring/*/*.xml

That is, framework configuration files in the classpath (typically in the *-config.jar files) are loaded if they are located in the framework/spring directory or in its direct subdirectories. In addition, all XML-files located in the <WebApp>/WEB-INF/spring directory and all of its direct subdirectories are loaded.

Properties-files of the placeholder configuration (see section for details) are treated the same way. 

Dispatcher

The DispatcherServlet accepts HTTP requests and translates them to the Spring-MVC world via a controller. For this servlet another ApplicationContext is created that inherits from the root ApplicationContext. That is, all beans defined in the root ApplicationContext are available and are extended by beans specifically defined for the servlet. For the ApplicationContext of the servlet all configuration files are loaded whose locations match one of the following patterns:

classpath*:framework/spring/*/<servletname>-servlet/*.xml,
/WEB-INF/spring/*/<servletname>-servlet/*.xml

For example,  the file /WEB-INF/spring/servlet/dispatcher-servlet/my-config.xml would be loaded from a servlet named dispatcher. If no configuration files match these patterns, an empty ApplicationContext is created in which all beans of the root ApplicationContext are available.

This mechanism allows you to define several dispatcher servlets with distinct configurations.