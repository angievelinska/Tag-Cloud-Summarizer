

The GUI of the client uses the tree and table views to browse through the content and offers an additional view on the properties of documents. A double click on a certain document opens a new window presenting name and value of one property per row. One problem is the diversity of the properties which demands a flexible graphical component. Each property type requires an own special component and the blob type is special case, too, because of the additional mime types. In order to constrict the manifold set of types this example supports only some image formats like JPEG, GIF and PNG. If you need more media types it is your task to provide the required Java components. Otherwise, the data cannot be presented properly.

In this example a special class PropertyComponent maps the property types to appropriate Swing components. Notice that the CapPropertyDescriptorType which is used here is not the UAPI type but the com.coremedia.examples.jaxws.client.CapPropertyDescriptorType which has been generated by Wsimport. 

After the type is ascertained the method getComponent returns the proper component as JComponent for the assigned property. The graphical widgets are arranged in a separate window class named JPropertiesFrame using the GridBagLayout. On the extreme left are the property names with a fixed length and the rest of the row is filled with the component rendering the property value.

Compile and execute the client with the following commands:
Generate the required interfaces and compile all source files with:
$ ant compile-client
On successful compilation, you can start start the client. A window should appear allowing you to explore document properties.
$ ant execute-client