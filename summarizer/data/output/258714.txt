

fore publishing a newly created report, validate the report definition. Bear in mind that reports that show incorrect data will severely impair user's trust in any of your reports. Furthermore, you may want to check that the report yields expected results for all or a selected subset of variable values.

Automated testing for model and query verification

The Spring bean configuration framework allows you to very easily setup a report test environment. The test should be run in a test installation of the Analytics Application. Follow these steps:

Add your newly created report definition to the custom report definition configuration file /WEB-INF/spring/analytics/analytics-reportdefinitions.xml.
Create a new JUnit test class or test suite (consult the JUnit test framework reference). Upon test initialization, request a detached ReportingUserSession that is httpSession-less (has no association with a HttpSession) by invoking ReportingUserManager.createDetachedReportingSession(). 
Retrieve the reporting configuration from the reporting user session and request the report definition from the reporting configuration by invoking reportingUserSession.getReportingConfiguration().getReportDefiniton().
Create an instance of the report definition by invoking getCreateReportInstance() on the ReportInstanceFactory singleton. The reportingUserSession and report definition must be passed in as parameters.

Once you have a report instance at hand, you may create round-trip tests:

Access the instance's statemodel via getStateModel(), cast it to VariableBasedStateModel in order to access its variables via statemodel.getVariables() and their values via variable.values().
You may want to create new values (see the variable's class create method(s) and set the current value selection via setSelection().
Finally invoke statemodel.modelUpdated() on the state model to propagate update and to pre-fetch data.
Now request the report data via stateModel.asDataModelBasedStateModel().getData(). The resulting data is wrapped in a JRDataSource, which is JasperReport's report data structure.
Validate the JRDataSource by iterating through the JRDataSource and access each entry's field values. The following code snippet gives a hint on how to iterate over data entries and access each entry's 'X_VALUE' field:

JRDesignField xValueField = new JRDesignField();
xValueField.setName("X_VALUE");
xValueField.setValueClass( Comparable.class );

while( ds.next()) {
  Comparable xValue = (Comparable) ds.getFieldValue(xValueField);
}

Please note that automated test cannot verify the correct rendering of data, this currently must be done using manual test.

Manual testing for visualization verification

Manual tests should be done after automated tests have succeeded. These shall be used for verifying the visualization (template and chart customization) and the report's over-all appearance. Running manual tests is very simple: Publish your newly created report definition in the report configuration of the test system (see next sections). Access the reports via the dashboard view and verify the visualization.

