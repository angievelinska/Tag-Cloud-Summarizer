

To make things easier let us start with an action, that does not depend on additional user information. Take a look at the moveTopAction:

<bean id="moveTopAction" parent="action" singleton="false">
  <property name="name" value="move.top"/>
  <property name="command">
    <bean class="com.coremedia.easyedit.commands.MoveLinkCommand" 
          parent="capCommand" singleton="false">
      <property name="direction" value="top"/>
    </bean>
  </property>
</bean>

Like moveUpAction, moveDownAction and moveBottomAction this action is responsible for moving the current document in a linklist. You may know these options from the linklist menus of the CoreMedia Editors. The moveTopAction moves the document to the topmost position in the linklist, if it is not already on top. All move-actions rely on the common command class com.coremedia.easyedit.commands.MoveLinkCommand. 

The action bean usually is an implementation of com.coremedia.easyedit.editing.command.ActionImpl  as defined by the parent bean which is configured in framework/spring/editing/editing-services.xml. If you want to use your own implementation you can set the class attribute (as it is done for the logoutAction for instance).

The name provided for the action is used for accessing localized information like labels, tooltips or icons (e.g. configured in Editing.properties). An action holds a command which provides business logic. Thus it is possible to reuse a command for different actions.

Like all Preview-based Editing commands the MoveLinkCommand inherits from com.coremedia.easyedit.commands.ContextInfoCommand which provides access to the ContextInfo bean and determines the behaviour of the command as a menu item. The following table provides information about the beans you will get from the ContextInfo bean. Instead of handling ids like in the taglib you get real objects here: