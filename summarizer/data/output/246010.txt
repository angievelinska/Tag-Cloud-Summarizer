

The concept of a page flow scope was first introduced by Oracle's ADF Faces, an extension of JSF containing many framework enhancements and components. ADF Faces has been donated to the Apache foundation and is now called Apache Trinidad.

The page flow scope hands over a Bean from one request to the next one, but still allows a single session to create multiple instances of that Bean. The concrete problem which is solved by this is that when storing a Bean in session scope, it is global for that session, but a user may want to use several browser windows that share the same HTTP session. In the standard JSF solution, opening the same view in multiple windows results in confusing behavior, since the state of these windows is shared and thus overwritten. The page flow scope overcomes this limitation. Note that page flow only works as expected when JSF client-side state saving is activated in WEB-INF/web.xml. Otherwise, the whole view state is stored in session scope, allowing only one instance of a view per session.

ES implements the page flow scope as a JSF extension. Technically, Beans in page flow scope are attached to the attributes of the view root and as such are stored together with the state of the view root component. To keep page flow Beans even when the view is changed due to navigation, the page flow scope map is copied to the current view root at the end of each request.

When using page flow scope, you do not need to be aware of these technical details. You just need to know that Beans put into page flow scope have a life-time almost as if they were in session scope. The only difference is that each view instance in the same session, more practically speaking each browser window of the same user, has a separate instance of a page flow scope Bean. In contrast, session scope Beans are shared by all view instances of one session / user.

To access page flow scope, ES offers different techniques:

The SpringVariableResolver (see section Managed Beans) introduces an additional implicit variable pageFlowScope that, in analogy to JSF's requestScope, sessionScope, and applicationScope, provides a Map from attribute name to Bean.
The page flow scope is available as an application scope Bean pageFlowScope_application of type Map. This global Map "magically" represents the page flow attributes of the current request (technically, using a ThreadLocal). Since pageFlowScope is also an implicit variable (see above), this Bean will never be used by JSF-EL, but is intended for injecting the page flow scope into a client Bean (see below) and for accessing page flow scope from JSTL-EL (using it without the suffix, i.e. pageFlowScope).
The page flow scope is supported as a new scope in Spring by suffixing a Spring Bean name with _pageflow, as described in section Managed Beans.
The page flow scope can be accessed programmatically by injecting the Bean pageFlowScope_application into any client Bean (this is the preferred way), or by accessing Scope.getScope(Scope.PAGEFLOW_SCOPE_NAME).getAttributes() (class Scope can be found in package com.coremedia.editing).

