

You can use Spring to make Java Beans available to your customized Workflow actions and expressions. The CoreMedia Demo for example uses this mechanism to provide e-mail functionality to a customized action. The Spring context is loaded at startup time and is shut down when the server is shut down. The Spring XML configuration can refer to the Worfklow Server's Unified API connection, using the same name ("connection") as in the CAE. An action or expression may implement the interface com.coremedia.cap.workflow.plugin.CapConnectionAware. If it does so, the connection is injected before the action is executed or the expression is evaluated for the first time.

The Spring XML file can refer to properties defined in workflowserver.properties, or in any property file under config/workflowserver/spring/*.properties, using spring's property placeholder syntax: ${propertyname}. The property's value is inserted when the application context is loaded. 

If you want the property to be updated when the property file changes, you can use an alternative syntax: #{propertyname}. This causes all affected bean property setters to be invoked whenever the property file is reloaded and the value has changed.

In order to use a bean in your action or expression proceed as follows:
Make a Spring ApplicationContext available to the Workflow Server. To do so, configure a SpringContextManager in the workflowserver.properties file:

workflow.server.managers.springcontext.class=
com.coremedia.workflow.common.util.SpringContextManager
2#
Configure the locations of the Spring beans configuration files:

workflow.server.managers.springcontext.configurations=
classpath*:framework/spring/*.xml,
config/workflowserver/spring/*.xml

3#
Configure the beans you want to use in any of the configured configuration files. When using the default configuration files locations, the file config/workflowserver/spring/beans.xml is a good place to start.
Let your customized actions, expressions or boolean expressions extend com.coremedia.workflow.common.util.SpringAwareAction, com.coremedia.workflow.common.util.SpringAwareExpression and com.coremedia.workflow.common.util.SpringAwareBooleanExpression respectively. 
Get the Bean inside your customized code using the getBean() method, for example use

protected ActionResult execute(Process process) {
InboxFactory inboxes = (InboxFactory) getBean("inboxFactory");
¿
}

The configured beans may implement the common Spring interfaces InitializingBean and DisposableBean in order to receive life cycle events from the context manager. Additionally, the beans may implement the interface com.coremedia.workflow.common.util.WorkflowServerLifecycleAware, if they want to initiate asynchronous operations. Such operations may start after the method workflowServerStart() is called and must be completed before the method workflowServerStop() returns. Only singleton beans receive these callbacks and only if they implement the given interface.