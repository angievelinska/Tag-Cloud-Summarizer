

Adding custom base table names and time column names placeholders

One base table name and the implicit time column name (which is mapped to the column name 'EVENTINTERVALSTART') work for most cases. It may happen that you want to have more base table names (and have all suffixed with the respective time model suffix). That would be the case if you needed to access PAGEVIEWS_## and TOTALVIEWS_## within the same query.

Also, when using more than one base table, the time column name may become ambiguous, since more than one table will have an EVENTINTERVALSTART column.

You can set more than one base table names - using the the query property 'baseTableNameMappings' - and have more than one time interval condition clause - using the property 'timeColumnNames'. Example:

<bean parent="...Query">

  <property name="baseTableNameMappings">
    <map>
      <entry key="singleViews" value="PAGEVIEWS"/>
      <entry key="totalViews" value="TOTALVIEWS"/>
    </map>
  </property>

  <property name="timeColumnNames">
    <list>
      <value>sv.EVENTINTERVALSTART</value>
      <value>tv.EVENTINTERVALSTART</value>
    </list>
  </property>
  ...

  <!-- SQL Statement -->
  <property name="sqlStatement" 
    value="select ... 
            from {singleViews} sv, {totalViews} tv {cond}..."/>


The two base table name placeholders singleViews and totalViews will be replaced with PAGEVIEWS_## and TOTALVIEWS_##. Additionally, two time interval conditions will be generated, for columns sv.EVENTINTERVALSTART and tv.EVENTINTERVALSTART. Note that the default baseTableName and timeColumnNames placeholder values are NOT available when you specify custom values.