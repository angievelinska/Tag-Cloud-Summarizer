

Four parties are involved in the tunneling:

A client  <CAPClient> which cannot access the server directly.
The client-side SSH client <SSHClient> which cannot access the CAPServer.
The server-side SSH server <SSHServer> which can access the CAPServer.
The CoreMedia Server <CAPServer>.

<CAPClient>/<SSHClient> and <CAPServer>/<SSHServer> can reside on the same machine respectively.

Two ports must be configured:

<HTTPPort> is the HTTP port for the IOR.
<CORBAPort> is the port for CORBA communication.

For this scenario you must,

establish the tunnel,
redirect client requests to the tunnel endpoint SSHClient instead of CAPServer.

Proceed as follows:
Configure the HTTP host name and port of the server as usual in the capserver.properties files.
Configure the HTTP-address where to fetch the IOR of the server in the capclient.properties file as follows:

3* cap.client.server.ior.url=http://<SSHClient>:<HTTPPort>/coremedia/ior
3#
Start a SSH server on <SSHServer>. No particular configuration is necessary.
Start the SSH client on <SSHClient>.
On a UNIX system, open the tunnel on the SSHClient with ssh -g -L<CORBAPort>:<CAPServer>:<CORBAPort> -L<HTTPPort>:<CAPServer>:<HTTPPort> <SSHServer>. Replace the values in angle brackets with the appropriate settings.

3* For the Windows SSH client "SSH Secure Shell" choose Edit|Settings|Profile Settings|Tunneling|Incoming. You need to make two entries. Insert as follows:
3* Type: TCP
3* Listen Port: <HTTPPort>
3* Destination Host: <CAPServer>
3* Destination Port: <HTTPPort>
3* and
3* Type: TCP
3* Listen Port: <CORBAPort>
3* Destination Host: <CAPServer>
3* Destination Port: <CORBAPort>
3* This will instruct ssh to forward all requests on <SSHClient>:<Port> via <SSHServer> to <CAPServer>:<Port>.
6#
In order to instruct a client that is not based on the Unified API to contact <SSHClient> instead of <CAPServer>, you need to configure the client-side ORB in the clients jpif-file. E.g. editor.jpif in the <InstDir>/bin directory for the CoreMedia Editor. Add the following entries to the JAVA_VM_ARGS property, replacing <CAPServer> and <SSHClient> with the names of the appropriate computers and <CorbaPort> with the port number of the ends of the SSH tunnel:

3* JAVA_VM_ARGS="$JAVA_VM_ARGS -Dcom.sun.CORBA.legacy.connection.ORBSocketFactoryClass=com.coremedia.corba.ORBRedirector50"
3* JAVA_VM_ARGS="$JAVA_VM_ARGS -Dcom.coremedia.corba.ORBRedirector.original.host=<CAPServer>"
3* JAVA_VM_ARGS="$JAVA_VM_ARGS -Dcom.coremedia.corba.ORBRedirector.redirect.host=<SSHClient>"
3* JAVA_VM_ARGS="$JAVA_VM_ARGS -Dcom.coremedia.corba.ORBRedirector.original.port=<CorbaPort>"
3* JAVA_VM_ARGS="$JAVA_VM_ARGS -Dcom.coremedia.corba.ORBRedirector.redirect.port=<CorbaPort>"
7#
In order to instruct Unified API clients like the command line tools or the Content Application Engine to contact <SSHClient> instead of <CAPServer>, you must also configure the host and port setting in the jpif-file just as this is done for clients using other APIs. The ORB socket factory must be set in the connection parameters for the Unified API, however.

3* If you are setting up the Unified API connection programmatically, consider using the connect(Map) method of the class Cap.

Map parameters = new HashMap();
...
parameters.put
("com.sun.CORBA.legacy.connection.ORBSocketFactoryClass",   
  "com.coremedia.corba.ORBRedirector50");
connection = Cap.connect(parameters);

3* If you are using the CAE, you must inject the parameter into the CapConnectionFactory. To this end, you can add the following bean customizer definition to a spring bean definition file of your webapp.

<bean class=
"com.coremedia.objectserver.util.SimplePropertyCustomizer">   
  <property name="customizedBeanName" value="connection"/>
  <property name="customizedProperty" 
   value="otherParameters"/>
  <property name="propertyValue">
    <map>
      <entry
 key="com.sun.CORBA.legacy.connection.ORBSocketFactoryClass"
        value="com.coremedia.corba.ORBRedirector50"/>
    </map>
  </property>
</bean>

3* In any case, you may inject the parameter through the IOR URL passed to the Unified API. For command line tools, you can pass the URL on the command line:

cm systeminfo -url http://<SSHCLIENT>:<HTTPPort>/coremedia/ior?
  com.sun.CORBA.legacy.connection.ORBSocketFactoryClass=
  com.coremedia.corba.ORBRedirector50 -u admin -p admin 

3* You can also set the extended URL in the file capclient.properties:

cap.client.server.ior.url=\
  http://<SSHCLIENT>:<CorbaPort>/coremedia/ior?\
  com.sun.CORBA.legacy.connection.ORBSocketFactoryClass=\
  com.coremedia.corba.ORBRedirector50

3* It is also possible to configure an extended URL in the objectserver.properties when operating a CAE. You can pass an extended URL when opening a connection programmatically.

An alternative to setting up an ssh tunnel might be the use of a VPN, or SSL.