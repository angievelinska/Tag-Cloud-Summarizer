

All objects are given a type. The type is immutable and constitutes a model of the possible property values for the object.

CapObjects are also providing access to properties of that object. You can obtain either a map with all properties or individual property values using the getters of a CapObject. When getting a map, an immutable snapshot of the object's properties is returned. When getting one property value multiple times, however, concurrent writes will be visible immediately.

Properties can be of different types as will be described in section. There are typed getter methods for returning the current values of properties. If a typed getter is applied to a property with a different type, the Unified API specifies an automatic conversion in many cases. Please see the Javadoc of CapObject for details. If there is no possible conversion algorithm, an exception is thrown.

When setting a property, make sure that you use a value that is appropriate for the property type used, because no automatic conversion takes place.

The values returned by a getter are always immutable. In the case of String or Integer objects this is obvious, but it is even true for collection-values properties that return an instance of java.util.List. When you want to modify a collection-valued property, you have to create a new collection and set that entire collection as the new value. Modifying the returned value is not possible.

Having set the property of a CapObject, that change is not immediately made persistent on the server-side. Changes are collected until either an operation occurs that cannot be delayed or the method CapSession.flush() is called on the current session. See section for details about the session handling.