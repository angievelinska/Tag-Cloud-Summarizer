

Editing Services for JSF use the standard JSF navigation mechanism. JSF navigation is performed by a javax.faces.application.NavigationHandler implementation that evaluates navigation cases defined in any of the JSF configuration files. The following code block shows the example of a navigation rule set that relates two views (/views/firstView.jsp and /views/secondView.jsp).

<?xml version="1.0"?>
<!DOCTYPE faces-config PUBLIC
 "-//Sun Microsystems, Inc.//DTD JavaServer Faces Config 1.1//EN"
 "http://java.sun.com/dtd/web-facesconfig_1_1.dtd">
<faces-config>
  <navigation-rule>
    <from-view-id>/views/firstView.jsp</from-view-id>
    <navigation-case>
      <from-outcome>goToSecondView</from-outcome>
      <to-view-id>/views/secondView.jsp</to-view-id>
    </navigation-case>
  </navigation-rule>
</faces-config>

The standard JSF way to trigger this navigation case is to define a <h:commandLink> or <h:commandButton> with its action attribute set to a method binding that returns "goToSecondView". Editing Services for JSF provide their own com.coremedia.editing.action.NavigationHandler interface and some JSF specific implementations that trigger the JSF navigation handler. The code block below shows the definition of an action that triggers the navigation case defined above.

<bean id="myAction" class="org.example.MyAction" 
parent="commandAction" singleton="false">
  <property name="name" value="new-folder"/>
  <property name="navigationHandler">
    <bean class=
    "com.coremedia.editing.kits.jsf.action.SimpleNavigationHandler">
      <property name="outcome" value="goToSecondView"/>
    </bean>
  </property>
  <property name="target" ref="myTargetBean"/>
</bean>

Note that the navigation handler will not be invoked if the action's execute  method throws an exception. The action can be triggered using the <es:button>-tag by setting its value attribute to #{myAction}. See section Button for further information on command buttons.

