

The reason for converting attributes not defined in the coremedia-sgmltext.dtd as described above is that




such attributes have been used widely, especially in tables, and thus must be converted in some way, and 



the new RichText editors support custom attributes through so-called StyleGroups with StyleOptions in the class attribute (see Editor Developer Manual, section 3.3). 


For example, if the attribute WIDTH was used for table cells (although not defined in coremedia-sgmltext.dtd) like this


  <TD WIDTH="33">


the transformed RichText fragment will look like this:


  <td class="width--33">


You now have to define a StyleGroup "width" with StyleOptions for all widths used in coremedia-richtext-1.0.css (see Editor Developer Manual, section 3.3, p. 66), e.g. like this


  .width--33 {

    width: 33px;

  }


This works fine for attributes that have a limited range of values, but poses problems for arbitrary values (e.g. a pixel size containing any integer number or even worse a tool tip containing any string). To allow arbitrary values for certain StyleGroups, these are defined with the type string or identifier in the editor.xml like this:


  <Document type="RichText">

    <Property name="RichText" 
    
editorClass="hox.corem.editor.toolkit.property.RichTextPane"
    
addStyleSheetGroups="width:identifier(td) myOwnGroup2:string"/>

  </Document>


When editing the attribute value, the SCI editors display an input field instead of a ComboBox. For type identifier, the input is validated (e.g. checked whether it contains a valid class selector). String values are encoded so that they do not contain spaces (and some other special characters) by hox.text.util.StyleValueEnDecoder.encode().


On the delivery side, you need a SaxFilter to plug into the DomUnparser, which extracts and decodes the custom attributes. The SaxFilter scans for a class attribute (in startElement()), and when it finds one, splits its value into the list of selectors (splitting at spaces). Each selector starting with a custom attribute prefix (attribute--) is extracted from the class attribute value and converted to an appropriate new attribute (usually just the name of the custom attribute, but could also be a part of some other attribute like the style attribute), where the value is the substring after the first appearance of "--", decoded by hox.text.util.StyleValueEnDecoder.decode().
