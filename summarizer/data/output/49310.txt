

First the form is defined with the Struts <html:form> tag and the encoding set to "multipart/form-data", as we want to support file upload in this form.

The <wage:img> tag is used to render a CoreMedia logo, the <wage:resourceType> and <wage:documentState> tags render icons for the document type and state respectively. The <wage:resourceType> tag and the <wage:documentState> tag use the current resource for rendering its document type or document state (checked-out etc.), respectively.

A <wage:checkbox> tag is used to render a HTML checkbox, which will set the (String) calories property of the Dish document being edited to ">200" or "<=200", according to the checkbox setting. The accesskey="f" attribute lets you change the state of the checkbox by pressing <Alt>+<f>. Note that the Struts <html:checkbox> tag cannot be used for this purpose, since it maps to a simple HTML <input type="checkbox">, which has the (in this case) undesired behaviour to submit no value at all when unchecked.

A simple text input field is used to display and change the name property of the Dish document (via the getter and setter method we wrote).

If there is already a Picture document available for the Dish we're editing, the image BLOB property of the Picture document is displayed. In any case we render a file upload dialog via the Struts <html:file> tag. The property=picture.image.formFile attribute of this tag will first cause a call to getPicture().get("image").getFormFile() on the DishActionForm we wrote. This is where our code for creating a new Picture document is called if no existing Picture is found. When the form is submitted, getPicture().get("image").setFormFile(...) will save the new image BLOB in the Picture document, so we don't even have to implement a setPicture() method.

Also the name property of the Picture document (inherited from Document) can be accessed by simply using the property="picture.name" attribute for the <html:text> tag. The getPicture() method of our DishActionForm will return the Picture document as ClientDocument, which implements the DynaBean interface and therefore supports generic getter and setter methods, so we don't have to implement getImage(), getName(), etc. for the Picture document.

At the end of the form, the resource and action parameters are set as hidden input fields, and a submit button is rendered which will submit the form to an appropriate action.