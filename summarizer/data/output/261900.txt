

Add the analytics-feedback add-on to your CAE application, by selecting this option when installing the CAE template. This will add a few jars to the WEB-INF/lib directory and a custom configuration directory WEB-INF/spring/analytics-feedback .
Setup the analytics database configuration in analytics-feedback.properties. Please note that the entries are the same as in the Analytics Dashboard analyticsdashboard.properties and may simply copy them. If necessary copy the database drivers to the CAE lib directory.
Select the report and suitable parameters (time range, rank range, site, category) in the Analytics Dashboard: In our example, this is the `Top Viewed Pages¿ report with time range ¿last 24 hours¿, rank range ¿top 10¿ and site ¿core¿. Please refer to the User Manual for existing Analytics Dashboard reports.


Lookup the corresponding technical report definition identifier and the values¿ symbolic names. Refer to the Analytics Developer Manual. In our example, the report is defined in [analytics-feedback-config.jar/]analytics-reportdefinitions.xml. Its technical identifier is ¿ReportDefinition.TopViewedPages¿. We do select as variable values:


¿timeRange: value r1dByh (this symbolizes the last 24 hours)
¿rankRange: top10 (the top 10 entries)
¿site: core (the site identified by the symbolic name 'core' as given in the Analytics Database, SiteDimension)
4#
Define and configure a Spring bean (scope singleton). The given example is using Spring XML Schema and not DTD. If you use the Spring DTD, replace scope=¿singleton¿ with singleton=¿true¿

<bean name="TopViewedPagesReportDataProvider" 
      parent="AnalyticsReportDataProvider" scope="singleton">

  <!-- The report definition to be used.
       All standard report definitions are specified in 
           analytics-reportdefinitions.xml -->
  <property name="reportDefinition" 
            ref="ReportDefinition.TopViewedPages"/>

  <!-- The variable value settings. Maps reportdefinition 
       variable name to value symbolic name. Read the 
       Analytics Dev Manual, section 'State Model 
       Variables' for standard variables and 
       symbolic names --> 
  <property name="initialVariableValues">
    <map>
      <entry key="site" value="core"/>
      <entry key="timeRange" value="r1dByh"/>
      <entry key="rankRange" value="top10"/>
    </map>
  </property>

</bean>


5#
Inject the Analytics Report Data Provider bean into a given live CAE content bean type:

In the Content Bean implementation class, add a property for the Analytics Data Provider, and a business method that accesses the Analytics Data Provider: 

¿
  private AnalyticsReportDataProvider dynamicContentProvider;
 
  public AnalyticsReportDataProvider getDynamicContentProvider() 
  {
    return dynamicContentProvider;
  }
 
  public void setDynamicContentProvider( 
                       AnalyticsReportDataProvider 
                       dynamicContentProvider) {
    this.dynamicContentProvider = dynamicContentProvider;
  }

  public List getTopViews() {
    Cache.cacheFor(5*60*1000L);  // cache for 5 minutes 
                                 //(if dataviews is configured)
    return dynamicContentProvider.getBeans();
  }
¿
6#
In the Spring configuration, inject the Analytics Data Provider:

...
<bean name="contentBeanFactory:MyContentType" ...>
  <property name="dynamicContentProvider"
            ref="TopViewedPagesReportDataProvider"/>
</bean>
...
7#
Access the content beans returned by the business method in a JSP template. 

<c:forEach items="${self.topViews}" var="page">
   Page `${page.title}¿
</c:forEach>
8#


Validate the results: The Analytics Report in the Dashboard and in the CAE live site must return the same information.


Finally, configure a data view that makes sure the report query is not executed on every request, but only executed when the ¿cacheFor¿ time dependency has expired.

<dataview appliesTo="com.customer.MyContentTypeImpl">
  <property name=¿topViews¿/>
</dataview>

You¿re done! Congratulations.

The above business method is the simplest possible example. It uses the  #getBeans() getter method to obtain the list of content beans. In your business method, use the #getKeys() method to retrieve the raw keys / ids only. The report result field defined by the keyFieldName will be used as the key / id field. The method #getResultMapWithBeans() will return the report data as a list of map, with each representing a result entry. This is useful if you need to access report result fields other than the keys or content beans, e.g. the absolute number of views etc. The entries will be enriched: For keys that can be mapped to beans, the bean will be inserted into the result entry under the name given by the beanFieldName.

Application logic can be used to extend and combine the information delivered by the report. However, further filtering of the list of beans (e.g. by content bean type) is difficult if a fixed rank is required (e.g. top10).

