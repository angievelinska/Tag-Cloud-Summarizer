

The developer can use three XML-files to configure the appearance and behavior of the CoreMedia Editor, e.g.  which information is shown in the document overview, which buttons are shown in the toolbar or which fields are hidden in the Document window. 

The names of the XML-files can be defined in the editor.properties file (see the Administrator Manual). The XML files are read at different times of the editor startup process and thus contain different information. The default names of the XML-files are as follows:
editor-startup.xml

3* This file will be read at first and evaluated before login. Useful entries are the language to be used, the login name and password the group configuration or the look and feel of the GUI.
2#
editor.xml

3* This is the main configuration file of the CoreMedia Editor which will be read-in after the user has logged in.
3#
editor-<user>.xml, editor-<groups>.xml

3* User and group specific configuration files which will be loaded after editor.xml. The standard installation does not provide any files of this type.

All elements which can occur only once - due to the coremedia-editor.dtd - will be overwritten by the settings of the succeeding configuration file. The following elements use inheritance:

Bundle and Explorer elements will be added.
Existing  Document and Process definitions of Documents and Processes elements, will be overwritten, new definitions will be added.
Existing DocumentType  definitions of DocumentTypes  elements use inheritance on the PropertyType element level. That is, existing PropertyType definitions (e.g. a Validator set for the property Name) will be overwritten and new definitions will be added.

Example:

The interesting parts of the editor.xml look as follows:

<Bundle name="first/bundle"/>
<SpellChecker enabled="true"/>
<Documents>
  <Document type="Article">
    <Property name="Headline" editorClass="FirstClass"/>
  </Document>
</Documents>
<DocumentTypes>
  <DocumentType name="Article">
    <PropertyType name="Editor">
      <Validator class="NotEmpty"/>
      <Initializer class="SetChiefEditor"/>
    </PropertyType>
  </DocumentType>
</DocumentTypes>


The interesting parts of the group specific editor definition look as follows:

<Bundle name="second/bundle"/>
<SpellChecker enabled="false"/>
<Documents>
  <Document type="Image">
  <Property name="Caption" editorClass="SecondClass"/>
  </Document>
< /Documents>
<DocumentTypes>
  <DocumentType name="Article">
    <PropertyType name="Editor">
      <ModelClass class="MyModel"/>
      <Initializer class="SetEditor"/>
    </PropertyType>
  </DocumentType>
</DocumentTypes>

Applying both editor definitions will result in the following behaviour:

Both bundles will be used.
The spell checker will be disabled.
Article documents will use the property editor FirstClass with the property Headline  and Image documents the property editor SecondClass  with the property Caption.
Article documents will use the validator class NotEmpty , the initalizer class SetEditor and the model class MyModel  with the property Editor.

