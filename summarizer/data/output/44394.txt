

A fine division of pages into fragments which can be marked as cacheable can significantly reduce the generation time per access, because:


fragments can be used again in many pages,

after a change in the repository, only the affected fragments need to be reconstructed,

regeneration of pages on higher levels can sometimes be avoided completely when changes do not replicate.


On the other hand, the creation of fragments requires more


time, since each call of context.include causes some extra time for request processing in the J2EE container and in the ADS,

memory, since dependency information must be stored for each fragment.


The memory required is about 3 kB Java heap per page (or page fragment) in the cache. For 50,000 pages, therefore, about 150 MB of heap are used.
