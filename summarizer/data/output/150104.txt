

As you can see, the object DispatcherServlet is the entry point for all requests. It is part of the Spring framework and you must not care about how it is called. All other steps are described in detail by the following enumeration:


preHandle(): A request arrives matching the protected URL space /secret*


setAttribute(): The interceptor looks for an actual authentication object in the current session. Because it is the first call and no authentication could happen it wont find the required object. Therefore, the interceptor returns a redirect but this action deletes the current URL. A protected controller expecting a query would not work anymore, and thus the interceptor must store the requested URL in the session.


sendRedirect() In order to allow the user to authenticate, the LoginInterceptor sends a redirect to a known login controller which returns a simple HTML form.


onSubmit(): After the user has entered his/her name and the password the browser will send a form submit. The Spring framework converts this request to a call of onSubmit().


login(): The passed values are used to login on the CMS 2005 and the expected result is a valid session. If something goes wrong the login form will be displayed with an explaining error message.


setAttribute() The valid session will be stored in the current HTTP session. This allows later calls to reuse the session. Please keep in mind, that a session is thread local and must be removed after the call is completed. Otherwise, the next call, probably sent by another user, served by this thread runs with the previous session and your application is seriously insecure.


getAttribute(): After the login the LoginController gets the previously called URL from the session.


sendRedirect() This URL is sent back as a redirect to the client.


preHandle() The interceptor is called because the redirect URL is still protected by the interceptor.


getAttribute(): This time the interceptor finds a valid authentication object and retrieves it from the session.


setSession(): The session will be set and all activities on the CoreMedia CMS 2005 run under the rights of the logged in user.


handleRequesInternal(): Now the really wanted call of the controller can be executed.


afterCompletion(): After completing the call the DispatcherServlet calls the method afterCompletion() to reset the current session.


setSession() Resets the current session to the default one.