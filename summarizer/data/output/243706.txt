

Interface to implement

Basically, the server-side stub of a client-side action must implement the interface com.coremedia.workflow.WfAction. For convenience and to hide the details how events are created and dispatched, you must subclass com.coremedia.workflow.common.actions.AbstractClientAction. This class already includes implementations of all needed getter and setter methods, uses a condition as guard and contains all of the event logic. AbstractClientAction also implements a default timeout for a client action. The default timeout time is 30 seconds and can be configured using the attribute timeout in the workflow definition. In Example 5.4.4a you see a sample action which extends AbstractClientAction.

Server Side

The server-side implementation of a client action is a stub which:

Assembles the argument list and passes it to the client via an event. The AbstractClientAction class includes the command and gui parameters in the argument list. The command is the one used as the parameter in the call of the super() constructor in Section 5.4.4.
Receives the clients result and creates an WfActionResult from it.

Custom clients, that are not event driven, have to be aware that while performing a Task.accept or Task.complete operation on behalf of connected clients there may be callbacks of the client action for the pending call. The callbacks have to be executed before the server call can return.