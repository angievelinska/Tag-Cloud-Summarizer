

For this use case we will create a report that displays the top N sites by number of page views per site in a selected time period. Pre-aggregated data to support such a report exists in the result schema of the analytics database, but no standard reports display information in exactly this way.


Create the Custom Reporting definitions file  



Follow the steps in sections and section. This will create a sample report definition in the /WEB-INF/spring/analytics/analytics-reportdefinitions.xml file that we will update to create the basis of our new report. Because the Top Internal Search Terms standard report provides a good model for our new report, copy the definition for the TopInternalSearchTerms from the analytics-reportdefinitions.xml file located in the cap-analytics-config.jar file.

Be sure also to keep the latter file available as a reference throughout the next steps; the standard Dashboard report definitions provide good examples for all report configuration steps.




Configure a state model in the "Abstract / High Level Model" section of the report definition in file analytics-reportdefinitions.xml



Refer to section for details about the state model. DefaultStateModel is used by the standard reports, it is suitable for both time series and category reports.




Define a list of state model variables in "State Model Variables" section of the report definition in file analytics-reportdefinitions.xml



Refer to section for details about the predefined variables. Each of the default abstract models provides examples of the use of existing variables. These variables support the selection parameters chosen by the report user when he/she runs the report.

The range and entries variables will be sufficient for our report, because our report parameters will only include selectors for time range selector and  "number of entries to be displayed".  Remove or comment out the searchTermResolution entry.




Map the State Model Variables to Data Model dimensions in the "Defining dimConstraint logical name to paths..." section of the report definition in file analytics-reportdefinitions.xml



Refer to section for details about the relationship between the state model variables and the data model, and a full list of state model variable types and their supported constraint aspects. Each state model variable should be mapped to a data model aspect constraint.  In our use case report definition, we need the range, resolution, and entries entry keys.  However the searchTermResolution can be removed or commented out.




Define the query or queries needed to retrieve the data you wish to display from the database result schema 



The query configuration is found under the "Data Model" section of the report definition in file analytics-reportdefinitions.xml, under section "Queries...".



Refer to section, which contains a full description of the query configuration. Note that although you can implement your own queries, there are several generic queries already available for use. For our example report, we will use the PreConsolidatedData_XYCategoryQuery.  Change the bean class entry under property Queries to com.coremedia.analytics.definition.report.query.PreConsolidatedData_XYCategoryQuery , and set the base table to TOTALVIEWS and the time column to EVENTINTERVALSTART.



As part of your query definition, you are sometimes required to map dimension constraints to your query. This will automatically restrict the results returned by your query to the parameters specified by the end user in the report selectors, and can also be used by data consolidators (see below) as the keys in merging multiple sql queries. See section.  However, in our use case, the time range and number of top N entries are already constrained by the data model and consolidator, so we do not need to configure an additional parameter in our query.




Configure a Consolidator in section "Query Result Consolidator.." of the report definition in file analytics-reportdefinitions.xml



Consolidators do post-processing work (such as sorting and merging) on the result set(s) returned by the query(-ies). Several preconfigured consolidators are available for use with standard type reports. These are detailed in the section.  

The RankingQueryResultConsolidator is suitable for our purposes in this use case, and it accepts as input the output of the PreConsolidatedData_XYCategoryQuery.  Change the bean class entry under consolidatorPrototype to com.coremedia.analytics.definition.report.query.consolidator.RankingQueryResultConsolidator. This generic consolidator does not utilize the searchTermResolutionDimConstraintName property, so this property must be removed or commented out.




Create titles and texts for the report under the view bean's section "Visualization / Rendering" of the report definition in file analytics-reportdefinitions.xml



See section and follow the steps. Here you create localized report titles, report sentences (the text accompanying the selectors at the top of the report), and report descriptions (the text at the right explaining the contents of the report).  You may create any title or description you would like, but in our example it is important that you include the {entries} and {range} selectors in the report sentence.




Configure the report's appearance under property "Report content template and customizer" inside the view bean section of the report definition in file analytics-reportdefinitions.xml



You must specify a chart template to provide the basic graphical rendering of the data. Section contains a list of the preconfigured report templates available for use. 



Optionally you can include a chart customizer to further adjust colors, line thickness etc. See Section for further details. Preconfigured customizers can be found in package com.coremedia.analytics.jasperintegration.jfreechart.customizers.* and examples of use in other report definitions in the file framework version of analytics-reportdefinitions.xml. 

The template and customizer already present in our example report definition are acceptable choices so you may leave them configured as they are.




Define access rights to the report under section "Required Role" of the report definition in file analytics-reportdefinitions.xml



See section for details.  Again, the default should be acceptable unless your environment has been customized.




Publish the new report to the Dashboard.



Open the file /WEB-INF/spring/analytics/analytics-profiles-and-views.xml and add your new report's definition name to the report definition "list" property, as described in section.





