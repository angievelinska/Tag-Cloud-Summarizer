

Most of the strategies discussed in the previous section can be configured in the Spring configurations of a Content Application Engine, but some beans have to be configured in the Data Aggregator or in the Analytics Dashboard web application.

This section discusses those strategies that support the default functionality of CoreMedia Analytics. For extension options that add fundamentally new behavior, the appropriate sections are indicated.

Click Tracking

The bean analyticsLog as configured in the file spring/analytics/tracking.xml provides a number of strategy parameters of which any or all can be replaced by custom beans.

<bean id="analyticsLog" parent="abstractAnalyticsLog">
  <property name="sessionExtractor" ref="..."/>
  <property name="userNameExtractor" ref="..."/>
  <property name="browserExtractor" ref="..."/>
  <property name="sizeExtractor" ref="..."/>
  <property name="siteExtractor" ref="..."/>
  <property name="pageDataExtractor" ref="..."/>
  <property name="referrerDataExtractor" ref="..."/>
  <property name="robotDetector" ref="..."/>
  <property name="logFilter" ref="..."/>
</bean>

Simply define your own beans by instantiating the classes you implemented and enter a reference to your bean into the definition of the analyticsLog bean. By default, the set of overwritten properties is empty and the default implementations are used.

Of course you may configure additional properties of your beans as required.

Click Tracking and In-Site Analytics

Being shared between click tracking and In-Site Analytics, the bean localeExtractor is configured in the shared file spring/analytics/analytics-pageresolution.xml. The default strategy can be redefined by overriding the definition of the bean.

<bean id="localeExtractor" parent="abstractLocaleExtractor"/>

This bean is retrieved by name from the application context, so that the name must be kept.

Only In-Site Analytics

The file spring/analytics/analytics-overlay-example.xml contains a definition of the bean targetPageResolver in a comment. You can either remove the comment markers in the file analytics-overlay-example.xml or define a bean of that name in any other place, if you have to specify a TargetPageResolver object. Your definition would look like this:

<bean id="targetPageResolver" class="..."/>

Because the target page resolver is only used by In-Site Analytics for resolving link targets, such a bean is ignored if In-Site Analytics is not installed.

Data Aggregator

In the file config/dataggregator/spring/dataaggregator-plugins-example.xml in a Data Aggregator installation you can find an example for adding ObjectIdAnalyzer instances.

<customize:append bean="objectIdAnalyzers">
  <list>
    <bean class="..."/>
  </list>
</customize:append>

Add any number of such definitions if you need to analyze one or more custom object id formats.

In section and especially in section you can find information on how to add fundamentally new steps to the aggregation process. This is beyond the scope of this section.

Object Analyzer

In the file config/objectanalyzer/custom/spring/objectanalyzer-trigger.xml you can find a number of bean definitions, of which the following section will likely be changed by you.

<bean class="com.coremedia.analytics.objectanalyzer.DefaultObjectStateContentEvaluator">
  <property name="contentSiteExtractor">
    <bean class="com.coremedia.analytics.plugin.DefaultContentSiteExtractor">
      <property name="connection" ref="connection"/>
      <!-- Set this property to true or false when connecting to a Live Server. -->
      <property name="multiSite" value="auto"/>
    </bean>
  </property>
</bean>

Typically, the DefaultObjectStateContentEvaluator has to be replaced by a custom subclass and the DefaultContentSiteExtractor might also be inappropriate in some cases.

Analytics Dashboard

The file spring/analytics/analytics-config.xml contains an example for configuring a PageNameFormatter object in the form of the bean analyticsExamplePageNameFormatterCustomizer. You can remove the comment characters or you can repeat a similar bean definition with a different name any number of times in other files.

<customize:append bean="pageNameFormatters">
  <list>
    <bean class="..."/>
  </list>
</customize:append>

Further information on the configuration of the Analytics Dashboard can be found in section. That section goes beyond simple customization and deals also with adapating the set of reports.