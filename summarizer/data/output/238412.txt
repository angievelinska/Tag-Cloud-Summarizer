

After that, add the database's JDBC driver to the application's classpath by copying the JAR into the directory lib/. Finally, adapt the following properties in the configuration file:

jdbc.driver=oracle.jdbc.driver.OracleDriver
jdbc.url=jdbc:oracle:thin:@localhost:1521:oracle
jdbc.user=username
jdbc.password=password
jdbc.dbname=oracle

Value Cache

If the Value Cache is used, the following entries need to be changed:

valuecache.enabled=true
valuecache.store.directory=c:/data/valuecache

Specify a location in the file system where the values are supposed to be stored. Make sure that the user which runs the Proactive Engine has sufficient access rights to read and write this directory.

If you want the ProactiveEngine to run on an empty cache you might set

proactiveengine.clear=true

which causes all cached values and dependencies to be deleted when starting up the ProactiveEngine. Make sure to remove this entry as soon as the ProactiveEngine has started up if you don't want the ProactiveEngine to be cleared on the next restart.

Management and Logging

The property management.jmxremote.url  specifies a JSR 160 compliant URL under which a JMX connector server is made available for management. Finally, the property logging.configuration  specifies the location of the above mentioned log4j.properties  file.

Monitoring a ProactiveEngine application

A ProactiveEngine application (such as the CAE Feeder or Analytics Object Analyzer) can be monitored by the watchdog. Thus serious problems can be detected and recovery operations (e.g. restart of the component) can be initiated. Any ProactiveEngine application provides a "heartbeat" attribute via JMX which indicates whether the application is still working or not. This value is the time in milliseconds since a vital internal operation has been executed. A low value (near 0) indicates that everything is fine while a high value might indicate a serious problem.

The following example snippets demonstrates how to restart a ProactiveEngine in case that it does not proceed (e.g. due to database problems) for 30 seconds:

<Component name="proactiveengine" startAction="check">

 <Jmx name="check"
      serviceUrl="service:jmx:jmxmp://localhost:5555/"
      objectName="ProactiveEngine:type=Core"
      attributeName="HeartBeat"
      defaultCode="ok">

  <!--report an error if no activity could be detected for 30s-->
  <Converter class="com.coremedia.watchdog.NumberRangeConverter" 
             min="30000" code="error"/>
 </Jmx>

 <Script name="restart" command="bin/cm proactiveengine restart" 
         timeout="60"/>
  <Edge from="check" to="check" code="ok" delay="10"/>
  <Edge from="check" to="restart" code="error"/>

   <!-- no jmx connection -->
  <Edge from="check" to="restart" code="unexpected_error"/>

  <Edge from="restart" to="check" code="ok" delay="20"/>

  <!-- restart failed, e.g. database not available -->
  <Edge from="restart" to="restart" code="unexpected_error" 
        delay="20"/>
</Component>

Running

The Proactive Engine's startup is done by using CoreMedia's standard mechanism. Under windows, before the first start, you have to register the component as a service; open a command prompt and type

> bin/cm proactiveengine install

In order to start the Proactive Engine type

> bin/cm proactiveengine start