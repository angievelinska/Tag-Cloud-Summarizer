

We learned that the business objects should not store any of the information they receive from their data source. This task is performed by a dedicated caching layer. Several questions arise: what is cached? How is the cache accessed? How is the cache invalidated?

Caching in the Content Application Engine has a number of important properties:

Caching is defined outside the business objects.
Caching is achieved by building a subclass of a business class, materializing properties into actual fields and storing an instance of this subclass.
Cached objects have the same interface as the non-caching business objects so that one can develop against non-cached versions first and does not need to change the code later.
A set of public bean properties of the business object is subject to caching.
Cached objects can be aggregated: one cached object can store a direct object reference to another cached object. Once retrieved from the cache, this association can be navigated without further synchronization or cache lookups. This is important for fast rendering.
It is possible to cache different sets of properties of the same business object; "more" or "different" properties of this object can be used in different contexts. Often it is not sensible to cache all properties of an object for two reasons: if one property set is significantly smaller than another or faster to compute (e.g., only the metadata), it may be worth the overhead of caching two objects. The second ¿ more important ¿ reason is dependencies: if one representation acquires less dependencies than another and provides all properties needed in a certain context it should be cached separately (e.g., "uses only content properties from the cms but not the database"). Especially different amounts of aggregation are a concern here (e.g., when the object cached in the parent property in turn depends on a different content object).
Cache invalidation is dependency-driven, i.e., a cache value has associated dependencies on external values and is invalidated if one of these changes. This happens automatically for dependencies to the content repository.

The Content Application Engine caching layer gives you the option to define several cached representations for one business object. It is possible to distinguish

which properties of the business object are cached
and, for properties that refer to other business objects, which cached representation, if any, should be aggregated

Such a definition is called a data view of an object. 