

A recurring problem of UIs is localization. For a graphical UI, localized strings are often complemented by a tooltip and a corresponding icon.

Editing Services for JSF deals with Java Beans. Localization is defined as the problem to find a localized text, tooltip, and icon for a given Locale and Bean. These three properties are grouped into a LocalizedLabel. A LocalizedLabelFactory is a factory that takes a Locale and a Bean and produces a LocalizedLabel. There is a DelegatingLocalizedLabelFactory, that iterates over a (Spring-) configurable list of LocalizedLabelFactories until one is able to return a LocalizedLabel for the given bean (analogously to the IdProvider in the CAE). 

A LocalizedComparableFactory takes a Locale and a Bean and creates a Comparable that can be used for localized sorting. Java supports localized sorting for Strings by the java.text.Collator class. Another case of localized sorting is when an object is first localized, then sorted according to its localized name, e.g. a ContentType. 

The LocalizationService offers utility methods to create LocalizedLabels from Beans, given a LocalizedLabelFactory for a specific locale. It can create a LocalizedLabel from a single bean as well as lists of LocalizedLabels from lists of Beans or sorted lists of LocalizedLabels from a set of Beans and an optional LocalizedComparableFactory. The default implementation is the DefaultLocalizationService. It uses the Locale from the current request (see EditingContext).

Utility classes are available to create a Comparable composed from two given Comparables (CompoundComparable) and to reverse sorting order, i.e. return the opposite for a given Comparable (ReverseComparable).

For more information about localization classes consult the packages com.coremedia.editing.localization and com.coremedia.editing.cap.localization in the JavaDoc API.

