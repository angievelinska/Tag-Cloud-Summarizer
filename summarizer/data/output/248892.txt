

If you have worked through the previous examples, you will recognize some of the methods, so we will just look at the last six methods which return property values.  Each method needs to parameters, the document and the name of the property whose value is to be fetched.  We use our well known ContentMetaData interface to represent documents, and the name is a simple String.  getIntegers and getStrings are straight forward, since JAXB supports int and String as well as lists.  getLinks returns a list of ContentMetaData, a pattern which we know already since getSubfolders in the Folders example. getDates returns a list of long values which contain the getTimeInMillis results of the Calendar objects provided by the UAPI. We could also use the Calendar objects themselves, but there may be redundant fields and bean properties which JAXB would discover and put into the XML representation.  The long value ist sufficient.

Finally, getBlobs and getMarkups deal with blobs, which we have not seen in the previous examples so far.  Blobs and Markup values may be pretty large, so it is no good idea to annotate them as @XmlAttribute or @XmlValue  and inline them in the message.  Instead, we annotate the WebService as @MTOM.  This enables the SOAP Message Transmission Optimization Mechanism which defines a method for optimizing the transmission of XML data of type xs:base64Binary. JAXB maps DataHandler objects to xs:base64Binary by default, so we use this class to provide our blob data in the Blob interface.  Metro provides a StreamingDataHandler which makes the WebService use a streaming API for attachments of inbound SOAP messages.  However, StreamingDataHandler is not part of the JAX-WS standard, and our example uses blobs only in outbound messages anyway.  So we use ordinary DataHandlers.

This example slightly changes the PropertyDescriptor.  In the previous examples the getType method returned a String which could simply be displayed in the client.  This time we need the type for more complex logic and therefore return the original UAPI value of the enum type CapPropertyDescriptorType which is more convenient for programmatic usage.  JAXB supports enum types by default, so we don't need any additional annotations.

The Web Service is done now and can be compiled and executed with the well known commands:
Change to the directory ws06-properties
Compile and deploy the WebSevice:
$ ant server
Wait until the webapp is running in Tomcat

Generate the client API
$ ant generate-client

The client is an extension of the document browser in section. Remember that we enabled MTOM for the WebService.  The client must create a proxy port object which supports MTOM, otherwise it would not be effective.  Therefore it provides an MTOMFeature to the getPort method of the Service:

