

The first thing you need for XML production with the ADS is a Java Server Page (JSP) that will create XML. 

Put a new JSP in the template directory of your CoreMedia web application (e.g. $COREM_HOME/jakarta-tomcat/webapps/coremedia/templates). 
Start this JSP with the usual declaration and the correct content type:

<%@ page contentType="text/plain" session="false"%>

By using this content type, you can view the verbatim output of the JSP in both Internet Explorer and Mozilla Firefox. Although  in IE the XML looks a lot better, there are some problems with conformance to standards. We recommend Netscape/Firefox or Opera for debugging purposes.

The next line in your JSP should emit the XML Declaration which sets the XML version in use as well as the encoding:

<% out.write("<?xml version='1.0' encoding='utf-8'?>");%>

The first byte absolutely needs to be the '<'. This is mandatory for trouble-free processing using any XML Parser and is documented in the XML Specification.

Note that the XML declaration should only be printed when producing an entire XML Document, not a fragment. For fragments you have to define the text/x-coremedia-fragment;charset=utf-8 content type.

Now we have our basic page which will produce an XML declaration and set the correct content type. For the actual XML production there are three approaches:

Construct a DOM tree and output its content using the DOMUnparser in conjunction with one of the many Unparsers.
Construct an Unparser on the Servlet Output Stream and fire SAX events manually.
Output the XML verbatim using neither DOM nor SAX.
Use a combination of these techniques.

The first alternative uses more memory since the entire DOM tree must be kept in memory. It is also slower. As rule of thumb, use the second alternative when you're either producing dynamic content or the page sizes will be very large. If neither of these cases apply, chose the method you're most comfortable with.