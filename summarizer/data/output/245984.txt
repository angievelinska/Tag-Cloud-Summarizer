

In order to develop your custom Content applications using EditingServices you are supposed to have good knowledge of JSF and Spring as an application developer. Views are assembled using JSF JSPs, navigation cases are defined in plain JSF configuration files (XML) and business beans are set up using a spring application context. The following steps will lead to your custom Content application:
Install the ES web application template.
Configure your CMS and Unified API environment in WEB-INF/spring/objectserver.properties.
Create your JSF document views in WEB-INF/jsp/editforms/. By default a view for the document type MyDocumentType has to be named MyDocumentType.jsp and will be automatically included in the built-in document view (views/document.jsp). In addition, Editing Services for JSF lets you generate your JSP templates from your document type definition files (see section).
Implement your own views, actions and navigation cases if necessary. In general this can be done by editing some spring configuration files located in WEB-INF/custom or its subdirectories, adding your own spring configuration files and adding your own JSF navigation case definitions to the global JSF configuration.

Note that after step 2, the web application should be able to start. The built-in Content explorer (views/explorer.jsp) works out-of-the-box, including search and publication. Since all JSF views are accessed through a servlet mapped at /servlet, you have to access the explorer view via the URL http://localhost:8001/editing/servlet/views/explorer.jsp. Note that the default configuration automatically redirects to this URL when using the shorthand http://localhost:8001/editing. In any case, the user has to log in before he can access the Content explorer.

When selecting a document, the explorer view navigates to a default document view of that document. The document view offers actions for the Content life cycle (check-out, check-in, approve, publish, ...), but does not provide property editing functionality. The desired property editing functionality is added in step 3. The most important task is to assemble property editors for all editable properties -- section property editors helps you to with it. Custom Content editing use cases are added in step 4 (see section extensions).

The safest way of managing your source code in order to migrate to a newer version of the ES web application template is to modify as few files of the web application template as possible, never modify any files under WEB-INF/framework, and to add your own bean definition files to one of the spring application contexts.