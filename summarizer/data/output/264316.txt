

The CoreMedia Content Application Engine applies the object-oriented concept of method dispatch to templating - the process of selecting the rendering template to be used for a content bean. It is possible to register templates for content beans on any level of the inheritance hierarchy. A template registered to a content bean is automatically also applied to the content bean's subclasses - unless another template is registered for a more specific subclass. Like in object-oriented programming, the run-time type of a content bean determines the template to apply. The system first tries to retrieve a template that is registered for the content bean's class, and if unsuccessful, it walks up the inheritance hierarchy and returns the first template found. In this behavior, it is similar to a polymorphic method call. 

However, there is a difference to a Java method call: As it is possible to register templates both for content bean classes and for interfaces, parent interfaces are also inspected whether a template has been registered for them. When the lookup for a template to a class is performed, the system first looks for a template registered under the class itself, then checks the implemented interfaces, and then continues the lookup with the superclass. This lookup style in the fashion of a breadth-first search ensures that the most specific template is retrieved. 

It is possible to register templates with the same name for different classes. Also, the object that the template is supposed to render is available in the template under the identifier "self". By default, the CoreMedia Content Application Engine uses JSP as its templating technology.