

The servers open an SSL Port in addition to the Clear-Text Port. This allows the same server to be accessed using clear text communication from within a trusted network, and using SSL from outside. When a client is configured to use SSL, not a single byte will be sent to the clear text port, which may be blocked from outside access by a firewall.

Note that the server's HTTP port will have to be accessible to clients, for example to retrieve the IOR.

Enable SSL Encryption

Enabling SSL encryption for CORBA communication requires the following steps:
Create keystores for Content Server and Workflow Server.
Prepare the Content Server for SSL communication
Prepare the Workflow Server for SSL communication
Prepare the CoreMedia Editor for SSL communication.
Restart all three components
Verify SSL communication

Create keystores

Create keystores which will later be distributed to the servers and clients. Consult your JDK documentation for further details about the keytool command.
Create self-signed server keys for Content- and Workflow Server

keytool -genkey -alias contentserver -v -keyalg RSA \
   -keystore contentserver.keystore
keytool -genkey -alias workflowserver -v -keyalg RSA \
   -keystore workflowserver.keystore
2#
Export the server's public keys from their keystores:

keytool -export -rfc -keystore contentserver.keystore \
   -alias contentserver -file contentserver.public-key
keytool -export -rfc  -keystore workflowserver.keystore \
   -alias workflowserver -file workflowserver.public-key  



Prepare the Content Server for SSL communication
Edit bin/contentserver.jpif and add the following lines:

JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLServerSocketFactory.keystore=
  ${INSTALL_DIR}${FS}etc${FS}keys${FS}contentserver.keystore"
JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLServerSocketFactory.passphrase=
  mypassword" 
2#
Edit properties/corem/contentserver.properties  and set the following properties:

cap.server.ORBServerPort=14300
cap.server.ORBServerSSLPort=14443
3#
Place the contentserver.keystore in etc/keys/  of your installation-home of the CMS-Server. For another location adjust the keystore-setting in contentserver.jpif  accordingly.



Prepare the Workflow Server for SSL communication
Edit bin/workflowserver.jpif and add the following lines:


JAVA_VM_ARGS="$JAVA_VM_ARGS 
-Dcom.coremedia.corba.SSLServerSocketFactory.keystore=
${INSTALL_DIR}${FS}etc${FS}keys${FS}workflowserver.keystore"
JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLServerSocketFactory.passphrase=
  mypassword"
2#
Edit properties/corem/workflowserver.properties  and set the following properties:

workflow.server.ORBServerPort=14305
workflow.server.ORBServerSSLPort=14445
3#
Place the workflowserver.keystore in etc/keys/  of your installation-home of the Workflow Server. For another location adjust the keystore-setting in workflowserver.jpif  accordingly.

The following two steps are optional and are limited to rare cases, in which SSL encrypted communication may also be required between workflow server and content server. 
4#
In this case, you should add the content server's key to the workflow server's keystore, and configure the workflowserver as an SSL client like the editor. Run the following command:

keytool -import -alias contentserver -keystore \
  workflowserver.keystore -file contentserver.public-key 
5#
In bin/workflowserver.jpif, add the following lines:

JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLClientSocketFactory.clearTextPort=
  14300"
JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLClientSocketFactory.sslPort=14443"
JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLClientSocketFactory.keystore=
${INSTALL_DIR}${FS}etc${FS}keys${FS}workflowserver.keystore"
  JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLClientSocketFactory.passphrase=
  mypassword" 

Prepare the CoreMedia Editor for SSL communication
Import the servers' public keys to the editor's keystore:

keytool -import -alias contentserver \
  -keystore editor.keystore -file contentserver.public-key
keytool -import -alias workflowserver \
  -keystore editor.keystore \
  -file workflowserver.public-key
2#
Edit bin/editor.jpif and add the following lines. The port numbers in the sslPort  property must be in the same order as the corresponding ports in the clearTextPort  property. Both lists can also specify IP addresses, written <hostip>:<port>.

JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.sun.CORBA.legacy.connection.ORBSocketFactoryClass=
  com.coremedia.corba.SSLClientSocketFactory50"
JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLClientSocketFactory.
  clearTextPort=14300,14305"
JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLClientSocketFactory.sslPort=
  14443,14445" 
JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLClientSocketFactory.keystore=
  ${COREM_HOME}${FS}etc${FS}keys${FS}editor.keystore"
JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.coremedia.corba.SSLClientSocketFactory.passphrase=
  mypassword" 



3#
If the Editor is started via WebStart, add the following lines to webstart/ext/editor.jnlp, behind the property tag with name="java.security.policy" inside the resources tag.

<property name=
 "com.sun.CORBA.legacy.connection.ORBSocketFactoryClass" 
  value="com.coremedia.corba.SSLClientSocketFactory50"/>  
<property 
  name="com.coremedia.corba.SSLClientSocketFactory.
  clearTextPort" 
value="14300,14305"/>
<property name=
 "com.coremedia.corba.SSLClientSocketFactory.sslPort" 
  value="14443,14445"/>
<property 
  name="com.coremedia.corba.SSLClientSocketFactory.keystore" 
  value="http://$$host:$$port/coremedia/files/properties
  /corem/editor.keystore"/>
<property name=
 "com.coremedia.corba.SSLClientSocketFactory.passphrase" 
value="mypassword"/> 

The above description assumes Sun JDK 5. Sun JDK 1.4 needs a different configuration for the ORB socket factory, as follows:

JAVA_VM_ARGS="$JAVA_VM_ARGS 
  -Dcom.sun.CORBA.connection.ORBSocketFactoryClass=
  com.coremedia.corba.SSLClientSocketFactory"

Or in the case of WebStart:

<property 
  name="com.sun.CORBA.connection.ORBSocketFactoryClass" 
value="com.coremedia.corba.SSLClientSocketFactory"/>
4#
If you want to deploy the editor.keystore via http (as suggested above, but mind that this is a security problem) you also need to adjust properties/policy/server.policy to allow the deployment of editor.keystore. Add the following permission line:

grant codeBase "http://localhost/servlets/fileservlet" {
  [...]
  permission java.io.FilePermission
    "properties${/}corem${/}editor.keystore", "read";
  [...]
}; 
5#
Place the editor.keystore in etc/keys/  of your installation-home of the editor. For another location adjust the keystore-setting in editor.jpif accordingly. For WebStart place the keystore in propeties/corem/  of your installation-home of the CMS-Server. For other locations you need to adjust properties/policy/server.policy.

Prepare Unified API clients for SSL communication
In order to instruct Unified API clients like the command line tools or the Content Application Engine to use SSL, you must also configure the ports, the key store, and the passphrase in the jpif-files, just as this is done for the CoreMedia Editor. The ORB socket factory must be set in the connection parameters for the Unified API, however.
If you are setting up the Unified API connection programmatically, consider using the connect(Map) method of the class Cap.

Map parameters = new HashMap();
...
parameters.
put("com.sun.CORBA.legacy.connection.ORBSocketFactoryClass",   
  "com.coremedia.corba.SSLClientSocketFactory50");
connection = Cap.connect(parameters);

3* If you are using the CAE, you must inject the parameter into the CapConnectionFactory. To this end, you can add the following bean customizer definition to a spring bean definition file of your webapp.

<bean class="com.coremedia.objectserver.util.
             SimplePropertyCustomizer">   
  <property name="customizedBeanName" 
   value="&amp;connection"/>
  <property name="customizedProperty" 
   value="otherParameters"/>
  <property name="propertyValue">
    <map>
      <entry
   key="com.sun.CORBA.legacy.connection.ORBSocketFactoryClass"
   value="com.coremedia.corba.SSLClientSocketFactory50"/>
    </map>
  </property>
</bean>

3* In any case, you may inject the parameter through the IOR URL passed to the Unified API. For command line tools, you can pass the URL on the command line:

cm systeminfo 
  -url http://<SSHCLIENT>:<CorbaPort>/coremedia/ior?
  com.sun.CORBA.legacy.connection.ORBSocketFactoryClass=
  com.coremedia.corba.SSLClientSocketFactory50 
  -u admin -p admin 

3* You can also set the extended URL in the file capclient.properties:

cap.client.server.ior.url=\
  http://<SSHCLIENT>:<CorbaPort>/coremedia/ior?\
  com.sun.CORBA.legacy.connection.ORBSocketFactoryClass=\
  com.coremedia.corba.SSLClientSocketFactory50

3* It is also possible to configure an extended URL in the objectserver.properties when operating a CAE. You can pass an extended URL when opening a connection programmatically.

Restart Workflow Server, Content Server, and clients.

Restart all components using cm <component> restart

Verify SSL communication

Verify SSL communication by searching the components' logs for error messages, and by using netstat. Under Solaris, using the port numbers in this example, you could use the command:
netstat -e -a -p|grep ":14[34]"
It should show that before starting the editor, the server is listening on port 14443/14445 (which are the SSL ports) and 14300/14305 (the clear text ports). After the editor is started and a user has logged in, a connection should be established on port 14443/14445 (and not 14300/14305) towards the client's machine. Note that other components might continue to connect to the clear text ports.
