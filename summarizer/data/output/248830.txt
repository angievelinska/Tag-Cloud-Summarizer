

In CoreMedia SCI, the subject referred by a resource URI is either a document or a folder. For documents, there are more fine-grained subjects in the form of property URIs (see chapter ...). The ViewDispatcher also provides views for document properties: A DocumentPropertyUri on an XmlProperty of a certain document may deliver a textual representation of the XML contained, while a PropertyUri on a BlobProperty gives for example the raw data of the blob, which can be referenced in an IMG tag.

In analogy to documents, templates for PropertyUris are selected by the ViewDispatcher according to the type of the corresponding property. As with the document types, the property types have a type hierarchy with inheritance, starting from a most basic property type called Property. As with documents, various views can be defined for properties in addition to the default view, which as far as possible delivers unedited property data. In this way, ever recurring tasks such as the formatting of date fields or XMLText properties can be defined once at a central position. Properties also have their own doesNotUnderstand view, which is automatically executed when the requested view cannot be found in the inheritance hierarchy.

There is an abstract property type for each built-in type. There is inheritance between the built-in property types, e.g. LinkList<Image> is a subtype of LinkList<Document>. Since SCI 4.1, each property defined in the document type model results in a concrete property type. If for example the document type Image has a BLOB property data, then Image.data would be a property type inheriting from the built-in property type Blob. The data property of a concrete Image document would be a property object.

Inheritance between document types is respected, so that the property class ImageWithThumbnail.data is a subclass of Image.data.

See Image 4.4.1.2a for the built-in property types available in CoreMedia with their predefined views. The property type hierarchy can be expanded in three ways: for every user-defined document type there is a corresponding LinkList type, all available XML grammars (predefined as well as user-defined) are interpreted as subclasses of the built-in property type Xml, and every other user-defined property appears as a subclass of its corresponding built-in type.

You can browse all property classes and types in the document / property type model browser.