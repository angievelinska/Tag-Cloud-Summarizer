

In the following, meta templates are used to define JSF views for your custom document types. If you are familiar with Apache Velocity, you will recognize the notation, but even if not, it is very simple to read and the short introduction that follows should suffice. "Meta template" means that they have to be instantiated for a concrete document type or document property to result in a valid JSF-JSP fragment.

Meta expressions are surrounded by curly brackets, prefixed by a dollar sign (${meta-expression}). The most common simple meta expressions used here consist of a meta variable followed by a dot and a property name (${meta-variable.property-name}). There are meta directives that start with a hash sign (#) at the beginning of a line.

One meta variable used in the following meta templates is docType, which stands for some (custom) document type. It has the following properties, as defined in your custom document type model:

Name - the name of the document type.
Parent - the parent or super type of the document type, if any.

Another meta variable property is used for the current property descriptor. In the same meta template, docType always stands for the document type defining the current property. The most common case is the name of the document property, denoted as ${property.Name}. property has the following (meta) properties, as defined in your custom document type model:

Name - the name of the property.
Length - the maximum length in characters of a String property.
Grammar - the XML grammar identifier of an XML property.
MimeType - the MIME type pattern of a BLOB property.
LinkType - the (minimal) Content type of linked documents of a LinkList property.

Defining a Document Edit View

A document edit view (also called document form) consists of a list of property editors, one for each property that the user should edit. To define a custom document view to be used in the Content explorer that comes with the ES4JSF Application Template, create a JSF-JSP named ${docType.Name}.jsp in the directory WEB-INF/jsp/editforms/ of your Web application. (You can find templates for the predefined document types Dictionary, Preferences, and Query in that directory). This JSP is automatically used by the Content explorer when a document of the corresponding type should be offered for editing, by including it in the generic JSF view views/document.jsp. Your JSF-JSP must declare a subview and can be based on the following template, into which the JSF-JSP fragments for the property editors described in the following sections have to be included:



<%@ page contentType="text/html;charset=UTF-8" language="java"%>
<%@ taglib uri="http://java.sun.com/jsf/core" prefix="f"%>
<%@ taglib uri="http://java.sun.com/jsf/html" prefix="h"%>
<%@ taglib
    uri="http://www.coremedia.com/jsf/editing-services"
    prefix="es"%>
<f:subview id="${docType.Name}">

#if( $docType.Parent )
  <%@include file="${docType.Parent}.jsp"%>

#end
<%-- place property editors defined (not inherited!)
     by this document type here --%>

</f:subview>



JSF requires a subview to be used in included JSPs. The subview is a JSF "naming container", so it defines a name space for all contained components. The document edit view meta template suggests to give the subview the document name as its ID.

To reuse the property editors of the parent (or super) document type, the corresponding JSF-JSP is included. The #if meta directive takes care of top-level document types that do not have a parent.