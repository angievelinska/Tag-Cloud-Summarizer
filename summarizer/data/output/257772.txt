

The QueryService allows synchronous, structured queries against the content repository. A query is a string formulated in the CoreMedia query language, with an optional array of parameter objects which may be referenced from the query string. The number of results to return can be limited. There are two variants of queries, those applying to content objects and their current property values, and those applying to versions (including working versions). Queries are initiated with the poseContentQuery  and poseVersionQuery, respectively.

A query string expresses a condition on content objects. The QueryService  returns all Content or Version  objects in the repository for which the condition is true. The condition is made up of a logical combination (AND, OR, NOT) of type constraints, comparisons and tests, which may refer to the object's properties.

A query may also refer to getters defined in the Content, Version and PublicationService  interfaces in the same way it refers to user-defined properties, by giving its name. The names of API methods are transformed as follows:

Content
For a zero-argument method whose name starts with get, the implied property name omits the get  and starts with a lower-case letter. So the method getCreationDate()  becomes creationDate. For a zero-argument method whose name starts with is, the implied property has the same name as the method. So the method isCheckedIn()  becomes isCheckedIn.
Version
Transformation is similar to Content, but to avoid confusion, all getters are prefixed with version. So getEditor() becomes versionEditor. Boolean-valued getters start with versionIs.
PublicationService
A one-argument method that takes a Content  as its argument is transformed as if it were a zero-argument method defined in class Content, and analogously for Version. So isApproved(Version)  becomes versionIsApproved  and getPublisher(Content)  becomes publisher.

An implied property based on a Version  getter is only defined for documents, not for folders. In a content query, it implicitly refers to the working version for a checked out document, or to the latest version for a checked in document.

There are three implied properties with a deviating semantics:

The word id represents the current content (and not the string returned by the method getId()  defined in Content).
For version queries, the word version  represents the current version. For content queries, it represents the working version for checked-out content, and the latest version for checked-in content.
The implied property containsWideLink  is true if the content or version contains a link (in a link list or in XML) to a content that belongs to a different base folder.

When an ORDER BY clause is given, the query result is sorted according to the values of the given properties. These properties must be defined for all content types for which the condition may be true.

Please refer to the javadoc of class QueryService  for a comprehensive list of implied properties available in query expressions.

The query syntax is as follows:

query ::=
  conditional_expression [ order_by ] [ limit ]
  ;
order_by ::= 
  ORDER BY order_entry {"," order_entry}
  ; 
limit ::=
  LIMIT numeric_literal
  ;
order_entry ::=
  property [ ASCENDING | ASC | DESCENDING | DESC ]
  ;
conditional_expression ::=
  TYPE ["="] type { "," type } [":" conditional_expression]
  | conditional_expression OR conditional_expression
  | conditional_expression AND conditional_expression
  | NOT conditional_expression
  | ( conditional_expression )
  | BELOW content
  | REFERENCES content
  | property REFERENCES content
  | REFERENCED
  | REFERENCED BY versionOrContent
  | property IS [NOT] NULL
  | comparison_expression
  | contains_expression
  | value_expression
  ;

type ::=
  identifier
  ;

comparison_expression ::=
  value_expression comparison_operator value_expression
  ;

comparison_operator ::=
  "=" | ">" | ">=" | "&lt;" | "&lt;="
  ;

contains_expression ::=
  property CONTAINS literal_expression
  | property CONTAINS EXACT literal_expression
  | property CONTAINS PREFIX literal_expression
  | property CONTAINS STEM literal_expression
  ;

value_expression ::=
  property
  | literal_expression
  ;

property ::=
  implied_property
  | identifier
  ;

content ::=
  literal_expression
  ;

version ::=
  literal_expression
  ;

versionOrContent ::=
  literal_expression
  ;

literal_expression ::=
  string_literal
  | numeric_literal
  | boolean_literal
  | DATE string_literal
  | PATH string_literal
  | USER string_literal
  | ID string_literal
  | input_parameter
  ;

boolean_literal ::=
  TRUE
  | FALSE
  ;

Identifiers consist of Java identifier characters. Where the name of an identifier collides with a keyword or an implied property, the identifier can be enclosed in double quotes to preserve its meaning as an identifier. Examples:

Article
title
Document_
"parent"
"DATE"

String literals are delimited by single quotes. A single quote inside a string literal is represented by two successive single quotes. Examples:

'hello world'
'banker''s baguette'

Numeric literals conform to Java syntax. Essentially, a numeric literal is a sequence of digits, optionally preceded by a minus sign. Examples:

123
-3

As date literals, the Unified API supports a subset of ISO8601 strings, namely those matching yyyy-mm-ddThh:mm:ssTZD  where the time zone distance TZD  is expressed as +hh:mm or -hh:mm. Examples:

2004-09-08T13:47:07-02:00
2004-12-31T23:59:59+00:00

PATH literals denote a content by giving its path, beginning at the root folder. It is an error if no content exists at the given path. Examples:

PATH '/Home/admin'
PATH '/'

USER literals denote a user name and a domain name separated by an @  character. If the domain name is empty, the @  character may be omitted. Examples:

USER 'admin'
USER 'fred@msad'

ID literals denote a content, version or user by giving its Id, as returned by CapObject.getId(). Examples:

ID 'coremedia:///cap/content/1' 
ID 'coremedia:///cap/version/4/2' 
ID 'coremedia:///cap/user/0' 

An input parameter refers to an object passed along with the query string. Input parameters are represented by a question mark immediately followed by a sequence of digits, which represents the zero-based index of the parameter object. Examples:

?0
?1
?42

Type rules

Queries are strongly typed. For example, when you try to compare a String with an Integer, an error (MalformedQueryException) will be reported. There are rules that govern the required types for subexpressions, and the resulting type of each expression in the grammar above. 

The following tables shows all possible types that occur in subexpressions of a query. The second column shows corresponding Java types, which is relevant for parameter objects and implied properties. The third column shows the corresponding CapPropertyDescriptor type of a content property, which is relevant for non-implied properties.