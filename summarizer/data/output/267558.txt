

The type of an implied_property clause depends on the return type of the corresponding getter method. For example, the return type of Content#getName() is java.lang.String, so the type of the expression name is String. There are three exceptions: For id, the type is Content. For version, the type is Version. For containsWideLink, the type is Boolean.

An identifier in a property clause is resolved as a property of the content type in the closest surrounding TYPE clause. The property type is then mapped to a query expression type using the table above. For example, assuming a string property called headline in a content type Article, the subexpression headline in the query "TYPE Article: headline CONTAINS 'foo'" would have type String. If there is no surrounding TYPE clause, the content type Content is assumed, which does not define any properties. If the TYPE clause lists multiple content types, the type of the property with the given name has to be same in all listed content types.

A property name in an order_entry clause is resolved as a property of the most specific type that can fulfill the query. Only properties of type Boolean, Date, Integer, or String are allowed.

In a REFERENCES clause, the property (if given) must be a Markup or Link List property.

In a comparison_expression, the types of both subexpressions must be the same, and must be one of Boolean, Date, Integer, or String, or one subexpression must be of type Integer and the other type must be integer compatible. User, Version and Content are integer compatible, by using the user id, content id, or version number for comparison.

The property in a CONTAINS expression must be a String or Markup property. The literal must be a String.

The expression type of an input_parameter depends on the class of the java object passed as a parameter. The mapping from Java type to expression type is given in the table above. For example, when passing in an instance of java.lang.String, the corresponding parameter expression will have the type String.

Where a content, version, or contentOrVersion clause is used in the grammar above, the literal_expression must have the respective type.

Interpretation

So far, you have seen when a query is syntactically correct, and when its types are correct. This section describes what the query expression actually means, where it was not explained before. 

The following description is geared towards content queries (QueryService#poseContentQuery). In a version query, where the following description refers to a "content", the version's content is understood. Where the description refers to a "content object", the version itself is understood.

A "TYPE =" condition is true for a content iff the content's type is one of the types listed, and the content fulfills the condition on the right hand (if given). This form does not take type inheritance into account.

A "TYPE" condition (without "=") is true iff the content is a (direct or indirect) instance of at least one of the types listed, and the content fulfills the condition on the right hand (if given). This form takes type inheritance into account.

A "BELOW folder" condition is true for a content iff the content is a child of the given folder. For the purpose of this condition, a folder is a child of itself.

A "REFERENCES target" condition is true for a content object iff the content object contains a link to the given target in any markup or link list property.

A "property REFERENCES target" condition is true for a content object iff the named property of the content object contains a link to the given target. The property must be a markup or link list property.

A "REFERENCED" condition is true for a content iff it has at least one referrer, i.e. a content containing a link to this content in any markup or link list property.

A "REFERENCED BY contentOrVersion" condition is true for a content iff the given content or version has a reference to this content in any markup or link list property.

A "property CONTAINS literal" condition is true for a content object for a string property, iff the literal's string value is a substring of the content object's property's string value. For a markup property, all XML markup is discarded, and the string is searched for in the concatenated cdata elements.

CONTAINS EXACT, PREFIX, and STEM are reserved and not currently supported.

In an order_by clause, the first order_entry takes priority. If contents compare equal according to the first order entry, the next order entry is considered, etc. The ordering of String values is database dependent. The ordering of Date values ignores the time zone. The Boolean value FALSE is considered less than TRUE.

The limit clause limits the number of results that will be returned, and may improve performance, especially if only one result is required, and if sorting is not requested. It is equivalent to passing a limit argument to the query service method.

Examples

As a simple example, consider that you are searching for all documents that were lastly edited by the user admin. Given that the variable qs  holds a reference to the query service, you could issue the following statement:

Collection<Content> result =
  qs.poseContentQuery("TYPE Document_: editor = USER 'admin'")

The next statement retrieves arbitrary published content that is stored in the folder /Home. At most 50 results are returned.

Collection<Content> result =
  qs.poseContentQuery("isPublished AND BELOW PATH '/Home'", 50)

Finally, a parameterized query is shown that retrieves all documents of the type Article that have a priority  property whose value is greater than a given limit and that are marked for deletion or withdrawal.

Collection<Content> result =
  qs.poseContentQuery("TYPE Article: priority > ?0 AND "+
  "(isToBeDeleted OR isToBeWithdrawn)",
  new Object[]{new Integer(limitPriority)});