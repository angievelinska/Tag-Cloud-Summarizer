

The CoreMedia Generator includes a TemplateFinder to allocate an appropriate template to render a CoreMedia Resource. The ViewDispatcher is an object-oriented implementation of the TemplateFinder interface (see Developer Manual).

WAGE extends the Generator by allowing access to CoreMedia Workflow objects like process or task instances. Consequently, we need another TemplateFinder to render workflow objects, called the WorkflowTemplateFinder (package com.coremedia.cap.wage).

Template finder are always useful when you want to render a polymorphic list of objects. In the case of workflow, this is usually a WorkList that may contain different kinds of workflow instances from different workflow definitions. You may want to define a view that renders a short description of the workflow instance. Which variables are accessed and how these are presented by the rendering template depends mainly on the type of the workflow instance, since the type determines which variables are defined and how these are accessible.

Essentially, a WorkflowTemplateFinder determines the path (relative URI) of a JSP template to render the current WfInstance (the one set in the current WageContext) from the following parameters:

The templateId is a symbolic constant that usually equals the name of the template (without the .jsp extension).
The optional nestedPropertyName is the name of a variable of the WfInstance, which can be prefixed by a Struts nested property expression. The prefix (everything before the last dot '.') is usually neglected. The helper method getVariableName(nestedPropertyName) is there to perform exactly this "cut-off" operation. The nestedPropertyName should be handed through into the resulting URI under the parameter name WorkflowTemplateFinder.VARIABLE_NAME_PARAMETER. The variable type should be determined and handed through under the parameter name WorkflowTemplateFinder.VARIABLE_TYPE_PARAMETER.
The optional index is an index to an aggregation variable and is usually handed through to the template. The index should be handed through into the resulting URI under the parameter name WorkflowTemplateFinder.AGGREGATE_INDEX_PARAMETER.
The optional params is an even-sized array of name-value-pairs and and usually handed through to the template.

Corresponding to resource templates and property templates (see Developer Manual), the WorkflowTemplateFinder returns workflow instance templates and workflow variable templates, depending on whether a nestedPropertyName is given or not (use the method without nestedPropertyName parameter or set the parameter to null). A WorkflowTemplateFinder can also return the path of a variable template just given a variable type (by class) and a templateId, without referring to a concrete process or variable. This is quite useful when you want to reuse the edit templates that exists for various data types, since variable types are even richer than document property types. Even within WAGE, the QueryExpression bean makes use of variable edit templates to edit the values of query SubExpressions.

The templateRootUri of a WorkflowTemplateFinder is the root folder under which it locates the templates. It can be get set through the corresponding methods.

To use the configured WorkflowTemplateFinder, retrieve it from the application scope wageConfig bean (see config). If you want to include a view of another than the current workflow instance, you have to set it as the current workflow instance in the WageContext first. Now, let the WorkflowTemplateFinder compute the path to the desired templateId that can then to be included. An excerpt from a JSP using the WorkflowTemplateFinder is shown in xxx.