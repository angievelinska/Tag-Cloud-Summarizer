

Line 1: The package to which the action belongs. 

Lines 3 - 5: All  Java classes which are at least necessary for an expression to use.

Line 7: In order to create a boolean expression you need to implement the interface WfBooleanExpression. For convenience you can extend the abstract AbstractBooleanExpression class. 

Line 9 - 19: If you extend AbstractBooleanExpression, you need to implement four methods. Three of them getName(), getSymbol() and isInfix() are used for better reading of the log, if the expression is converted into a string using the toString() method. 

Line 21 - 23: The fourth method to implement is the most important one, evaluateExpression(WfInstance instance, Map localVariables). This method will be called when the expression is evaluated. Here you can implement the logic of your expression. Using the parameter instance, you can access the workflow instance as shown in the action example. The Map localVariables gives access to expression local variables, which may be defined with ForAll and Let.