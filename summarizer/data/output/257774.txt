

Search with Simple Query Language

Use one of the search methods to perform a simple search for non-archived documents. There are multiple search methods with different parameters to restrict the query to documents of a given type and below a given folder. See the API documentation for details.

These methods take a query string in the Simple Query Language. The CoreMedia Content Server embeds this query into a FAST Query Language query when performing the search. The Simple Query Language consists of terms and/or phrases which are separated by white space. The Simple Query Language is used in mode simpleall which means, that a logical AND is applied between the terms and/or phrases within the query.

A query term is basically a word to search for. Only alphanumeric characters are allowed here. You can prefix the term with a minus operator ('-') to indicate a NOT expression, i.e. the word must not appear in the search results. Likewise you can use a plus operator ('+') as prefix but it is the default and will be ignored. The following example query will search for documents which contain the word news but not the word sport:

news -sport

The query term may end with an asterisk ('*') to perform a wildcard query which matches all words that start with the characters before the asterisk. Note, that the asterisk may appear at the end of the term only. The next example returns all documents containing words that start with test:

test*

A phrase to search for is enclosed in double quotes. Wildcards are not allowed in phrases and plus and minus operators are ignored. A search for documents containing the phrase Hello World can be performed with:

"hello world"

Please refer to FAST Query Language and Query Parameters Guide for a detailed description of the Simple Query Language support of the FAST Query Language.

The following example searches for documents of any type which contain the word hamburg below a folder /Site. The list obtained from the SearchResult contains the found Content objects sorted by their name. Sorting is explained in a following section.

Content site = contentRepository.getChild("Site");
ContentType type = contentRepository.getDocumentContentType();
SearchResult result =
 searchService.search("hamburg",    // the query string
                      "name", true, // sort ascending by name
                      site, true,   // below folder site
                      type, true,   // any type
                      0, 100);      // max. 100 hits

List<Content> hits = result.getMatches();



Search with FAST Query Language

If you need a more powerful search you can use the structured FAST Query Language (FQL) with the more generic searchFAST method. Please refer to the FAST Query Language and Query Parameters Guide for a detailed description of the FAST Query Language.

You must use the FQL for example if you want to search in certain index fields or want to search for archived documents, too. Index fields are defined in the index profile file. The CoreMedia index profile contains fields for many implied properties. You can use the FAST administration pages to view the index profile which contains descriptions for the available fields. Please refer to the FAST Configuration Guide for more information about index profiles.

One of the available fields in the index profile is creator which contains the ID of the user who created the document. The following example searches for all documents that are located below the folder /Site, were created by user admin and contain the word test. Note that IDs and paths must be quoted when used in a query string.

User admin = userRepository.getUserByName("admin");

SearchResult result = searchService.searchFAST(
  "feederstate:success"
  + " AND creator:\"" + admin.getId() + '"'
  + " AND folder:starts-with(\"/Site/\")"
  + " AND test",
  "name", true,      // sort by name
  0, 100);           // max. 100 hits

List<Content> hits = result.getMatches();

An important thing to note is the term feederstate:success within the query string. You must specify this term in every query except when searching for documents that were not successfully indexed. In the latter case you must include the term feederstate:error. If you don't want to find documents in the recycle bin, you must either search below a given folder as in the example above or include the term isdeleted:false.

The term test is not prefixed with the name of an index field. In that case the default composite index field content is used and the search is performed on the full-text content.