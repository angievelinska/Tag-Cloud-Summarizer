

The DishActionForm tries to get the current CoreMedia resource in its constructor, which is only possible if the resource parameter is set. Therefore, as in the other examples too, the initial link pointing to the edit action will have a parameter containing the current resource.

As the resource parameter also could be a multipart request parameter, which isn't accessible in the constructor of an ActionForm yet, we use the helper method getCurrentResource() inherited from WageActionForm. This method retrieves the resource "lazily", i.e. on the first call.

The DishActionForm provides getter and setter methods for the name property (of a Dish document), and could also provide getter and setter methods for any other property we want to access.

The most interesting thing here is the getPicture() method: It first checks if there's already a Picture document linked to the Dish document we're editing. If this is the case, it just returns this Picture document (which allows us to access its properties in the same HTML form as the Dish document).

If there isn't a Picture document linked to the Dish document, a new Picture document is created (in the same folder as the Dish document) and linked to the Dish document. Of course you would have to provide appropriate exception handling code here, for example for the case that a document with the same name already exists in that folder. After the new Picture document has been created, it is stored and returned, and can then be edited.

The DishActionForm also provides getter and setter for the calories property of the Dish document. In the renderForm.jsp template (see below), we use a <wage:checkbox> tag with trueValue=">200" and falseValue="<=200", so the setter will be called with these values according to the state of the checkbox when the form is submitted.