

Web applications can execute an arbitrary number of filters before and after a servlet. Thus, Acegi makes a decision on a request before Spring notices it. When necessary, Acegi sends a redirect, for example, to a login form or secure channel and in this case the Spring servlet is never called.

But what happens during the filter execution and how do the latter called components consider a successful authentication? In order to answer these questions, you should take a closer look at the particular parts of the filter. The object Filter is the entry point provided by Acegi, which contains components with different tasks. The httpSessionIntegrationFilter is almost in every configuration the first filter object, except a secure channel is needed. It retrieves the authentication data, when they already exist, from the current HTTP session and puts them into the SecureContext. This place contains thread local data, whereby all components have access to it. After the request is processed this data will be removed by the framework. If no authentication data is stored in the session nothing happens and the next object authenticationProcessingFilter will be executed.

This component analysis the HTTP request and looks for user name and password. A successful retrieval of the required parameters continues with an authentication attempt by calling the declared authentication backend. The returned data is stored in the SecureContext. Due to the potential complexity of this process it is recommended to use a cache storing the data of already authenticated users. If no authentication attempt could be detected the next object will be called.

The anonyousProcessingFilter adds an anonymous authentication object to SecureContext when the previous components failed to do it. This allows the explicit distinction between anonymous and known users. The last object securityEnforcementFilter in the filter chain guarantees the protection of your application. It takes the authentication object and checks the credentials. In case of sufficient access rights the filter chain is closed and the servlet is executed. Otherwise, the request is rejected.

All filter objects are configured in the Spring application context. This demo uses a separate file named acegi-security.xml that you can find in the folder src/spring. A first look may discourage you because of the large number of beans and their properties. But it is not as complicated as it seems. Two object diagrams shall clarify the more complex relations. The first one is depicted in the next figure and shows the authenticationProcessingFilter with its involved beans. 