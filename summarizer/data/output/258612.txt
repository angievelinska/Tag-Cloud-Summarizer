

 Customizer is a mechanism, which enables you to change an existing bean definition without touching the actual configuration file of the bean. Technically speaking, a Customizer is a BeanPostProcessor bean, which adjusts the bean during creation of the ApplicationContext. The declaration of a Customizer uses the "Extensible XML Authoring" (see http://static.springframework.org/spring/docs/2.0.x/reference/extensible-xml.html for details) which enables you to write compact bean definitions.

Examples:

<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:customize="http://www.coremedia.com/2007/
   coremedia-spring-beans-customization
  xsi:schemaLocation="
   http://www.springframework.org/schema/beans
   http://www.springframework.org/
        schema/beans/spring-beans-2.0.xsd
   http://www.coremedia.com/2007/
        coremedia-spring-beans-customization
   http://www.coremedia.com/2007/
        coremedia-spring-beans-customization.xsd">

 <bean id=¿someService¿ class=¿com.mycompany.Service¿>
  <property name=¿enable¿ value=¿false¿/>
 </bean>
 <customize:replace bean=¿someService¿ property=¿enable¿ 
  value=¿true¿/>
</beans>

Here, the property enable of the bean someService is set to "true".

¿
<customize:append bean=¿someMap¿>
<map>
  <entry key=¿key1¿ value=¿value1¿/>
  <entry key=¿key2¿ value=¿value2¿/>
</map>
</customize:append>
¿

Here, two more entries key1 and key2 are added to a bean from the type Map.

Syntax

The syntax to define a Customizer are as follows:

<customize:operation 
  bean="beanname" [property="propertyname"] 
  custom-value="value"/>

or

<customize:operation 
  bean="beanname" [property="propertyname"] 
  custom-ref="custom-beanname"/>

or

<customize:operation bean="beanname" 
[property="propertyname"]> 
    <bean, map, set, list or properties>
</customize:command>

Basically, an operation (<customize:operation>) is performed on a bean (bean="...") or on a property of a bean (bean=".." property="..."). As a parameter of an operation, you can use a value (custom-value="...") or a reference to a bean (custom-ref="..."). Instead of a bean reference, you can also use an element <map>, <list>, <set>, <properties> or <bean> as a parameter. The customizer can be disabled by an attribute enabled="false".

The following operations are supported:

Replace - Depending on the context, a bean will be replaced by another bean with the same name or a bean property will be set to another value.
Append/Prepend - This operation works on beans or properties which are comprised of multiple elements, thus are of type List, Set, Map, String array and the like. You can add elements to the start ("prepend") or end ("append"). 

If different Customizers work on the same bean or property, conflicts may arise. Therefore, you can use the attribute order to define the order of execution of the Customizers.

<customize:replace bean=¿myService¿ property=¿name¿ 
 value=¿myService-1¿ order=¿10¿/>
<customize:replace bean=¿myService¿ property=¿name¿ 
 value=¿myService-2¿ order=¿20¿/>

The example shows two Customizers, both working on the property name of the bean myService. Due to the lower order value (10), the first Customizer has a higher priority and is executed first. Afterwards, the second Customizer overwrites this setting again.