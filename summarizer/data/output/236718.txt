

Assuming that you are reusing an Action implementation, the following steps describe how to set a a command button that uses your localization, executes the action you defined and performs your custom navigation. Further prerequisites are that you have already set up your resource bundle for localization and that your icons are available to the icon-servlet. 
Set up localization keys for your action (named myAction.in the sequel) in your resource bundle. The action's name is used to look up the icon-key, text and tooltip from the resource bundle. As long as you don't use a custom LocalizedLabelFactory, the default localizer performs a lookup of the keys Action.myAction.toolTip, Action.myAction.text and Action.myAction.icon.


Deploy your resource bundle (e.g. org.example.es): Put the properties files into the CLASSPATH and add their base path to the global messageSource bean.



<bean class="com.coremedia.objectserver.util.ListPropertyCustomizer">
  <property name="customizedBeanName" value="messageSource"/>
  <property name="customizedProperty" value="basenames"/>
  <property name="items">
    <list>
      <value>org.example.es</value>
    </list>
  </property>
</bean>

Deploy your icons: Put the into the CLASSPATH so that the icon servlet finds them. 
3#
In order to deploy your JSF navigation rules add your standard JSF navigation definitions to the JSF configuration path.
Define your action as spring bean and set its name property to myAction. Set its navigationHandler property to a navigation handler (e.g. SimpleNavigationHandler) that outputs a navigation symbol fitting your navigation rules as defined in step 4. Give your action a bean identifier e.g. myActionBean.
Insert the button into your JSP: add <es:button value="#{myActionBean}"/>

Note that the JSP's name must match the <from-view-id> element in your navigation rule.