

Let us take a look at the renamePageAction. The configuration looks like the following:

<bean id="renamePageAction" parent="action" singleton="false">
  <property name="name" value="navi-rename"/>
  <property name="command">
  <bean class="com.coremedia.demo2005.editing
  .commands.RenamePageCommand" 
  parent="contextInfoCommand" singleton="false"/>
  </property>
</bean>

The main difference between a command opening a popup form and a "normal" command is the implementation of isReady(). When all information for a command is available isReady() returns true. This is also assumed as default. With form commands this is different, as the user has to provide more information. In our case isReady() returns false, if the label for the Structure bean is null:

public boolean isReady() {    
  return super.isReady() && label!=null;
}

When isReady() returns false the template for the attached action as defined faces-navigation.xml is looked up. As did see above in the template renamepage.jsp the value of the bean is set by the user via an inputText field:

<h:inputText id="newLabel" styleClass="text" 
             value="#{renamePageAction.command.label}" />

Our action shall only be available, if we are on beans of type Structure. This is ensured in the isAvailable() method of com.coremedia.demo2005.editing.commands.PageCommand:

public boolean isAvailable() {
  return getContentBean() instanceof Structure;
}

The RenamePageCommmand  uses the default implementation of isEnabled() which returns true  always. 

The business logic of the comand takes the first document in its linklist "Sheet" and changes the property named "Labels". This is done in the internalExecute()  method:

protected boolean internalExecute() {

  Content sheetContent = getContent().getLink("Sheet");

  try {
  StringGroupBuilder labelsValue = 
  new StringGroupBuilder(sheetContent, "Labels");
  labelsValue.setString(getLanguageSymbol(), getLabel());

  sheetContent.checkOut();
  sheetContent.set("Labels", labelsValue.getMarkup());
  getContentRepository().getConnection()
  .getSession().flush();
  sheetContent.checkIn();
  return true;
  } catch (Exception e) {
  ...
  }
}

