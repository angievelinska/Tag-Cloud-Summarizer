

In the class diagram from figure, you can see the above mentioned classes and their associations. The ContentType interface will be discussed later in section.

A document may have an arbitrary number of versions, which are linked in a predecessor/successor chain. You can get the most recent regular version of a document by means of getLatestVersion(). For a checked-out document, this is the last version that was created by a check-in. Its properties may differ from the document's current properties.

Besides these regular versions, checked-out documents have got a working version that represents their current state. The working version differs significantly from other versions. Most notably, its properties may change over time as the checked-out content is changed. Normally, you should not need to access the working version, as the associated content itself provides a richer and conceptually cleaner interface. For migrating legacy code, however, it might be natural to use the working version, so that a uniform interface is available.

Folders do not have any versions and they do not define any properties. Instead, they provide access to their children, which may be either documents or folders. You can retrieve all children or a child with a specific name by using the appropriate methods defined in Content.

There are quite a few methods that allow you to inspect the state of a content. You can query whether a document is archived, whether it is checked out, who created it, and the like. This information is available as regular properties of the CapObject. You have to call the individual getter methods for obtaining this information.

A content supports many updating operations. In particular, it inherits the methods for setting properties from CapObject. Before changing the properties, a document must be checked out. After changing the properties, it may be checked in or, more rarely, be reverted to the original state. Keep in mind that, as noted in section, property changes are buffered and sent to the server only when the current session is flushed explicitly.

Additionally, there a several other methods that deal with moving, renaming, copying, and archiving content. Currently, these operations are executed immediately. They are not buffered.

A Content object may enter various states during its lifetime. The full state space is quite large with over 50 different states. However, there are a number of orthogonal views that can be more compactly presented and that define the possible transitions completely.



