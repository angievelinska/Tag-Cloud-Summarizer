

In order to obtain information about the state of the objects that are stored persistently for later delivery by a Content Application Engine, an Object Analyzer must be installed. Among other properties, the Object Analyzer computes and stores a category and a display name for every document and folder.

The Object Analyzer is an instance of a Proactive Engine. Please refer to the Content Applications Developer Manual for a complete introduction this technology.

All classes that are specific to the Object Analyzer as described in this section are located in package com.coremedia.analytics.objectanalyzer. Further classes are from the API of the Proactive Engine.

Analyzing Content

If the only source of data for delivery is a Content Server, the configuration of the Object Analyzer is very simple, because the content trigger framework can be used. This framework takes care of tasks like registration of listeners or the creation of cache keys. 

Because the Object Analyzer is typically configured to generate information about all content items, also the ContentSelector interface of that framework is easy to implement: The predefined class AllContentSelector will take care of efficiently including all documents and folders in the analysis. If you decide to limit the set of resources, you can do so by using the PathAndTypeContentSelector of the persistent cache or by implementing a custom ContentSelector.

But usually the only interface that you have to implement is the ContentEvaluator. This is an unspecific interface of the Proactive Engine with a single method:

  Object evaluate(String id, Content content) throws Exception;

Although the method returns an Object by definition, the only permissible values in the context of the Object Analyzer are instances of ObjectState. 

You may also choose to subclass DefaultObjectStateContentEvaluator, which already provides sensible defaults for the type, the deletion status and some other fields. You will probably have to override at least the following methods:

  protected String getDisplayName(Content content, List pathArcs);
  protected List getCategory(Content content, List pathArcs);

For customizing the site computation, you can configure the contentSiteExtractor property in the config/objectanalyzer/spring/objectanalyzer-trigger.xml file as follows:

<bean class="com.coremedia.analytics.objectanalyzer.
DefaultObjectStateContentEvaluator">
  <property name="contentSiteExtractor"
            ref="customContentSiteExtractor"/>
</bean>


Note that because your code is running inside a Proactive Engine, you can perform arbitrary repository operations to determine the properties of the content. While the path of the content is given as a method argument for your convenience, you might decide to use a more elaborate categorization scheme instead. For example, you could link category documents whose path is then evaluated. Or you could store the display name in a custom property of the document.

If more complex customizations are required, consider extending the AbstractObjectStateContentEvaluator. The single abstract method you have to implement fills a pregenerated state object using the properties of the content.

  protected abstract void fillInObjectState(ObjectState state, 
Content content);

When implementing the ContentEvaluator interface directly, simply create an instance of ObjectState and populate the fields one by one. Make sure to throw an InvalidPersistentCacheKeyException if the content under examination is destroyed.

In any case, the generated object state is forwarded to an ObjectStateReceiver, which uploads the state to the database. When you install an Object Analyzer, the entire wiring is already prepared and you simply have to configure the database and your content evaluator.

Analyzing Other Objects

When using the Proactive Engine to compute the object state of objects that are not based on content objects, you must start with a generic Proactive Engine and use the ObjectStateReceiver as the receiver. Your cache keys must output ObjectState objects. Please refer to the Content Applications Developer Manual for more details.

Choose the ids recorded in the object states in a way that does not conflict with the ids generated by the Object Analyzer for content.

If the system you are integrating does not support the concepts of 'deleted' and 'published' objects, use false as the default for the deletion state and true as the default of the publication state.