

There are two ways to add the contextinfo tag:


Surround the relevant HTML element with the <pbe:contextinfo /> tag:

Example 1:

<pbe:contextinfo resource="${document.content.id}" 
 event="contextmenu"
 property="Side" container="${page.content.id}">
<strong>Your article text.</strong>
</pbe:contextinfo>





2#


Insert the contextinfo tag at any place in the template. Provide the same id to the element and the <pbe:contextinfo /> tag:

Example 2:

<td id="id42">Your article text.</td>
 <pbe:contextinfo id="id42" resource="${doc.content.id}"
 event="contextmenu" property="Side" 
 container="${page.content.id}"/>

The first alternative surrounds the tag body with a <span> tag that receives a generated id. The inserted <span> tag may require an adaptation of the css stylesheets (see below). If you do not want to modify your stylesheets or you want to use a tag that would produce illegal HTML when surrounded by a <span>, use the second alternative. A minor drawback of the second version is that the ids added manually to the HTML elements are visible in the HTML code on the live servers, even if Preview-based Editing is turned off.

Nested Tags

Contextinfo tags may also be nested, e. g., to define the same container for several subordinate contextinfo tags. The generation code for nested tags may be distributed over several templates, as the dependencies are calculated on the final generated web page.

Example 3:

<pbe:contextinfo container="${pagedoc.content.id}">
 ...
 <pbe:contextinfo resource="${doc[i].content.id}"
  event="contextmenu" property="Top" >
 <strong>My article text.</strong>
 </pbe:contextinfo>
 ...
 <pbe:contextinfo resource="${sidedoc[i2].content.id}"
 event="contextmenu" property="Side" >
 <strong>Other article text.</strong>
 </pbe:contextinfo>
 ...
</pbe:contextinfo>