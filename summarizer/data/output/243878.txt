




UserTask


Grammar: ( Rights, Performers?, (Variable | AggregationVariable)*, Client*, EntryAction*, ExitAction*, Guard?, PreCondition*, PostCondition*) 


A UserTask has to be carried out by a participant. The performers policy is external code which is called to determine which users to offer this task for acceptance. 


The defaultOfferTimeout defines the default time in seconds that task instances are offered to users to be accepted. The defaultTimeout defines the default time in seconds until task instances have to be completed after being accepted. If no timeout time is set, then no timeout is defined at all. A defaultPriority sets the default priority of task instances. Priorities may be used to distinguish the urgency of task instances. A successor must be given if and only if the task is not final. 


The run time of an auto-completed task is determined by the time that the executed actions and the Pre- and PostConditions take. It will not be completed by the user but just runs through all included actions. Since EntryActions and ExitActions are executed, the effect is that a user can determine when this execution is supposed to take place and that it takes place on behalf of the user. Consider auto-completed tasks as semi-automatic tasks.


The Rights element configures user and group permissions for the task instance operations. 


Client determines which variables are relevant for this task and may be changed. 


A user task may perform some automated action (EntryAction) after the task is accepted and after the task has been completed by the user (ExitAction). If more than one EntryAction or ExitAction is provided, then the actions are executed in the order they are specified. 


PreConditions define requirements which have to be fulfilled before the entry actions of the user task are executed. PostConditions define requirements which have to be fulfilled after all the exit actions have been executed.PreConditions and PostConditions  are evaluated in the order they are specified. The result of such an evaluation operation is equivalent to specifying an 'and' expression with an ordered set of conditions. 


A Guard defines an expression, which activates the task, if the expression evaluates to true. The expressions of the  condition are re-checked on state changes of process- or task instances and resources in the Live Server.
