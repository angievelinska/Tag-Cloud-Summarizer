

Internally, the Persistent Cache consists of two sub components.

Persistent Dependency Cache 

This component keeps track of dependencies occurring during value computations and for handling invalidations. The dependencies are made persistent by using a database.

Persistent Value Cache

This component serializes computed values, stores them in the local file system and removes them when they become invalid. 

There might be scenarios where the computation of values is less expensive than putting them into a store. For this reasons, the Persistent Value Cache is meant as an optional component, which may be enabled or disabled.  

The Persistent Dependency Cache internally uses an instance of CoreMedia¿s common cache (com.coremedia.cache.Cache) as a mechanism for tracking dependencies temporarily and for detecting invalidations. This cache provides functions for defining dependencies for a currently running computation as well as functions for triggering invalidations. It may be understood as a commonly used API which is used when dealing with dependencies and invalidations. As a default, such a cache instance is shared with the CoreMedia Unified API so that any content repository¿s dependency tracking is integrated "out of the box". 

A client accesses the Persistent Cache via the interface com.coremedia.persistentcache.PersistentCache while the Persistent Cache sends invalidation events via the interface com.coremedia.persistentcache.InvalidationListener back to the client. The client needs to provide an instance of the com.coremedia.persistentcache.PersistentCacheKeyFactory which enables the cache to reconstruct any serialized com.coremedia.persistentcache.PersistentCacheKey which has been passed by the client.