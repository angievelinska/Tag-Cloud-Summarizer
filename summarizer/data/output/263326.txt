

In-Site Analytics can display the number of clicks for each hyperlink that has been generated by means of the <analytics:link> tag. In order to differentiate different links to the same page, the concept of object contexts and name contexts have been introduced. To embed a link in a context, use the <analytics:objectcontext> or the <analytics:namecontext> tag as described in section. Contexts may be nested. Links in different positions of the context hierarchy will be counted separately.

Clicks will only be counted when the target page view is actually recognized by the system and when the page view can be associated with correct source page and source context. Source page and source context may be determined in two ways:

An anchor tag generated by the <analytics:link> tag includes a JavaScript onClick handler that sends an asynchronous callback to the server, transmitting the source page, source context, and the target page specified in the <analytics:link> tag. When ultimate flexibility is required for the creation of the anchor tag, the <analytics:linkattributes> tag provides a way to compute just the needed attributes that can then be affixed to the <a> element as it is generated.
Using the interface PageDataExtractor as described in section the source page can be computed from the HTTP Referer attribute. The source context cannot be computed from this value. The root context is used instead.

The system has to determine whether a JavaScript callback and a page view event should be consolidated into a single page transition event. This can be done based on a number of heuristics.

Consolidate, if the target page indicated in the link tag and the rendered page are identical. This heuristic is enabled by default through the setting

workflow.server.managers.aggregator.allow.rehinting.by.target=true

in the file workflowserver.properties. It fails to work when the page identity given in the <analytics:link> tag differs from the page identity given in the <analytics:pagecontext> tag.
Consolidate, if the source page of the link and the source page computed by a PageDataExtractor are identical. This heuristic can be enabled by setting

workflow.server.managers.aggregator.allow.rehinting.by.source=true

in the file workflowserver.properties. This requires the creation of a PageDataExtractor that can reliably parse referrer URLs, but it goes beyond a pure PageDataExtractor approach in being able to reconstruct the correct object and name contexts in which the link is embedded.
Consolidate, if the target page indicated in the link and the page indicated as the linked page are identical. To this end, the target page must identify a page identity as the linked page through additional attributes of the <analytics:pagecontext> tag:

<analytics:pagecontext
  object="${self}" view="..."
  linkedObject="${...}" linkedView="...">
  ...
</analytics:pagecontext>

This requires that the controller can reconstruct the object that was passed to the link formatter when generating the URL that led to the current page. The linked object must also be passed to the JSP by means of request attributes.

These methods can be combined for special use cases.

No In-Site Analytics

You are not using In-Site Analytics at all.

You do not have to care about the correct computation of links between pages. It may make sense to use a customized ReferrerDataExtractor that does not report intra-site click after a session timeout as external referrers. (When a source page can be determined, the referrer is automatically unset by the Data Aggregator.)

Default Configuration

You are operating an Internet web application. You can assume that JavaScript is enabled by almost all visitors. Your CAE is set up in a straightforward way: given any target object, its ID is encoded in such a way that the controller will select exactly that object for rendering.

The automatically generated onClick handlers suffice.

No Object Context or Name Context

The setup is as before, but you are not using object contexts or name contexts for organizing links on a page.

You can add the PageDataExtractor for handling requests by those users who have disabled JavaScript. By keeping the default setting

workflow.server.managers.aggregator.allow.rehinting.by.target=true

for the Data Aggregator you allow the JavaScript callback to take precedence if both the callback and the PageDataExtractor provide a source page.

Simple Redirection During Link Generation

When rendering a link to an object, the given object might not be the object that should be actually rendered. The object that should be computed instead is easily calculated. 

You should use the object that is actually rendered as an argument to the <analytics:link> tag. If the computation to arrive at the rendered object is not immediately expressible in EL in the JSP, you can either add a custom taglib function that performs this task or you add a translation method to the bean that represent the target page. It might become necessary to adapt the link formatter to the new objects that it will receive.

In this case, it was previously suggested to use the interface TargetObjectResolver to compute the rendered object in both the tracking webapp and in the In-Site Analytics webapp. This has been deprecated, because a much cleaner approach is available as shown above.

Complex Redirection During Rendering

When rendering a link to an object, the given object might not be the object that should be actually rendered. The computation of the object that represents the target page is too costly to happen for each rendered link. 

You can use a TargetPageResolver for computing the linked page in the In-Site Analytics webapp. Because the number of requests for pages with In-Site Analytics information is typically much smaller than the total number of rendered pages, we expect this will not slow down the rendering of the preview page unduely. When the target page resolver has computed the correct target page for a link, the correct statistics will be displayed automatically.

Having dealt with the correct display of statistics in the In-Site web application, we must still make sure to generate the correct statistics. There are two approaches to ensure that the Data Aggregator can associate JavaScript callbacks and page view events.

By Source Page

On the tracking side, you implement a PageDataExtractor and you set the property

workflow.server.managers.aggregator.allow.rehinting.by.source=true

in the Data Aggregator. This will instruct the Data Aggregator to associate a page view with a JavaScript callback if the source page computed by the PageDataExtractor matches the source page of the JavaScript callback.

By Linked Target Page

In the JSP you add one or more of the attributes linkedPage, linkedView and linkedLocale to the <analytics:pagecontext> tag to indicate the page that was originally used in the <analytics:link> tag for formatting the link that is now rendered. An example was given above and is also shown in section. The algorithm for determining the originally linked page depends highly on the chosen URL format. It is likely that the linked page must be passed to the JSP by means of additional request attributes.



