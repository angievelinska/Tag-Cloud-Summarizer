

Using the <analytics:linkattributes> tag you can determine the HTML attributes for enabling Analytics for an <a> element. Typically you provide three variable names, the target object and optionally the target view when invoking this tag.

<analytics:linkattributes object="${self.targetObject}" 
  view="myView" hrefVar="hv" idVar="iv" onClickVar="ocv"/>

When rendering the page, the three variables are set to appropriate values or null, if the attribute is unused in the current context. Especially, the id attribute will be null unless In-Site Analytics is enabled and the onClick attribute will be null unless tracking is enabled.

The variable can then be used to render a link.

<a href="<c:out value="${hv}"/>"
  <c:if test="${not empty iv}">id="<c:out value="${iv}"/>"</c:if>
  <c:if test="${not empty ocv}">onClick="<c:out value="${ocv}"/>"
  </c:if>
>
  ...
</a>

This gives you much greater control over the generated HTML output than the <analytics:link> tag, but of course this flexibility comes at the cost of a more verbose JSP. The tag is particularly useful if the start and end element of the link are not located in a single JSP.

The link attributes tag will cause the creation of an In-Site Analytics overlay if needed, so that you should use the variable values only once.

It is possible to use a nested <analytics:param> tag, which works like a <cm:param> tag nested in a <cm:link> tag.

<analytics:linkattributes object="${self.targetObject}" 
  view="myView"
  hrefVar="hv" idVar="iv" onClickVar="ocv">
  <analytics:param name="some" value="thing"/>
</analytics:linkattributes>


If even this does not produce the correct URL, it is ok to generate the href attribute a second time by means of a different method, but care should be taken that the URI ultimately refers to the same page as the page indicated in the <analytics:linkattributes> tag.

The following table summarizes the permissible properties for  <analytics:linkattributes>.