

Predicate classes enable selective view of objects. They can filter different types of objects.

Interface to implement

For own predicates you need to implement the interface hox.util.Predicate with the method include.

Parameters to use

The include method gets only one parameter of type Object. Depending on the element of the editor.xml where the predicate is used, the method can be called with different object types.

<Filter>
3* If the <Predicate> element is used in a <Filter> element, the documents shown in the document overview of the CoreMedia Editor can be filtered, due to different conditions. Thus, the objects to be filtered are documents of the type hox.corem.editor.proxy.DocumentTypeModel.
<Treefilter>
3* If the <Predicate> element is used in a <Treefilter> element, the folders shown in the folder view of the CoreMedia Editor can be filtered. The objects to be filtered are folders of the type hox.corem.editor.proxy.ResourceHolder.
<DocumentTypes>
3* If the <Predicate> element is used in a <DocumentTypes> element, the document types which can be created, moved, copied or selected in document choosers are filtered. Thus, the objects to be filtered are document types hox.corem.editor.proxy.DocumentTypeModel.
<Processes>
3* If the <Predicate> element is used in a <Processes> element, the workflows offered for initiating in the Menu File|New Workflow... are filtered. The objects to be filtered are workflows of the type com.coremedia.workflow.WfProcess.

Integrate your predicate into the CoreMedia Editor using editor.xml

You can integrate your predicate into the CoreMedia Editor using the element Predicate of editor.xml as shown in example.