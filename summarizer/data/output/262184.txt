

Locale Property

Each localizable document has a locale, as defined by java.util.Locale, that consists of language, country, and variants. In the Starter Kit, locales are represented by three string properties, not for example as a LinkList to some language symbol document, for the following reasons:

It is expected, that a document has at most one locale or one "locale pattern", where the latter would be a language without a country, or language and country without variants. A LinkList would be better suited if we needed multiple locales, since there are no string lists and strings have a maximum length.
The set of locales is finite and well-known. There is no need to create documents and localizations of the locales themselves. 
If multi-site-publishing is used, the symbol documents would even have to be copied for every base folder!
String is far more efficient compared to linking to a locale document that contains the actual locale string (join). This is true on reading and on update. Look-ups on locales are expected to happen very frequently.


Queries regarding the locale are only possible when it is contained directly in the document itself. For queries, splitting the locale into language, country and variant(s) is important, so that you can search e.g. for all documents where lang="de" easily.



This leads to the following properties of CMLocalized:

<StringProperty Name=¿lang¿ Length=¿2¿/>
<StringProperty Name=¿country¿ Length=¿2¿/>
<StringProperty Name=¿variants¿ Length=¿64¿/>

The length of the variants property (64) should be sufficient for typical usage.

Link to the Master Document

A localized document that is a variant of another localized document can link to this master document. The link to the master document needs special treatment, since it should be a versioned link. Normally, links between documents in the CoreMedia CMS do not have information on the version of the linked document. But in case of the master link, for each localized variant you need to know exactly from which version of the master it was derived. This version information can be used to compute a list of documents which have been translated formerly and where the master document has changed (i.e. the localized document's master version is lower than the latest master document version).These localized documents may require an update then, too.

Since there is no dedicated property type for versioned links in the CoreMedia CMS, the Starter Kit models the link to the master document as a pair of link list and integer property:

<LinkListProperty Name=¿master¿ LinkType="*same*" Max=¿1¿/>
<IntProperty Name=¿masterVersion¿/>

Max=¿1¿ means that there is at most one master link. Note that in the document type model, simple links can only be defined as link lists of maximum cardinality one, and that this cardinality is not enforced by the server, but only through CoreMedia Editor customization.

The "*same*" link type means that the linked document is of exactly the same type as the linking one. As this cannot be expressed in the document type definition language, the master LinkListProperty needs to be overridden in every subtype of CMLocalized. With this solution it is still possible to link other subtypes as master but it reduces possible inconsistencies by not allowing parent types to be linked as master.

Please note, if you create document types that are subtypes of CMLocalized (either directly or indirectly by extending another subtype) you should also define and therefore override the master LinkListProperty and define a LinkType equal to your new document type name.

<DocType Name="MyNewDoctype" Parent="CMLocalized" 
 Abstract="false">
  <LinkListProperty Name=¿master¿ LinkType="MyNewDoctype" 
   Max=¿1¿ Override="true"/>
  ...
</DocType>


Note that modeling the localization relation as a link does not imply any constraints on the folder in which the different localized variant documents are placed. The advantage is that the folder structure can be chosen to ease defining access rights for different roles, e.g. an editor can create and write master documents, but only read derived variants, while a translator only reads master documents, but creates and writes derived variants.

The direction of the link from derived document to master was chosen, so that the master can be published while the derived variant is already created, but not yet ready for publication. Note that if the master would reference the variants, CoreMedia CMS would not allow publishing the master without publishing all variants, because it checks for dead links. Performance is not an issue, as the CoreMedia CMS handles reverse navigation of links very efficiently and is able to cache them.

