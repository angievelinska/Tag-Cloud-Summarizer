

The concrete mechanism for variable resolution should not bother a Unified API client, because the complete mapping from view property to workflow variable is managed transparently by the API. A view can be treated just like a CapObject that just has slightly unusual property names. For completeness, the mapping from view property to target object and target property works as follows:

A qualified property view descriptor name, of the form <task>.<property>, is resolved to the property with the given name of the task with the given name in the same process as the view's origin.

An unqualified property view descriptor name, of the form <property>, refers to the named property of the view's origin. If the origin is a task and does not contain such a property, the property view descriptor refers instead to the named property of the task's containing process.

Two additional flags are specified per property view descriptor. Firstly, a property is declared as read-only or writable. This overrides the value of the writable flag in the target property declaration. For example, a workflow variable declared as read-only in the process may be writable from the process' initial view.

Secondly, for a property containing content links, the contentWritable flag determines how the referenced content should be presented to the user. If the flag is false, the content should be displayed in a read-only fashion. For example, assume one task in a process that has the goal of selecting a set of documents for later tasks to work on. This task will only need to add and remove links, not change the documents themselves. Therefore, this task view should contain a property mapping that is writable, but not content writable.

Workflow views also affect the interpretation of READ and WRITE rights. See ###rights for further details.